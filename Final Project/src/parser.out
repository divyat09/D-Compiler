Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    POST_PLUS_PLUS
    UAMPERSAND
    COMMENT
    UPLUS
    ARROW
    DOUBLE
    NOT_EQ_DIFF
    SIZEOF
    EMPTY
    POST_MINUS_MINUS
    IdentifierOrTemplateInstance
    GREATER_EQ_DIFF
    IS_EQ_DIFF
    DELEGATE
    SINGLE_QUOTE
    LESS_EQ_DIFF
    DOUBLE_QUOTE
    LESS_DIFF
    GREATER_DIFF
    UMINUS
    UTIMES
    TYPEDEF
    BACK_SLASH

Grammar

Rule 0     S' -> Declaration_mult
Rule 1     Declaration_mult -> Declaration Declaration_mult
Rule 2     Declaration_mult -> empty
Rule 3     DeclDefs -> DeclDef
Rule 4     DeclDefs -> DeclDef DeclDefs
Rule 5     DeclDefs_opt -> DeclDefs
Rule 6     DeclDefs_opt -> empty
Rule 7     DeclDef -> AttributeSpecifier
Rule 8     DeclDef -> Declaration
Rule 9     DeclDef -> Allocator
Rule 10    DeclDef -> Deallocator
Rule 11    DeclDef -> AliasThis
Rule 12    DeclDef -> MixinDeclaration
Rule 13    DeclDef -> SEMICOLON
Rule 14    ModuleFullyQualifiedName -> ModuleName
Rule 15    ModuleFullyQualifiedName -> Packages DOT ModuleName
Rule 16    ModuleName -> IDENTIFIER
Rule 17    Packages -> PackageName
Rule 18    Packages -> Packages DOT PackageName
Rule 19    PackageName -> IDENTIFIER
Rule 20    ImportDeclaration -> IMPORT ImportList SEMICOLON
Rule 21    ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON
Rule 22    ImportList -> Import
Rule 23    ImportList -> ImportBindings
Rule 24    ImportList -> Import COMMA ImportList
Rule 25    Import -> ModuleFullyQualifiedName
Rule 26    Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
Rule 27    ImportBindings -> Import COLON ImportBindList
Rule 28    ImportBindList -> ImportBind
Rule 29    ImportBindList -> ImportBind COMMA ImportBindList
Rule 30    ImportBind -> IDENTIFIER
Rule 31    ImportBind -> IDENTIFIER ASSIGN IDENTIFIER
Rule 32    ModuleAliasIdentifier -> IDENTIFIER
Rule 33    MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON
Rule 34    Declaration -> FuncDeclaration
Rule 35    Declaration -> VarDeclarations
Rule 36    Declaration -> AliasDeclaration
Rule 37    Declaration -> AggregateDeclaration
Rule 38    Declaration -> EnumDeclaration
Rule 39    Declaration -> ImportDeclaration
Rule 40    VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON
Rule 41    Declarators -> DeclaratorInitializer
Rule 42    Declarators -> DeclaratorInitializer COMMA DeclaratorIdentifierList
Rule 43    DeclaratorInitializer -> VarDeclarator
Rule 44    DeclaratorInitializer -> VarDeclarator ASSIGN Initializer
Rule 45    DeclaratorInitializer -> AltDeclarator ASSIGN Initializer
Rule 46    DeclaratorInitializer -> AltDeclarator
Rule 47    DeclaratorIdentifierList -> mark1 DeclaratorIdentifier
Rule 48    DeclaratorIdentifierList -> mark1 DeclaratorIdentifier COMMA DeclaratorIdentifierList
Rule 49    mark1 -> empty
Rule 50    DeclaratorIdentifier -> VarDeclaratorIdentifier
Rule 51    DeclaratorIdentifier -> AltDeclaratorIdentifier
Rule 52    VarDeclaratorIdentifier -> IDENTIFIER
Rule 53    VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer
Rule 54    AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt
Rule 55    AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer
Rule 56    AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
Rule 57    AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer
Rule 58    Declarator -> VarDeclarator
Rule 59    Declarator -> AltDeclarator
Rule 60    VarDeclarator -> BasicType2_opt IDENTIFIER
Rule 61    AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
Rule 62    AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN
Rule 63    AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
Rule 64    AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
Rule 65    AltDeclaratorX -> BasicType2_opt IDENTIFIER
Rule 66    AltDeclaratorX -> BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix
Rule 67    AltDeclaratorX -> AltDeclarator
Rule 68    AltDeclaratorSuffixes -> AltDeclaratorSuffix
Rule 69    AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes
Rule 70    AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes
Rule 71    AltDeclaratorSuffixes_opt -> empty
Rule 72    AltDeclaratorSuffix -> LBRACKET RBRACKET
Rule 73    AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET
Rule 74    AltDeclaratorSuffix -> LBRACKET Type RBRACKET
Rule 75    AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt
Rule 76    Type -> BasicType BasicType2_opt
Rule 77    Type_opt -> Type
Rule 78    Type_opt -> empty
Rule 79    BasicType -> BasicTypeX
Rule 80    BasicType -> DOT IdentifierList
Rule 81    BasicType -> IdentifierList
Rule 82    BasicType -> Typeof
Rule 83    BasicType -> Typeof DOT IdentifierList
Rule 84    BasicTypeX -> BOOL
Rule 85    BasicTypeX -> SHORT
Rule 86    BasicTypeX -> USHORT
Rule 87    BasicTypeX -> INT
Rule 88    BasicTypeX -> UINT
Rule 89    BasicTypeX -> LONG
Rule 90    BasicTypeX -> ULONG
Rule 91    BasicTypeX -> CHAR
Rule 92    BasicTypeX -> FLOAT
Rule 93    BasicTypeX -> VOID
Rule 94    BasicType2 -> BasicType2X BasicType2_opt
Rule 95    BasicType2_opt -> BasicType2
Rule 96    BasicType2_opt -> empty
Rule 97    BasicType2X -> TIMES
Rule 98    BasicType2X -> LBRACKET RBRACKET
Rule 99    BasicType2X -> LBRACKET AssignExpression RBRACKET
Rule 100   BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET
Rule 101   BasicType2X -> LBRACKET Type RBRACKET
Rule 102   BasicType2X -> FUNCTION Parameters
Rule 103   IdentifierList -> IDENTIFIER
Rule 104   IdentifierList -> IDENTIFIER DOT IdentifierList
Rule 105   IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
Rule 106   StorageClasses -> StorageClass
Rule 107   StorageClasses -> StorageClass StorageClasses
Rule 108   StorageClass -> ENUM
Rule 109   StorageClass -> STATIC
Rule 110   StorageClass -> EXTERN
Rule 111   StorageClass -> FINAL
Rule 112   StorageClass -> AUTO
Rule 113   StorageClass -> CONST
Rule 114   StorageClass -> IMMUTABLE
Rule 115   Initializer -> VoidInitializer
Rule 116   Initializer -> NonVoidInitializer
Rule 117   NonVoidInitializer -> ExpInitializer
Rule 118   NonVoidInitializer -> ArrayInitializer
Rule 119   ExpInitializer -> AssignExpression
Rule 120   ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET
Rule 121   ArrayMemberInitializations -> ArrayMemberInitialization
Rule 122   ArrayMemberInitializations -> ArrayMemberInitialization COMMA
Rule 123   ArrayMemberInitializations -> ArrayMemberInitialization COMMA ArrayMemberInitializations
Rule 124   ArrayMemberInitializations_opt -> ArrayMemberInitializations
Rule 125   ArrayMemberInitializations_opt -> empty
Rule 126   ArrayMemberInitialization -> NonVoidInitializer
Rule 127   ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer
Rule 128   AutoDeclaration -> StorageClasses AutoDeclarationX SEMICOLON
Rule 129   AutoDeclarationX -> AutoDeclarationY
Rule 130   AutoDeclarationX -> AutoDeclarationX COMMA AutoDeclarationY
Rule 131   AutoDeclarationY -> IDENTIFIER ASSIGN Initializer
Rule 132   StorageClasses_opt -> StorageClasses
Rule 133   StorageClasses_opt -> empty
Rule 134   AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
Rule 135   AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
Rule 136   AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON
Rule 137   AliasDeclarationX -> AliasDeclarationY
Rule 138   AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY
Rule 139   AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type
Rule 140   AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral
Rule 141   Typeof -> TYPEOF LPAREN Expression RPAREN
Rule 142   Typeof -> TYPEOF LPAREN RETURN RPAREN
Rule 143   VoidInitializer -> VOID
Rule 144   AttributeSpecifier -> Attribute COLON
Rule 145   AttributeSpecifier -> Attribute DeclarationBlock
Rule 146   Attribute -> VisibilityAttribute
Rule 147   DeclarationBlock -> DeclDef
Rule 148   DeclarationBlock -> LBRACE DeclDefs_opt RBRACE
Rule 149   VisibilityAttribute -> PRIVATE
Rule 150   VisibilityAttribute -> PROTECTED
Rule 151   VisibilityAttribute -> PUBLIC
Rule 152   Expression -> CommaExpression
Rule 153   CommaExpression -> AssignExpression
Rule 154   CommaExpression -> AssignExpression COMMA CommaExpression
Rule 155   AssignExpression -> ConditionalExpression
Rule 156   AssignExpression -> ConditionalExpression ASSIGN AssignExpression
Rule 157   AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression
Rule 158   AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression
Rule 159   AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression
Rule 160   AssignExpression -> ConditionalExpression EQ_DIV AssignExpression
Rule 161   AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression
Rule 162   AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression
Rule 163   AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression
Rule 164   AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression
Rule 165   AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression
Rule 166   AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression
Rule 167   ConditionalExpression -> OrOrExpression
Rule 168   ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression
Rule 169   OrOrExpression -> AndAndExpression
Rule 170   OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression
Rule 171   AndAndExpression -> OrExpression
Rule 172   AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression
Rule 173   OrExpression -> XorExpression
Rule 174   OrExpression -> OrExpression PIPE XorExpression
Rule 175   XorExpression -> AndExpression
Rule 176   XorExpression -> XorExpression CARET AndExpression
Rule 177   AndExpression -> CmpExpression
Rule 178   AndExpression -> AndExpression AMPERSAND CmpExpression
Rule 179   CmpExpression -> ShiftExpression
Rule 180   CmpExpression -> EqualExpression
Rule 181   CmpExpression -> RelExpression
Rule 182   EqualExpression -> ShiftExpression IS_EQ ShiftExpression
Rule 183   EqualExpression -> ShiftExpression NOT_EQ ShiftExpression
Rule 184   RelExpression -> ShiftExpression LESS ShiftExpression
Rule 185   RelExpression -> ShiftExpression GREATER_EQ ShiftExpression
Rule 186   RelExpression -> ShiftExpression GREATER ShiftExpression
Rule 187   RelExpression -> ShiftExpression LESS_EQ ShiftExpression
Rule 188   ShiftExpression -> AddExpression
Rule 189   ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression
Rule 190   ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression
Rule 191   AddExpression -> MulExpression
Rule 192   AddExpression -> AddExpression PLUS MulExpression
Rule 193   AddExpression -> AddExpression MINUS MulExpression
Rule 194   MulExpression -> UnaryExpression
Rule 195   MulExpression -> MulExpression TIMES UnaryExpression
Rule 196   MulExpression -> MulExpression DIV UnaryExpression
Rule 197   MulExpression -> MulExpression MODULO UnaryExpression
Rule 198   UnaryExpression -> AMPERSAND UnaryExpression
Rule 199   UnaryExpression -> PLUS_PLUS UnaryExpression
Rule 200   UnaryExpression -> MINUS_MINUS UnaryExpression
Rule 201   UnaryExpression -> TIMES UnaryExpression
Rule 202   UnaryExpression -> MINUS UnaryExpression
Rule 203   UnaryExpression -> PLUS UnaryExpression
Rule 204   UnaryExpression -> EXCLAMATION UnaryExpression
Rule 205   UnaryExpression -> ComplementExpression
Rule 206   UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER
Rule 207   UnaryExpression -> CastExpression
Rule 208   UnaryExpression -> PowExpression
Rule 209   ComplementExpression -> TILDE UnaryExpression
Rule 210   NewExpression -> NEW AllocatorArguments_opt Type
Rule 211   NewExpression -> NewExpressionWithArgs
Rule 212   NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
Rule 213   NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
Rule 214   NewExpressionWithArgs -> NewAnonClassExpression
Rule 215   AllocatorArguments -> LPAREN ArgumentList_opt RPAREN
Rule 216   AllocatorArguments_opt -> AllocatorArguments
Rule 217   AllocatorArguments_opt -> empty
Rule 218   ArgumentList_opt -> ArgumentList
Rule 219   ArgumentList_opt -> empty
Rule 220   ArgumentList -> AssignExpression
Rule 221   ArgumentList -> AssignExpression COMMA
Rule 222   ArgumentList -> AssignExpression COMMA ArgumentList
Rule 223   CastExpression -> CAST LPAREN Type RPAREN UnaryExpression
Rule 224   CastExpression -> CAST LPAREN RPAREN UnaryExpression
Rule 225   PowExpression -> PostfixExpression
Rule 226   PowExpression -> PostfixExpression POWER UnaryExpression
Rule 227   PostfixExpression -> PrimaryExpression
Rule 228   PostfixExpression -> PostfixExpression DOT IDENTIFIER
Rule 229   PostfixExpression -> PostfixExpression DOT NewExpression
Rule 230   PostfixExpression -> PostfixExpression PLUS_PLUS
Rule 231   PostfixExpression -> PostfixExpression MINUS_MINUS
Rule 232   PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN
Rule 233   PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark
Rule 234   JmpMark -> empty
Rule 235   PrimaryExpression -> IDENTIFIER
Rule 236   PrimaryExpression -> IdentifierList
Rule 237   PrimaryExpression -> DOT IDENTIFIER
Rule 238   PrimaryExpression -> THIS
Rule 239   PrimaryExpression -> NULL
Rule 240   PrimaryExpression -> TRUE
Rule 241   PrimaryExpression -> FALSE
Rule 242   PrimaryExpression -> DOLLAR
Rule 243   PrimaryExpression -> INUMBER
Rule 244   PrimaryExpression -> DNUMBER
Rule 245   PrimaryExpression -> LIT_CHAR
Rule 246   PrimaryExpression -> LIT_STRPlus
Rule 247   PrimaryExpression -> ArrayLiteral
Rule 248   PrimaryExpression -> FunctionLiteral
Rule 249   PrimaryExpression -> MixinExpression
Rule 250   PrimaryExpression -> ImportExpression
Rule 251   PrimaryExpression -> NewExpressionWithArgs
Rule 252   PrimaryExpression -> BasicTypeX DOT IDENTIFIER
Rule 253   PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN
Rule 254   PrimaryExpression -> Typeof
Rule 255   PrimaryExpression -> LPAREN Expression RPAREN
Rule 256   PrimaryExpression -> TypeidExpression
Rule 257   ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET
Rule 258   ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET
Rule 259   ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET
Rule 260   FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
Rule 261   FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody
Rule 262   FunctionLiteral -> FunctionLiteralBody
Rule 263   ParameterAttributes -> Parameters
Rule 264   ParameterAttributes_opt -> ParameterAttributes_opt
Rule 265   ParameterAttributes_opt -> empty
Rule 266   ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt
Rule 267   FunctionLiteralBody -> BlockStatement
Rule 268   FunctionLiteralBody -> BodyStatement
Rule 269   LIT_STRPlus -> LIT_STR LIT_STRPlus
Rule 270   LIT_STRPlus -> LIT_STR
Rule 271   MixinExpression -> MIXIN LPAREN AssignExpression RPAREN
Rule 272   ImportExpression -> IMPORT LPAREN AssignExpression RPAREN
Rule 273   TypeidExpression -> TYPEID LPAREN Type RPAREN
Rule 274   TypeidExpression -> TYPEID LPAREN Expression RPAREN
Rule 275   Statement -> SEMICOLON
Rule 276   Statement -> NonEmptyStatement
Rule 277   Statement -> ScopeBlockStatement
Rule 278   NoScopeNonEmptyStatement -> NonEmptyStatement
Rule 279   NoScopeNonEmptyStatement -> BlockStatement
Rule 280   NoScopeStatement -> SEMICOLON
Rule 281   NoScopeStatement -> NonEmptyStatement
Rule 282   NoScopeStatement -> BlockStatement
Rule 283   NonEmptyOrScopeBlockStatement -> NonEmptyStatement
Rule 284   NonEmptyOrScopeBlockStatement -> ScopeBlockStatement
Rule 285   NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault
Rule 286   NonEmptyStatement -> CaseStatement
Rule 287   NonEmptyStatement -> CaseRangeStatement
Rule 288   NonEmptyStatement -> DefaultStatement
Rule 289   NonEmptyStatementNoCaseNoDefault -> LabeledStatement
Rule 290   NonEmptyStatementNoCaseNoDefault -> ExpressionStatement
Rule 291   NonEmptyStatementNoCaseNoDefault -> DeclarationStatement
Rule 292   NonEmptyStatementNoCaseNoDefault -> IfStatement
Rule 293   NonEmptyStatementNoCaseNoDefault -> WhileStatement
Rule 294   NonEmptyStatementNoCaseNoDefault -> DoStatement
Rule 295   NonEmptyStatementNoCaseNoDefault -> ForStatement
Rule 296   NonEmptyStatementNoCaseNoDefault -> ForeachStatement
Rule 297   NonEmptyStatementNoCaseNoDefault -> SwitchStatement
Rule 298   NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement
Rule 299   NonEmptyStatementNoCaseNoDefault -> ContinueStatement
Rule 300   NonEmptyStatementNoCaseNoDefault -> BreakStatement
Rule 301   NonEmptyStatementNoCaseNoDefault -> ReturnStatement
Rule 302   NonEmptyStatementNoCaseNoDefault -> GotoStatement
Rule 303   NonEmptyStatementNoCaseNoDefault -> WithStatement
Rule 304   NonEmptyStatementNoCaseNoDefault -> MixinStatement
Rule 305   NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement
Rule 306   NonEmptyStatementNoCaseNoDefault -> ImportDeclaration
Rule 307   ScopeStatement -> NonEmptyStatement
Rule 308   ScopeStatement -> BlockStatement
Rule 309   ScopeBlockStatement -> BlockStatement
Rule 310   LabeledStatement -> IDENTIFIER COLON
Rule 311   LabeledStatement -> IDENTIFIER COLON NoScopeStatement
Rule 312   LabeledStatement -> IDENTIFIER COLON Statement
Rule 313   BlockStatement -> LBRACE M_block_begin RBRACE M_block_end
Rule 314   BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end
Rule 315   M_block_begin -> <empty>
Rule 316   M_block_end -> <empty>
Rule 317   StatementList -> Statement
Rule 318   StatementList -> Statement StatementList
Rule 319   ExpressionStatement -> Expression SEMICOLON
Rule 320   DeclarationStatement -> Declaration
Rule 321   DeclarationStatement -> StorageClasses Declaration
Rule 322   IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
Rule 323   IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
Rule 324   ifmark4 -> empty
Rule 325   ifmark3 -> empty
Rule 326   ifmark2 -> empty
Rule 327   ifmark1 -> empty
Rule 328   IfCondition -> Expression
Rule 329   IfCondition -> AUTO IDENTIFIER ASSIGN Expression
Rule 330   IfCondition -> BasicType Declarator ASSIGN Expression
Rule 331   ThenStatement -> ScopeStatement
Rule 332   ElseStatement -> ScopeStatement
Rule 333   WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
Rule 334   while_M0 -> empty
Rule 335   while_M1 -> <empty>
Rule 336   while_M2 -> <empty>
Rule 337   DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
Rule 338   Dowhile_M1 -> empty
Rule 339   Dowhile_M2 -> empty
Rule 340   ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
Rule 341   for_test_mark -> empty
Rule 342   for_M1 -> <empty>
Rule 343   for_M2 -> <empty>
Rule 344   for_M3 -> <empty>
Rule 345   Initialize -> SEMICOLON
Rule 346   Initialize -> NoScopeNonEmptyStatement
Rule 347   Test -> Expression
Rule 348   Test_opt -> Test
Rule 349   Test_opt -> empty
Rule 350   Increment -> Expression
Rule 351   Increment_opt -> Increment
Rule 352   Increment_opt -> empty
Rule 353   AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
Rule 354   ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement
Rule 355   Foreach -> FOREACH
Rule 356   Foreach -> FOREACH_REVERSE
Rule 357   ForeachTypeList -> ForeachType
Rule 358   ForeachTypeList -> ForeachType COMMA ForeachTypeList
Rule 359   ForeachType -> ForeachTypeAttributes_opt BasicType Declarator
Rule 360   ForeachType -> ForeachTypeAttributes_opt IDENTIFIER
Rule 361   ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER
Rule 362   ForeachTypeAttributes_opt -> ForeachTypeAttributes
Rule 363   ForeachTypeAttributes_opt -> empty
Rule 364   ForeachTypeAttributes -> ForeachTypeAttribute
Rule 365   ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt
Rule 366   ForeachTypeAttribute -> ENUM
Rule 367   ForeachAggregate -> Expression
Rule 368   RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
Rule 369   LwrExpression -> Expression
Rule 370   UprExpression -> Expression
Rule 371   ForeachRangeStatement -> RangeForeach ScopeStatement
Rule 372   SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
Rule 373   switch_M1 -> empty
Rule 374   switch_M2 -> empty
Rule 375   CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
Rule 376   c_m1 -> empty
Rule 377   c_m2 -> empty
Rule 378   CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
Rule 379   FirstExp -> AssignExpression
Rule 380   LastExp -> AssignExpression
Rule 381   DefaultStatement -> DEFAULT COLON ScopeStatementList
Rule 382   ScopeStatementList -> StatementListNoCaseNoDefault
Rule 383   StatementListNoCaseNoDefault -> StatementNoCaseNoDefault
Rule 384   StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault
Rule 385   StatementNoCaseNoDefault -> SEMICOLON
Rule 386   StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault
Rule 387   StatementNoCaseNoDefault -> ScopeBlockStatement
Rule 388   FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
Rule 389   IDENTIFIER_opt -> IDENTIFIER
Rule 390   IDENTIFIER_opt -> empty
Rule 391   Expression_opt -> Expression
Rule 392   Expression_opt -> empty
Rule 393   ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON
Rule 394   BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON
Rule 395   ReturnStatement -> RETURN Expression_opt SEMICOLON
Rule 396   GotoStatement -> GOTO IDENTIFIER SEMICOLON
Rule 397   GotoStatement -> GOTO DEFAULT SEMICOLON
Rule 398   GotoStatement -> GOTO CASE SEMICOLON
Rule 399   GotoStatement -> GOTO CASE Expression SEMICOLON
Rule 400   WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement
Rule 401   WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement
Rule 402   MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON
Rule 403   AggregateDeclaration -> ClassDeclaration
Rule 404   AggregateDeclaration -> UnionDeclaration
Rule 405   UnionDeclaration -> UNION IDENTIFIER SEMICOLON
Rule 406   UnionDeclaration -> UNION IDENTIFIER AggregateBody
Rule 407   UnionDeclaration -> AnonUnionDeclaration
Rule 408   AnonUnionDeclaration -> UNION AggregateBody
Rule 409   AggregateBody -> LBRACE DeclDefs_opt RBRACE
Rule 410   ClassDeclaration -> CLASS IDENTIFIER SEMICOLON
Rule 411   ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
Rule 412   class_m1 -> empty
Rule 413   class_m2 -> empty
Rule 414   BaseClassList -> COLON SuperClass
Rule 415   BaseClassList -> COLON SuperClass COMMA Interfaces
Rule 416   BaseClassList -> COLON Interfaces
Rule 417   BaseClassList_opt -> BaseClassList
Rule 418   BaseClassList_opt -> empty
Rule 419   SuperClass -> BasicType
Rule 420   Interfaces -> Interface
Rule 421   Interfaces -> Interface COMMA Interfaces
Rule 422   Interface -> BasicType
Rule 423   Allocator -> NEW Parameters SEMICOLON
Rule 424   Allocator -> NEW Parameters FunctionBody
Rule 425   Deallocator -> DELETE Parameters SEMICOLON
Rule 426   Deallocator -> DELETE Parameters FunctionBody
Rule 427   AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON
Rule 428   NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
Rule 429   ClassArguments -> LPAREN ArgumentList_opt RPAREN
Rule 430   ClassArguments_opt -> ClassArguments
Rule 431   ClassArguments_opt -> empty
Rule 432   SuperClass_opt -> SuperClass
Rule 433   SuperClass_opt -> empty
Rule 434   Interfaces_opt -> Interfaces
Rule 435   Interfaces_opt -> empty
Rule 436   EnumDeclaration -> ENUM IDENTIFIER EnumBody
Rule 437   EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody
Rule 438   EnumDeclaration -> AnonymousEnumDeclaration
Rule 439   EnumBaseType -> Type
Rule 440   EnumBody -> LBRACE EnumMembers RBRACE
Rule 441   EnumBody -> SEMICOLON
Rule 442   EnumMembers -> EnumMember
Rule 443   EnumMembers -> EnumMember COMMA
Rule 444   EnumMembers -> EnumMember COMMA EnumMembers
Rule 445   EnumMember -> IDENTIFIER
Rule 446   EnumMember -> IDENTIFIER ASSIGN AssignExpression
Rule 447   AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
Rule 448   AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE
Rule 449   AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE
Rule 450   AnonymousEnumMembers -> AnonymousEnumMember
Rule 451   AnonymousEnumMembers -> AnonymousEnumMember COMMA
Rule 452   AnonymousEnumMembers -> AnonymousEnumMember COMMA AnonymousEnumMembers
Rule 453   AnonymousEnumMember -> EnumMember
Rule 454   AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression
Rule 455   FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
Rule 456   FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
Rule 457   FuncDeclaration -> AutoFuncDeclaration
Rule 458   func_m1 -> empty
Rule 459   func_m2 -> empty
Rule 460   AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
Rule 461   FuncDeclarator -> BasicType2_opt IDENTIFIER func_m3 FuncDeclaratorSuffix
Rule 462   func_m3 -> empty
Rule 463   FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt
Rule 464   Parameters -> LPAREN ParameterList_opt RPAREN
Rule 465   ParameterList -> Parameter
Rule 466   ParameterList -> Parameter COMMA ParameterList
Rule 467   ParameterList -> ELLIPSIS
Rule 468   ParameterList_opt -> ParameterList
Rule 469   ParameterList_opt -> empty
Rule 470   Parameter -> InOut_opt BasicType Declarator
Rule 471   Parameter -> InOut_opt BasicType Declarator ELLIPSIS
Rule 472   Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression
Rule 473   Parameter -> InOut_opt Type
Rule 474   Parameter -> InOut_opt Type ELLIPSIS
Rule 475   InOut -> InOutX
Rule 476   InOut -> InOut InOutX
Rule 477   InOutX -> AUTO
Rule 478   InOutX -> FINAL
Rule 479   InOutX -> SCOPE
Rule 480   InOut_opt -> InOut
Rule 481   InOut_opt -> empty
Rule 482   MemberFunctionAttributes -> MemberFunctionAttribute
Rule 483   MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes
Rule 484   MemberFunctionAttributes_opt -> MemberFunctionAttributes
Rule 485   MemberFunctionAttributes_opt -> empty
Rule 486   MemberFunctionAttribute -> CONST
Rule 487   MemberFunctionAttribute -> IMMUTABLE
Rule 488   MemberFunctionAttribute -> RETURN
Rule 489   FunctionBody -> BlockStatement
Rule 490   FunctionBody -> BodyStatement
Rule 491   BodyStatement -> BODY BlockStatement
Rule 492   Symbol -> SymbolTail
Rule 493   Symbol -> DOT SymbolTail
Rule 494   SymbolTail -> IDENTIFIER
Rule 495   SymbolTail -> IDENTIFIER DOT SymbolTail
Rule 496   empty -> <empty>

Terminals, with rules where they appear

ALIAS                : 134 135 136 361 427
AMPERSAND            : 178 198
ARROW                : 
ASSIGN               : 26 31 44 45 53 55 57 131 139 140 156 329 330 446 454 472
AUTO                 : 112 329 477
BACK_SLASH           : 
BODY                 : 491
BOOL                 : 84
BREAK                : 394
CARET                : 176
CASE                 : 375 378 398 399
CAST                 : 223 224
CHAR                 : 91
CLASS                : 410 411 428
COLON                : 27 127 144 168 310 311 312 375 378 378 381 414 415 416 437 447
COMMA                : 24 29 42 48 122 123 130 138 154 221 222 358 415 421 443 444 451 452 466
COMMENT              : 
CONST                : 113 486
CONTINUE             : 393
DEFAULT              : 381 397
DELEGATE             : 
DELETE               : 425 426
DIV                  : 196
DNUMBER              : 244
DO                   : 337
DOLLAR               : 242
DOT                  : 15 18 80 83 104 105 206 228 229 237 252 493 495
DOUBLE               : 
DOUBLE_AMPERSAND     : 172
DOUBLE_PIPE          : 170
DOUBLE_QUOTE         : 
ELLIPSIS             : 467 471 474
ELSE                 : 323
EMPTY                : 
ENUM                 : 108 366 436 437 447 448 449
EQ_AND_BIT           : 162
EQ_DIV               : 160
EQ_LEFT              : 165
EQ_MINUS             : 158
EQ_MODULO            : 161
EQ_OR_BIT            : 163
EQ_PLUS              : 157
EQ_RIGHT             : 166
EQ_TIMES             : 159
EQ_XOR_BIT           : 164
EXCLAMATION          : 204
EXTERN               : 110
FALSE                : 241
FINAL                : 111 388 478
FLOAT                : 92
FOR                  : 340
FOREACH              : 355
FOREACH_REVERSE      : 356
FUNCTION             : 102 260
GOTO                 : 396 397 398 399
GREATER              : 186
GREATER_DIFF         : 
GREATER_EQ           : 185
GREATER_EQ_DIFF      : 
IDENTIFIER           : 16 19 30 31 31 32 52 53 54 55 56 57 60 61 65 66 103 104 105 131 139 140 206 228 235 237 252 258 259 310 311 312 329 360 361 389 396 405 406 410 411 427 436 437 445 446 454 460 461 494 495
IF                   : 322 323
IMMUTABLE            : 114 487
IMPORT               : 20 21 272
INT                  : 87
INUMBER              : 243 258
IS_EQ                : 182
IS_EQ_DIFF           : 
IdentifierOrTemplateInstance : 
LBRACE               : 148 313 314 409 440 447 448 449
LBRACKET             : 72 73 74 98 99 100 101 105 120 212 257 258 259
LEFT_SHIFT           : 189
LESS                 : 184
LESS_DIFF            : 
LESS_EQ              : 187
LESS_EQ_DIFF         : 
LIT_CHAR             : 245
LIT_STR              : 269 270
LONG                 : 89
LPAREN               : 33 62 63 64 141 142 206 213 215 223 224 232 233 253 255 271 272 273 274 322 323 333 337 340 353 368 372 388 400 401 402 429 464
MINUS                : 193 202
MINUS_MINUS          : 200 231
MIXIN                : 33 271 402
MODULO               : 197
NEW                  : 210 212 213 423 424 428
NOT_EQ               : 183
NOT_EQ_DIFF          : 
NULL                 : 239
PIPE                 : 174
PLUS                 : 192 203
PLUS_PLUS            : 199 230
POST_MINUS_MINUS     : 
POST_PLUS_PLUS       : 
POWER                : 226
PRIVATE              : 149
PROTECTED            : 150
PUBLIC               : 151
QUESTION             : 168
RANGE                : 100 368 378
RBRACE               : 148 313 314 409 440 447 448 449
RBRACKET             : 72 73 74 98 99 100 101 105 120 212 257 258 259
RETURN               : 142 395 488
RIGHT_SHIFT          : 190
RPAREN               : 33 62 63 64 141 142 206 213 215 223 224 232 233 253 255 271 272 273 274 322 323 333 337 340 353 368 372 388 400 401 402 429 464
SCOPE                : 479
SEMICOLON            : 13 20 21 33 40 128 134 135 136 275 280 319 340 345 353 368 385 393 394 395 396 397 398 399 402 405 410 423 425 427 441 456
SHORT                : 85
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 21 109
SWITCH               : 372 388
THIS                 : 238 427
TILDE                : 209
TIMES                : 97 195 201
TRUE                 : 240
TYPEDEF              : 
TYPEID               : 273 274
TYPEOF               : 141 142
UAMPERSAND           : 
UINT                 : 88
ULONG                : 90
UMINUS               : 
UNION                : 405 406 408
UPLUS                : 
USHORT               : 86
UTIMES               : 
VOID                 : 93 143
WHILE                : 333 337
WITH                 : 400 401
error                : 

Nonterminals, with rules where they appear

AddExpression        : 188 189 190 192 193
AggregateBody        : 406 408 411 428
AggregateDeclaration : 37
AggregateForeach     : 354
AliasDeclaration     : 36
AliasDeclarationX    : 136 138
AliasDeclarationY    : 137 138
AliasThis            : 11
Allocator            : 9
AllocatorArguments   : 216
AllocatorArguments_opt : 210 212 213 428
AltDeclarator        : 45 46 59 67
AltDeclaratorIdentifier : 51
AltDeclaratorSuffix  : 68 69
AltDeclaratorSuffixes : 56 57 61 64 69 70
AltDeclaratorSuffixes_opt : 54 55
AltDeclaratorX       : 62 63 64
AltFuncDeclaratorSuffix : 63 66
AndAndExpression     : 169 170 172
AndExpression        : 175 176 178
AnonUnionDeclaration : 407
AnonymousEnumDeclaration : 438
AnonymousEnumMember  : 450 451 452
AnonymousEnumMembers : 449 452
ArgumentList         : 218 222 232 375
ArgumentList_opt     : 213 215 233 253 257 429
ArrayInitializer     : 118
ArrayLiteral         : 247
ArrayMemberInitialization : 121 122 123
ArrayMemberInitializations : 123 124
ArrayMemberInitializations_opt : 120
AssignExpression     : 33 73 99 100 100 105 119 127 153 154 156 157 158 159 160 161 162 163 164 165 166 212 220 221 222 259 271 272 379 380 402 446 454 472
Attribute            : 144 145
AttributeSpecifier   : 7
AutoDeclaration      : 
AutoDeclarationX     : 128 130
AutoDeclarationY     : 129 130
AutoFuncDeclaration  : 457
BaseClassList        : 417
BaseClassList_opt    : 411
BasicType            : 40 76 134 135 233 330 359 419 422 455 456 470 471 472
BasicType2           : 54 55 95
BasicType2X          : 94
BasicType2_opt       : 56 57 60 61 62 63 64 65 66 76 94 461
BasicTypeX           : 79 252 253
BlockStatement       : 267 279 282 308 309 489 491
BodyStatement        : 268 490
BreakStatement       : 300
CaseRangeStatement   : 287
CaseStatement        : 286
CastExpression       : 207
ClassArguments       : 430
ClassArguments_opt   : 428
ClassDeclaration     : 403
CmpExpression        : 177 178
CommaExpression      : 152 154
ComplementExpression : 205
ConditionalExpression : 155 156 157 158 159 160 161 162 163 164 165 166 168
ContinueStatement    : 299
Deallocator          : 10
DeclDef              : 3 4 147
DeclDefs             : 4 5
DeclDefs_opt         : 148 409
Declaration          : 1 8 320 321
DeclarationBlock     : 145
DeclarationStatement : 291
Declaration_mult     : 1 0
Declarator           : 330 359 470 471 472
DeclaratorIdentifier : 47 48
DeclaratorIdentifierList : 42 48
DeclaratorInitializer : 41 42
Declarators          : 40 134
DefaultStatement     : 288
DoStatement          : 294
Dowhile_M1           : 337
Dowhile_M2           : 337
ElseStatement        : 323
EnumBaseType         : 437 447
EnumBody             : 436 437
EnumDeclaration      : 38
EnumMember           : 442 443 444 453
EnumMembers          : 440 444 447 448
EqualExpression      : 180
ExpInitializer       : 117
Expression           : 141 168 255 274 319 328 329 330 333 337 347 350 367 369 370 372 388 391 399 400
ExpressionStatement  : 290
Expression_opt       : 395
FinalSwitchStatement : 298
FirstExp             : 378
ForStatement         : 295
Foreach              : 353
ForeachAggregate     : 353
ForeachRangeStatement : 305
ForeachStatement     : 296
ForeachType          : 357 358 368
ForeachTypeAttribute : 364 365
ForeachTypeAttributes : 362
ForeachTypeAttributes_opt : 359 360 361 365
ForeachTypeList      : 353 358
FuncDeclaration      : 34
FuncDeclarator       : 135 455 456
FuncDeclaratorSuffix : 460 461
FunctionBody         : 424 426 455 460
FunctionLiteral      : 140 248
FunctionLiteralBody  : 260 261 262
GotoStatement        : 302
IDENTIFIER_opt       : 393 394
IdentifierList       : 80 81 83 104 105 236
IfCondition          : 322 323
IfStatement          : 292
Import               : 22 24 27
ImportBind           : 28 29
ImportBindList       : 27 29
ImportBindings       : 23
ImportDeclaration    : 39 306
ImportExpression     : 250
ImportList           : 20 21 24
InOut                : 476 480
InOutX               : 475 476
InOut_opt            : 470 471 472 473 474
Increment            : 351
Increment_opt        : 340
Initialize           : 340
Initializer          : 44 45 53 55 57 131
Interface            : 420 421
Interfaces           : 415 416 421 434
Interfaces_opt       : 428
JmpMark              : 233
LIT_STRPlus          : 246 269
LabeledStatement     : 289
LastExp              : 378
LwrExpression        : 368
M_block_begin        : 313 314
M_block_end          : 313 314
MemberFunctionAttribute : 482 483
MemberFunctionAttributes : 483 484
MemberFunctionAttributes_opt : 75 266 463
MixinDeclaration     : 12
MixinExpression      : 249
MixinStatement       : 304
ModuleAliasIdentifier : 26
ModuleFullyQualifiedName : 25 26
ModuleName           : 14 15
MulExpression        : 191 192 193 195 196 197
NewAnonClassExpression : 214
NewExpression        : 229
NewExpressionWithArgs : 211 251
NoScopeNonEmptyStatement : 346 354
NoScopeStatement     : 311
NonEmptyOrScopeBlockStatement : 
NonEmptyStatement    : 276 278 281 283 307
NonEmptyStatementNoCaseNoDefault : 285 386
NonVoidInitializer   : 116 126 127
OrExpression         : 171 172 174
OrOrExpression       : 167 168 170
PackageName          : 17 18
Packages             : 15 18
Parameter            : 465 466
ParameterAttributes  : 
ParameterAttributes_opt : 260 264
ParameterList        : 466 468
ParameterList_opt    : 464
ParameterMemberAttributes : 261
Parameters           : 75 102 263 266 423 424 425 426 463
PostfixExpression    : 225 226 228 229 230 231 232
PowExpression        : 208
PrimaryExpression    : 227
RangeForeach         : 371
RelExpression        : 181
ReturnStatement      : 301
ScopeBlockStatement  : 277 284 387
ScopeStatement       : 331 332 333 337 340 371 372 388 400 401
ScopeStatementList   : 375 378 381
ShiftExpression      : 179 182 182 183 183 184 184 185 185 186 186 187 187 189 190
Statement            : 312 317 318
StatementList        : 314 318
StatementListNoCaseNoDefault : 382 384
StatementNoCaseNoDefault : 383 384
StorageClass         : 106 107
StorageClasses       : 107 128 132 321 460
StorageClasses_opt   : 40 134 135 139 455 456
SuperClass           : 414 415 432
SuperClass_opt       : 428
SwitchStatement      : 297
Symbol               : 401
SymbolTail           : 492 493 495
Test                 : 348
Test_opt             : 340
ThenStatement        : 322 323
Type                 : 74 77 101 139 206 210 212 213 223 273 439 454 473 474
Type_opt             : 260
TypeidExpression     : 256
Typeof               : 82 83 254
UnaryExpression      : 194 195 196 197 198 199 200 201 202 203 204 209 223 224 226
UnionDeclaration     : 404
UprExpression        : 368
VarDeclarations      : 35
VarDeclarator        : 43 44 58
VarDeclaratorIdentifier : 50
VisibilityAttribute  : 146
VoidInitializer      : 115
WhileStatement       : 293
WithStatement        : 303
XorExpression        : 173 174 176
c_m1                 : 375
c_m2                 : 375
class_m1             : 411
class_m2             : 411
empty                : 2 6 49 71 78 96 125 133 217 219 234 265 324 325 326 327 334 338 339 341 349 352 363 373 374 376 377 390 392 412 413 418 431 433 435 458 459 462 469 481 485
for_M1               : 340
for_M2               : 340
for_M3               : 340
for_test_mark        : 340
func_m1              : 455
func_m2              : 456
func_m3              : 461
ifmark1              : 322 323
ifmark2              : 322
ifmark3              : 323
ifmark4              : 323
mark1                : 47 48
switch_M1            : 372
switch_M2            : 372
while_M0             : 333
while_M1             : 333
while_M2             : 333

Parsing method: LALR

state 0

    (0) S' -> . Declaration_mult
    (1) Declaration_mult -> . Declaration Declaration_mult
    (2) Declaration_mult -> . empty
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (496) empty -> .
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

    $end            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 17
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    Declaration_mult               shift and go to state 8
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    AliasDeclaration               shift and go to state 11
    ClassDeclaration               shift and go to state 26
    VarDeclarations                shift and go to state 12
    empty                          shift and go to state 14
    AutoFuncDeclaration            shift and go to state 16
    Declaration                    shift and go to state 19
    AnonymousEnumDeclaration       shift and go to state 21
    AnonUnionDeclaration           shift and go to state 23
    EnumDeclaration                shift and go to state 24
    UnionDeclaration               shift and go to state 25
    StorageClass                   shift and go to state 28

state 1

    (132) StorageClasses_opt -> StorageClasses .
    (460) AutoFuncDeclaration -> StorageClasses . IDENTIFIER FuncDeclaratorSuffix FunctionBody

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    DOT             reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    BOOL            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    SHORT           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    USHORT          reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    INT             reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    UINT            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    LONG            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    ULONG           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    CHAR            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    FLOAT           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    VOID            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    TYPEOF          reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    IDENTIFIER      shift and go to state 29

  ! IDENTIFIER      [ reduce using rule 132 (StorageClasses_opt -> StorageClasses .) ]


state 2

    (112) StorageClass -> AUTO .

    ENUM            reduce using rule 112 (StorageClass -> AUTO .)
    STATIC          reduce using rule 112 (StorageClass -> AUTO .)
    EXTERN          reduce using rule 112 (StorageClass -> AUTO .)
    FINAL           reduce using rule 112 (StorageClass -> AUTO .)
    AUTO            reduce using rule 112 (StorageClass -> AUTO .)
    CONST           reduce using rule 112 (StorageClass -> AUTO .)
    IMMUTABLE       reduce using rule 112 (StorageClass -> AUTO .)
    IDENTIFIER      reduce using rule 112 (StorageClass -> AUTO .)
    DOT             reduce using rule 112 (StorageClass -> AUTO .)
    BOOL            reduce using rule 112 (StorageClass -> AUTO .)
    SHORT           reduce using rule 112 (StorageClass -> AUTO .)
    USHORT          reduce using rule 112 (StorageClass -> AUTO .)
    INT             reduce using rule 112 (StorageClass -> AUTO .)
    UINT            reduce using rule 112 (StorageClass -> AUTO .)
    LONG            reduce using rule 112 (StorageClass -> AUTO .)
    ULONG           reduce using rule 112 (StorageClass -> AUTO .)
    CHAR            reduce using rule 112 (StorageClass -> AUTO .)
    FLOAT           reduce using rule 112 (StorageClass -> AUTO .)
    VOID            reduce using rule 112 (StorageClass -> AUTO .)
    TYPEOF          reduce using rule 112 (StorageClass -> AUTO .)
    ALIAS           reduce using rule 112 (StorageClass -> AUTO .)
    IMPORT          reduce using rule 112 (StorageClass -> AUTO .)
    CLASS           reduce using rule 112 (StorageClass -> AUTO .)
    UNION           reduce using rule 112 (StorageClass -> AUTO .)


state 3

    (113) StorageClass -> CONST .

    ENUM            reduce using rule 113 (StorageClass -> CONST .)
    STATIC          reduce using rule 113 (StorageClass -> CONST .)
    EXTERN          reduce using rule 113 (StorageClass -> CONST .)
    FINAL           reduce using rule 113 (StorageClass -> CONST .)
    AUTO            reduce using rule 113 (StorageClass -> CONST .)
    CONST           reduce using rule 113 (StorageClass -> CONST .)
    IMMUTABLE       reduce using rule 113 (StorageClass -> CONST .)
    IDENTIFIER      reduce using rule 113 (StorageClass -> CONST .)
    DOT             reduce using rule 113 (StorageClass -> CONST .)
    BOOL            reduce using rule 113 (StorageClass -> CONST .)
    SHORT           reduce using rule 113 (StorageClass -> CONST .)
    USHORT          reduce using rule 113 (StorageClass -> CONST .)
    INT             reduce using rule 113 (StorageClass -> CONST .)
    UINT            reduce using rule 113 (StorageClass -> CONST .)
    LONG            reduce using rule 113 (StorageClass -> CONST .)
    ULONG           reduce using rule 113 (StorageClass -> CONST .)
    CHAR            reduce using rule 113 (StorageClass -> CONST .)
    FLOAT           reduce using rule 113 (StorageClass -> CONST .)
    VOID            reduce using rule 113 (StorageClass -> CONST .)
    TYPEOF          reduce using rule 113 (StorageClass -> CONST .)
    ALIAS           reduce using rule 113 (StorageClass -> CONST .)
    IMPORT          reduce using rule 113 (StorageClass -> CONST .)
    CLASS           reduce using rule 113 (StorageClass -> CONST .)
    UNION           reduce using rule 113 (StorageClass -> CONST .)


state 4

    (37) Declaration -> AggregateDeclaration .

    SEMICOLON       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CASE            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DEFAULT         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LBRACE          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IDENTIFIER      reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IF              reduce using rule 37 (Declaration -> AggregateDeclaration .)
    WHILE           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DO              reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FOR             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    SWITCH          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FINAL           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CONTINUE        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    BREAK           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    RETURN          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    GOTO            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    WITH            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    MIXIN           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IMPORT          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    STATIC          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LPAREN          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ALIAS           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ENUM            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    EXTERN          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    AUTO            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CONST           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    IMMUTABLE       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FOREACH         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FOREACH_REVERSE reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CLASS           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    UNION           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    AMPERSAND       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PLUS_PLUS       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    MINUS_MINUS     reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TIMES           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    MINUS           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PLUS            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    EXCLAMATION     reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TILDE           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CAST            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DOT             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    THIS            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    NULL            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TRUE            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FALSE           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DOLLAR          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    INUMBER         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DNUMBER         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LIT_CHAR        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LIT_STR         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LBRACKET        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FUNCTION        reduce using rule 37 (Declaration -> AggregateDeclaration .)
    NEW             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    BOOL            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    SHORT           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    USHORT          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    INT             reduce using rule 37 (Declaration -> AggregateDeclaration .)
    UINT            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    LONG            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ULONG           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    CHAR            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    FLOAT           reduce using rule 37 (Declaration -> AggregateDeclaration .)
    VOID            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TYPEOF          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    TYPEID          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    BODY            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    RBRACE          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    ELSE            reduce using rule 37 (Declaration -> AggregateDeclaration .)
    DELETE          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PRIVATE         reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PROTECTED       reduce using rule 37 (Declaration -> AggregateDeclaration .)
    PUBLIC          reduce using rule 37 (Declaration -> AggregateDeclaration .)
    $end            reduce using rule 37 (Declaration -> AggregateDeclaration .)


state 5

    (21) ImportDeclaration -> STATIC . IMPORT ImportList SEMICOLON
    (109) StorageClass -> STATIC .

  ! shift/reduce conflict for IMPORT resolved as shift
    IMPORT          shift and go to state 30
    ENUM            reduce using rule 109 (StorageClass -> STATIC .)
    STATIC          reduce using rule 109 (StorageClass -> STATIC .)
    EXTERN          reduce using rule 109 (StorageClass -> STATIC .)
    FINAL           reduce using rule 109 (StorageClass -> STATIC .)
    AUTO            reduce using rule 109 (StorageClass -> STATIC .)
    CONST           reduce using rule 109 (StorageClass -> STATIC .)
    IMMUTABLE       reduce using rule 109 (StorageClass -> STATIC .)
    IDENTIFIER      reduce using rule 109 (StorageClass -> STATIC .)
    DOT             reduce using rule 109 (StorageClass -> STATIC .)
    BOOL            reduce using rule 109 (StorageClass -> STATIC .)
    SHORT           reduce using rule 109 (StorageClass -> STATIC .)
    USHORT          reduce using rule 109 (StorageClass -> STATIC .)
    INT             reduce using rule 109 (StorageClass -> STATIC .)
    UINT            reduce using rule 109 (StorageClass -> STATIC .)
    LONG            reduce using rule 109 (StorageClass -> STATIC .)
    ULONG           reduce using rule 109 (StorageClass -> STATIC .)
    CHAR            reduce using rule 109 (StorageClass -> STATIC .)
    FLOAT           reduce using rule 109 (StorageClass -> STATIC .)
    VOID            reduce using rule 109 (StorageClass -> STATIC .)
    TYPEOF          reduce using rule 109 (StorageClass -> STATIC .)
    ALIAS           reduce using rule 109 (StorageClass -> STATIC .)
    CLASS           reduce using rule 109 (StorageClass -> STATIC .)
    UNION           reduce using rule 109 (StorageClass -> STATIC .)

  ! IMPORT          [ reduce using rule 109 (StorageClass -> STATIC .) ]


state 6

    (34) Declaration -> FuncDeclaration .

    SEMICOLON       reduce using rule 34 (Declaration -> FuncDeclaration .)
    CASE            reduce using rule 34 (Declaration -> FuncDeclaration .)
    DEFAULT         reduce using rule 34 (Declaration -> FuncDeclaration .)
    LBRACE          reduce using rule 34 (Declaration -> FuncDeclaration .)
    IDENTIFIER      reduce using rule 34 (Declaration -> FuncDeclaration .)
    IF              reduce using rule 34 (Declaration -> FuncDeclaration .)
    WHILE           reduce using rule 34 (Declaration -> FuncDeclaration .)
    DO              reduce using rule 34 (Declaration -> FuncDeclaration .)
    FOR             reduce using rule 34 (Declaration -> FuncDeclaration .)
    SWITCH          reduce using rule 34 (Declaration -> FuncDeclaration .)
    FINAL           reduce using rule 34 (Declaration -> FuncDeclaration .)
    CONTINUE        reduce using rule 34 (Declaration -> FuncDeclaration .)
    BREAK           reduce using rule 34 (Declaration -> FuncDeclaration .)
    RETURN          reduce using rule 34 (Declaration -> FuncDeclaration .)
    GOTO            reduce using rule 34 (Declaration -> FuncDeclaration .)
    WITH            reduce using rule 34 (Declaration -> FuncDeclaration .)
    MIXIN           reduce using rule 34 (Declaration -> FuncDeclaration .)
    IMPORT          reduce using rule 34 (Declaration -> FuncDeclaration .)
    STATIC          reduce using rule 34 (Declaration -> FuncDeclaration .)
    LPAREN          reduce using rule 34 (Declaration -> FuncDeclaration .)
    ALIAS           reduce using rule 34 (Declaration -> FuncDeclaration .)
    ENUM            reduce using rule 34 (Declaration -> FuncDeclaration .)
    EXTERN          reduce using rule 34 (Declaration -> FuncDeclaration .)
    AUTO            reduce using rule 34 (Declaration -> FuncDeclaration .)
    CONST           reduce using rule 34 (Declaration -> FuncDeclaration .)
    IMMUTABLE       reduce using rule 34 (Declaration -> FuncDeclaration .)
    FOREACH         reduce using rule 34 (Declaration -> FuncDeclaration .)
    FOREACH_REVERSE reduce using rule 34 (Declaration -> FuncDeclaration .)
    CLASS           reduce using rule 34 (Declaration -> FuncDeclaration .)
    UNION           reduce using rule 34 (Declaration -> FuncDeclaration .)
    AMPERSAND       reduce using rule 34 (Declaration -> FuncDeclaration .)
    PLUS_PLUS       reduce using rule 34 (Declaration -> FuncDeclaration .)
    MINUS_MINUS     reduce using rule 34 (Declaration -> FuncDeclaration .)
    TIMES           reduce using rule 34 (Declaration -> FuncDeclaration .)
    MINUS           reduce using rule 34 (Declaration -> FuncDeclaration .)
    PLUS            reduce using rule 34 (Declaration -> FuncDeclaration .)
    EXCLAMATION     reduce using rule 34 (Declaration -> FuncDeclaration .)
    TILDE           reduce using rule 34 (Declaration -> FuncDeclaration .)
    CAST            reduce using rule 34 (Declaration -> FuncDeclaration .)
    DOT             reduce using rule 34 (Declaration -> FuncDeclaration .)
    THIS            reduce using rule 34 (Declaration -> FuncDeclaration .)
    NULL            reduce using rule 34 (Declaration -> FuncDeclaration .)
    TRUE            reduce using rule 34 (Declaration -> FuncDeclaration .)
    FALSE           reduce using rule 34 (Declaration -> FuncDeclaration .)
    DOLLAR          reduce using rule 34 (Declaration -> FuncDeclaration .)
    INUMBER         reduce using rule 34 (Declaration -> FuncDeclaration .)
    DNUMBER         reduce using rule 34 (Declaration -> FuncDeclaration .)
    LIT_CHAR        reduce using rule 34 (Declaration -> FuncDeclaration .)
    LIT_STR         reduce using rule 34 (Declaration -> FuncDeclaration .)
    LBRACKET        reduce using rule 34 (Declaration -> FuncDeclaration .)
    FUNCTION        reduce using rule 34 (Declaration -> FuncDeclaration .)
    NEW             reduce using rule 34 (Declaration -> FuncDeclaration .)
    BOOL            reduce using rule 34 (Declaration -> FuncDeclaration .)
    SHORT           reduce using rule 34 (Declaration -> FuncDeclaration .)
    USHORT          reduce using rule 34 (Declaration -> FuncDeclaration .)
    INT             reduce using rule 34 (Declaration -> FuncDeclaration .)
    UINT            reduce using rule 34 (Declaration -> FuncDeclaration .)
    LONG            reduce using rule 34 (Declaration -> FuncDeclaration .)
    ULONG           reduce using rule 34 (Declaration -> FuncDeclaration .)
    CHAR            reduce using rule 34 (Declaration -> FuncDeclaration .)
    FLOAT           reduce using rule 34 (Declaration -> FuncDeclaration .)
    VOID            reduce using rule 34 (Declaration -> FuncDeclaration .)
    TYPEOF          reduce using rule 34 (Declaration -> FuncDeclaration .)
    TYPEID          reduce using rule 34 (Declaration -> FuncDeclaration .)
    BODY            reduce using rule 34 (Declaration -> FuncDeclaration .)
    RBRACE          reduce using rule 34 (Declaration -> FuncDeclaration .)
    ELSE            reduce using rule 34 (Declaration -> FuncDeclaration .)
    DELETE          reduce using rule 34 (Declaration -> FuncDeclaration .)
    PRIVATE         reduce using rule 34 (Declaration -> FuncDeclaration .)
    PROTECTED       reduce using rule 34 (Declaration -> FuncDeclaration .)
    PUBLIC          reduce using rule 34 (Declaration -> FuncDeclaration .)
    $end            reduce using rule 34 (Declaration -> FuncDeclaration .)


state 7

    (110) StorageClass -> EXTERN .

    ENUM            reduce using rule 110 (StorageClass -> EXTERN .)
    STATIC          reduce using rule 110 (StorageClass -> EXTERN .)
    EXTERN          reduce using rule 110 (StorageClass -> EXTERN .)
    FINAL           reduce using rule 110 (StorageClass -> EXTERN .)
    AUTO            reduce using rule 110 (StorageClass -> EXTERN .)
    CONST           reduce using rule 110 (StorageClass -> EXTERN .)
    IMMUTABLE       reduce using rule 110 (StorageClass -> EXTERN .)
    IDENTIFIER      reduce using rule 110 (StorageClass -> EXTERN .)
    DOT             reduce using rule 110 (StorageClass -> EXTERN .)
    BOOL            reduce using rule 110 (StorageClass -> EXTERN .)
    SHORT           reduce using rule 110 (StorageClass -> EXTERN .)
    USHORT          reduce using rule 110 (StorageClass -> EXTERN .)
    INT             reduce using rule 110 (StorageClass -> EXTERN .)
    UINT            reduce using rule 110 (StorageClass -> EXTERN .)
    LONG            reduce using rule 110 (StorageClass -> EXTERN .)
    ULONG           reduce using rule 110 (StorageClass -> EXTERN .)
    CHAR            reduce using rule 110 (StorageClass -> EXTERN .)
    FLOAT           reduce using rule 110 (StorageClass -> EXTERN .)
    VOID            reduce using rule 110 (StorageClass -> EXTERN .)
    TYPEOF          reduce using rule 110 (StorageClass -> EXTERN .)
    ALIAS           reduce using rule 110 (StorageClass -> EXTERN .)
    IMPORT          reduce using rule 110 (StorageClass -> EXTERN .)
    CLASS           reduce using rule 110 (StorageClass -> EXTERN .)
    UNION           reduce using rule 110 (StorageClass -> EXTERN .)


state 8

    (0) S' -> Declaration_mult .



state 9

    (455) FuncDeclaration -> StorageClasses_opt . BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> StorageClasses_opt . BasicType FuncDeclarator func_m2 SEMICOLON
    (40) VarDeclarations -> StorageClasses_opt . BasicType Declarators SEMICOLON
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 37
    IdentifierList                 shift and go to state 34
    Typeof                         shift and go to state 43
    BasicTypeX                     shift and go to state 39

state 10

    (39) Declaration -> ImportDeclaration .

    SEMICOLON       reduce using rule 39 (Declaration -> ImportDeclaration .)
    NEW             reduce using rule 39 (Declaration -> ImportDeclaration .)
    DELETE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    ALIAS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    MIXIN           reduce using rule 39 (Declaration -> ImportDeclaration .)
    ENUM            reduce using rule 39 (Declaration -> ImportDeclaration .)
    IMPORT          reduce using rule 39 (Declaration -> ImportDeclaration .)
    STATIC          reduce using rule 39 (Declaration -> ImportDeclaration .)
    PRIVATE         reduce using rule 39 (Declaration -> ImportDeclaration .)
    PROTECTED       reduce using rule 39 (Declaration -> ImportDeclaration .)
    PUBLIC          reduce using rule 39 (Declaration -> ImportDeclaration .)
    CLASS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    UNION           reduce using rule 39 (Declaration -> ImportDeclaration .)
    EXTERN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    FINAL           reduce using rule 39 (Declaration -> ImportDeclaration .)
    AUTO            reduce using rule 39 (Declaration -> ImportDeclaration .)
    CONST           reduce using rule 39 (Declaration -> ImportDeclaration .)
    IMMUTABLE       reduce using rule 39 (Declaration -> ImportDeclaration .)
    DOT             reduce using rule 39 (Declaration -> ImportDeclaration .)
    BOOL            reduce using rule 39 (Declaration -> ImportDeclaration .)
    SHORT           reduce using rule 39 (Declaration -> ImportDeclaration .)
    USHORT          reduce using rule 39 (Declaration -> ImportDeclaration .)
    INT             reduce using rule 39 (Declaration -> ImportDeclaration .)
    UINT            reduce using rule 39 (Declaration -> ImportDeclaration .)
    LONG            reduce using rule 39 (Declaration -> ImportDeclaration .)
    ULONG           reduce using rule 39 (Declaration -> ImportDeclaration .)
    CHAR            reduce using rule 39 (Declaration -> ImportDeclaration .)
    FLOAT           reduce using rule 39 (Declaration -> ImportDeclaration .)
    VOID            reduce using rule 39 (Declaration -> ImportDeclaration .)
    IDENTIFIER      reduce using rule 39 (Declaration -> ImportDeclaration .)
    TYPEOF          reduce using rule 39 (Declaration -> ImportDeclaration .)
    RBRACE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    $end            reduce using rule 39 (Declaration -> ImportDeclaration .)
    CASE            reduce using rule 39 (Declaration -> ImportDeclaration .)
    DEFAULT         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LBRACE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    IF              reduce using rule 39 (Declaration -> ImportDeclaration .)
    WHILE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    DO              reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOR             reduce using rule 39 (Declaration -> ImportDeclaration .)
    SWITCH          reduce using rule 39 (Declaration -> ImportDeclaration .)
    CONTINUE        reduce using rule 39 (Declaration -> ImportDeclaration .)
    BREAK           reduce using rule 39 (Declaration -> ImportDeclaration .)
    RETURN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    GOTO            reduce using rule 39 (Declaration -> ImportDeclaration .)
    WITH            reduce using rule 39 (Declaration -> ImportDeclaration .)
    LPAREN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOREACH         reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOREACH_REVERSE reduce using rule 39 (Declaration -> ImportDeclaration .)
    AMPERSAND       reduce using rule 39 (Declaration -> ImportDeclaration .)
    PLUS_PLUS       reduce using rule 39 (Declaration -> ImportDeclaration .)
    MINUS_MINUS     reduce using rule 39 (Declaration -> ImportDeclaration .)
    TIMES           reduce using rule 39 (Declaration -> ImportDeclaration .)
    MINUS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    PLUS            reduce using rule 39 (Declaration -> ImportDeclaration .)
    EXCLAMATION     reduce using rule 39 (Declaration -> ImportDeclaration .)
    TILDE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    CAST            reduce using rule 39 (Declaration -> ImportDeclaration .)
    THIS            reduce using rule 39 (Declaration -> ImportDeclaration .)
    NULL            reduce using rule 39 (Declaration -> ImportDeclaration .)
    TRUE            reduce using rule 39 (Declaration -> ImportDeclaration .)
    FALSE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    DOLLAR          reduce using rule 39 (Declaration -> ImportDeclaration .)
    INUMBER         reduce using rule 39 (Declaration -> ImportDeclaration .)
    DNUMBER         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LIT_CHAR        reduce using rule 39 (Declaration -> ImportDeclaration .)
    LIT_STR         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LBRACKET        reduce using rule 39 (Declaration -> ImportDeclaration .)
    FUNCTION        reduce using rule 39 (Declaration -> ImportDeclaration .)
    TYPEID          reduce using rule 39 (Declaration -> ImportDeclaration .)
    BODY            reduce using rule 39 (Declaration -> ImportDeclaration .)
    ELSE            reduce using rule 39 (Declaration -> ImportDeclaration .)


state 11

    (36) Declaration -> AliasDeclaration .

    SEMICOLON       reduce using rule 36 (Declaration -> AliasDeclaration .)
    CASE            reduce using rule 36 (Declaration -> AliasDeclaration .)
    DEFAULT         reduce using rule 36 (Declaration -> AliasDeclaration .)
    LBRACE          reduce using rule 36 (Declaration -> AliasDeclaration .)
    IDENTIFIER      reduce using rule 36 (Declaration -> AliasDeclaration .)
    IF              reduce using rule 36 (Declaration -> AliasDeclaration .)
    WHILE           reduce using rule 36 (Declaration -> AliasDeclaration .)
    DO              reduce using rule 36 (Declaration -> AliasDeclaration .)
    FOR             reduce using rule 36 (Declaration -> AliasDeclaration .)
    SWITCH          reduce using rule 36 (Declaration -> AliasDeclaration .)
    FINAL           reduce using rule 36 (Declaration -> AliasDeclaration .)
    CONTINUE        reduce using rule 36 (Declaration -> AliasDeclaration .)
    BREAK           reduce using rule 36 (Declaration -> AliasDeclaration .)
    RETURN          reduce using rule 36 (Declaration -> AliasDeclaration .)
    GOTO            reduce using rule 36 (Declaration -> AliasDeclaration .)
    WITH            reduce using rule 36 (Declaration -> AliasDeclaration .)
    MIXIN           reduce using rule 36 (Declaration -> AliasDeclaration .)
    IMPORT          reduce using rule 36 (Declaration -> AliasDeclaration .)
    STATIC          reduce using rule 36 (Declaration -> AliasDeclaration .)
    LPAREN          reduce using rule 36 (Declaration -> AliasDeclaration .)
    ALIAS           reduce using rule 36 (Declaration -> AliasDeclaration .)
    ENUM            reduce using rule 36 (Declaration -> AliasDeclaration .)
    EXTERN          reduce using rule 36 (Declaration -> AliasDeclaration .)
    AUTO            reduce using rule 36 (Declaration -> AliasDeclaration .)
    CONST           reduce using rule 36 (Declaration -> AliasDeclaration .)
    IMMUTABLE       reduce using rule 36 (Declaration -> AliasDeclaration .)
    FOREACH         reduce using rule 36 (Declaration -> AliasDeclaration .)
    FOREACH_REVERSE reduce using rule 36 (Declaration -> AliasDeclaration .)
    CLASS           reduce using rule 36 (Declaration -> AliasDeclaration .)
    UNION           reduce using rule 36 (Declaration -> AliasDeclaration .)
    AMPERSAND       reduce using rule 36 (Declaration -> AliasDeclaration .)
    PLUS_PLUS       reduce using rule 36 (Declaration -> AliasDeclaration .)
    MINUS_MINUS     reduce using rule 36 (Declaration -> AliasDeclaration .)
    TIMES           reduce using rule 36 (Declaration -> AliasDeclaration .)
    MINUS           reduce using rule 36 (Declaration -> AliasDeclaration .)
    PLUS            reduce using rule 36 (Declaration -> AliasDeclaration .)
    EXCLAMATION     reduce using rule 36 (Declaration -> AliasDeclaration .)
    TILDE           reduce using rule 36 (Declaration -> AliasDeclaration .)
    CAST            reduce using rule 36 (Declaration -> AliasDeclaration .)
    DOT             reduce using rule 36 (Declaration -> AliasDeclaration .)
    THIS            reduce using rule 36 (Declaration -> AliasDeclaration .)
    NULL            reduce using rule 36 (Declaration -> AliasDeclaration .)
    TRUE            reduce using rule 36 (Declaration -> AliasDeclaration .)
    FALSE           reduce using rule 36 (Declaration -> AliasDeclaration .)
    DOLLAR          reduce using rule 36 (Declaration -> AliasDeclaration .)
    INUMBER         reduce using rule 36 (Declaration -> AliasDeclaration .)
    DNUMBER         reduce using rule 36 (Declaration -> AliasDeclaration .)
    LIT_CHAR        reduce using rule 36 (Declaration -> AliasDeclaration .)
    LIT_STR         reduce using rule 36 (Declaration -> AliasDeclaration .)
    LBRACKET        reduce using rule 36 (Declaration -> AliasDeclaration .)
    FUNCTION        reduce using rule 36 (Declaration -> AliasDeclaration .)
    NEW             reduce using rule 36 (Declaration -> AliasDeclaration .)
    BOOL            reduce using rule 36 (Declaration -> AliasDeclaration .)
    SHORT           reduce using rule 36 (Declaration -> AliasDeclaration .)
    USHORT          reduce using rule 36 (Declaration -> AliasDeclaration .)
    INT             reduce using rule 36 (Declaration -> AliasDeclaration .)
    UINT            reduce using rule 36 (Declaration -> AliasDeclaration .)
    LONG            reduce using rule 36 (Declaration -> AliasDeclaration .)
    ULONG           reduce using rule 36 (Declaration -> AliasDeclaration .)
    CHAR            reduce using rule 36 (Declaration -> AliasDeclaration .)
    FLOAT           reduce using rule 36 (Declaration -> AliasDeclaration .)
    VOID            reduce using rule 36 (Declaration -> AliasDeclaration .)
    TYPEOF          reduce using rule 36 (Declaration -> AliasDeclaration .)
    TYPEID          reduce using rule 36 (Declaration -> AliasDeclaration .)
    BODY            reduce using rule 36 (Declaration -> AliasDeclaration .)
    RBRACE          reduce using rule 36 (Declaration -> AliasDeclaration .)
    ELSE            reduce using rule 36 (Declaration -> AliasDeclaration .)
    DELETE          reduce using rule 36 (Declaration -> AliasDeclaration .)
    PRIVATE         reduce using rule 36 (Declaration -> AliasDeclaration .)
    PROTECTED       reduce using rule 36 (Declaration -> AliasDeclaration .)
    PUBLIC          reduce using rule 36 (Declaration -> AliasDeclaration .)
    $end            reduce using rule 36 (Declaration -> AliasDeclaration .)


state 12

    (35) Declaration -> VarDeclarations .

    SEMICOLON       reduce using rule 35 (Declaration -> VarDeclarations .)
    CASE            reduce using rule 35 (Declaration -> VarDeclarations .)
    DEFAULT         reduce using rule 35 (Declaration -> VarDeclarations .)
    LBRACE          reduce using rule 35 (Declaration -> VarDeclarations .)
    IDENTIFIER      reduce using rule 35 (Declaration -> VarDeclarations .)
    IF              reduce using rule 35 (Declaration -> VarDeclarations .)
    WHILE           reduce using rule 35 (Declaration -> VarDeclarations .)
    DO              reduce using rule 35 (Declaration -> VarDeclarations .)
    FOR             reduce using rule 35 (Declaration -> VarDeclarations .)
    SWITCH          reduce using rule 35 (Declaration -> VarDeclarations .)
    FINAL           reduce using rule 35 (Declaration -> VarDeclarations .)
    CONTINUE        reduce using rule 35 (Declaration -> VarDeclarations .)
    BREAK           reduce using rule 35 (Declaration -> VarDeclarations .)
    RETURN          reduce using rule 35 (Declaration -> VarDeclarations .)
    GOTO            reduce using rule 35 (Declaration -> VarDeclarations .)
    WITH            reduce using rule 35 (Declaration -> VarDeclarations .)
    MIXIN           reduce using rule 35 (Declaration -> VarDeclarations .)
    IMPORT          reduce using rule 35 (Declaration -> VarDeclarations .)
    STATIC          reduce using rule 35 (Declaration -> VarDeclarations .)
    LPAREN          reduce using rule 35 (Declaration -> VarDeclarations .)
    ALIAS           reduce using rule 35 (Declaration -> VarDeclarations .)
    ENUM            reduce using rule 35 (Declaration -> VarDeclarations .)
    EXTERN          reduce using rule 35 (Declaration -> VarDeclarations .)
    AUTO            reduce using rule 35 (Declaration -> VarDeclarations .)
    CONST           reduce using rule 35 (Declaration -> VarDeclarations .)
    IMMUTABLE       reduce using rule 35 (Declaration -> VarDeclarations .)
    FOREACH         reduce using rule 35 (Declaration -> VarDeclarations .)
    FOREACH_REVERSE reduce using rule 35 (Declaration -> VarDeclarations .)
    CLASS           reduce using rule 35 (Declaration -> VarDeclarations .)
    UNION           reduce using rule 35 (Declaration -> VarDeclarations .)
    AMPERSAND       reduce using rule 35 (Declaration -> VarDeclarations .)
    PLUS_PLUS       reduce using rule 35 (Declaration -> VarDeclarations .)
    MINUS_MINUS     reduce using rule 35 (Declaration -> VarDeclarations .)
    TIMES           reduce using rule 35 (Declaration -> VarDeclarations .)
    MINUS           reduce using rule 35 (Declaration -> VarDeclarations .)
    PLUS            reduce using rule 35 (Declaration -> VarDeclarations .)
    EXCLAMATION     reduce using rule 35 (Declaration -> VarDeclarations .)
    TILDE           reduce using rule 35 (Declaration -> VarDeclarations .)
    CAST            reduce using rule 35 (Declaration -> VarDeclarations .)
    DOT             reduce using rule 35 (Declaration -> VarDeclarations .)
    THIS            reduce using rule 35 (Declaration -> VarDeclarations .)
    NULL            reduce using rule 35 (Declaration -> VarDeclarations .)
    TRUE            reduce using rule 35 (Declaration -> VarDeclarations .)
    FALSE           reduce using rule 35 (Declaration -> VarDeclarations .)
    DOLLAR          reduce using rule 35 (Declaration -> VarDeclarations .)
    INUMBER         reduce using rule 35 (Declaration -> VarDeclarations .)
    DNUMBER         reduce using rule 35 (Declaration -> VarDeclarations .)
    LIT_CHAR        reduce using rule 35 (Declaration -> VarDeclarations .)
    LIT_STR         reduce using rule 35 (Declaration -> VarDeclarations .)
    LBRACKET        reduce using rule 35 (Declaration -> VarDeclarations .)
    FUNCTION        reduce using rule 35 (Declaration -> VarDeclarations .)
    NEW             reduce using rule 35 (Declaration -> VarDeclarations .)
    BOOL            reduce using rule 35 (Declaration -> VarDeclarations .)
    SHORT           reduce using rule 35 (Declaration -> VarDeclarations .)
    USHORT          reduce using rule 35 (Declaration -> VarDeclarations .)
    INT             reduce using rule 35 (Declaration -> VarDeclarations .)
    UINT            reduce using rule 35 (Declaration -> VarDeclarations .)
    LONG            reduce using rule 35 (Declaration -> VarDeclarations .)
    ULONG           reduce using rule 35 (Declaration -> VarDeclarations .)
    CHAR            reduce using rule 35 (Declaration -> VarDeclarations .)
    FLOAT           reduce using rule 35 (Declaration -> VarDeclarations .)
    VOID            reduce using rule 35 (Declaration -> VarDeclarations .)
    TYPEOF          reduce using rule 35 (Declaration -> VarDeclarations .)
    TYPEID          reduce using rule 35 (Declaration -> VarDeclarations .)
    BODY            reduce using rule 35 (Declaration -> VarDeclarations .)
    RBRACE          reduce using rule 35 (Declaration -> VarDeclarations .)
    ELSE            reduce using rule 35 (Declaration -> VarDeclarations .)
    DELETE          reduce using rule 35 (Declaration -> VarDeclarations .)
    PRIVATE         reduce using rule 35 (Declaration -> VarDeclarations .)
    PROTECTED       reduce using rule 35 (Declaration -> VarDeclarations .)
    PUBLIC          reduce using rule 35 (Declaration -> VarDeclarations .)
    $end            reduce using rule 35 (Declaration -> VarDeclarations .)


state 13

    (410) ClassDeclaration -> CLASS . IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> CLASS . IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2

    IDENTIFIER      shift and go to state 48


state 14

    (2) Declaration_mult -> empty .
    (133) StorageClasses_opt -> empty .

    $end            reduce using rule 2 (Declaration_mult -> empty .)
    DOT             reduce using rule 133 (StorageClasses_opt -> empty .)
    BOOL            reduce using rule 133 (StorageClasses_opt -> empty .)
    SHORT           reduce using rule 133 (StorageClasses_opt -> empty .)
    USHORT          reduce using rule 133 (StorageClasses_opt -> empty .)
    INT             reduce using rule 133 (StorageClasses_opt -> empty .)
    UINT            reduce using rule 133 (StorageClasses_opt -> empty .)
    LONG            reduce using rule 133 (StorageClasses_opt -> empty .)
    ULONG           reduce using rule 133 (StorageClasses_opt -> empty .)
    CHAR            reduce using rule 133 (StorageClasses_opt -> empty .)
    FLOAT           reduce using rule 133 (StorageClasses_opt -> empty .)
    VOID            reduce using rule 133 (StorageClasses_opt -> empty .)
    IDENTIFIER      reduce using rule 133 (StorageClasses_opt -> empty .)
    TYPEOF          reduce using rule 133 (StorageClasses_opt -> empty .)


state 15

    (111) StorageClass -> FINAL .

    ENUM            reduce using rule 111 (StorageClass -> FINAL .)
    STATIC          reduce using rule 111 (StorageClass -> FINAL .)
    EXTERN          reduce using rule 111 (StorageClass -> FINAL .)
    FINAL           reduce using rule 111 (StorageClass -> FINAL .)
    AUTO            reduce using rule 111 (StorageClass -> FINAL .)
    CONST           reduce using rule 111 (StorageClass -> FINAL .)
    IMMUTABLE       reduce using rule 111 (StorageClass -> FINAL .)
    IDENTIFIER      reduce using rule 111 (StorageClass -> FINAL .)
    DOT             reduce using rule 111 (StorageClass -> FINAL .)
    BOOL            reduce using rule 111 (StorageClass -> FINAL .)
    SHORT           reduce using rule 111 (StorageClass -> FINAL .)
    USHORT          reduce using rule 111 (StorageClass -> FINAL .)
    INT             reduce using rule 111 (StorageClass -> FINAL .)
    UINT            reduce using rule 111 (StorageClass -> FINAL .)
    LONG            reduce using rule 111 (StorageClass -> FINAL .)
    ULONG           reduce using rule 111 (StorageClass -> FINAL .)
    CHAR            reduce using rule 111 (StorageClass -> FINAL .)
    FLOAT           reduce using rule 111 (StorageClass -> FINAL .)
    VOID            reduce using rule 111 (StorageClass -> FINAL .)
    TYPEOF          reduce using rule 111 (StorageClass -> FINAL .)
    ALIAS           reduce using rule 111 (StorageClass -> FINAL .)
    IMPORT          reduce using rule 111 (StorageClass -> FINAL .)
    CLASS           reduce using rule 111 (StorageClass -> FINAL .)
    UNION           reduce using rule 111 (StorageClass -> FINAL .)


state 16

    (457) FuncDeclaration -> AutoFuncDeclaration .

    SEMICOLON       reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    CASE            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    DEFAULT         reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    LBRACE          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    IDENTIFIER      reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    IF              reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    WHILE           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    DO              reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    FOR             reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    SWITCH          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    FINAL           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    CONTINUE        reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    BREAK           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    RETURN          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    GOTO            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    WITH            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    MIXIN           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    IMPORT          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    STATIC          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    LPAREN          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    ALIAS           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    ENUM            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    EXTERN          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    AUTO            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    CONST           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    IMMUTABLE       reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    FOREACH         reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    FOREACH_REVERSE reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    CLASS           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    UNION           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    AMPERSAND       reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    PLUS_PLUS       reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    MINUS_MINUS     reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    TIMES           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    MINUS           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    PLUS            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    EXCLAMATION     reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    TILDE           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    CAST            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    DOT             reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    THIS            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    NULL            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    TRUE            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    FALSE           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    DOLLAR          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    INUMBER         reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    DNUMBER         reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    LIT_CHAR        reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    LIT_STR         reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    LBRACKET        reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    FUNCTION        reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    NEW             reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    BOOL            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    SHORT           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    USHORT          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    INT             reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    UINT            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    LONG            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    ULONG           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    CHAR            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    FLOAT           reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    VOID            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    TYPEOF          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    TYPEID          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    BODY            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    RBRACE          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    ELSE            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    DELETE          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    PRIVATE         reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    PROTECTED       reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    PUBLIC          reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)
    $end            reduce using rule 457 (FuncDeclaration -> AutoFuncDeclaration .)


state 17

    (436) EnumDeclaration -> ENUM . IDENTIFIER EnumBody
    (437) EnumDeclaration -> ENUM . IDENTIFIER COLON EnumBaseType EnumBody
    (447) AnonymousEnumDeclaration -> ENUM . COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> ENUM . LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> ENUM . LBRACE AnonymousEnumMembers RBRACE
    (108) StorageClass -> ENUM .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 51
    COLON           shift and go to state 50
    LBRACE          shift and go to state 49
    ENUM            reduce using rule 108 (StorageClass -> ENUM .)
    STATIC          reduce using rule 108 (StorageClass -> ENUM .)
    EXTERN          reduce using rule 108 (StorageClass -> ENUM .)
    FINAL           reduce using rule 108 (StorageClass -> ENUM .)
    AUTO            reduce using rule 108 (StorageClass -> ENUM .)
    CONST           reduce using rule 108 (StorageClass -> ENUM .)
    IMMUTABLE       reduce using rule 108 (StorageClass -> ENUM .)
    DOT             reduce using rule 108 (StorageClass -> ENUM .)
    BOOL            reduce using rule 108 (StorageClass -> ENUM .)
    SHORT           reduce using rule 108 (StorageClass -> ENUM .)
    USHORT          reduce using rule 108 (StorageClass -> ENUM .)
    INT             reduce using rule 108 (StorageClass -> ENUM .)
    UINT            reduce using rule 108 (StorageClass -> ENUM .)
    LONG            reduce using rule 108 (StorageClass -> ENUM .)
    ULONG           reduce using rule 108 (StorageClass -> ENUM .)
    CHAR            reduce using rule 108 (StorageClass -> ENUM .)
    FLOAT           reduce using rule 108 (StorageClass -> ENUM .)
    VOID            reduce using rule 108 (StorageClass -> ENUM .)
    TYPEOF          reduce using rule 108 (StorageClass -> ENUM .)

  ! IDENTIFIER      [ reduce using rule 108 (StorageClass -> ENUM .) ]


state 18

    (405) UnionDeclaration -> UNION . IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> UNION . IDENTIFIER AggregateBody
    (408) AnonUnionDeclaration -> UNION . AggregateBody
    (409) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    IDENTIFIER      shift and go to state 54
    LBRACE          shift and go to state 52

    AggregateBody                  shift and go to state 53

state 19

    (1) Declaration_mult -> Declaration . Declaration_mult
    (1) Declaration_mult -> . Declaration Declaration_mult
    (2) Declaration_mult -> . empty
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (496) empty -> .
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

    $end            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 17
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    Declaration_mult               shift and go to state 55
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    AliasDeclaration               shift and go to state 11
    ClassDeclaration               shift and go to state 26
    VarDeclarations                shift and go to state 12
    empty                          shift and go to state 14
    AutoFuncDeclaration            shift and go to state 16
    Declaration                    shift and go to state 19
    AnonymousEnumDeclaration       shift and go to state 21
    AnonUnionDeclaration           shift and go to state 23
    EnumDeclaration                shift and go to state 24
    UnionDeclaration               shift and go to state 25
    StorageClass                   shift and go to state 28

state 20

    (134) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> ALIAS . AliasDeclarationX SEMICOLON
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (137) AliasDeclarationX -> . AliasDeclarationY
    (138) AliasDeclarationX -> . AliasDeclarationX COMMA AliasDeclarationY
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (496) empty -> .
    (139) AliasDeclarationY -> . IDENTIFIER ASSIGN StorageClasses_opt Type
    (140) AliasDeclarationY -> . IDENTIFIER ASSIGN FunctionLiteral
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ENUM            shift and go to state 63
    STATIC          shift and go to state 56
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

  ! IDENTIFIER      [ shift and go to state 61 ]

    AliasDeclarationY              shift and go to state 58
    AliasDeclarationX              shift and go to state 59
    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 60
    StorageClasses_opt             shift and go to state 57
    empty                          shift and go to state 62

state 21

    (438) EnumDeclaration -> AnonymousEnumDeclaration .

    SEMICOLON       reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CASE            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DEFAULT         reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LBRACE          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IDENTIFIER      reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IF              reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    WHILE           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DO              reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FOR             reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    SWITCH          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FINAL           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CONTINUE        reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    BREAK           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    RETURN          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    GOTO            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    WITH            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    MIXIN           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IMPORT          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    STATIC          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LPAREN          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ALIAS           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ENUM            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    EXTERN          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    AUTO            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CONST           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    IMMUTABLE       reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FOREACH         reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FOREACH_REVERSE reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CLASS           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    UNION           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    AMPERSAND       reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PLUS_PLUS       reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    MINUS_MINUS     reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TIMES           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    MINUS           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PLUS            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    EXCLAMATION     reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TILDE           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CAST            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DOT             reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    THIS            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    NULL            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TRUE            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FALSE           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DOLLAR          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    INUMBER         reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DNUMBER         reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LIT_CHAR        reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LIT_STR         reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LBRACKET        reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FUNCTION        reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    NEW             reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    BOOL            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    SHORT           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    USHORT          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    INT             reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    UINT            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    LONG            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ULONG           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    CHAR            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    FLOAT           reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    VOID            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TYPEOF          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    TYPEID          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    BODY            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    RBRACE          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    ELSE            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    DELETE          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PRIVATE         reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PROTECTED       reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    PUBLIC          reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)
    $end            reduce using rule 438 (EnumDeclaration -> AnonymousEnumDeclaration .)


state 22

    (114) StorageClass -> IMMUTABLE .

    ENUM            reduce using rule 114 (StorageClass -> IMMUTABLE .)
    STATIC          reduce using rule 114 (StorageClass -> IMMUTABLE .)
    EXTERN          reduce using rule 114 (StorageClass -> IMMUTABLE .)
    FINAL           reduce using rule 114 (StorageClass -> IMMUTABLE .)
    AUTO            reduce using rule 114 (StorageClass -> IMMUTABLE .)
    CONST           reduce using rule 114 (StorageClass -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 114 (StorageClass -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 114 (StorageClass -> IMMUTABLE .)
    DOT             reduce using rule 114 (StorageClass -> IMMUTABLE .)
    BOOL            reduce using rule 114 (StorageClass -> IMMUTABLE .)
    SHORT           reduce using rule 114 (StorageClass -> IMMUTABLE .)
    USHORT          reduce using rule 114 (StorageClass -> IMMUTABLE .)
    INT             reduce using rule 114 (StorageClass -> IMMUTABLE .)
    UINT            reduce using rule 114 (StorageClass -> IMMUTABLE .)
    LONG            reduce using rule 114 (StorageClass -> IMMUTABLE .)
    ULONG           reduce using rule 114 (StorageClass -> IMMUTABLE .)
    CHAR            reduce using rule 114 (StorageClass -> IMMUTABLE .)
    FLOAT           reduce using rule 114 (StorageClass -> IMMUTABLE .)
    VOID            reduce using rule 114 (StorageClass -> IMMUTABLE .)
    TYPEOF          reduce using rule 114 (StorageClass -> IMMUTABLE .)
    ALIAS           reduce using rule 114 (StorageClass -> IMMUTABLE .)
    IMPORT          reduce using rule 114 (StorageClass -> IMMUTABLE .)
    CLASS           reduce using rule 114 (StorageClass -> IMMUTABLE .)
    UNION           reduce using rule 114 (StorageClass -> IMMUTABLE .)


state 23

    (407) UnionDeclaration -> AnonUnionDeclaration .

    SEMICOLON       reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    CASE            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    DEFAULT         reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    LBRACE          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    IDENTIFIER      reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    IF              reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    WHILE           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    DO              reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    FOR             reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    SWITCH          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    FINAL           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    CONTINUE        reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    BREAK           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    RETURN          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    GOTO            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    WITH            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    MIXIN           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    IMPORT          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    STATIC          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    LPAREN          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    ALIAS           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    ENUM            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    EXTERN          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    AUTO            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    CONST           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    IMMUTABLE       reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    FOREACH         reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    FOREACH_REVERSE reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    CLASS           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    UNION           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    AMPERSAND       reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    PLUS_PLUS       reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    MINUS_MINUS     reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    TIMES           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    MINUS           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    PLUS            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    EXCLAMATION     reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    TILDE           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    CAST            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    DOT             reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    THIS            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    NULL            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    TRUE            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    FALSE           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    DOLLAR          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    INUMBER         reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    DNUMBER         reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    LIT_CHAR        reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    LIT_STR         reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    LBRACKET        reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    FUNCTION        reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    NEW             reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    BOOL            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    SHORT           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    USHORT          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    INT             reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    UINT            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    LONG            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    ULONG           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    CHAR            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    FLOAT           reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    VOID            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    TYPEOF          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    TYPEID          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    BODY            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    RBRACE          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    ELSE            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    DELETE          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    PRIVATE         reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    PROTECTED       reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    PUBLIC          reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)
    $end            reduce using rule 407 (UnionDeclaration -> AnonUnionDeclaration .)


state 24

    (38) Declaration -> EnumDeclaration .

    SEMICOLON       reduce using rule 38 (Declaration -> EnumDeclaration .)
    CASE            reduce using rule 38 (Declaration -> EnumDeclaration .)
    DEFAULT         reduce using rule 38 (Declaration -> EnumDeclaration .)
    LBRACE          reduce using rule 38 (Declaration -> EnumDeclaration .)
    IDENTIFIER      reduce using rule 38 (Declaration -> EnumDeclaration .)
    IF              reduce using rule 38 (Declaration -> EnumDeclaration .)
    WHILE           reduce using rule 38 (Declaration -> EnumDeclaration .)
    DO              reduce using rule 38 (Declaration -> EnumDeclaration .)
    FOR             reduce using rule 38 (Declaration -> EnumDeclaration .)
    SWITCH          reduce using rule 38 (Declaration -> EnumDeclaration .)
    FINAL           reduce using rule 38 (Declaration -> EnumDeclaration .)
    CONTINUE        reduce using rule 38 (Declaration -> EnumDeclaration .)
    BREAK           reduce using rule 38 (Declaration -> EnumDeclaration .)
    RETURN          reduce using rule 38 (Declaration -> EnumDeclaration .)
    GOTO            reduce using rule 38 (Declaration -> EnumDeclaration .)
    WITH            reduce using rule 38 (Declaration -> EnumDeclaration .)
    MIXIN           reduce using rule 38 (Declaration -> EnumDeclaration .)
    IMPORT          reduce using rule 38 (Declaration -> EnumDeclaration .)
    STATIC          reduce using rule 38 (Declaration -> EnumDeclaration .)
    LPAREN          reduce using rule 38 (Declaration -> EnumDeclaration .)
    ALIAS           reduce using rule 38 (Declaration -> EnumDeclaration .)
    ENUM            reduce using rule 38 (Declaration -> EnumDeclaration .)
    EXTERN          reduce using rule 38 (Declaration -> EnumDeclaration .)
    AUTO            reduce using rule 38 (Declaration -> EnumDeclaration .)
    CONST           reduce using rule 38 (Declaration -> EnumDeclaration .)
    IMMUTABLE       reduce using rule 38 (Declaration -> EnumDeclaration .)
    FOREACH         reduce using rule 38 (Declaration -> EnumDeclaration .)
    FOREACH_REVERSE reduce using rule 38 (Declaration -> EnumDeclaration .)
    CLASS           reduce using rule 38 (Declaration -> EnumDeclaration .)
    UNION           reduce using rule 38 (Declaration -> EnumDeclaration .)
    AMPERSAND       reduce using rule 38 (Declaration -> EnumDeclaration .)
    PLUS_PLUS       reduce using rule 38 (Declaration -> EnumDeclaration .)
    MINUS_MINUS     reduce using rule 38 (Declaration -> EnumDeclaration .)
    TIMES           reduce using rule 38 (Declaration -> EnumDeclaration .)
    MINUS           reduce using rule 38 (Declaration -> EnumDeclaration .)
    PLUS            reduce using rule 38 (Declaration -> EnumDeclaration .)
    EXCLAMATION     reduce using rule 38 (Declaration -> EnumDeclaration .)
    TILDE           reduce using rule 38 (Declaration -> EnumDeclaration .)
    CAST            reduce using rule 38 (Declaration -> EnumDeclaration .)
    DOT             reduce using rule 38 (Declaration -> EnumDeclaration .)
    THIS            reduce using rule 38 (Declaration -> EnumDeclaration .)
    NULL            reduce using rule 38 (Declaration -> EnumDeclaration .)
    TRUE            reduce using rule 38 (Declaration -> EnumDeclaration .)
    FALSE           reduce using rule 38 (Declaration -> EnumDeclaration .)
    DOLLAR          reduce using rule 38 (Declaration -> EnumDeclaration .)
    INUMBER         reduce using rule 38 (Declaration -> EnumDeclaration .)
    DNUMBER         reduce using rule 38 (Declaration -> EnumDeclaration .)
    LIT_CHAR        reduce using rule 38 (Declaration -> EnumDeclaration .)
    LIT_STR         reduce using rule 38 (Declaration -> EnumDeclaration .)
    LBRACKET        reduce using rule 38 (Declaration -> EnumDeclaration .)
    FUNCTION        reduce using rule 38 (Declaration -> EnumDeclaration .)
    NEW             reduce using rule 38 (Declaration -> EnumDeclaration .)
    BOOL            reduce using rule 38 (Declaration -> EnumDeclaration .)
    SHORT           reduce using rule 38 (Declaration -> EnumDeclaration .)
    USHORT          reduce using rule 38 (Declaration -> EnumDeclaration .)
    INT             reduce using rule 38 (Declaration -> EnumDeclaration .)
    UINT            reduce using rule 38 (Declaration -> EnumDeclaration .)
    LONG            reduce using rule 38 (Declaration -> EnumDeclaration .)
    ULONG           reduce using rule 38 (Declaration -> EnumDeclaration .)
    CHAR            reduce using rule 38 (Declaration -> EnumDeclaration .)
    FLOAT           reduce using rule 38 (Declaration -> EnumDeclaration .)
    VOID            reduce using rule 38 (Declaration -> EnumDeclaration .)
    TYPEOF          reduce using rule 38 (Declaration -> EnumDeclaration .)
    TYPEID          reduce using rule 38 (Declaration -> EnumDeclaration .)
    BODY            reduce using rule 38 (Declaration -> EnumDeclaration .)
    RBRACE          reduce using rule 38 (Declaration -> EnumDeclaration .)
    ELSE            reduce using rule 38 (Declaration -> EnumDeclaration .)
    DELETE          reduce using rule 38 (Declaration -> EnumDeclaration .)
    PRIVATE         reduce using rule 38 (Declaration -> EnumDeclaration .)
    PROTECTED       reduce using rule 38 (Declaration -> EnumDeclaration .)
    PUBLIC          reduce using rule 38 (Declaration -> EnumDeclaration .)
    $end            reduce using rule 38 (Declaration -> EnumDeclaration .)


state 25

    (404) AggregateDeclaration -> UnionDeclaration .

    SEMICOLON       reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    CASE            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    DEFAULT         reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    LBRACE          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    IDENTIFIER      reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    IF              reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    WHILE           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    DO              reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    FOR             reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    SWITCH          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    FINAL           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    CONTINUE        reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    BREAK           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    RETURN          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    GOTO            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    WITH            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    MIXIN           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    IMPORT          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    STATIC          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    LPAREN          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    ALIAS           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    ENUM            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    EXTERN          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    AUTO            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    CONST           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    IMMUTABLE       reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    FOREACH         reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    FOREACH_REVERSE reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    CLASS           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    UNION           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    AMPERSAND       reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    PLUS_PLUS       reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    MINUS_MINUS     reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    TIMES           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    MINUS           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    PLUS            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    EXCLAMATION     reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    TILDE           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    CAST            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    DOT             reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    THIS            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    NULL            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    TRUE            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    FALSE           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    DOLLAR          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    INUMBER         reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    DNUMBER         reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    LIT_CHAR        reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    LIT_STR         reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    LBRACKET        reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    FUNCTION        reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    NEW             reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    BOOL            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    SHORT           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    USHORT          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    INT             reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    UINT            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    LONG            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    ULONG           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    CHAR            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    FLOAT           reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    VOID            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    TYPEOF          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    TYPEID          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    BODY            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    RBRACE          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    ELSE            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    $end            reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    DELETE          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    PRIVATE         reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    PROTECTED       reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)
    PUBLIC          reduce using rule 404 (AggregateDeclaration -> UnionDeclaration .)


state 26

    (403) AggregateDeclaration -> ClassDeclaration .

    SEMICOLON       reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    CASE            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    DEFAULT         reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    LBRACE          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    IDENTIFIER      reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    IF              reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    WHILE           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    DO              reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    FOR             reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    SWITCH          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    FINAL           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    CONTINUE        reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    BREAK           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    RETURN          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    GOTO            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    WITH            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    MIXIN           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    IMPORT          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    STATIC          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    LPAREN          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    ALIAS           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    ENUM            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    EXTERN          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    AUTO            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    CONST           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    IMMUTABLE       reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    FOREACH         reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    FOREACH_REVERSE reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    CLASS           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    UNION           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    AMPERSAND       reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    PLUS_PLUS       reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    MINUS_MINUS     reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    TIMES           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    MINUS           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    PLUS            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    EXCLAMATION     reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    TILDE           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    CAST            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    DOT             reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    THIS            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    NULL            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    TRUE            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    FALSE           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    DOLLAR          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    INUMBER         reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    DNUMBER         reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    LIT_CHAR        reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    LIT_STR         reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    LBRACKET        reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    FUNCTION        reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    NEW             reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    BOOL            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    SHORT           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    USHORT          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    INT             reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    UINT            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    LONG            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    ULONG           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    CHAR            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    FLOAT           reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    VOID            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    TYPEOF          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    TYPEID          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    BODY            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    RBRACE          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    ELSE            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    $end            reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    DELETE          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    PRIVATE         reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    PROTECTED       reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)
    PUBLIC          reduce using rule 403 (AggregateDeclaration -> ClassDeclaration .)


state 27

    (20) ImportDeclaration -> IMPORT . ImportList SEMICOLON
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 69

    ModuleFullyQualifiedName       shift and go to state 64
    ImportBindings                 shift and go to state 65
    ModuleAliasIdentifier          shift and go to state 66
    ImportList                     shift and go to state 67
    PackageName                    shift and go to state 68
    ModuleName                     shift and go to state 72
    Import                         shift and go to state 70
    Packages                       shift and go to state 71

state 28

    (106) StorageClasses -> StorageClass .
    (107) StorageClasses -> StorageClass . StorageClasses
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      reduce using rule 106 (StorageClasses -> StorageClass .)
    ALIAS           reduce using rule 106 (StorageClasses -> StorageClass .)
    IMPORT          reduce using rule 106 (StorageClasses -> StorageClass .)
    CLASS           reduce using rule 106 (StorageClasses -> StorageClass .)
    UNION           reduce using rule 106 (StorageClasses -> StorageClass .)
    DOT             reduce using rule 106 (StorageClasses -> StorageClass .)
    BOOL            reduce using rule 106 (StorageClasses -> StorageClass .)
    SHORT           reduce using rule 106 (StorageClasses -> StorageClass .)
    USHORT          reduce using rule 106 (StorageClasses -> StorageClass .)
    INT             reduce using rule 106 (StorageClasses -> StorageClass .)
    UINT            reduce using rule 106 (StorageClasses -> StorageClass .)
    LONG            reduce using rule 106 (StorageClasses -> StorageClass .)
    ULONG           reduce using rule 106 (StorageClasses -> StorageClass .)
    CHAR            reduce using rule 106 (StorageClasses -> StorageClass .)
    FLOAT           reduce using rule 106 (StorageClasses -> StorageClass .)
    VOID            reduce using rule 106 (StorageClasses -> StorageClass .)
    TYPEOF          reduce using rule 106 (StorageClasses -> StorageClass .)
    ENUM            shift and go to state 63
    STATIC          shift and go to state 56
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

  ! ENUM            [ reduce using rule 106 (StorageClasses -> StorageClass .) ]
  ! STATIC          [ reduce using rule 106 (StorageClasses -> StorageClass .) ]
  ! EXTERN          [ reduce using rule 106 (StorageClasses -> StorageClass .) ]
  ! FINAL           [ reduce using rule 106 (StorageClasses -> StorageClass .) ]
  ! AUTO            [ reduce using rule 106 (StorageClasses -> StorageClass .) ]
  ! CONST           [ reduce using rule 106 (StorageClasses -> StorageClass .) ]
  ! IMMUTABLE       [ reduce using rule 106 (StorageClasses -> StorageClass .) ]

    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 73

state 29

    (460) AutoFuncDeclaration -> StorageClasses IDENTIFIER . FuncDeclaratorSuffix FunctionBody
    (463) FuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 76

    FuncDeclaratorSuffix           shift and go to state 74
    Parameters                     shift and go to state 75

state 30

    (21) ImportDeclaration -> STATIC IMPORT . ImportList SEMICOLON
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 69

    ModuleFullyQualifiedName       shift and go to state 64
    ImportBindings                 shift and go to state 65
    ModuleAliasIdentifier          shift and go to state 66
    ImportList                     shift and go to state 77
    PackageName                    shift and go to state 68
    ModuleName                     shift and go to state 72
    Import                         shift and go to state 70
    Packages                       shift and go to state 71

state 31

    (85) BasicTypeX -> SHORT .

    COMMA           reduce using rule 85 (BasicTypeX -> SHORT .)
    LBRACE          reduce using rule 85 (BasicTypeX -> SHORT .)
    DOT             reduce using rule 85 (BasicTypeX -> SHORT .)
    LPAREN          reduce using rule 85 (BasicTypeX -> SHORT .)
    TIMES           reduce using rule 85 (BasicTypeX -> SHORT .)
    LBRACKET        reduce using rule 85 (BasicTypeX -> SHORT .)
    FUNCTION        reduce using rule 85 (BasicTypeX -> SHORT .)
    IDENTIFIER      reduce using rule 85 (BasicTypeX -> SHORT .)
    ELLIPSIS        reduce using rule 85 (BasicTypeX -> SHORT .)
    RPAREN          reduce using rule 85 (BasicTypeX -> SHORT .)
    RBRACKET        reduce using rule 85 (BasicTypeX -> SHORT .)
    BOOL            reduce using rule 85 (BasicTypeX -> SHORT .)
    SHORT           reduce using rule 85 (BasicTypeX -> SHORT .)
    USHORT          reduce using rule 85 (BasicTypeX -> SHORT .)
    INT             reduce using rule 85 (BasicTypeX -> SHORT .)
    UINT            reduce using rule 85 (BasicTypeX -> SHORT .)
    LONG            reduce using rule 85 (BasicTypeX -> SHORT .)
    ULONG           reduce using rule 85 (BasicTypeX -> SHORT .)
    CHAR            reduce using rule 85 (BasicTypeX -> SHORT .)
    FLOAT           reduce using rule 85 (BasicTypeX -> SHORT .)
    VOID            reduce using rule 85 (BasicTypeX -> SHORT .)
    TYPEOF          reduce using rule 85 (BasicTypeX -> SHORT .)
    BODY            reduce using rule 85 (BasicTypeX -> SHORT .)
    SEMICOLON       reduce using rule 85 (BasicTypeX -> SHORT .)
    POWER           reduce using rule 85 (BasicTypeX -> SHORT .)
    PLUS_PLUS       reduce using rule 85 (BasicTypeX -> SHORT .)
    MINUS_MINUS     reduce using rule 85 (BasicTypeX -> SHORT .)
    DIV             reduce using rule 85 (BasicTypeX -> SHORT .)
    MODULO          reduce using rule 85 (BasicTypeX -> SHORT .)
    PLUS            reduce using rule 85 (BasicTypeX -> SHORT .)
    MINUS           reduce using rule 85 (BasicTypeX -> SHORT .)
    LEFT_SHIFT      reduce using rule 85 (BasicTypeX -> SHORT .)
    RIGHT_SHIFT     reduce using rule 85 (BasicTypeX -> SHORT .)
    IS_EQ           reduce using rule 85 (BasicTypeX -> SHORT .)
    NOT_EQ          reduce using rule 85 (BasicTypeX -> SHORT .)
    LESS            reduce using rule 85 (BasicTypeX -> SHORT .)
    GREATER_EQ      reduce using rule 85 (BasicTypeX -> SHORT .)
    GREATER         reduce using rule 85 (BasicTypeX -> SHORT .)
    LESS_EQ         reduce using rule 85 (BasicTypeX -> SHORT .)
    AMPERSAND       reduce using rule 85 (BasicTypeX -> SHORT .)
    CARET           reduce using rule 85 (BasicTypeX -> SHORT .)
    PIPE            reduce using rule 85 (BasicTypeX -> SHORT .)
    DOUBLE_AMPERSAND reduce using rule 85 (BasicTypeX -> SHORT .)
    QUESTION        reduce using rule 85 (BasicTypeX -> SHORT .)
    DOUBLE_PIPE     reduce using rule 85 (BasicTypeX -> SHORT .)
    ASSIGN          reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_PLUS         reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_MINUS        reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_TIMES        reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_DIV          reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_MODULO       reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_AND_BIT      reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_OR_BIT       reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_XOR_BIT      reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_LEFT         reduce using rule 85 (BasicTypeX -> SHORT .)
    EQ_RIGHT        reduce using rule 85 (BasicTypeX -> SHORT .)
    RANGE           reduce using rule 85 (BasicTypeX -> SHORT .)
    RBRACE          reduce using rule 85 (BasicTypeX -> SHORT .)
    COLON           reduce using rule 85 (BasicTypeX -> SHORT .)


state 32

    (93) BasicTypeX -> VOID .

    COMMA           reduce using rule 93 (BasicTypeX -> VOID .)
    LBRACE          reduce using rule 93 (BasicTypeX -> VOID .)
    DOT             reduce using rule 93 (BasicTypeX -> VOID .)
    LPAREN          reduce using rule 93 (BasicTypeX -> VOID .)
    TIMES           reduce using rule 93 (BasicTypeX -> VOID .)
    LBRACKET        reduce using rule 93 (BasicTypeX -> VOID .)
    FUNCTION        reduce using rule 93 (BasicTypeX -> VOID .)
    IDENTIFIER      reduce using rule 93 (BasicTypeX -> VOID .)
    ELLIPSIS        reduce using rule 93 (BasicTypeX -> VOID .)
    RPAREN          reduce using rule 93 (BasicTypeX -> VOID .)
    RBRACKET        reduce using rule 93 (BasicTypeX -> VOID .)
    BOOL            reduce using rule 93 (BasicTypeX -> VOID .)
    SHORT           reduce using rule 93 (BasicTypeX -> VOID .)
    USHORT          reduce using rule 93 (BasicTypeX -> VOID .)
    INT             reduce using rule 93 (BasicTypeX -> VOID .)
    UINT            reduce using rule 93 (BasicTypeX -> VOID .)
    LONG            reduce using rule 93 (BasicTypeX -> VOID .)
    ULONG           reduce using rule 93 (BasicTypeX -> VOID .)
    CHAR            reduce using rule 93 (BasicTypeX -> VOID .)
    FLOAT           reduce using rule 93 (BasicTypeX -> VOID .)
    VOID            reduce using rule 93 (BasicTypeX -> VOID .)
    TYPEOF          reduce using rule 93 (BasicTypeX -> VOID .)
    BODY            reduce using rule 93 (BasicTypeX -> VOID .)
    SEMICOLON       reduce using rule 93 (BasicTypeX -> VOID .)
    POWER           reduce using rule 93 (BasicTypeX -> VOID .)
    PLUS_PLUS       reduce using rule 93 (BasicTypeX -> VOID .)
    MINUS_MINUS     reduce using rule 93 (BasicTypeX -> VOID .)
    DIV             reduce using rule 93 (BasicTypeX -> VOID .)
    MODULO          reduce using rule 93 (BasicTypeX -> VOID .)
    PLUS            reduce using rule 93 (BasicTypeX -> VOID .)
    MINUS           reduce using rule 93 (BasicTypeX -> VOID .)
    LEFT_SHIFT      reduce using rule 93 (BasicTypeX -> VOID .)
    RIGHT_SHIFT     reduce using rule 93 (BasicTypeX -> VOID .)
    IS_EQ           reduce using rule 93 (BasicTypeX -> VOID .)
    NOT_EQ          reduce using rule 93 (BasicTypeX -> VOID .)
    LESS            reduce using rule 93 (BasicTypeX -> VOID .)
    GREATER_EQ      reduce using rule 93 (BasicTypeX -> VOID .)
    GREATER         reduce using rule 93 (BasicTypeX -> VOID .)
    LESS_EQ         reduce using rule 93 (BasicTypeX -> VOID .)
    AMPERSAND       reduce using rule 93 (BasicTypeX -> VOID .)
    CARET           reduce using rule 93 (BasicTypeX -> VOID .)
    PIPE            reduce using rule 93 (BasicTypeX -> VOID .)
    DOUBLE_AMPERSAND reduce using rule 93 (BasicTypeX -> VOID .)
    QUESTION        reduce using rule 93 (BasicTypeX -> VOID .)
    DOUBLE_PIPE     reduce using rule 93 (BasicTypeX -> VOID .)
    ASSIGN          reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_PLUS         reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_MINUS        reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_TIMES        reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_DIV          reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_MODULO       reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_AND_BIT      reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_OR_BIT       reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_XOR_BIT      reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_LEFT         reduce using rule 93 (BasicTypeX -> VOID .)
    EQ_RIGHT        reduce using rule 93 (BasicTypeX -> VOID .)
    RANGE           reduce using rule 93 (BasicTypeX -> VOID .)
    RBRACE          reduce using rule 93 (BasicTypeX -> VOID .)
    COLON           reduce using rule 93 (BasicTypeX -> VOID .)


state 33

    (91) BasicTypeX -> CHAR .

    COMMA           reduce using rule 91 (BasicTypeX -> CHAR .)
    LBRACE          reduce using rule 91 (BasicTypeX -> CHAR .)
    DOT             reduce using rule 91 (BasicTypeX -> CHAR .)
    LPAREN          reduce using rule 91 (BasicTypeX -> CHAR .)
    TIMES           reduce using rule 91 (BasicTypeX -> CHAR .)
    LBRACKET        reduce using rule 91 (BasicTypeX -> CHAR .)
    FUNCTION        reduce using rule 91 (BasicTypeX -> CHAR .)
    IDENTIFIER      reduce using rule 91 (BasicTypeX -> CHAR .)
    ELLIPSIS        reduce using rule 91 (BasicTypeX -> CHAR .)
    RPAREN          reduce using rule 91 (BasicTypeX -> CHAR .)
    RBRACKET        reduce using rule 91 (BasicTypeX -> CHAR .)
    BOOL            reduce using rule 91 (BasicTypeX -> CHAR .)
    SHORT           reduce using rule 91 (BasicTypeX -> CHAR .)
    USHORT          reduce using rule 91 (BasicTypeX -> CHAR .)
    INT             reduce using rule 91 (BasicTypeX -> CHAR .)
    UINT            reduce using rule 91 (BasicTypeX -> CHAR .)
    LONG            reduce using rule 91 (BasicTypeX -> CHAR .)
    ULONG           reduce using rule 91 (BasicTypeX -> CHAR .)
    CHAR            reduce using rule 91 (BasicTypeX -> CHAR .)
    FLOAT           reduce using rule 91 (BasicTypeX -> CHAR .)
    VOID            reduce using rule 91 (BasicTypeX -> CHAR .)
    TYPEOF          reduce using rule 91 (BasicTypeX -> CHAR .)
    BODY            reduce using rule 91 (BasicTypeX -> CHAR .)
    SEMICOLON       reduce using rule 91 (BasicTypeX -> CHAR .)
    POWER           reduce using rule 91 (BasicTypeX -> CHAR .)
    PLUS_PLUS       reduce using rule 91 (BasicTypeX -> CHAR .)
    MINUS_MINUS     reduce using rule 91 (BasicTypeX -> CHAR .)
    DIV             reduce using rule 91 (BasicTypeX -> CHAR .)
    MODULO          reduce using rule 91 (BasicTypeX -> CHAR .)
    PLUS            reduce using rule 91 (BasicTypeX -> CHAR .)
    MINUS           reduce using rule 91 (BasicTypeX -> CHAR .)
    LEFT_SHIFT      reduce using rule 91 (BasicTypeX -> CHAR .)
    RIGHT_SHIFT     reduce using rule 91 (BasicTypeX -> CHAR .)
    IS_EQ           reduce using rule 91 (BasicTypeX -> CHAR .)
    NOT_EQ          reduce using rule 91 (BasicTypeX -> CHAR .)
    LESS            reduce using rule 91 (BasicTypeX -> CHAR .)
    GREATER_EQ      reduce using rule 91 (BasicTypeX -> CHAR .)
    GREATER         reduce using rule 91 (BasicTypeX -> CHAR .)
    LESS_EQ         reduce using rule 91 (BasicTypeX -> CHAR .)
    AMPERSAND       reduce using rule 91 (BasicTypeX -> CHAR .)
    CARET           reduce using rule 91 (BasicTypeX -> CHAR .)
    PIPE            reduce using rule 91 (BasicTypeX -> CHAR .)
    DOUBLE_AMPERSAND reduce using rule 91 (BasicTypeX -> CHAR .)
    QUESTION        reduce using rule 91 (BasicTypeX -> CHAR .)
    DOUBLE_PIPE     reduce using rule 91 (BasicTypeX -> CHAR .)
    ASSIGN          reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_PLUS         reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_MINUS        reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_TIMES        reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_DIV          reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_MODULO       reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_AND_BIT      reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_OR_BIT       reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_XOR_BIT      reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_LEFT         reduce using rule 91 (BasicTypeX -> CHAR .)
    EQ_RIGHT        reduce using rule 91 (BasicTypeX -> CHAR .)
    RANGE           reduce using rule 91 (BasicTypeX -> CHAR .)
    RBRACE          reduce using rule 91 (BasicTypeX -> CHAR .)
    COLON           reduce using rule 91 (BasicTypeX -> CHAR .)


state 34

    (81) BasicType -> IdentifierList .

    TIMES           reduce using rule 81 (BasicType -> IdentifierList .)
    LBRACKET        reduce using rule 81 (BasicType -> IdentifierList .)
    FUNCTION        reduce using rule 81 (BasicType -> IdentifierList .)
    IDENTIFIER      reduce using rule 81 (BasicType -> IdentifierList .)
    LPAREN          reduce using rule 81 (BasicType -> IdentifierList .)
    DOT             reduce using rule 81 (BasicType -> IdentifierList .)
    BOOL            reduce using rule 81 (BasicType -> IdentifierList .)
    SHORT           reduce using rule 81 (BasicType -> IdentifierList .)
    USHORT          reduce using rule 81 (BasicType -> IdentifierList .)
    INT             reduce using rule 81 (BasicType -> IdentifierList .)
    UINT            reduce using rule 81 (BasicType -> IdentifierList .)
    LONG            reduce using rule 81 (BasicType -> IdentifierList .)
    ULONG           reduce using rule 81 (BasicType -> IdentifierList .)
    CHAR            reduce using rule 81 (BasicType -> IdentifierList .)
    FLOAT           reduce using rule 81 (BasicType -> IdentifierList .)
    VOID            reduce using rule 81 (BasicType -> IdentifierList .)
    TYPEOF          reduce using rule 81 (BasicType -> IdentifierList .)
    LBRACE          reduce using rule 81 (BasicType -> IdentifierList .)
    COMMA           reduce using rule 81 (BasicType -> IdentifierList .)
    ELLIPSIS        reduce using rule 81 (BasicType -> IdentifierList .)
    RPAREN          reduce using rule 81 (BasicType -> IdentifierList .)
    SEMICOLON       reduce using rule 81 (BasicType -> IdentifierList .)
    POWER           reduce using rule 81 (BasicType -> IdentifierList .)
    PLUS_PLUS       reduce using rule 81 (BasicType -> IdentifierList .)
    MINUS_MINUS     reduce using rule 81 (BasicType -> IdentifierList .)
    DIV             reduce using rule 81 (BasicType -> IdentifierList .)
    MODULO          reduce using rule 81 (BasicType -> IdentifierList .)
    PLUS            reduce using rule 81 (BasicType -> IdentifierList .)
    MINUS           reduce using rule 81 (BasicType -> IdentifierList .)
    LEFT_SHIFT      reduce using rule 81 (BasicType -> IdentifierList .)
    RIGHT_SHIFT     reduce using rule 81 (BasicType -> IdentifierList .)
    IS_EQ           reduce using rule 81 (BasicType -> IdentifierList .)
    NOT_EQ          reduce using rule 81 (BasicType -> IdentifierList .)
    LESS            reduce using rule 81 (BasicType -> IdentifierList .)
    GREATER_EQ      reduce using rule 81 (BasicType -> IdentifierList .)
    GREATER         reduce using rule 81 (BasicType -> IdentifierList .)
    LESS_EQ         reduce using rule 81 (BasicType -> IdentifierList .)
    AMPERSAND       reduce using rule 81 (BasicType -> IdentifierList .)
    CARET           reduce using rule 81 (BasicType -> IdentifierList .)
    PIPE            reduce using rule 81 (BasicType -> IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 81 (BasicType -> IdentifierList .)
    QUESTION        reduce using rule 81 (BasicType -> IdentifierList .)
    DOUBLE_PIPE     reduce using rule 81 (BasicType -> IdentifierList .)
    ASSIGN          reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_PLUS         reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_MINUS        reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_TIMES        reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_DIV          reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_MODULO       reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_AND_BIT      reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_OR_BIT       reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_XOR_BIT      reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_LEFT         reduce using rule 81 (BasicType -> IdentifierList .)
    EQ_RIGHT        reduce using rule 81 (BasicType -> IdentifierList .)
    RBRACKET        reduce using rule 81 (BasicType -> IdentifierList .)
    RANGE           reduce using rule 81 (BasicType -> IdentifierList .)
    RBRACE          reduce using rule 81 (BasicType -> IdentifierList .)
    COLON           reduce using rule 81 (BasicType -> IdentifierList .)
    BODY            reduce using rule 81 (BasicType -> IdentifierList .)


state 35

    (80) BasicType -> DOT . IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 40

    IdentifierList                 shift and go to state 78

state 36

    (90) BasicTypeX -> ULONG .

    COMMA           reduce using rule 90 (BasicTypeX -> ULONG .)
    LBRACE          reduce using rule 90 (BasicTypeX -> ULONG .)
    DOT             reduce using rule 90 (BasicTypeX -> ULONG .)
    LPAREN          reduce using rule 90 (BasicTypeX -> ULONG .)
    TIMES           reduce using rule 90 (BasicTypeX -> ULONG .)
    LBRACKET        reduce using rule 90 (BasicTypeX -> ULONG .)
    FUNCTION        reduce using rule 90 (BasicTypeX -> ULONG .)
    IDENTIFIER      reduce using rule 90 (BasicTypeX -> ULONG .)
    ELLIPSIS        reduce using rule 90 (BasicTypeX -> ULONG .)
    RPAREN          reduce using rule 90 (BasicTypeX -> ULONG .)
    RBRACKET        reduce using rule 90 (BasicTypeX -> ULONG .)
    BOOL            reduce using rule 90 (BasicTypeX -> ULONG .)
    SHORT           reduce using rule 90 (BasicTypeX -> ULONG .)
    USHORT          reduce using rule 90 (BasicTypeX -> ULONG .)
    INT             reduce using rule 90 (BasicTypeX -> ULONG .)
    UINT            reduce using rule 90 (BasicTypeX -> ULONG .)
    LONG            reduce using rule 90 (BasicTypeX -> ULONG .)
    ULONG           reduce using rule 90 (BasicTypeX -> ULONG .)
    CHAR            reduce using rule 90 (BasicTypeX -> ULONG .)
    FLOAT           reduce using rule 90 (BasicTypeX -> ULONG .)
    VOID            reduce using rule 90 (BasicTypeX -> ULONG .)
    TYPEOF          reduce using rule 90 (BasicTypeX -> ULONG .)
    BODY            reduce using rule 90 (BasicTypeX -> ULONG .)
    SEMICOLON       reduce using rule 90 (BasicTypeX -> ULONG .)
    POWER           reduce using rule 90 (BasicTypeX -> ULONG .)
    PLUS_PLUS       reduce using rule 90 (BasicTypeX -> ULONG .)
    MINUS_MINUS     reduce using rule 90 (BasicTypeX -> ULONG .)
    DIV             reduce using rule 90 (BasicTypeX -> ULONG .)
    MODULO          reduce using rule 90 (BasicTypeX -> ULONG .)
    PLUS            reduce using rule 90 (BasicTypeX -> ULONG .)
    MINUS           reduce using rule 90 (BasicTypeX -> ULONG .)
    LEFT_SHIFT      reduce using rule 90 (BasicTypeX -> ULONG .)
    RIGHT_SHIFT     reduce using rule 90 (BasicTypeX -> ULONG .)
    IS_EQ           reduce using rule 90 (BasicTypeX -> ULONG .)
    NOT_EQ          reduce using rule 90 (BasicTypeX -> ULONG .)
    LESS            reduce using rule 90 (BasicTypeX -> ULONG .)
    GREATER_EQ      reduce using rule 90 (BasicTypeX -> ULONG .)
    GREATER         reduce using rule 90 (BasicTypeX -> ULONG .)
    LESS_EQ         reduce using rule 90 (BasicTypeX -> ULONG .)
    AMPERSAND       reduce using rule 90 (BasicTypeX -> ULONG .)
    CARET           reduce using rule 90 (BasicTypeX -> ULONG .)
    PIPE            reduce using rule 90 (BasicTypeX -> ULONG .)
    DOUBLE_AMPERSAND reduce using rule 90 (BasicTypeX -> ULONG .)
    QUESTION        reduce using rule 90 (BasicTypeX -> ULONG .)
    DOUBLE_PIPE     reduce using rule 90 (BasicTypeX -> ULONG .)
    ASSIGN          reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_PLUS         reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_MINUS        reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_TIMES        reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_DIV          reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_MODULO       reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_AND_BIT      reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_OR_BIT       reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_XOR_BIT      reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_LEFT         reduce using rule 90 (BasicTypeX -> ULONG .)
    EQ_RIGHT        reduce using rule 90 (BasicTypeX -> ULONG .)
    RANGE           reduce using rule 90 (BasicTypeX -> ULONG .)
    RBRACE          reduce using rule 90 (BasicTypeX -> ULONG .)
    COLON           reduce using rule 90 (BasicTypeX -> ULONG .)


state 37

    (455) FuncDeclaration -> StorageClasses_opt BasicType . FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> StorageClasses_opt BasicType . FuncDeclarator func_m2 SEMICOLON
    (40) VarDeclarations -> StorageClasses_opt BasicType . Declarators SEMICOLON
    (461) FuncDeclarator -> . BasicType2_opt IDENTIFIER func_m3 FuncDeclaratorSuffix
    (41) Declarators -> . DeclaratorInitializer
    (42) Declarators -> . DeclaratorInitializer COMMA DeclaratorIdentifierList
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (43) DeclaratorInitializer -> . VarDeclarator
    (44) DeclaratorInitializer -> . VarDeclarator ASSIGN Initializer
    (45) DeclaratorInitializer -> . AltDeclarator ASSIGN Initializer
    (46) DeclaratorInitializer -> . AltDeclarator
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (60) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (61) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

    VarDeclarator                  shift and go to state 79
    Declarators                    shift and go to state 81
    BasicType2_opt                 shift and go to state 82
    DeclaratorInitializer          shift and go to state 83
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 85
    empty                          shift and go to state 86
    FuncDeclarator                 shift and go to state 89
    BasicType2                     shift and go to state 90

state 38

    (89) BasicTypeX -> LONG .

    COMMA           reduce using rule 89 (BasicTypeX -> LONG .)
    LBRACE          reduce using rule 89 (BasicTypeX -> LONG .)
    DOT             reduce using rule 89 (BasicTypeX -> LONG .)
    LPAREN          reduce using rule 89 (BasicTypeX -> LONG .)
    TIMES           reduce using rule 89 (BasicTypeX -> LONG .)
    LBRACKET        reduce using rule 89 (BasicTypeX -> LONG .)
    FUNCTION        reduce using rule 89 (BasicTypeX -> LONG .)
    IDENTIFIER      reduce using rule 89 (BasicTypeX -> LONG .)
    ELLIPSIS        reduce using rule 89 (BasicTypeX -> LONG .)
    RPAREN          reduce using rule 89 (BasicTypeX -> LONG .)
    RBRACKET        reduce using rule 89 (BasicTypeX -> LONG .)
    BOOL            reduce using rule 89 (BasicTypeX -> LONG .)
    SHORT           reduce using rule 89 (BasicTypeX -> LONG .)
    USHORT          reduce using rule 89 (BasicTypeX -> LONG .)
    INT             reduce using rule 89 (BasicTypeX -> LONG .)
    UINT            reduce using rule 89 (BasicTypeX -> LONG .)
    LONG            reduce using rule 89 (BasicTypeX -> LONG .)
    ULONG           reduce using rule 89 (BasicTypeX -> LONG .)
    CHAR            reduce using rule 89 (BasicTypeX -> LONG .)
    FLOAT           reduce using rule 89 (BasicTypeX -> LONG .)
    VOID            reduce using rule 89 (BasicTypeX -> LONG .)
    TYPEOF          reduce using rule 89 (BasicTypeX -> LONG .)
    BODY            reduce using rule 89 (BasicTypeX -> LONG .)
    SEMICOLON       reduce using rule 89 (BasicTypeX -> LONG .)
    POWER           reduce using rule 89 (BasicTypeX -> LONG .)
    PLUS_PLUS       reduce using rule 89 (BasicTypeX -> LONG .)
    MINUS_MINUS     reduce using rule 89 (BasicTypeX -> LONG .)
    DIV             reduce using rule 89 (BasicTypeX -> LONG .)
    MODULO          reduce using rule 89 (BasicTypeX -> LONG .)
    PLUS            reduce using rule 89 (BasicTypeX -> LONG .)
    MINUS           reduce using rule 89 (BasicTypeX -> LONG .)
    LEFT_SHIFT      reduce using rule 89 (BasicTypeX -> LONG .)
    RIGHT_SHIFT     reduce using rule 89 (BasicTypeX -> LONG .)
    IS_EQ           reduce using rule 89 (BasicTypeX -> LONG .)
    NOT_EQ          reduce using rule 89 (BasicTypeX -> LONG .)
    LESS            reduce using rule 89 (BasicTypeX -> LONG .)
    GREATER_EQ      reduce using rule 89 (BasicTypeX -> LONG .)
    GREATER         reduce using rule 89 (BasicTypeX -> LONG .)
    LESS_EQ         reduce using rule 89 (BasicTypeX -> LONG .)
    AMPERSAND       reduce using rule 89 (BasicTypeX -> LONG .)
    CARET           reduce using rule 89 (BasicTypeX -> LONG .)
    PIPE            reduce using rule 89 (BasicTypeX -> LONG .)
    DOUBLE_AMPERSAND reduce using rule 89 (BasicTypeX -> LONG .)
    QUESTION        reduce using rule 89 (BasicTypeX -> LONG .)
    DOUBLE_PIPE     reduce using rule 89 (BasicTypeX -> LONG .)
    ASSIGN          reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_PLUS         reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_MINUS        reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_TIMES        reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_DIV          reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_MODULO       reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_AND_BIT      reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_OR_BIT       reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_XOR_BIT      reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_LEFT         reduce using rule 89 (BasicTypeX -> LONG .)
    EQ_RIGHT        reduce using rule 89 (BasicTypeX -> LONG .)
    RANGE           reduce using rule 89 (BasicTypeX -> LONG .)
    RBRACE          reduce using rule 89 (BasicTypeX -> LONG .)
    COLON           reduce using rule 89 (BasicTypeX -> LONG .)


state 39

    (79) BasicType -> BasicTypeX .

    TIMES           reduce using rule 79 (BasicType -> BasicTypeX .)
    LBRACKET        reduce using rule 79 (BasicType -> BasicTypeX .)
    FUNCTION        reduce using rule 79 (BasicType -> BasicTypeX .)
    IDENTIFIER      reduce using rule 79 (BasicType -> BasicTypeX .)
    LPAREN          reduce using rule 79 (BasicType -> BasicTypeX .)
    DOT             reduce using rule 79 (BasicType -> BasicTypeX .)
    BOOL            reduce using rule 79 (BasicType -> BasicTypeX .)
    SHORT           reduce using rule 79 (BasicType -> BasicTypeX .)
    USHORT          reduce using rule 79 (BasicType -> BasicTypeX .)
    INT             reduce using rule 79 (BasicType -> BasicTypeX .)
    UINT            reduce using rule 79 (BasicType -> BasicTypeX .)
    LONG            reduce using rule 79 (BasicType -> BasicTypeX .)
    ULONG           reduce using rule 79 (BasicType -> BasicTypeX .)
    CHAR            reduce using rule 79 (BasicType -> BasicTypeX .)
    FLOAT           reduce using rule 79 (BasicType -> BasicTypeX .)
    VOID            reduce using rule 79 (BasicType -> BasicTypeX .)
    TYPEOF          reduce using rule 79 (BasicType -> BasicTypeX .)
    LBRACE          reduce using rule 79 (BasicType -> BasicTypeX .)
    COMMA           reduce using rule 79 (BasicType -> BasicTypeX .)
    ELLIPSIS        reduce using rule 79 (BasicType -> BasicTypeX .)
    RPAREN          reduce using rule 79 (BasicType -> BasicTypeX .)
    SEMICOLON       reduce using rule 79 (BasicType -> BasicTypeX .)
    POWER           reduce using rule 79 (BasicType -> BasicTypeX .)
    PLUS_PLUS       reduce using rule 79 (BasicType -> BasicTypeX .)
    MINUS_MINUS     reduce using rule 79 (BasicType -> BasicTypeX .)
    DIV             reduce using rule 79 (BasicType -> BasicTypeX .)
    MODULO          reduce using rule 79 (BasicType -> BasicTypeX .)
    PLUS            reduce using rule 79 (BasicType -> BasicTypeX .)
    MINUS           reduce using rule 79 (BasicType -> BasicTypeX .)
    LEFT_SHIFT      reduce using rule 79 (BasicType -> BasicTypeX .)
    RIGHT_SHIFT     reduce using rule 79 (BasicType -> BasicTypeX .)
    IS_EQ           reduce using rule 79 (BasicType -> BasicTypeX .)
    NOT_EQ          reduce using rule 79 (BasicType -> BasicTypeX .)
    LESS            reduce using rule 79 (BasicType -> BasicTypeX .)
    GREATER_EQ      reduce using rule 79 (BasicType -> BasicTypeX .)
    GREATER         reduce using rule 79 (BasicType -> BasicTypeX .)
    LESS_EQ         reduce using rule 79 (BasicType -> BasicTypeX .)
    AMPERSAND       reduce using rule 79 (BasicType -> BasicTypeX .)
    CARET           reduce using rule 79 (BasicType -> BasicTypeX .)
    PIPE            reduce using rule 79 (BasicType -> BasicTypeX .)
    DOUBLE_AMPERSAND reduce using rule 79 (BasicType -> BasicTypeX .)
    QUESTION        reduce using rule 79 (BasicType -> BasicTypeX .)
    DOUBLE_PIPE     reduce using rule 79 (BasicType -> BasicTypeX .)
    ASSIGN          reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_PLUS         reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_MINUS        reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_TIMES        reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_DIV          reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_MODULO       reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_AND_BIT      reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_OR_BIT       reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_XOR_BIT      reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_LEFT         reduce using rule 79 (BasicType -> BasicTypeX .)
    EQ_RIGHT        reduce using rule 79 (BasicType -> BasicTypeX .)
    RBRACKET        reduce using rule 79 (BasicType -> BasicTypeX .)
    RANGE           reduce using rule 79 (BasicType -> BasicTypeX .)
    RBRACE          reduce using rule 79 (BasicType -> BasicTypeX .)
    COLON           reduce using rule 79 (BasicType -> BasicTypeX .)
    BODY            reduce using rule 79 (BasicType -> BasicTypeX .)


state 40

    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    FUNCTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    SEMICOLON       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COMMA           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LBRACE          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    BODY            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    POWER           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DIV             reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MODULO          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IS_EQ           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    NOT_EQ          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS_EQ         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    AMPERSAND       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    CARET           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PIPE            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    QUESTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_DIV          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RBRACKET        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RANGE           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RBRACE          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COLON           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    BOOL            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    SHORT           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    USHORT          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    INT             reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    UINT            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LONG            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ULONG           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    CHAR            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    FLOAT           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    VOID            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    TYPEOF          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 91

  ! LBRACKET        [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 41

    (86) BasicTypeX -> USHORT .

    COMMA           reduce using rule 86 (BasicTypeX -> USHORT .)
    LBRACE          reduce using rule 86 (BasicTypeX -> USHORT .)
    DOT             reduce using rule 86 (BasicTypeX -> USHORT .)
    LPAREN          reduce using rule 86 (BasicTypeX -> USHORT .)
    TIMES           reduce using rule 86 (BasicTypeX -> USHORT .)
    LBRACKET        reduce using rule 86 (BasicTypeX -> USHORT .)
    FUNCTION        reduce using rule 86 (BasicTypeX -> USHORT .)
    IDENTIFIER      reduce using rule 86 (BasicTypeX -> USHORT .)
    ELLIPSIS        reduce using rule 86 (BasicTypeX -> USHORT .)
    RPAREN          reduce using rule 86 (BasicTypeX -> USHORT .)
    RBRACKET        reduce using rule 86 (BasicTypeX -> USHORT .)
    BOOL            reduce using rule 86 (BasicTypeX -> USHORT .)
    SHORT           reduce using rule 86 (BasicTypeX -> USHORT .)
    USHORT          reduce using rule 86 (BasicTypeX -> USHORT .)
    INT             reduce using rule 86 (BasicTypeX -> USHORT .)
    UINT            reduce using rule 86 (BasicTypeX -> USHORT .)
    LONG            reduce using rule 86 (BasicTypeX -> USHORT .)
    ULONG           reduce using rule 86 (BasicTypeX -> USHORT .)
    CHAR            reduce using rule 86 (BasicTypeX -> USHORT .)
    FLOAT           reduce using rule 86 (BasicTypeX -> USHORT .)
    VOID            reduce using rule 86 (BasicTypeX -> USHORT .)
    TYPEOF          reduce using rule 86 (BasicTypeX -> USHORT .)
    BODY            reduce using rule 86 (BasicTypeX -> USHORT .)
    SEMICOLON       reduce using rule 86 (BasicTypeX -> USHORT .)
    POWER           reduce using rule 86 (BasicTypeX -> USHORT .)
    PLUS_PLUS       reduce using rule 86 (BasicTypeX -> USHORT .)
    MINUS_MINUS     reduce using rule 86 (BasicTypeX -> USHORT .)
    DIV             reduce using rule 86 (BasicTypeX -> USHORT .)
    MODULO          reduce using rule 86 (BasicTypeX -> USHORT .)
    PLUS            reduce using rule 86 (BasicTypeX -> USHORT .)
    MINUS           reduce using rule 86 (BasicTypeX -> USHORT .)
    LEFT_SHIFT      reduce using rule 86 (BasicTypeX -> USHORT .)
    RIGHT_SHIFT     reduce using rule 86 (BasicTypeX -> USHORT .)
    IS_EQ           reduce using rule 86 (BasicTypeX -> USHORT .)
    NOT_EQ          reduce using rule 86 (BasicTypeX -> USHORT .)
    LESS            reduce using rule 86 (BasicTypeX -> USHORT .)
    GREATER_EQ      reduce using rule 86 (BasicTypeX -> USHORT .)
    GREATER         reduce using rule 86 (BasicTypeX -> USHORT .)
    LESS_EQ         reduce using rule 86 (BasicTypeX -> USHORT .)
    AMPERSAND       reduce using rule 86 (BasicTypeX -> USHORT .)
    CARET           reduce using rule 86 (BasicTypeX -> USHORT .)
    PIPE            reduce using rule 86 (BasicTypeX -> USHORT .)
    DOUBLE_AMPERSAND reduce using rule 86 (BasicTypeX -> USHORT .)
    QUESTION        reduce using rule 86 (BasicTypeX -> USHORT .)
    DOUBLE_PIPE     reduce using rule 86 (BasicTypeX -> USHORT .)
    ASSIGN          reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_PLUS         reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_MINUS        reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_TIMES        reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_DIV          reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_MODULO       reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_AND_BIT      reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_OR_BIT       reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_XOR_BIT      reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_LEFT         reduce using rule 86 (BasicTypeX -> USHORT .)
    EQ_RIGHT        reduce using rule 86 (BasicTypeX -> USHORT .)
    RANGE           reduce using rule 86 (BasicTypeX -> USHORT .)
    RBRACE          reduce using rule 86 (BasicTypeX -> USHORT .)
    COLON           reduce using rule 86 (BasicTypeX -> USHORT .)


state 42

    (88) BasicTypeX -> UINT .

    COMMA           reduce using rule 88 (BasicTypeX -> UINT .)
    LBRACE          reduce using rule 88 (BasicTypeX -> UINT .)
    DOT             reduce using rule 88 (BasicTypeX -> UINT .)
    LPAREN          reduce using rule 88 (BasicTypeX -> UINT .)
    TIMES           reduce using rule 88 (BasicTypeX -> UINT .)
    LBRACKET        reduce using rule 88 (BasicTypeX -> UINT .)
    FUNCTION        reduce using rule 88 (BasicTypeX -> UINT .)
    IDENTIFIER      reduce using rule 88 (BasicTypeX -> UINT .)
    ELLIPSIS        reduce using rule 88 (BasicTypeX -> UINT .)
    RPAREN          reduce using rule 88 (BasicTypeX -> UINT .)
    RBRACKET        reduce using rule 88 (BasicTypeX -> UINT .)
    BOOL            reduce using rule 88 (BasicTypeX -> UINT .)
    SHORT           reduce using rule 88 (BasicTypeX -> UINT .)
    USHORT          reduce using rule 88 (BasicTypeX -> UINT .)
    INT             reduce using rule 88 (BasicTypeX -> UINT .)
    UINT            reduce using rule 88 (BasicTypeX -> UINT .)
    LONG            reduce using rule 88 (BasicTypeX -> UINT .)
    ULONG           reduce using rule 88 (BasicTypeX -> UINT .)
    CHAR            reduce using rule 88 (BasicTypeX -> UINT .)
    FLOAT           reduce using rule 88 (BasicTypeX -> UINT .)
    VOID            reduce using rule 88 (BasicTypeX -> UINT .)
    TYPEOF          reduce using rule 88 (BasicTypeX -> UINT .)
    BODY            reduce using rule 88 (BasicTypeX -> UINT .)
    SEMICOLON       reduce using rule 88 (BasicTypeX -> UINT .)
    POWER           reduce using rule 88 (BasicTypeX -> UINT .)
    PLUS_PLUS       reduce using rule 88 (BasicTypeX -> UINT .)
    MINUS_MINUS     reduce using rule 88 (BasicTypeX -> UINT .)
    DIV             reduce using rule 88 (BasicTypeX -> UINT .)
    MODULO          reduce using rule 88 (BasicTypeX -> UINT .)
    PLUS            reduce using rule 88 (BasicTypeX -> UINT .)
    MINUS           reduce using rule 88 (BasicTypeX -> UINT .)
    LEFT_SHIFT      reduce using rule 88 (BasicTypeX -> UINT .)
    RIGHT_SHIFT     reduce using rule 88 (BasicTypeX -> UINT .)
    IS_EQ           reduce using rule 88 (BasicTypeX -> UINT .)
    NOT_EQ          reduce using rule 88 (BasicTypeX -> UINT .)
    LESS            reduce using rule 88 (BasicTypeX -> UINT .)
    GREATER_EQ      reduce using rule 88 (BasicTypeX -> UINT .)
    GREATER         reduce using rule 88 (BasicTypeX -> UINT .)
    LESS_EQ         reduce using rule 88 (BasicTypeX -> UINT .)
    AMPERSAND       reduce using rule 88 (BasicTypeX -> UINT .)
    CARET           reduce using rule 88 (BasicTypeX -> UINT .)
    PIPE            reduce using rule 88 (BasicTypeX -> UINT .)
    DOUBLE_AMPERSAND reduce using rule 88 (BasicTypeX -> UINT .)
    QUESTION        reduce using rule 88 (BasicTypeX -> UINT .)
    DOUBLE_PIPE     reduce using rule 88 (BasicTypeX -> UINT .)
    ASSIGN          reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_PLUS         reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_MINUS        reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_TIMES        reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_DIV          reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_MODULO       reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_AND_BIT      reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_OR_BIT       reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_XOR_BIT      reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_LEFT         reduce using rule 88 (BasicTypeX -> UINT .)
    EQ_RIGHT        reduce using rule 88 (BasicTypeX -> UINT .)
    RANGE           reduce using rule 88 (BasicTypeX -> UINT .)
    RBRACE          reduce using rule 88 (BasicTypeX -> UINT .)
    COLON           reduce using rule 88 (BasicTypeX -> UINT .)


state 43

    (82) BasicType -> Typeof .
    (83) BasicType -> Typeof . DOT IdentifierList

  ! shift/reduce conflict for DOT resolved as shift
    TIMES           reduce using rule 82 (BasicType -> Typeof .)
    LBRACKET        reduce using rule 82 (BasicType -> Typeof .)
    FUNCTION        reduce using rule 82 (BasicType -> Typeof .)
    IDENTIFIER      reduce using rule 82 (BasicType -> Typeof .)
    LPAREN          reduce using rule 82 (BasicType -> Typeof .)
    BOOL            reduce using rule 82 (BasicType -> Typeof .)
    SHORT           reduce using rule 82 (BasicType -> Typeof .)
    USHORT          reduce using rule 82 (BasicType -> Typeof .)
    INT             reduce using rule 82 (BasicType -> Typeof .)
    UINT            reduce using rule 82 (BasicType -> Typeof .)
    LONG            reduce using rule 82 (BasicType -> Typeof .)
    ULONG           reduce using rule 82 (BasicType -> Typeof .)
    CHAR            reduce using rule 82 (BasicType -> Typeof .)
    FLOAT           reduce using rule 82 (BasicType -> Typeof .)
    VOID            reduce using rule 82 (BasicType -> Typeof .)
    TYPEOF          reduce using rule 82 (BasicType -> Typeof .)
    LBRACE          reduce using rule 82 (BasicType -> Typeof .)
    COMMA           reduce using rule 82 (BasicType -> Typeof .)
    ELLIPSIS        reduce using rule 82 (BasicType -> Typeof .)
    RPAREN          reduce using rule 82 (BasicType -> Typeof .)
    SEMICOLON       reduce using rule 82 (BasicType -> Typeof .)
    POWER           reduce using rule 82 (BasicType -> Typeof .)
    PLUS_PLUS       reduce using rule 82 (BasicType -> Typeof .)
    MINUS_MINUS     reduce using rule 82 (BasicType -> Typeof .)
    DIV             reduce using rule 82 (BasicType -> Typeof .)
    MODULO          reduce using rule 82 (BasicType -> Typeof .)
    PLUS            reduce using rule 82 (BasicType -> Typeof .)
    MINUS           reduce using rule 82 (BasicType -> Typeof .)
    LEFT_SHIFT      reduce using rule 82 (BasicType -> Typeof .)
    RIGHT_SHIFT     reduce using rule 82 (BasicType -> Typeof .)
    IS_EQ           reduce using rule 82 (BasicType -> Typeof .)
    NOT_EQ          reduce using rule 82 (BasicType -> Typeof .)
    LESS            reduce using rule 82 (BasicType -> Typeof .)
    GREATER_EQ      reduce using rule 82 (BasicType -> Typeof .)
    GREATER         reduce using rule 82 (BasicType -> Typeof .)
    LESS_EQ         reduce using rule 82 (BasicType -> Typeof .)
    AMPERSAND       reduce using rule 82 (BasicType -> Typeof .)
    CARET           reduce using rule 82 (BasicType -> Typeof .)
    PIPE            reduce using rule 82 (BasicType -> Typeof .)
    DOUBLE_AMPERSAND reduce using rule 82 (BasicType -> Typeof .)
    QUESTION        reduce using rule 82 (BasicType -> Typeof .)
    DOUBLE_PIPE     reduce using rule 82 (BasicType -> Typeof .)
    ASSIGN          reduce using rule 82 (BasicType -> Typeof .)
    EQ_PLUS         reduce using rule 82 (BasicType -> Typeof .)
    EQ_MINUS        reduce using rule 82 (BasicType -> Typeof .)
    EQ_TIMES        reduce using rule 82 (BasicType -> Typeof .)
    EQ_DIV          reduce using rule 82 (BasicType -> Typeof .)
    EQ_MODULO       reduce using rule 82 (BasicType -> Typeof .)
    EQ_AND_BIT      reduce using rule 82 (BasicType -> Typeof .)
    EQ_OR_BIT       reduce using rule 82 (BasicType -> Typeof .)
    EQ_XOR_BIT      reduce using rule 82 (BasicType -> Typeof .)
    EQ_LEFT         reduce using rule 82 (BasicType -> Typeof .)
    EQ_RIGHT        reduce using rule 82 (BasicType -> Typeof .)
    RBRACKET        reduce using rule 82 (BasicType -> Typeof .)
    RANGE           reduce using rule 82 (BasicType -> Typeof .)
    RBRACE          reduce using rule 82 (BasicType -> Typeof .)
    COLON           reduce using rule 82 (BasicType -> Typeof .)
    BODY            reduce using rule 82 (BasicType -> Typeof .)
    DOT             shift and go to state 93

  ! DOT             [ reduce using rule 82 (BasicType -> Typeof .) ]


state 44

    (87) BasicTypeX -> INT .

    COMMA           reduce using rule 87 (BasicTypeX -> INT .)
    LBRACE          reduce using rule 87 (BasicTypeX -> INT .)
    DOT             reduce using rule 87 (BasicTypeX -> INT .)
    LPAREN          reduce using rule 87 (BasicTypeX -> INT .)
    TIMES           reduce using rule 87 (BasicTypeX -> INT .)
    LBRACKET        reduce using rule 87 (BasicTypeX -> INT .)
    FUNCTION        reduce using rule 87 (BasicTypeX -> INT .)
    IDENTIFIER      reduce using rule 87 (BasicTypeX -> INT .)
    ELLIPSIS        reduce using rule 87 (BasicTypeX -> INT .)
    RPAREN          reduce using rule 87 (BasicTypeX -> INT .)
    RBRACKET        reduce using rule 87 (BasicTypeX -> INT .)
    BOOL            reduce using rule 87 (BasicTypeX -> INT .)
    SHORT           reduce using rule 87 (BasicTypeX -> INT .)
    USHORT          reduce using rule 87 (BasicTypeX -> INT .)
    INT             reduce using rule 87 (BasicTypeX -> INT .)
    UINT            reduce using rule 87 (BasicTypeX -> INT .)
    LONG            reduce using rule 87 (BasicTypeX -> INT .)
    ULONG           reduce using rule 87 (BasicTypeX -> INT .)
    CHAR            reduce using rule 87 (BasicTypeX -> INT .)
    FLOAT           reduce using rule 87 (BasicTypeX -> INT .)
    VOID            reduce using rule 87 (BasicTypeX -> INT .)
    TYPEOF          reduce using rule 87 (BasicTypeX -> INT .)
    BODY            reduce using rule 87 (BasicTypeX -> INT .)
    SEMICOLON       reduce using rule 87 (BasicTypeX -> INT .)
    POWER           reduce using rule 87 (BasicTypeX -> INT .)
    PLUS_PLUS       reduce using rule 87 (BasicTypeX -> INT .)
    MINUS_MINUS     reduce using rule 87 (BasicTypeX -> INT .)
    DIV             reduce using rule 87 (BasicTypeX -> INT .)
    MODULO          reduce using rule 87 (BasicTypeX -> INT .)
    PLUS            reduce using rule 87 (BasicTypeX -> INT .)
    MINUS           reduce using rule 87 (BasicTypeX -> INT .)
    LEFT_SHIFT      reduce using rule 87 (BasicTypeX -> INT .)
    RIGHT_SHIFT     reduce using rule 87 (BasicTypeX -> INT .)
    IS_EQ           reduce using rule 87 (BasicTypeX -> INT .)
    NOT_EQ          reduce using rule 87 (BasicTypeX -> INT .)
    LESS            reduce using rule 87 (BasicTypeX -> INT .)
    GREATER_EQ      reduce using rule 87 (BasicTypeX -> INT .)
    GREATER         reduce using rule 87 (BasicTypeX -> INT .)
    LESS_EQ         reduce using rule 87 (BasicTypeX -> INT .)
    AMPERSAND       reduce using rule 87 (BasicTypeX -> INT .)
    CARET           reduce using rule 87 (BasicTypeX -> INT .)
    PIPE            reduce using rule 87 (BasicTypeX -> INT .)
    DOUBLE_AMPERSAND reduce using rule 87 (BasicTypeX -> INT .)
    QUESTION        reduce using rule 87 (BasicTypeX -> INT .)
    DOUBLE_PIPE     reduce using rule 87 (BasicTypeX -> INT .)
    ASSIGN          reduce using rule 87 (BasicTypeX -> INT .)
    EQ_PLUS         reduce using rule 87 (BasicTypeX -> INT .)
    EQ_MINUS        reduce using rule 87 (BasicTypeX -> INT .)
    EQ_TIMES        reduce using rule 87 (BasicTypeX -> INT .)
    EQ_DIV          reduce using rule 87 (BasicTypeX -> INT .)
    EQ_MODULO       reduce using rule 87 (BasicTypeX -> INT .)
    EQ_AND_BIT      reduce using rule 87 (BasicTypeX -> INT .)
    EQ_OR_BIT       reduce using rule 87 (BasicTypeX -> INT .)
    EQ_XOR_BIT      reduce using rule 87 (BasicTypeX -> INT .)
    EQ_LEFT         reduce using rule 87 (BasicTypeX -> INT .)
    EQ_RIGHT        reduce using rule 87 (BasicTypeX -> INT .)
    RANGE           reduce using rule 87 (BasicTypeX -> INT .)
    RBRACE          reduce using rule 87 (BasicTypeX -> INT .)
    COLON           reduce using rule 87 (BasicTypeX -> INT .)


state 45

    (92) BasicTypeX -> FLOAT .

    COMMA           reduce using rule 92 (BasicTypeX -> FLOAT .)
    LBRACE          reduce using rule 92 (BasicTypeX -> FLOAT .)
    DOT             reduce using rule 92 (BasicTypeX -> FLOAT .)
    LPAREN          reduce using rule 92 (BasicTypeX -> FLOAT .)
    TIMES           reduce using rule 92 (BasicTypeX -> FLOAT .)
    LBRACKET        reduce using rule 92 (BasicTypeX -> FLOAT .)
    FUNCTION        reduce using rule 92 (BasicTypeX -> FLOAT .)
    IDENTIFIER      reduce using rule 92 (BasicTypeX -> FLOAT .)
    ELLIPSIS        reduce using rule 92 (BasicTypeX -> FLOAT .)
    RPAREN          reduce using rule 92 (BasicTypeX -> FLOAT .)
    RBRACKET        reduce using rule 92 (BasicTypeX -> FLOAT .)
    BOOL            reduce using rule 92 (BasicTypeX -> FLOAT .)
    SHORT           reduce using rule 92 (BasicTypeX -> FLOAT .)
    USHORT          reduce using rule 92 (BasicTypeX -> FLOAT .)
    INT             reduce using rule 92 (BasicTypeX -> FLOAT .)
    UINT            reduce using rule 92 (BasicTypeX -> FLOAT .)
    LONG            reduce using rule 92 (BasicTypeX -> FLOAT .)
    ULONG           reduce using rule 92 (BasicTypeX -> FLOAT .)
    CHAR            reduce using rule 92 (BasicTypeX -> FLOAT .)
    FLOAT           reduce using rule 92 (BasicTypeX -> FLOAT .)
    VOID            reduce using rule 92 (BasicTypeX -> FLOAT .)
    TYPEOF          reduce using rule 92 (BasicTypeX -> FLOAT .)
    BODY            reduce using rule 92 (BasicTypeX -> FLOAT .)
    SEMICOLON       reduce using rule 92 (BasicTypeX -> FLOAT .)
    POWER           reduce using rule 92 (BasicTypeX -> FLOAT .)
    PLUS_PLUS       reduce using rule 92 (BasicTypeX -> FLOAT .)
    MINUS_MINUS     reduce using rule 92 (BasicTypeX -> FLOAT .)
    DIV             reduce using rule 92 (BasicTypeX -> FLOAT .)
    MODULO          reduce using rule 92 (BasicTypeX -> FLOAT .)
    PLUS            reduce using rule 92 (BasicTypeX -> FLOAT .)
    MINUS           reduce using rule 92 (BasicTypeX -> FLOAT .)
    LEFT_SHIFT      reduce using rule 92 (BasicTypeX -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 92 (BasicTypeX -> FLOAT .)
    IS_EQ           reduce using rule 92 (BasicTypeX -> FLOAT .)
    NOT_EQ          reduce using rule 92 (BasicTypeX -> FLOAT .)
    LESS            reduce using rule 92 (BasicTypeX -> FLOAT .)
    GREATER_EQ      reduce using rule 92 (BasicTypeX -> FLOAT .)
    GREATER         reduce using rule 92 (BasicTypeX -> FLOAT .)
    LESS_EQ         reduce using rule 92 (BasicTypeX -> FLOAT .)
    AMPERSAND       reduce using rule 92 (BasicTypeX -> FLOAT .)
    CARET           reduce using rule 92 (BasicTypeX -> FLOAT .)
    PIPE            reduce using rule 92 (BasicTypeX -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 92 (BasicTypeX -> FLOAT .)
    QUESTION        reduce using rule 92 (BasicTypeX -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 92 (BasicTypeX -> FLOAT .)
    ASSIGN          reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_PLUS         reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_MINUS        reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_TIMES        reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_DIV          reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_MODULO       reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_AND_BIT      reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_OR_BIT       reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_XOR_BIT      reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_LEFT         reduce using rule 92 (BasicTypeX -> FLOAT .)
    EQ_RIGHT        reduce using rule 92 (BasicTypeX -> FLOAT .)
    RANGE           reduce using rule 92 (BasicTypeX -> FLOAT .)
    RBRACE          reduce using rule 92 (BasicTypeX -> FLOAT .)
    COLON           reduce using rule 92 (BasicTypeX -> FLOAT .)


state 46

    (84) BasicTypeX -> BOOL .

    COMMA           reduce using rule 84 (BasicTypeX -> BOOL .)
    LBRACE          reduce using rule 84 (BasicTypeX -> BOOL .)
    DOT             reduce using rule 84 (BasicTypeX -> BOOL .)
    LPAREN          reduce using rule 84 (BasicTypeX -> BOOL .)
    TIMES           reduce using rule 84 (BasicTypeX -> BOOL .)
    LBRACKET        reduce using rule 84 (BasicTypeX -> BOOL .)
    FUNCTION        reduce using rule 84 (BasicTypeX -> BOOL .)
    IDENTIFIER      reduce using rule 84 (BasicTypeX -> BOOL .)
    ELLIPSIS        reduce using rule 84 (BasicTypeX -> BOOL .)
    RPAREN          reduce using rule 84 (BasicTypeX -> BOOL .)
    RBRACKET        reduce using rule 84 (BasicTypeX -> BOOL .)
    BOOL            reduce using rule 84 (BasicTypeX -> BOOL .)
    SHORT           reduce using rule 84 (BasicTypeX -> BOOL .)
    USHORT          reduce using rule 84 (BasicTypeX -> BOOL .)
    INT             reduce using rule 84 (BasicTypeX -> BOOL .)
    UINT            reduce using rule 84 (BasicTypeX -> BOOL .)
    LONG            reduce using rule 84 (BasicTypeX -> BOOL .)
    ULONG           reduce using rule 84 (BasicTypeX -> BOOL .)
    CHAR            reduce using rule 84 (BasicTypeX -> BOOL .)
    FLOAT           reduce using rule 84 (BasicTypeX -> BOOL .)
    VOID            reduce using rule 84 (BasicTypeX -> BOOL .)
    TYPEOF          reduce using rule 84 (BasicTypeX -> BOOL .)
    BODY            reduce using rule 84 (BasicTypeX -> BOOL .)
    SEMICOLON       reduce using rule 84 (BasicTypeX -> BOOL .)
    POWER           reduce using rule 84 (BasicTypeX -> BOOL .)
    PLUS_PLUS       reduce using rule 84 (BasicTypeX -> BOOL .)
    MINUS_MINUS     reduce using rule 84 (BasicTypeX -> BOOL .)
    DIV             reduce using rule 84 (BasicTypeX -> BOOL .)
    MODULO          reduce using rule 84 (BasicTypeX -> BOOL .)
    PLUS            reduce using rule 84 (BasicTypeX -> BOOL .)
    MINUS           reduce using rule 84 (BasicTypeX -> BOOL .)
    LEFT_SHIFT      reduce using rule 84 (BasicTypeX -> BOOL .)
    RIGHT_SHIFT     reduce using rule 84 (BasicTypeX -> BOOL .)
    IS_EQ           reduce using rule 84 (BasicTypeX -> BOOL .)
    NOT_EQ          reduce using rule 84 (BasicTypeX -> BOOL .)
    LESS            reduce using rule 84 (BasicTypeX -> BOOL .)
    GREATER_EQ      reduce using rule 84 (BasicTypeX -> BOOL .)
    GREATER         reduce using rule 84 (BasicTypeX -> BOOL .)
    LESS_EQ         reduce using rule 84 (BasicTypeX -> BOOL .)
    AMPERSAND       reduce using rule 84 (BasicTypeX -> BOOL .)
    CARET           reduce using rule 84 (BasicTypeX -> BOOL .)
    PIPE            reduce using rule 84 (BasicTypeX -> BOOL .)
    DOUBLE_AMPERSAND reduce using rule 84 (BasicTypeX -> BOOL .)
    QUESTION        reduce using rule 84 (BasicTypeX -> BOOL .)
    DOUBLE_PIPE     reduce using rule 84 (BasicTypeX -> BOOL .)
    ASSIGN          reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_PLUS         reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_MINUS        reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_TIMES        reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_DIV          reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_MODULO       reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_AND_BIT      reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_OR_BIT       reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_XOR_BIT      reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_LEFT         reduce using rule 84 (BasicTypeX -> BOOL .)
    EQ_RIGHT        reduce using rule 84 (BasicTypeX -> BOOL .)
    RANGE           reduce using rule 84 (BasicTypeX -> BOOL .)
    RBRACE          reduce using rule 84 (BasicTypeX -> BOOL .)
    COLON           reduce using rule 84 (BasicTypeX -> BOOL .)


state 47

    (141) Typeof -> TYPEOF . LPAREN Expression RPAREN
    (142) Typeof -> TYPEOF . LPAREN RETURN RPAREN

    LPAREN          shift and go to state 94


state 48

    (410) ClassDeclaration -> CLASS IDENTIFIER . SEMICOLON
    (411) ClassDeclaration -> CLASS IDENTIFIER . BaseClassList_opt class_m1 AggregateBody class_m2
    (417) BaseClassList_opt -> . BaseClassList
    (418) BaseClassList_opt -> . empty
    (414) BaseClassList -> . COLON SuperClass
    (415) BaseClassList -> . COLON SuperClass COMMA Interfaces
    (416) BaseClassList -> . COLON Interfaces
    (496) empty -> .

    SEMICOLON       shift and go to state 95
    COLON           shift and go to state 97
    LBRACE          reduce using rule 496 (empty -> .)

    BaseClassList                  shift and go to state 96
    BaseClassList_opt              shift and go to state 98
    empty                          shift and go to state 99

state 49

    (448) AnonymousEnumDeclaration -> ENUM LBRACE . EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> ENUM LBRACE . AnonymousEnumMembers RBRACE
    (442) EnumMembers -> . EnumMember
    (443) EnumMembers -> . EnumMember COMMA
    (444) EnumMembers -> . EnumMember COMMA EnumMembers
    (450) AnonymousEnumMembers -> . AnonymousEnumMember
    (451) AnonymousEnumMembers -> . AnonymousEnumMember COMMA
    (452) AnonymousEnumMembers -> . AnonymousEnumMember COMMA AnonymousEnumMembers
    (445) EnumMember -> . IDENTIFIER
    (446) EnumMember -> . IDENTIFIER ASSIGN AssignExpression
    (453) AnonymousEnumMember -> . EnumMember
    (454) AnonymousEnumMember -> . Type IDENTIFIER ASSIGN AssignExpression
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    IDENTIFIER      shift and go to state 104
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47

    EnumMembers                    shift and go to state 100
    BasicType                      shift and go to state 102
    AnonymousEnumMembers           shift and go to state 103
    AnonymousEnumMember            shift and go to state 106
    EnumMember                     shift and go to state 105
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    Type                           shift and go to state 101

state 50

    (447) AnonymousEnumDeclaration -> ENUM COLON . EnumBaseType LBRACE EnumMembers RBRACE
    (439) EnumBaseType -> . Type
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 102
    EnumBaseType                   shift and go to state 108
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    BasicTypeX                     shift and go to state 39
    Type                           shift and go to state 107

state 51

    (436) EnumDeclaration -> ENUM IDENTIFIER . EnumBody
    (437) EnumDeclaration -> ENUM IDENTIFIER . COLON EnumBaseType EnumBody
    (440) EnumBody -> . LBRACE EnumMembers RBRACE
    (441) EnumBody -> . SEMICOLON

    COLON           shift and go to state 111
    LBRACE          shift and go to state 109
    SEMICOLON       shift and go to state 110

    EnumBody                       shift and go to state 112

state 52

    (409) AggregateBody -> LBRACE . DeclDefs_opt RBRACE
    (5) DeclDefs_opt -> . DeclDefs
    (6) DeclDefs_opt -> . empty
    (3) DeclDefs -> . DeclDef
    (4) DeclDefs -> . DeclDef DeclDefs
    (496) empty -> .
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (144) AttributeSpecifier -> . Attribute COLON
    (145) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (423) Allocator -> . NEW Parameters SEMICOLON
    (424) Allocator -> . NEW Parameters FunctionBody
    (425) Deallocator -> . DELETE Parameters SEMICOLON
    (426) Deallocator -> . DELETE Parameters FunctionBody
    (427) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (146) Attribute -> . VisibilityAttribute
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (149) VisibilityAttribute -> . PRIVATE
    (150) VisibilityAttribute -> . PROTECTED
    (151) VisibilityAttribute -> . PUBLIC
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

    RBRACE          reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    SEMICOLON       shift and go to state 116
    NEW             shift and go to state 113
    DELETE          shift and go to state 132
    ALIAS           shift and go to state 126
    MIXIN           shift and go to state 130
    ENUM            shift and go to state 17
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    PRIVATE         shift and go to state 120
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 128
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 114
    StorageClasses_opt             shift and go to state 9
    DeclDefs                       shift and go to state 117
    VisibilityAttribute            shift and go to state 118
    DeclDefs_opt                   shift and go to state 119
    AliasThis                      shift and go to state 121
    DeclDef                        shift and go to state 122
    Deallocator                    shift and go to state 123
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    empty                          shift and go to state 124
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 115
    Declaration                    shift and go to state 125
    AnonymousEnumDeclaration       shift and go to state 21
    AnonUnionDeclaration           shift and go to state 23
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 127
    UnionDeclaration               shift and go to state 25
    ImportDeclaration              shift and go to state 10
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 131
    StorageClass                   shift and go to state 28

state 53

    (408) AnonUnionDeclaration -> UNION AggregateBody .

    SEMICOLON       reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    CASE            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    DEFAULT         reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    LBRACE          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    IDENTIFIER      reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    IF              reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    WHILE           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    DO              reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    FOR             reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    SWITCH          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    FINAL           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    CONTINUE        reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    BREAK           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    RETURN          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    GOTO            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    WITH            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    MIXIN           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    IMPORT          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    STATIC          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    LPAREN          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    ALIAS           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    ENUM            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    EXTERN          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    AUTO            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    CONST           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    IMMUTABLE       reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    FOREACH         reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    FOREACH_REVERSE reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    CLASS           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    UNION           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    AMPERSAND       reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    PLUS_PLUS       reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    MINUS_MINUS     reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    TIMES           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    MINUS           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    PLUS            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    EXCLAMATION     reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    TILDE           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    CAST            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    DOT             reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    THIS            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    NULL            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    TRUE            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    FALSE           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    DOLLAR          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    INUMBER         reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    DNUMBER         reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    LIT_CHAR        reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    LIT_STR         reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    LBRACKET        reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    FUNCTION        reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    NEW             reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    BOOL            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    SHORT           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    USHORT          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    INT             reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    UINT            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    LONG            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    ULONG           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    CHAR            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    FLOAT           reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    VOID            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    TYPEOF          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    TYPEID          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    BODY            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    RBRACE          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    ELSE            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    $end            reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    DELETE          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    PRIVATE         reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    PROTECTED       reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)
    PUBLIC          reduce using rule 408 (AnonUnionDeclaration -> UNION AggregateBody .)


state 54

    (405) UnionDeclaration -> UNION IDENTIFIER . SEMICOLON
    (406) UnionDeclaration -> UNION IDENTIFIER . AggregateBody
    (409) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    SEMICOLON       shift and go to state 134
    LBRACE          shift and go to state 52

    AggregateBody                  shift and go to state 133

state 55

    (1) Declaration_mult -> Declaration Declaration_mult .

    $end            reduce using rule 1 (Declaration_mult -> Declaration Declaration_mult .)


state 56

    (109) StorageClass -> STATIC .

    ENUM            reduce using rule 109 (StorageClass -> STATIC .)
    STATIC          reduce using rule 109 (StorageClass -> STATIC .)
    EXTERN          reduce using rule 109 (StorageClass -> STATIC .)
    FINAL           reduce using rule 109 (StorageClass -> STATIC .)
    AUTO            reduce using rule 109 (StorageClass -> STATIC .)
    CONST           reduce using rule 109 (StorageClass -> STATIC .)
    IMMUTABLE       reduce using rule 109 (StorageClass -> STATIC .)
    DOT             reduce using rule 109 (StorageClass -> STATIC .)
    BOOL            reduce using rule 109 (StorageClass -> STATIC .)
    SHORT           reduce using rule 109 (StorageClass -> STATIC .)
    USHORT          reduce using rule 109 (StorageClass -> STATIC .)
    INT             reduce using rule 109 (StorageClass -> STATIC .)
    UINT            reduce using rule 109 (StorageClass -> STATIC .)
    LONG            reduce using rule 109 (StorageClass -> STATIC .)
    ULONG           reduce using rule 109 (StorageClass -> STATIC .)
    CHAR            reduce using rule 109 (StorageClass -> STATIC .)
    FLOAT           reduce using rule 109 (StorageClass -> STATIC .)
    VOID            reduce using rule 109 (StorageClass -> STATIC .)
    IDENTIFIER      reduce using rule 109 (StorageClass -> STATIC .)
    TYPEOF          reduce using rule 109 (StorageClass -> STATIC .)
    ALIAS           reduce using rule 109 (StorageClass -> STATIC .)
    IMPORT          reduce using rule 109 (StorageClass -> STATIC .)
    CLASS           reduce using rule 109 (StorageClass -> STATIC .)
    UNION           reduce using rule 109 (StorageClass -> STATIC .)


state 57

    (134) AliasDeclaration -> ALIAS StorageClasses_opt . BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> ALIAS StorageClasses_opt . BasicType FuncDeclarator SEMICOLON
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 135
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34

state 58

    (137) AliasDeclarationX -> AliasDeclarationY .

    SEMICOLON       reduce using rule 137 (AliasDeclarationX -> AliasDeclarationY .)
    COMMA           reduce using rule 137 (AliasDeclarationX -> AliasDeclarationY .)


state 59

    (136) AliasDeclaration -> ALIAS AliasDeclarationX . SEMICOLON
    (138) AliasDeclarationX -> AliasDeclarationX . COMMA AliasDeclarationY

    SEMICOLON       shift and go to state 137
    COMMA           shift and go to state 136


state 60

    (132) StorageClasses_opt -> StorageClasses .

    DOT             reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    BOOL            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    SHORT           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    USHORT          reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    INT             reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    UINT            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    LONG            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    ULONG           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    CHAR            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    FLOAT           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    VOID            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    IDENTIFIER      reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    TYPEOF          reduce using rule 132 (StorageClasses_opt -> StorageClasses .)


state 61

    (139) AliasDeclarationY -> IDENTIFIER . ASSIGN StorageClasses_opt Type
    (140) AliasDeclarationY -> IDENTIFIER . ASSIGN FunctionLiteral

    ASSIGN          shift and go to state 138


state 62

    (133) StorageClasses_opt -> empty .

    DOT             reduce using rule 133 (StorageClasses_opt -> empty .)
    BOOL            reduce using rule 133 (StorageClasses_opt -> empty .)
    SHORT           reduce using rule 133 (StorageClasses_opt -> empty .)
    USHORT          reduce using rule 133 (StorageClasses_opt -> empty .)
    INT             reduce using rule 133 (StorageClasses_opt -> empty .)
    UINT            reduce using rule 133 (StorageClasses_opt -> empty .)
    LONG            reduce using rule 133 (StorageClasses_opt -> empty .)
    ULONG           reduce using rule 133 (StorageClasses_opt -> empty .)
    CHAR            reduce using rule 133 (StorageClasses_opt -> empty .)
    FLOAT           reduce using rule 133 (StorageClasses_opt -> empty .)
    VOID            reduce using rule 133 (StorageClasses_opt -> empty .)
    IDENTIFIER      reduce using rule 133 (StorageClasses_opt -> empty .)
    TYPEOF          reduce using rule 133 (StorageClasses_opt -> empty .)


state 63

    (108) StorageClass -> ENUM .

    ENUM            reduce using rule 108 (StorageClass -> ENUM .)
    STATIC          reduce using rule 108 (StorageClass -> ENUM .)
    EXTERN          reduce using rule 108 (StorageClass -> ENUM .)
    FINAL           reduce using rule 108 (StorageClass -> ENUM .)
    AUTO            reduce using rule 108 (StorageClass -> ENUM .)
    CONST           reduce using rule 108 (StorageClass -> ENUM .)
    IMMUTABLE       reduce using rule 108 (StorageClass -> ENUM .)
    DOT             reduce using rule 108 (StorageClass -> ENUM .)
    BOOL            reduce using rule 108 (StorageClass -> ENUM .)
    SHORT           reduce using rule 108 (StorageClass -> ENUM .)
    USHORT          reduce using rule 108 (StorageClass -> ENUM .)
    INT             reduce using rule 108 (StorageClass -> ENUM .)
    UINT            reduce using rule 108 (StorageClass -> ENUM .)
    LONG            reduce using rule 108 (StorageClass -> ENUM .)
    ULONG           reduce using rule 108 (StorageClass -> ENUM .)
    CHAR            reduce using rule 108 (StorageClass -> ENUM .)
    FLOAT           reduce using rule 108 (StorageClass -> ENUM .)
    VOID            reduce using rule 108 (StorageClass -> ENUM .)
    IDENTIFIER      reduce using rule 108 (StorageClass -> ENUM .)
    TYPEOF          reduce using rule 108 (StorageClass -> ENUM .)
    ALIAS           reduce using rule 108 (StorageClass -> ENUM .)
    IMPORT          reduce using rule 108 (StorageClass -> ENUM .)
    CLASS           reduce using rule 108 (StorageClass -> ENUM .)
    UNION           reduce using rule 108 (StorageClass -> ENUM .)


state 64

    (25) Import -> ModuleFullyQualifiedName .

    COMMA           reduce using rule 25 (Import -> ModuleFullyQualifiedName .)
    COLON           reduce using rule 25 (Import -> ModuleFullyQualifiedName .)
    SEMICOLON       reduce using rule 25 (Import -> ModuleFullyQualifiedName .)


state 65

    (23) ImportList -> ImportBindings .

    SEMICOLON       reduce using rule 23 (ImportList -> ImportBindings .)


state 66

    (26) Import -> ModuleAliasIdentifier . ASSIGN ModuleFullyQualifiedName

    ASSIGN          shift and go to state 139


state 67

    (20) ImportDeclaration -> IMPORT ImportList . SEMICOLON

    SEMICOLON       shift and go to state 140


state 68

    (17) Packages -> PackageName .

    DOT             reduce using rule 17 (Packages -> PackageName .)


state 69

    (32) ModuleAliasIdentifier -> IDENTIFIER .
    (16) ModuleName -> IDENTIFIER .
    (19) PackageName -> IDENTIFIER .

    ASSIGN          reduce using rule 32 (ModuleAliasIdentifier -> IDENTIFIER .)
    COMMA           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    COLON           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 16 (ModuleName -> IDENTIFIER .)
    DOT             reduce using rule 19 (PackageName -> IDENTIFIER .)


state 70

    (22) ImportList -> Import .
    (24) ImportList -> Import . COMMA ImportList
    (27) ImportBindings -> Import . COLON ImportBindList

    SEMICOLON       reduce using rule 22 (ImportList -> Import .)
    COMMA           shift and go to state 142
    COLON           shift and go to state 141


state 71

    (15) ModuleFullyQualifiedName -> Packages . DOT ModuleName
    (18) Packages -> Packages . DOT PackageName

    DOT             shift and go to state 143


state 72

    (14) ModuleFullyQualifiedName -> ModuleName .

    COMMA           reduce using rule 14 (ModuleFullyQualifiedName -> ModuleName .)
    COLON           reduce using rule 14 (ModuleFullyQualifiedName -> ModuleName .)
    SEMICOLON       reduce using rule 14 (ModuleFullyQualifiedName -> ModuleName .)


state 73

    (107) StorageClasses -> StorageClass StorageClasses .

    IDENTIFIER      reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    ALIAS           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    ENUM            reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    IMPORT          reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    STATIC          reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    CLASS           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    UNION           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    EXTERN          reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    FINAL           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    AUTO            reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    CONST           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    IMMUTABLE       reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    DOT             reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    BOOL            reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    SHORT           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    USHORT          reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    INT             reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    UINT            reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    LONG            reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    ULONG           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    CHAR            reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    FLOAT           reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    VOID            reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)
    TYPEOF          reduce using rule 107 (StorageClasses -> StorageClass StorageClasses .)


state 74

    (460) AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix . FunctionBody
    (489) FunctionBody -> . BlockStatement
    (490) FunctionBody -> . BodyStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    FunctionBody                   shift and go to state 144
    BlockStatement                 shift and go to state 147
    BodyStatement                  shift and go to state 148

state 75

    (463) FuncDeclaratorSuffix -> Parameters . MemberFunctionAttributes_opt
    (484) MemberFunctionAttributes_opt -> . MemberFunctionAttributes
    (485) MemberFunctionAttributes_opt -> . empty
    (482) MemberFunctionAttributes -> . MemberFunctionAttribute
    (483) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (496) empty -> .
    (486) MemberFunctionAttribute -> . CONST
    (487) MemberFunctionAttribute -> . IMMUTABLE
    (488) MemberFunctionAttribute -> . RETURN

    LBRACE          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)
    CONST           shift and go to state 150
    IMMUTABLE       shift and go to state 154
    RETURN          shift and go to state 149

    MemberFunctionAttributes       shift and go to state 153
    MemberFunctionAttributes_opt   shift and go to state 151
    empty                          shift and go to state 155
    MemberFunctionAttribute        shift and go to state 152

state 76

    (464) Parameters -> LPAREN . ParameterList_opt RPAREN
    (468) ParameterList_opt -> . ParameterList
    (469) ParameterList_opt -> . empty
    (465) ParameterList -> . Parameter
    (466) ParameterList -> . Parameter COMMA ParameterList
    (467) ParameterList -> . ELLIPSIS
    (496) empty -> .
    (470) Parameter -> . InOut_opt BasicType Declarator
    (471) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (472) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (473) Parameter -> . InOut_opt Type
    (474) Parameter -> . InOut_opt Type ELLIPSIS
    (480) InOut_opt -> . InOut
    (481) InOut_opt -> . empty
    (475) InOut -> . InOutX
    (476) InOut -> . InOut InOutX
    (477) InOutX -> . AUTO
    (478) InOutX -> . FINAL
    (479) InOutX -> . SCOPE

    ELLIPSIS        shift and go to state 162
    RPAREN          reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AUTO            shift and go to state 157
    FINAL           shift and go to state 159
    SCOPE           shift and go to state 158

    InOut_opt                      shift and go to state 156
    InOutX                         shift and go to state 164
    ParameterList                  shift and go to state 160
    InOut                          shift and go to state 161
    ParameterList_opt              shift and go to state 163
    Parameter                      shift and go to state 165
    empty                          shift and go to state 166

state 77

    (21) ImportDeclaration -> STATIC IMPORT ImportList . SEMICOLON

    SEMICOLON       shift and go to state 167


state 78

    (80) BasicType -> DOT IdentifierList .

    LPAREN          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    TIMES           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    LBRACKET        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    FUNCTION        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    IDENTIFIER      reduce using rule 80 (BasicType -> DOT IdentifierList .)
    DOT             reduce using rule 80 (BasicType -> DOT IdentifierList .)
    BOOL            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    SHORT           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    USHORT          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    INT             reduce using rule 80 (BasicType -> DOT IdentifierList .)
    UINT            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    LONG            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    ULONG           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    CHAR            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    FLOAT           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    VOID            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    TYPEOF          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    LBRACE          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    COMMA           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    ELLIPSIS        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    RPAREN          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    SEMICOLON       reduce using rule 80 (BasicType -> DOT IdentifierList .)
    POWER           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 80 (BasicType -> DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 80 (BasicType -> DOT IdentifierList .)
    DIV             reduce using rule 80 (BasicType -> DOT IdentifierList .)
    MODULO          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    PLUS            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    MINUS           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 80 (BasicType -> DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 80 (BasicType -> DOT IdentifierList .)
    IS_EQ           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    NOT_EQ          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    LESS            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    GREATER_EQ      reduce using rule 80 (BasicType -> DOT IdentifierList .)
    GREATER         reduce using rule 80 (BasicType -> DOT IdentifierList .)
    LESS_EQ         reduce using rule 80 (BasicType -> DOT IdentifierList .)
    AMPERSAND       reduce using rule 80 (BasicType -> DOT IdentifierList .)
    CARET           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    PIPE            reduce using rule 80 (BasicType -> DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 80 (BasicType -> DOT IdentifierList .)
    QUESTION        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 80 (BasicType -> DOT IdentifierList .)
    ASSIGN          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_PLUS         reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_MINUS        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_TIMES        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_DIV          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_MODULO       reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_LEFT         reduce using rule 80 (BasicType -> DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    RBRACKET        reduce using rule 80 (BasicType -> DOT IdentifierList .)
    RANGE           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    RBRACE          reduce using rule 80 (BasicType -> DOT IdentifierList .)
    COLON           reduce using rule 80 (BasicType -> DOT IdentifierList .)
    BODY            reduce using rule 80 (BasicType -> DOT IdentifierList .)


state 79

    (43) DeclaratorInitializer -> VarDeclarator .
    (44) DeclaratorInitializer -> VarDeclarator . ASSIGN Initializer

    COMMA           reduce using rule 43 (DeclaratorInitializer -> VarDeclarator .)
    SEMICOLON       reduce using rule 43 (DeclaratorInitializer -> VarDeclarator .)
    ASSIGN          shift and go to state 168


state 80

    (98) BasicType2X -> LBRACKET . RBRACKET
    (99) BasicType2X -> LBRACKET . AssignExpression RBRACKET
    (100) BasicType2X -> LBRACKET . AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> LBRACKET . Type RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (76) Type -> . BasicType BasicType2_opt
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RBRACKET        shift and go to state 232
    DOT             shift and go to state 203
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 214
    TYPEOF          shift and go to state 47
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 189
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    Type                           shift and go to state 191
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 207
    BasicTypeX                     shift and go to state 222
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 196
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 233

state 81

    (40) VarDeclarations -> StorageClasses_opt BasicType Declarators . SEMICOLON

    SEMICOLON       shift and go to state 234


state 82

    (461) FuncDeclarator -> BasicType2_opt . IDENTIFIER func_m3 FuncDeclaratorSuffix
    (60) VarDeclarator -> BasicType2_opt . IDENTIFIER
    (61) AltDeclarator -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes

    IDENTIFIER      shift and go to state 236
    LPAREN          shift and go to state 235


state 83

    (41) Declarators -> DeclaratorInitializer .
    (42) Declarators -> DeclaratorInitializer . COMMA DeclaratorIdentifierList

    SEMICOLON       reduce using rule 41 (Declarators -> DeclaratorInitializer .)
    COMMA           shift and go to state 237


state 84

    (94) BasicType2 -> BasicType2X . BasicType2_opt
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    COMMA           reduce using rule 496 (empty -> .)
    RPAREN          reduce using rule 496 (empty -> .)
    POWER           reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    DIV             reduce using rule 496 (empty -> .)
    MODULO          reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    LEFT_SHIFT      reduce using rule 496 (empty -> .)
    RIGHT_SHIFT     reduce using rule 496 (empty -> .)
    IS_EQ           reduce using rule 496 (empty -> .)
    NOT_EQ          reduce using rule 496 (empty -> .)
    LESS            reduce using rule 496 (empty -> .)
    GREATER_EQ      reduce using rule 496 (empty -> .)
    GREATER         reduce using rule 496 (empty -> .)
    LESS_EQ         reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    CARET           reduce using rule 496 (empty -> .)
    PIPE            reduce using rule 496 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 496 (empty -> .)
    QUESTION        reduce using rule 496 (empty -> .)
    DOUBLE_PIPE     reduce using rule 496 (empty -> .)
    ASSIGN          reduce using rule 496 (empty -> .)
    EQ_PLUS         reduce using rule 496 (empty -> .)
    EQ_MINUS        reduce using rule 496 (empty -> .)
    EQ_TIMES        reduce using rule 496 (empty -> .)
    EQ_DIV          reduce using rule 496 (empty -> .)
    EQ_MODULO       reduce using rule 496 (empty -> .)
    EQ_AND_BIT      reduce using rule 496 (empty -> .)
    EQ_OR_BIT       reduce using rule 496 (empty -> .)
    EQ_XOR_BIT      reduce using rule 496 (empty -> .)
    EQ_LEFT         reduce using rule 496 (empty -> .)
    EQ_RIGHT        reduce using rule 496 (empty -> .)
    RBRACKET        reduce using rule 496 (empty -> .)
    RANGE           reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    COLON           reduce using rule 496 (empty -> .)
    ELLIPSIS        reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

  ! LBRACKET        [ reduce using rule 496 (empty -> .) ]
  ! TIMES           [ reduce using rule 496 (empty -> .) ]

    BasicType2_opt                 shift and go to state 238
    BasicType2X                    shift and go to state 84
    BasicType2                     shift and go to state 90
    empty                          shift and go to state 86

state 85

    (45) DeclaratorInitializer -> AltDeclarator . ASSIGN Initializer
    (46) DeclaratorInitializer -> AltDeclarator .

    ASSIGN          shift and go to state 239
    COMMA           reduce using rule 46 (DeclaratorInitializer -> AltDeclarator .)
    SEMICOLON       reduce using rule 46 (DeclaratorInitializer -> AltDeclarator .)


state 86

    (96) BasicType2_opt -> empty .

    IDENTIFIER      reduce using rule 96 (BasicType2_opt -> empty .)
    LPAREN          reduce using rule 96 (BasicType2_opt -> empty .)
    LBRACE          reduce using rule 96 (BasicType2_opt -> empty .)
    SEMICOLON       reduce using rule 96 (BasicType2_opt -> empty .)
    BODY            reduce using rule 96 (BasicType2_opt -> empty .)
    COMMA           reduce using rule 96 (BasicType2_opt -> empty .)
    LBRACKET        reduce using rule 96 (BasicType2_opt -> empty .)
    RPAREN          reduce using rule 96 (BasicType2_opt -> empty .)
    POWER           reduce using rule 96 (BasicType2_opt -> empty .)
    DOT             reduce using rule 96 (BasicType2_opt -> empty .)
    PLUS_PLUS       reduce using rule 96 (BasicType2_opt -> empty .)
    MINUS_MINUS     reduce using rule 96 (BasicType2_opt -> empty .)
    TIMES           reduce using rule 96 (BasicType2_opt -> empty .)
    DIV             reduce using rule 96 (BasicType2_opt -> empty .)
    MODULO          reduce using rule 96 (BasicType2_opt -> empty .)
    PLUS            reduce using rule 96 (BasicType2_opt -> empty .)
    MINUS           reduce using rule 96 (BasicType2_opt -> empty .)
    LEFT_SHIFT      reduce using rule 96 (BasicType2_opt -> empty .)
    RIGHT_SHIFT     reduce using rule 96 (BasicType2_opt -> empty .)
    IS_EQ           reduce using rule 96 (BasicType2_opt -> empty .)
    NOT_EQ          reduce using rule 96 (BasicType2_opt -> empty .)
    LESS            reduce using rule 96 (BasicType2_opt -> empty .)
    GREATER_EQ      reduce using rule 96 (BasicType2_opt -> empty .)
    GREATER         reduce using rule 96 (BasicType2_opt -> empty .)
    LESS_EQ         reduce using rule 96 (BasicType2_opt -> empty .)
    AMPERSAND       reduce using rule 96 (BasicType2_opt -> empty .)
    CARET           reduce using rule 96 (BasicType2_opt -> empty .)
    PIPE            reduce using rule 96 (BasicType2_opt -> empty .)
    DOUBLE_AMPERSAND reduce using rule 96 (BasicType2_opt -> empty .)
    QUESTION        reduce using rule 96 (BasicType2_opt -> empty .)
    DOUBLE_PIPE     reduce using rule 96 (BasicType2_opt -> empty .)
    ASSIGN          reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_PLUS         reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_MINUS        reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_TIMES        reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_DIV          reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_MODULO       reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_AND_BIT      reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_OR_BIT       reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_XOR_BIT      reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_LEFT         reduce using rule 96 (BasicType2_opt -> empty .)
    EQ_RIGHT        reduce using rule 96 (BasicType2_opt -> empty .)
    RBRACKET        reduce using rule 96 (BasicType2_opt -> empty .)
    RANGE           reduce using rule 96 (BasicType2_opt -> empty .)
    RBRACE          reduce using rule 96 (BasicType2_opt -> empty .)
    COLON           reduce using rule 96 (BasicType2_opt -> empty .)
    ELLIPSIS        reduce using rule 96 (BasicType2_opt -> empty .)


state 87

    (102) BasicType2X -> FUNCTION . Parameters
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 76

    Parameters                     shift and go to state 240

state 88

    (97) BasicType2X -> TIMES .

    TIMES           reduce using rule 97 (BasicType2X -> TIMES .)
    LBRACKET        reduce using rule 97 (BasicType2X -> TIMES .)
    FUNCTION        reduce using rule 97 (BasicType2X -> TIMES .)
    IDENTIFIER      reduce using rule 97 (BasicType2X -> TIMES .)
    LPAREN          reduce using rule 97 (BasicType2X -> TIMES .)
    ELLIPSIS        reduce using rule 97 (BasicType2X -> TIMES .)
    COMMA           reduce using rule 97 (BasicType2X -> TIMES .)
    RPAREN          reduce using rule 97 (BasicType2X -> TIMES .)
    LBRACE          reduce using rule 97 (BasicType2X -> TIMES .)
    SEMICOLON       reduce using rule 97 (BasicType2X -> TIMES .)
    BODY            reduce using rule 97 (BasicType2X -> TIMES .)
    POWER           reduce using rule 97 (BasicType2X -> TIMES .)
    DOT             reduce using rule 97 (BasicType2X -> TIMES .)
    PLUS_PLUS       reduce using rule 97 (BasicType2X -> TIMES .)
    MINUS_MINUS     reduce using rule 97 (BasicType2X -> TIMES .)
    DIV             reduce using rule 97 (BasicType2X -> TIMES .)
    MODULO          reduce using rule 97 (BasicType2X -> TIMES .)
    PLUS            reduce using rule 97 (BasicType2X -> TIMES .)
    MINUS           reduce using rule 97 (BasicType2X -> TIMES .)
    LEFT_SHIFT      reduce using rule 97 (BasicType2X -> TIMES .)
    RIGHT_SHIFT     reduce using rule 97 (BasicType2X -> TIMES .)
    IS_EQ           reduce using rule 97 (BasicType2X -> TIMES .)
    NOT_EQ          reduce using rule 97 (BasicType2X -> TIMES .)
    LESS            reduce using rule 97 (BasicType2X -> TIMES .)
    GREATER_EQ      reduce using rule 97 (BasicType2X -> TIMES .)
    GREATER         reduce using rule 97 (BasicType2X -> TIMES .)
    LESS_EQ         reduce using rule 97 (BasicType2X -> TIMES .)
    AMPERSAND       reduce using rule 97 (BasicType2X -> TIMES .)
    CARET           reduce using rule 97 (BasicType2X -> TIMES .)
    PIPE            reduce using rule 97 (BasicType2X -> TIMES .)
    DOUBLE_AMPERSAND reduce using rule 97 (BasicType2X -> TIMES .)
    QUESTION        reduce using rule 97 (BasicType2X -> TIMES .)
    DOUBLE_PIPE     reduce using rule 97 (BasicType2X -> TIMES .)
    ASSIGN          reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_PLUS         reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_MINUS        reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_TIMES        reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_DIV          reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_MODULO       reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_AND_BIT      reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_OR_BIT       reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_XOR_BIT      reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_LEFT         reduce using rule 97 (BasicType2X -> TIMES .)
    EQ_RIGHT        reduce using rule 97 (BasicType2X -> TIMES .)
    RBRACKET        reduce using rule 97 (BasicType2X -> TIMES .)
    RANGE           reduce using rule 97 (BasicType2X -> TIMES .)
    RBRACE          reduce using rule 97 (BasicType2X -> TIMES .)
    COLON           reduce using rule 97 (BasicType2X -> TIMES .)


state 89

    (455) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator . func_m1 FunctionBody
    (456) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator . func_m2 SEMICOLON
    (458) func_m1 -> . empty
    (459) func_m2 -> . empty
    (496) empty -> .

    LBRACE          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)

    func_m1                        shift and go to state 241
    func_m2                        shift and go to state 242
    empty                          shift and go to state 243

state 90

    (95) BasicType2_opt -> BasicType2 .

    IDENTIFIER      reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    LPAREN          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    LBRACE          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    SEMICOLON       reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    BODY            reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    COMMA           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    LBRACKET        reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    RPAREN          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    POWER           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    DOT             reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    PLUS_PLUS       reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    MINUS_MINUS     reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    TIMES           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    DIV             reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    MODULO          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    PLUS            reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    MINUS           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    LEFT_SHIFT      reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    RIGHT_SHIFT     reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    IS_EQ           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    NOT_EQ          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    LESS            reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    GREATER_EQ      reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    GREATER         reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    LESS_EQ         reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    AMPERSAND       reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    CARET           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    PIPE            reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    DOUBLE_AMPERSAND reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    QUESTION        reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    DOUBLE_PIPE     reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    ASSIGN          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_PLUS         reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_MINUS        reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_TIMES        reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_DIV          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_MODULO       reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_AND_BIT      reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_OR_BIT       reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_XOR_BIT      reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_LEFT         reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    EQ_RIGHT        reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    RBRACKET        reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    RANGE           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    RBRACE          reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    COLON           reduce using rule 95 (BasicType2_opt -> BasicType2 .)
    ELLIPSIS        reduce using rule 95 (BasicType2_opt -> BasicType2 .)


state 91

    (105) IdentifierList -> IDENTIFIER LBRACKET . AssignExpression RBRACKET DOT IdentifierList
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 250

state 92

    (104) IdentifierList -> IDENTIFIER DOT . IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 40

    IdentifierList                 shift and go to state 251

state 93

    (83) BasicType -> Typeof DOT . IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 40

    IdentifierList                 shift and go to state 252

state 94

    (141) Typeof -> TYPEOF LPAREN . Expression RPAREN
    (142) Typeof -> TYPEOF LPAREN . RETURN RPAREN
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RETURN          shift and go to state 253
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 254
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 95

    (410) ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .

    SEMICOLON       reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IF              reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DO              reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INT             reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TYPEID          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BODY            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    $end            reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 410 (ClassDeclaration -> CLASS IDENTIFIER SEMICOLON .)


state 96

    (417) BaseClassList_opt -> BaseClassList .

    LBRACE          reduce using rule 417 (BaseClassList_opt -> BaseClassList .)


state 97

    (414) BaseClassList -> COLON . SuperClass
    (415) BaseClassList -> COLON . SuperClass COMMA Interfaces
    (416) BaseClassList -> COLON . Interfaces
    (419) SuperClass -> . BasicType
    (420) Interfaces -> . Interface
    (421) Interfaces -> . Interface COMMA Interfaces
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (422) Interface -> . BasicType
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    Interfaces                     shift and go to state 258
    BasicType                      shift and go to state 259
    BasicTypeX                     shift and go to state 39
    SuperClass                     shift and go to state 257
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 260
    Typeof                         shift and go to state 43

state 98

    (411) ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt . class_m1 AggregateBody class_m2
    (412) class_m1 -> . empty
    (496) empty -> .

    LBRACE          reduce using rule 496 (empty -> .)

    class_m1                       shift and go to state 261
    empty                          shift and go to state 262

state 99

    (418) BaseClassList_opt -> empty .

    LBRACE          reduce using rule 418 (BaseClassList_opt -> empty .)


state 100

    (448) AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers . RBRACE

    RBRACE          shift and go to state 263


state 101

    (454) AnonymousEnumMember -> Type . IDENTIFIER ASSIGN AssignExpression

    IDENTIFIER      shift and go to state 264


state 102

    (76) Type -> BasicType . BasicType2_opt
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    COMMA           reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    RPAREN          reduce using rule 496 (empty -> .)
    POWER           reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    DIV             reduce using rule 496 (empty -> .)
    MODULO          reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    LEFT_SHIFT      reduce using rule 496 (empty -> .)
    RIGHT_SHIFT     reduce using rule 496 (empty -> .)
    IS_EQ           reduce using rule 496 (empty -> .)
    NOT_EQ          reduce using rule 496 (empty -> .)
    LESS            reduce using rule 496 (empty -> .)
    GREATER_EQ      reduce using rule 496 (empty -> .)
    GREATER         reduce using rule 496 (empty -> .)
    LESS_EQ         reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    CARET           reduce using rule 496 (empty -> .)
    PIPE            reduce using rule 496 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 496 (empty -> .)
    QUESTION        reduce using rule 496 (empty -> .)
    DOUBLE_PIPE     reduce using rule 496 (empty -> .)
    ASSIGN          reduce using rule 496 (empty -> .)
    EQ_PLUS         reduce using rule 496 (empty -> .)
    EQ_MINUS        reduce using rule 496 (empty -> .)
    EQ_TIMES        reduce using rule 496 (empty -> .)
    EQ_DIV          reduce using rule 496 (empty -> .)
    EQ_MODULO       reduce using rule 496 (empty -> .)
    EQ_AND_BIT      reduce using rule 496 (empty -> .)
    EQ_OR_BIT       reduce using rule 496 (empty -> .)
    EQ_XOR_BIT      reduce using rule 496 (empty -> .)
    EQ_LEFT         reduce using rule 496 (empty -> .)
    EQ_RIGHT        reduce using rule 496 (empty -> .)
    RBRACKET        reduce using rule 496 (empty -> .)
    RANGE           reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    COLON           reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

  ! LBRACKET        [ reduce using rule 496 (empty -> .) ]
  ! TIMES           [ reduce using rule 496 (empty -> .) ]

    BasicType2X                    shift and go to state 84
    BasicType2                     shift and go to state 90
    BasicType2_opt                 shift and go to state 265
    empty                          shift and go to state 86

state 103

    (449) AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers . RBRACE

    RBRACE          shift and go to state 266


state 104

    (445) EnumMember -> IDENTIFIER .
    (446) EnumMember -> IDENTIFIER . ASSIGN AssignExpression
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! shift/reduce conflict for LBRACKET resolved as shift
    COMMA           reduce using rule 445 (EnumMember -> IDENTIFIER .)
    RBRACE          reduce using rule 445 (EnumMember -> IDENTIFIER .)
    ASSIGN          shift and go to state 267
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    FUNCTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 91

  ! LBRACKET        [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 105

    (442) EnumMembers -> EnumMember .
    (443) EnumMembers -> EnumMember . COMMA
    (444) EnumMembers -> EnumMember . COMMA EnumMembers
    (453) AnonymousEnumMember -> EnumMember .

  ! reduce/reduce conflict for RBRACE resolved using rule 442 (EnumMembers -> EnumMember .)
    RBRACE          reduce using rule 442 (EnumMembers -> EnumMember .)
    COMMA           reduce using rule 453 (AnonymousEnumMember -> EnumMember .)

  ! COMMA           [ shift and go to state 268 ]
  ! RBRACE          [ reduce using rule 453 (AnonymousEnumMember -> EnumMember .) ]


state 106

    (450) AnonymousEnumMembers -> AnonymousEnumMember .
    (451) AnonymousEnumMembers -> AnonymousEnumMember . COMMA
    (452) AnonymousEnumMembers -> AnonymousEnumMember . COMMA AnonymousEnumMembers

    RBRACE          reduce using rule 450 (AnonymousEnumMembers -> AnonymousEnumMember .)
    COMMA           shift and go to state 269


state 107

    (439) EnumBaseType -> Type .

    LBRACE          reduce using rule 439 (EnumBaseType -> Type .)
    SEMICOLON       reduce using rule 439 (EnumBaseType -> Type .)


state 108

    (447) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType . LBRACE EnumMembers RBRACE

    LBRACE          shift and go to state 270


state 109

    (440) EnumBody -> LBRACE . EnumMembers RBRACE
    (442) EnumMembers -> . EnumMember
    (443) EnumMembers -> . EnumMember COMMA
    (444) EnumMembers -> . EnumMember COMMA EnumMembers
    (445) EnumMember -> . IDENTIFIER
    (446) EnumMember -> . IDENTIFIER ASSIGN AssignExpression

    IDENTIFIER      shift and go to state 273

    EnumMembers                    shift and go to state 271
    EnumMember                     shift and go to state 272

state 110

    (441) EnumBody -> SEMICOLON .

    ALIAS           reduce using rule 441 (EnumBody -> SEMICOLON .)
    ENUM            reduce using rule 441 (EnumBody -> SEMICOLON .)
    IMPORT          reduce using rule 441 (EnumBody -> SEMICOLON .)
    STATIC          reduce using rule 441 (EnumBody -> SEMICOLON .)
    CLASS           reduce using rule 441 (EnumBody -> SEMICOLON .)
    UNION           reduce using rule 441 (EnumBody -> SEMICOLON .)
    EXTERN          reduce using rule 441 (EnumBody -> SEMICOLON .)
    FINAL           reduce using rule 441 (EnumBody -> SEMICOLON .)
    AUTO            reduce using rule 441 (EnumBody -> SEMICOLON .)
    CONST           reduce using rule 441 (EnumBody -> SEMICOLON .)
    IMMUTABLE       reduce using rule 441 (EnumBody -> SEMICOLON .)
    DOT             reduce using rule 441 (EnumBody -> SEMICOLON .)
    BOOL            reduce using rule 441 (EnumBody -> SEMICOLON .)
    SHORT           reduce using rule 441 (EnumBody -> SEMICOLON .)
    USHORT          reduce using rule 441 (EnumBody -> SEMICOLON .)
    INT             reduce using rule 441 (EnumBody -> SEMICOLON .)
    UINT            reduce using rule 441 (EnumBody -> SEMICOLON .)
    LONG            reduce using rule 441 (EnumBody -> SEMICOLON .)
    ULONG           reduce using rule 441 (EnumBody -> SEMICOLON .)
    CHAR            reduce using rule 441 (EnumBody -> SEMICOLON .)
    FLOAT           reduce using rule 441 (EnumBody -> SEMICOLON .)
    VOID            reduce using rule 441 (EnumBody -> SEMICOLON .)
    IDENTIFIER      reduce using rule 441 (EnumBody -> SEMICOLON .)
    TYPEOF          reduce using rule 441 (EnumBody -> SEMICOLON .)
    $end            reduce using rule 441 (EnumBody -> SEMICOLON .)
    SEMICOLON       reduce using rule 441 (EnumBody -> SEMICOLON .)
    NEW             reduce using rule 441 (EnumBody -> SEMICOLON .)
    DELETE          reduce using rule 441 (EnumBody -> SEMICOLON .)
    MIXIN           reduce using rule 441 (EnumBody -> SEMICOLON .)
    PRIVATE         reduce using rule 441 (EnumBody -> SEMICOLON .)
    PROTECTED       reduce using rule 441 (EnumBody -> SEMICOLON .)
    PUBLIC          reduce using rule 441 (EnumBody -> SEMICOLON .)
    RBRACE          reduce using rule 441 (EnumBody -> SEMICOLON .)
    CASE            reduce using rule 441 (EnumBody -> SEMICOLON .)
    DEFAULT         reduce using rule 441 (EnumBody -> SEMICOLON .)
    LBRACE          reduce using rule 441 (EnumBody -> SEMICOLON .)
    IF              reduce using rule 441 (EnumBody -> SEMICOLON .)
    WHILE           reduce using rule 441 (EnumBody -> SEMICOLON .)
    DO              reduce using rule 441 (EnumBody -> SEMICOLON .)
    FOR             reduce using rule 441 (EnumBody -> SEMICOLON .)
    SWITCH          reduce using rule 441 (EnumBody -> SEMICOLON .)
    CONTINUE        reduce using rule 441 (EnumBody -> SEMICOLON .)
    BREAK           reduce using rule 441 (EnumBody -> SEMICOLON .)
    RETURN          reduce using rule 441 (EnumBody -> SEMICOLON .)
    GOTO            reduce using rule 441 (EnumBody -> SEMICOLON .)
    WITH            reduce using rule 441 (EnumBody -> SEMICOLON .)
    LPAREN          reduce using rule 441 (EnumBody -> SEMICOLON .)
    FOREACH         reduce using rule 441 (EnumBody -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 441 (EnumBody -> SEMICOLON .)
    AMPERSAND       reduce using rule 441 (EnumBody -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 441 (EnumBody -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 441 (EnumBody -> SEMICOLON .)
    TIMES           reduce using rule 441 (EnumBody -> SEMICOLON .)
    MINUS           reduce using rule 441 (EnumBody -> SEMICOLON .)
    PLUS            reduce using rule 441 (EnumBody -> SEMICOLON .)
    EXCLAMATION     reduce using rule 441 (EnumBody -> SEMICOLON .)
    TILDE           reduce using rule 441 (EnumBody -> SEMICOLON .)
    CAST            reduce using rule 441 (EnumBody -> SEMICOLON .)
    THIS            reduce using rule 441 (EnumBody -> SEMICOLON .)
    NULL            reduce using rule 441 (EnumBody -> SEMICOLON .)
    TRUE            reduce using rule 441 (EnumBody -> SEMICOLON .)
    FALSE           reduce using rule 441 (EnumBody -> SEMICOLON .)
    DOLLAR          reduce using rule 441 (EnumBody -> SEMICOLON .)
    INUMBER         reduce using rule 441 (EnumBody -> SEMICOLON .)
    DNUMBER         reduce using rule 441 (EnumBody -> SEMICOLON .)
    LIT_CHAR        reduce using rule 441 (EnumBody -> SEMICOLON .)
    LIT_STR         reduce using rule 441 (EnumBody -> SEMICOLON .)
    LBRACKET        reduce using rule 441 (EnumBody -> SEMICOLON .)
    FUNCTION        reduce using rule 441 (EnumBody -> SEMICOLON .)
    TYPEID          reduce using rule 441 (EnumBody -> SEMICOLON .)
    BODY            reduce using rule 441 (EnumBody -> SEMICOLON .)
    ELSE            reduce using rule 441 (EnumBody -> SEMICOLON .)


state 111

    (437) EnumDeclaration -> ENUM IDENTIFIER COLON . EnumBaseType EnumBody
    (439) EnumBaseType -> . Type
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 102
    IdentifierList                 shift and go to state 34
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    EnumBaseType                   shift and go to state 274
    Type                           shift and go to state 107

state 112

    (436) EnumDeclaration -> ENUM IDENTIFIER EnumBody .

    SEMICOLON       reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CASE            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DEFAULT         reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LBRACE          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IDENTIFIER      reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IF              reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    WHILE           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DO              reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FOR             reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    SWITCH          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FINAL           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CONTINUE        reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    BREAK           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    RETURN          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    GOTO            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    WITH            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    MIXIN           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IMPORT          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    STATIC          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LPAREN          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ALIAS           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ENUM            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    EXTERN          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    AUTO            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CONST           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    IMMUTABLE       reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FOREACH         reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FOREACH_REVERSE reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CLASS           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    UNION           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    AMPERSAND       reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PLUS_PLUS       reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    MINUS_MINUS     reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TIMES           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    MINUS           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PLUS            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    EXCLAMATION     reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TILDE           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CAST            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DOT             reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    THIS            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    NULL            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TRUE            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FALSE           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DOLLAR          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    INUMBER         reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DNUMBER         reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LIT_CHAR        reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LIT_STR         reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LBRACKET        reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FUNCTION        reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    NEW             reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    BOOL            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    SHORT           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    USHORT          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    INT             reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    UINT            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    LONG            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ULONG           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    CHAR            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    FLOAT           reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    VOID            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TYPEOF          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    TYPEID          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    BODY            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    RBRACE          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    ELSE            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    DELETE          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PRIVATE         reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PROTECTED       reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    PUBLIC          reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)
    $end            reduce using rule 436 (EnumDeclaration -> ENUM IDENTIFIER EnumBody .)


state 113

    (423) Allocator -> NEW . Parameters SEMICOLON
    (424) Allocator -> NEW . Parameters FunctionBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 76

    Parameters                     shift and go to state 275

state 114

    (7) DeclDef -> AttributeSpecifier .

    SEMICOLON       reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    NEW             reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    DELETE          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    ALIAS           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    MIXIN           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    ENUM            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    IMPORT          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    STATIC          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    PRIVATE         reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    PROTECTED       reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    PUBLIC          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    CLASS           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    UNION           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    EXTERN          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    FINAL           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    AUTO            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    CONST           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    IMMUTABLE       reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    DOT             reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    BOOL            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    SHORT           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    USHORT          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    INT             reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    UINT            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    LONG            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    ULONG           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    CHAR            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    FLOAT           reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    VOID            reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    IDENTIFIER      reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    TYPEOF          reduce using rule 7 (DeclDef -> AttributeSpecifier .)
    RBRACE          reduce using rule 7 (DeclDef -> AttributeSpecifier .)


state 115

    (12) DeclDef -> MixinDeclaration .

    SEMICOLON       reduce using rule 12 (DeclDef -> MixinDeclaration .)
    NEW             reduce using rule 12 (DeclDef -> MixinDeclaration .)
    DELETE          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    ALIAS           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    MIXIN           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    ENUM            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    IMPORT          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    STATIC          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    PRIVATE         reduce using rule 12 (DeclDef -> MixinDeclaration .)
    PROTECTED       reduce using rule 12 (DeclDef -> MixinDeclaration .)
    PUBLIC          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    CLASS           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    UNION           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    EXTERN          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    FINAL           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    AUTO            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    CONST           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    IMMUTABLE       reduce using rule 12 (DeclDef -> MixinDeclaration .)
    DOT             reduce using rule 12 (DeclDef -> MixinDeclaration .)
    BOOL            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    SHORT           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    USHORT          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    INT             reduce using rule 12 (DeclDef -> MixinDeclaration .)
    UINT            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    LONG            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    ULONG           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    CHAR            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    FLOAT           reduce using rule 12 (DeclDef -> MixinDeclaration .)
    VOID            reduce using rule 12 (DeclDef -> MixinDeclaration .)
    IDENTIFIER      reduce using rule 12 (DeclDef -> MixinDeclaration .)
    TYPEOF          reduce using rule 12 (DeclDef -> MixinDeclaration .)
    RBRACE          reduce using rule 12 (DeclDef -> MixinDeclaration .)


state 116

    (13) DeclDef -> SEMICOLON .

    SEMICOLON       reduce using rule 13 (DeclDef -> SEMICOLON .)
    NEW             reduce using rule 13 (DeclDef -> SEMICOLON .)
    DELETE          reduce using rule 13 (DeclDef -> SEMICOLON .)
    ALIAS           reduce using rule 13 (DeclDef -> SEMICOLON .)
    MIXIN           reduce using rule 13 (DeclDef -> SEMICOLON .)
    ENUM            reduce using rule 13 (DeclDef -> SEMICOLON .)
    IMPORT          reduce using rule 13 (DeclDef -> SEMICOLON .)
    STATIC          reduce using rule 13 (DeclDef -> SEMICOLON .)
    PRIVATE         reduce using rule 13 (DeclDef -> SEMICOLON .)
    PROTECTED       reduce using rule 13 (DeclDef -> SEMICOLON .)
    PUBLIC          reduce using rule 13 (DeclDef -> SEMICOLON .)
    CLASS           reduce using rule 13 (DeclDef -> SEMICOLON .)
    UNION           reduce using rule 13 (DeclDef -> SEMICOLON .)
    EXTERN          reduce using rule 13 (DeclDef -> SEMICOLON .)
    FINAL           reduce using rule 13 (DeclDef -> SEMICOLON .)
    AUTO            reduce using rule 13 (DeclDef -> SEMICOLON .)
    CONST           reduce using rule 13 (DeclDef -> SEMICOLON .)
    IMMUTABLE       reduce using rule 13 (DeclDef -> SEMICOLON .)
    DOT             reduce using rule 13 (DeclDef -> SEMICOLON .)
    BOOL            reduce using rule 13 (DeclDef -> SEMICOLON .)
    SHORT           reduce using rule 13 (DeclDef -> SEMICOLON .)
    USHORT          reduce using rule 13 (DeclDef -> SEMICOLON .)
    INT             reduce using rule 13 (DeclDef -> SEMICOLON .)
    UINT            reduce using rule 13 (DeclDef -> SEMICOLON .)
    LONG            reduce using rule 13 (DeclDef -> SEMICOLON .)
    ULONG           reduce using rule 13 (DeclDef -> SEMICOLON .)
    CHAR            reduce using rule 13 (DeclDef -> SEMICOLON .)
    FLOAT           reduce using rule 13 (DeclDef -> SEMICOLON .)
    VOID            reduce using rule 13 (DeclDef -> SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (DeclDef -> SEMICOLON .)
    TYPEOF          reduce using rule 13 (DeclDef -> SEMICOLON .)
    RBRACE          reduce using rule 13 (DeclDef -> SEMICOLON .)


state 117

    (5) DeclDefs_opt -> DeclDefs .

    RBRACE          reduce using rule 5 (DeclDefs_opt -> DeclDefs .)


state 118

    (146) Attribute -> VisibilityAttribute .

    COLON           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    LBRACE          reduce using rule 146 (Attribute -> VisibilityAttribute .)
    SEMICOLON       reduce using rule 146 (Attribute -> VisibilityAttribute .)
    NEW             reduce using rule 146 (Attribute -> VisibilityAttribute .)
    DELETE          reduce using rule 146 (Attribute -> VisibilityAttribute .)
    ALIAS           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    MIXIN           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    ENUM            reduce using rule 146 (Attribute -> VisibilityAttribute .)
    IMPORT          reduce using rule 146 (Attribute -> VisibilityAttribute .)
    STATIC          reduce using rule 146 (Attribute -> VisibilityAttribute .)
    PRIVATE         reduce using rule 146 (Attribute -> VisibilityAttribute .)
    PROTECTED       reduce using rule 146 (Attribute -> VisibilityAttribute .)
    PUBLIC          reduce using rule 146 (Attribute -> VisibilityAttribute .)
    CLASS           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    UNION           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    EXTERN          reduce using rule 146 (Attribute -> VisibilityAttribute .)
    FINAL           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    AUTO            reduce using rule 146 (Attribute -> VisibilityAttribute .)
    CONST           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    IMMUTABLE       reduce using rule 146 (Attribute -> VisibilityAttribute .)
    DOT             reduce using rule 146 (Attribute -> VisibilityAttribute .)
    BOOL            reduce using rule 146 (Attribute -> VisibilityAttribute .)
    SHORT           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    USHORT          reduce using rule 146 (Attribute -> VisibilityAttribute .)
    INT             reduce using rule 146 (Attribute -> VisibilityAttribute .)
    UINT            reduce using rule 146 (Attribute -> VisibilityAttribute .)
    LONG            reduce using rule 146 (Attribute -> VisibilityAttribute .)
    ULONG           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    CHAR            reduce using rule 146 (Attribute -> VisibilityAttribute .)
    FLOAT           reduce using rule 146 (Attribute -> VisibilityAttribute .)
    VOID            reduce using rule 146 (Attribute -> VisibilityAttribute .)
    IDENTIFIER      reduce using rule 146 (Attribute -> VisibilityAttribute .)
    TYPEOF          reduce using rule 146 (Attribute -> VisibilityAttribute .)


state 119

    (409) AggregateBody -> LBRACE DeclDefs_opt . RBRACE

    RBRACE          shift and go to state 276


state 120

    (149) VisibilityAttribute -> PRIVATE .

    COLON           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    LBRACE          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    SEMICOLON       reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    NEW             reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    DELETE          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    ALIAS           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    MIXIN           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    ENUM            reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    IMPORT          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    STATIC          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    PRIVATE         reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    PROTECTED       reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    PUBLIC          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    CLASS           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    UNION           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    EXTERN          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    FINAL           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    AUTO            reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    CONST           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    IMMUTABLE       reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    DOT             reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    BOOL            reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    SHORT           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    USHORT          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    INT             reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    UINT            reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    LONG            reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    ULONG           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    CHAR            reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    FLOAT           reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    VOID            reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    IDENTIFIER      reduce using rule 149 (VisibilityAttribute -> PRIVATE .)
    TYPEOF          reduce using rule 149 (VisibilityAttribute -> PRIVATE .)


state 121

    (11) DeclDef -> AliasThis .

    SEMICOLON       reduce using rule 11 (DeclDef -> AliasThis .)
    NEW             reduce using rule 11 (DeclDef -> AliasThis .)
    DELETE          reduce using rule 11 (DeclDef -> AliasThis .)
    ALIAS           reduce using rule 11 (DeclDef -> AliasThis .)
    MIXIN           reduce using rule 11 (DeclDef -> AliasThis .)
    ENUM            reduce using rule 11 (DeclDef -> AliasThis .)
    IMPORT          reduce using rule 11 (DeclDef -> AliasThis .)
    STATIC          reduce using rule 11 (DeclDef -> AliasThis .)
    PRIVATE         reduce using rule 11 (DeclDef -> AliasThis .)
    PROTECTED       reduce using rule 11 (DeclDef -> AliasThis .)
    PUBLIC          reduce using rule 11 (DeclDef -> AliasThis .)
    CLASS           reduce using rule 11 (DeclDef -> AliasThis .)
    UNION           reduce using rule 11 (DeclDef -> AliasThis .)
    EXTERN          reduce using rule 11 (DeclDef -> AliasThis .)
    FINAL           reduce using rule 11 (DeclDef -> AliasThis .)
    AUTO            reduce using rule 11 (DeclDef -> AliasThis .)
    CONST           reduce using rule 11 (DeclDef -> AliasThis .)
    IMMUTABLE       reduce using rule 11 (DeclDef -> AliasThis .)
    DOT             reduce using rule 11 (DeclDef -> AliasThis .)
    BOOL            reduce using rule 11 (DeclDef -> AliasThis .)
    SHORT           reduce using rule 11 (DeclDef -> AliasThis .)
    USHORT          reduce using rule 11 (DeclDef -> AliasThis .)
    INT             reduce using rule 11 (DeclDef -> AliasThis .)
    UINT            reduce using rule 11 (DeclDef -> AliasThis .)
    LONG            reduce using rule 11 (DeclDef -> AliasThis .)
    ULONG           reduce using rule 11 (DeclDef -> AliasThis .)
    CHAR            reduce using rule 11 (DeclDef -> AliasThis .)
    FLOAT           reduce using rule 11 (DeclDef -> AliasThis .)
    VOID            reduce using rule 11 (DeclDef -> AliasThis .)
    IDENTIFIER      reduce using rule 11 (DeclDef -> AliasThis .)
    TYPEOF          reduce using rule 11 (DeclDef -> AliasThis .)
    RBRACE          reduce using rule 11 (DeclDef -> AliasThis .)


state 122

    (3) DeclDefs -> DeclDef .
    (4) DeclDefs -> DeclDef . DeclDefs
    (3) DeclDefs -> . DeclDef
    (4) DeclDefs -> . DeclDef DeclDefs
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (144) AttributeSpecifier -> . Attribute COLON
    (145) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (423) Allocator -> . NEW Parameters SEMICOLON
    (424) Allocator -> . NEW Parameters FunctionBody
    (425) Deallocator -> . DELETE Parameters SEMICOLON
    (426) Deallocator -> . DELETE Parameters FunctionBody
    (427) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (146) Attribute -> . VisibilityAttribute
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (149) VisibilityAttribute -> . PRIVATE
    (150) VisibilityAttribute -> . PROTECTED
    (151) VisibilityAttribute -> . PUBLIC
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

    RBRACE          reduce using rule 3 (DeclDefs -> DeclDef .)
    SEMICOLON       shift and go to state 116
    NEW             shift and go to state 113
    DELETE          shift and go to state 132
    ALIAS           shift and go to state 126
    MIXIN           shift and go to state 130
    ENUM            shift and go to state 17
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    PRIVATE         shift and go to state 120
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 128
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 114
    StorageClasses_opt             shift and go to state 9
    DeclDefs                       shift and go to state 277
    VisibilityAttribute            shift and go to state 118
    AliasThis                      shift and go to state 121
    DeclDef                        shift and go to state 122
    Declaration                    shift and go to state 125
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    empty                          shift and go to state 62
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 115
    Deallocator                    shift and go to state 123
    AnonymousEnumDeclaration       shift and go to state 21
    AnonUnionDeclaration           shift and go to state 23
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 127
    UnionDeclaration               shift and go to state 25
    ImportDeclaration              shift and go to state 10
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 131
    StorageClass                   shift and go to state 28

state 123

    (10) DeclDef -> Deallocator .

    SEMICOLON       reduce using rule 10 (DeclDef -> Deallocator .)
    NEW             reduce using rule 10 (DeclDef -> Deallocator .)
    DELETE          reduce using rule 10 (DeclDef -> Deallocator .)
    ALIAS           reduce using rule 10 (DeclDef -> Deallocator .)
    MIXIN           reduce using rule 10 (DeclDef -> Deallocator .)
    ENUM            reduce using rule 10 (DeclDef -> Deallocator .)
    IMPORT          reduce using rule 10 (DeclDef -> Deallocator .)
    STATIC          reduce using rule 10 (DeclDef -> Deallocator .)
    PRIVATE         reduce using rule 10 (DeclDef -> Deallocator .)
    PROTECTED       reduce using rule 10 (DeclDef -> Deallocator .)
    PUBLIC          reduce using rule 10 (DeclDef -> Deallocator .)
    CLASS           reduce using rule 10 (DeclDef -> Deallocator .)
    UNION           reduce using rule 10 (DeclDef -> Deallocator .)
    EXTERN          reduce using rule 10 (DeclDef -> Deallocator .)
    FINAL           reduce using rule 10 (DeclDef -> Deallocator .)
    AUTO            reduce using rule 10 (DeclDef -> Deallocator .)
    CONST           reduce using rule 10 (DeclDef -> Deallocator .)
    IMMUTABLE       reduce using rule 10 (DeclDef -> Deallocator .)
    DOT             reduce using rule 10 (DeclDef -> Deallocator .)
    BOOL            reduce using rule 10 (DeclDef -> Deallocator .)
    SHORT           reduce using rule 10 (DeclDef -> Deallocator .)
    USHORT          reduce using rule 10 (DeclDef -> Deallocator .)
    INT             reduce using rule 10 (DeclDef -> Deallocator .)
    UINT            reduce using rule 10 (DeclDef -> Deallocator .)
    LONG            reduce using rule 10 (DeclDef -> Deallocator .)
    ULONG           reduce using rule 10 (DeclDef -> Deallocator .)
    CHAR            reduce using rule 10 (DeclDef -> Deallocator .)
    FLOAT           reduce using rule 10 (DeclDef -> Deallocator .)
    VOID            reduce using rule 10 (DeclDef -> Deallocator .)
    IDENTIFIER      reduce using rule 10 (DeclDef -> Deallocator .)
    TYPEOF          reduce using rule 10 (DeclDef -> Deallocator .)
    RBRACE          reduce using rule 10 (DeclDef -> Deallocator .)


state 124

    (6) DeclDefs_opt -> empty .
    (133) StorageClasses_opt -> empty .

    RBRACE          reduce using rule 6 (DeclDefs_opt -> empty .)
    DOT             reduce using rule 133 (StorageClasses_opt -> empty .)
    BOOL            reduce using rule 133 (StorageClasses_opt -> empty .)
    SHORT           reduce using rule 133 (StorageClasses_opt -> empty .)
    USHORT          reduce using rule 133 (StorageClasses_opt -> empty .)
    INT             reduce using rule 133 (StorageClasses_opt -> empty .)
    UINT            reduce using rule 133 (StorageClasses_opt -> empty .)
    LONG            reduce using rule 133 (StorageClasses_opt -> empty .)
    ULONG           reduce using rule 133 (StorageClasses_opt -> empty .)
    CHAR            reduce using rule 133 (StorageClasses_opt -> empty .)
    FLOAT           reduce using rule 133 (StorageClasses_opt -> empty .)
    VOID            reduce using rule 133 (StorageClasses_opt -> empty .)
    IDENTIFIER      reduce using rule 133 (StorageClasses_opt -> empty .)
    TYPEOF          reduce using rule 133 (StorageClasses_opt -> empty .)


state 125

    (8) DeclDef -> Declaration .

    SEMICOLON       reduce using rule 8 (DeclDef -> Declaration .)
    NEW             reduce using rule 8 (DeclDef -> Declaration .)
    DELETE          reduce using rule 8 (DeclDef -> Declaration .)
    ALIAS           reduce using rule 8 (DeclDef -> Declaration .)
    MIXIN           reduce using rule 8 (DeclDef -> Declaration .)
    ENUM            reduce using rule 8 (DeclDef -> Declaration .)
    IMPORT          reduce using rule 8 (DeclDef -> Declaration .)
    STATIC          reduce using rule 8 (DeclDef -> Declaration .)
    PRIVATE         reduce using rule 8 (DeclDef -> Declaration .)
    PROTECTED       reduce using rule 8 (DeclDef -> Declaration .)
    PUBLIC          reduce using rule 8 (DeclDef -> Declaration .)
    CLASS           reduce using rule 8 (DeclDef -> Declaration .)
    UNION           reduce using rule 8 (DeclDef -> Declaration .)
    EXTERN          reduce using rule 8 (DeclDef -> Declaration .)
    FINAL           reduce using rule 8 (DeclDef -> Declaration .)
    AUTO            reduce using rule 8 (DeclDef -> Declaration .)
    CONST           reduce using rule 8 (DeclDef -> Declaration .)
    IMMUTABLE       reduce using rule 8 (DeclDef -> Declaration .)
    DOT             reduce using rule 8 (DeclDef -> Declaration .)
    BOOL            reduce using rule 8 (DeclDef -> Declaration .)
    SHORT           reduce using rule 8 (DeclDef -> Declaration .)
    USHORT          reduce using rule 8 (DeclDef -> Declaration .)
    INT             reduce using rule 8 (DeclDef -> Declaration .)
    UINT            reduce using rule 8 (DeclDef -> Declaration .)
    LONG            reduce using rule 8 (DeclDef -> Declaration .)
    ULONG           reduce using rule 8 (DeclDef -> Declaration .)
    CHAR            reduce using rule 8 (DeclDef -> Declaration .)
    FLOAT           reduce using rule 8 (DeclDef -> Declaration .)
    VOID            reduce using rule 8 (DeclDef -> Declaration .)
    IDENTIFIER      reduce using rule 8 (DeclDef -> Declaration .)
    TYPEOF          reduce using rule 8 (DeclDef -> Declaration .)
    RBRACE          reduce using rule 8 (DeclDef -> Declaration .)


state 126

    (427) AliasThis -> ALIAS . IDENTIFIER THIS SEMICOLON
    (134) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> ALIAS . StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> ALIAS . AliasDeclarationX SEMICOLON
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (137) AliasDeclarationX -> . AliasDeclarationY
    (138) AliasDeclarationX -> . AliasDeclarationX COMMA AliasDeclarationY
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (496) empty -> .
    (139) AliasDeclarationY -> . IDENTIFIER ASSIGN StorageClasses_opt Type
    (140) AliasDeclarationY -> . IDENTIFIER ASSIGN FunctionLiteral
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 278
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ENUM            shift and go to state 63
    STATIC          shift and go to state 56
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]

    AliasDeclarationY              shift and go to state 58
    AliasDeclarationX              shift and go to state 59
    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 60
    StorageClasses_opt             shift and go to state 57
    empty                          shift and go to state 62

state 127

    (144) AttributeSpecifier -> Attribute . COLON
    (145) AttributeSpecifier -> Attribute . DeclarationBlock
    (147) DeclarationBlock -> . DeclDef
    (148) DeclarationBlock -> . LBRACE DeclDefs_opt RBRACE
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (144) AttributeSpecifier -> . Attribute COLON
    (145) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (423) Allocator -> . NEW Parameters SEMICOLON
    (424) Allocator -> . NEW Parameters FunctionBody
    (425) Deallocator -> . DELETE Parameters SEMICOLON
    (426) Deallocator -> . DELETE Parameters FunctionBody
    (427) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (146) Attribute -> . VisibilityAttribute
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (149) VisibilityAttribute -> . PRIVATE
    (150) VisibilityAttribute -> . PROTECTED
    (151) VisibilityAttribute -> . PUBLIC
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

    COLON           shift and go to state 279
    LBRACE          shift and go to state 282
    SEMICOLON       shift and go to state 116
    NEW             shift and go to state 113
    DELETE          shift and go to state 132
    ALIAS           shift and go to state 126
    MIXIN           shift and go to state 130
    ENUM            shift and go to state 17
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    PRIVATE         shift and go to state 120
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 128
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 114
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    VisibilityAttribute            shift and go to state 118
    AliasThis                      shift and go to state 121
    DeclDef                        shift and go to state 280
    Deallocator                    shift and go to state 123
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    empty                          shift and go to state 62
    DeclarationBlock               shift and go to state 281
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 115
    Declaration                    shift and go to state 125
    AnonymousEnumDeclaration       shift and go to state 21
    AnonUnionDeclaration           shift and go to state 23
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 127
    UnionDeclaration               shift and go to state 25
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 131
    StorageClass                   shift and go to state 28

state 128

    (151) VisibilityAttribute -> PUBLIC .

    COLON           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    LBRACE          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    SEMICOLON       reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    NEW             reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    DELETE          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    ALIAS           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    MIXIN           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    ENUM            reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    IMPORT          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    STATIC          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    PRIVATE         reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    PROTECTED       reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    PUBLIC          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    CLASS           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    UNION           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    EXTERN          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    FINAL           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    AUTO            reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    CONST           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    IMMUTABLE       reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    DOT             reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    BOOL            reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    SHORT           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    USHORT          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    INT             reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    UINT            reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    LONG            reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    ULONG           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    CHAR            reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    FLOAT           reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    VOID            reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    IDENTIFIER      reduce using rule 151 (VisibilityAttribute -> PUBLIC .)
    TYPEOF          reduce using rule 151 (VisibilityAttribute -> PUBLIC .)


state 129

    (150) VisibilityAttribute -> PROTECTED .

    COLON           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    LBRACE          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    SEMICOLON       reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    NEW             reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    DELETE          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    ALIAS           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    MIXIN           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    ENUM            reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    IMPORT          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    STATIC          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    PRIVATE         reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    PROTECTED       reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    PUBLIC          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    CLASS           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    UNION           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    EXTERN          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    FINAL           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    AUTO            reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    CONST           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    IMMUTABLE       reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    DOT             reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    BOOL            reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    SHORT           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    USHORT          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    INT             reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    UINT            reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    LONG            reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    ULONG           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    CHAR            reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    FLOAT           reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    VOID            reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    IDENTIFIER      reduce using rule 150 (VisibilityAttribute -> PROTECTED .)
    TYPEOF          reduce using rule 150 (VisibilityAttribute -> PROTECTED .)


state 130

    (33) MixinDeclaration -> MIXIN . LPAREN AssignExpression RPAREN SEMICOLON

    LPAREN          shift and go to state 283


state 131

    (9) DeclDef -> Allocator .

    SEMICOLON       reduce using rule 9 (DeclDef -> Allocator .)
    NEW             reduce using rule 9 (DeclDef -> Allocator .)
    DELETE          reduce using rule 9 (DeclDef -> Allocator .)
    ALIAS           reduce using rule 9 (DeclDef -> Allocator .)
    MIXIN           reduce using rule 9 (DeclDef -> Allocator .)
    ENUM            reduce using rule 9 (DeclDef -> Allocator .)
    IMPORT          reduce using rule 9 (DeclDef -> Allocator .)
    STATIC          reduce using rule 9 (DeclDef -> Allocator .)
    PRIVATE         reduce using rule 9 (DeclDef -> Allocator .)
    PROTECTED       reduce using rule 9 (DeclDef -> Allocator .)
    PUBLIC          reduce using rule 9 (DeclDef -> Allocator .)
    CLASS           reduce using rule 9 (DeclDef -> Allocator .)
    UNION           reduce using rule 9 (DeclDef -> Allocator .)
    EXTERN          reduce using rule 9 (DeclDef -> Allocator .)
    FINAL           reduce using rule 9 (DeclDef -> Allocator .)
    AUTO            reduce using rule 9 (DeclDef -> Allocator .)
    CONST           reduce using rule 9 (DeclDef -> Allocator .)
    IMMUTABLE       reduce using rule 9 (DeclDef -> Allocator .)
    DOT             reduce using rule 9 (DeclDef -> Allocator .)
    BOOL            reduce using rule 9 (DeclDef -> Allocator .)
    SHORT           reduce using rule 9 (DeclDef -> Allocator .)
    USHORT          reduce using rule 9 (DeclDef -> Allocator .)
    INT             reduce using rule 9 (DeclDef -> Allocator .)
    UINT            reduce using rule 9 (DeclDef -> Allocator .)
    LONG            reduce using rule 9 (DeclDef -> Allocator .)
    ULONG           reduce using rule 9 (DeclDef -> Allocator .)
    CHAR            reduce using rule 9 (DeclDef -> Allocator .)
    FLOAT           reduce using rule 9 (DeclDef -> Allocator .)
    VOID            reduce using rule 9 (DeclDef -> Allocator .)
    IDENTIFIER      reduce using rule 9 (DeclDef -> Allocator .)
    TYPEOF          reduce using rule 9 (DeclDef -> Allocator .)
    RBRACE          reduce using rule 9 (DeclDef -> Allocator .)


state 132

    (425) Deallocator -> DELETE . Parameters SEMICOLON
    (426) Deallocator -> DELETE . Parameters FunctionBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 76

    Parameters                     shift and go to state 284

state 133

    (406) UnionDeclaration -> UNION IDENTIFIER AggregateBody .

    SEMICOLON       reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CASE            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DEFAULT         reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LBRACE          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IDENTIFIER      reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IF              reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    WHILE           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DO              reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FOR             reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    SWITCH          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FINAL           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CONTINUE        reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    BREAK           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    RETURN          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    GOTO            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    WITH            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    MIXIN           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IMPORT          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    STATIC          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LPAREN          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ALIAS           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ENUM            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    EXTERN          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    AUTO            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CONST           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    IMMUTABLE       reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FOREACH         reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FOREACH_REVERSE reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CLASS           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    UNION           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    AMPERSAND       reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PLUS_PLUS       reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    MINUS_MINUS     reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TIMES           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    MINUS           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PLUS            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    EXCLAMATION     reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TILDE           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CAST            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DOT             reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    THIS            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    NULL            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TRUE            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FALSE           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DOLLAR          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    INUMBER         reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DNUMBER         reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LIT_CHAR        reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LIT_STR         reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LBRACKET        reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FUNCTION        reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    NEW             reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    BOOL            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    SHORT           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    USHORT          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    INT             reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    UINT            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    LONG            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ULONG           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    CHAR            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    FLOAT           reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    VOID            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TYPEOF          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    TYPEID          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    BODY            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    RBRACE          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    ELSE            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    DELETE          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PRIVATE         reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PROTECTED       reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    PUBLIC          reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)
    $end            reduce using rule 406 (UnionDeclaration -> UNION IDENTIFIER AggregateBody .)


state 134

    (405) UnionDeclaration -> UNION IDENTIFIER SEMICOLON .

    SEMICOLON       reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IF              reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DO              reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INT             reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TYPEID          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BODY            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PRIVATE         reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    $end            reduce using rule 405 (UnionDeclaration -> UNION IDENTIFIER SEMICOLON .)


state 135

    (134) AliasDeclaration -> ALIAS StorageClasses_opt BasicType . Declarators SEMICOLON
    (135) AliasDeclaration -> ALIAS StorageClasses_opt BasicType . FuncDeclarator SEMICOLON
    (41) Declarators -> . DeclaratorInitializer
    (42) Declarators -> . DeclaratorInitializer COMMA DeclaratorIdentifierList
    (461) FuncDeclarator -> . BasicType2_opt IDENTIFIER func_m3 FuncDeclaratorSuffix
    (43) DeclaratorInitializer -> . VarDeclarator
    (44) DeclaratorInitializer -> . VarDeclarator ASSIGN Initializer
    (45) DeclaratorInitializer -> . AltDeclarator ASSIGN Initializer
    (46) DeclaratorInitializer -> . AltDeclarator
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (60) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (61) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

    VarDeclarator                  shift and go to state 79
    BasicType2X                    shift and go to state 84
    DeclaratorInitializer          shift and go to state 83
    Declarators                    shift and go to state 285
    AltDeclarator                  shift and go to state 85
    empty                          shift and go to state 86
    FuncDeclarator                 shift and go to state 286
    BasicType2_opt                 shift and go to state 82
    BasicType2                     shift and go to state 90

state 136

    (138) AliasDeclarationX -> AliasDeclarationX COMMA . AliasDeclarationY
    (139) AliasDeclarationY -> . IDENTIFIER ASSIGN StorageClasses_opt Type
    (140) AliasDeclarationY -> . IDENTIFIER ASSIGN FunctionLiteral

    IDENTIFIER      shift and go to state 61

    AliasDeclarationY              shift and go to state 287

state 137

    (136) AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .

    SEMICOLON       reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CASE            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DEFAULT         reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LBRACE          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IDENTIFIER      reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IF              reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    WHILE           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DO              reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FOR             reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    SWITCH          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FINAL           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CONTINUE        reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    BREAK           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    RETURN          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    GOTO            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    WITH            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    MIXIN           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IMPORT          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    STATIC          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LPAREN          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ALIAS           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ENUM            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    EXTERN          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    AUTO            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CONST           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    IMMUTABLE       reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FOREACH         reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FOREACH_REVERSE reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CLASS           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    UNION           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    AMPERSAND       reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PLUS_PLUS       reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    MINUS_MINUS     reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TIMES           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    MINUS           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PLUS            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    EXCLAMATION     reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TILDE           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CAST            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DOT             reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    THIS            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    NULL            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TRUE            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FALSE           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DOLLAR          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    INUMBER         reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DNUMBER         reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LIT_CHAR        reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LIT_STR         reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LBRACKET        reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FUNCTION        reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    NEW             reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    BOOL            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    SHORT           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    USHORT          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    INT             reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    UINT            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    LONG            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ULONG           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    CHAR            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    FLOAT           reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    VOID            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TYPEOF          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    TYPEID          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    BODY            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    RBRACE          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    ELSE            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    DELETE          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PRIVATE         reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PROTECTED       reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    PUBLIC          reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)
    $end            reduce using rule 136 (AliasDeclaration -> ALIAS AliasDeclarationX SEMICOLON .)


state 138

    (139) AliasDeclarationY -> IDENTIFIER ASSIGN . StorageClasses_opt Type
    (140) AliasDeclarationY -> IDENTIFIER ASSIGN . FunctionLiteral
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (496) empty -> .
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    FUNCTION        shift and go to state 193
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ENUM            shift and go to state 63
    STATIC          shift and go to state 56
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    LPAREN          shift and go to state 76
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    FunctionLiteralBody            shift and go to state 219
    Parameters                     shift and go to state 186
    ParameterMemberAttributes      shift and go to state 187
    FunctionLiteral                shift and go to state 289
    BodyStatement                  shift and go to state 213
    StorageClass                   shift and go to state 28
    StorageClasses                 shift and go to state 60
    BlockStatement                 shift and go to state 175
    StorageClasses_opt             shift and go to state 288
    empty                          shift and go to state 62

state 139

    (26) Import -> ModuleAliasIdentifier ASSIGN . ModuleFullyQualifiedName
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 291

    Packages                       shift and go to state 71
    PackageName                    shift and go to state 68
    ModuleFullyQualifiedName       shift and go to state 290
    ModuleName                     shift and go to state 72

state 140

    (20) ImportDeclaration -> IMPORT ImportList SEMICOLON .

    SEMICOLON       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CASE            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DEFAULT         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LBRACE          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IF              reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    WHILE           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DO              reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FOR             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    SWITCH          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FINAL           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CONTINUE        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    BREAK           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    RETURN          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    GOTO            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    WITH            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    MIXIN           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IMPORT          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    STATIC          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LPAREN          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ALIAS           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ENUM            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    EXTERN          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    AUTO            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CONST           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    IMMUTABLE       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FOREACH         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FOREACH_REVERSE reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CLASS           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    UNION           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    AMPERSAND       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PLUS_PLUS       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    MINUS_MINUS     reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TIMES           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    MINUS           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PLUS            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    EXCLAMATION     reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TILDE           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CAST            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DOT             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    THIS            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    NULL            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TRUE            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FALSE           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DOLLAR          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    INUMBER         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DNUMBER         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LIT_CHAR        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LIT_STR         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LBRACKET        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FUNCTION        reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    NEW             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    BOOL            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    SHORT           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    USHORT          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    INT             reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    UINT            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    LONG            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ULONG           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    CHAR            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    FLOAT           reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    VOID            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TYPEOF          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    TYPEID          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    BODY            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    RBRACE          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    ELSE            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    $end            reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    DELETE          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PRIVATE         reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PROTECTED       reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)
    PUBLIC          reduce using rule 20 (ImportDeclaration -> IMPORT ImportList SEMICOLON .)


state 141

    (27) ImportBindings -> Import COLON . ImportBindList
    (28) ImportBindList -> . ImportBind
    (29) ImportBindList -> . ImportBind COMMA ImportBindList
    (30) ImportBind -> . IDENTIFIER
    (31) ImportBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 294

    ImportBindList                 shift and go to state 292
    ImportBind                     shift and go to state 293

state 142

    (24) ImportList -> Import COMMA . ImportList
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 69

    ModuleFullyQualifiedName       shift and go to state 64
    ImportBindings                 shift and go to state 65
    ModuleAliasIdentifier          shift and go to state 66
    ImportList                     shift and go to state 295
    PackageName                    shift and go to state 68
    ModuleName                     shift and go to state 72
    Import                         shift and go to state 70
    Packages                       shift and go to state 71

state 143

    (15) ModuleFullyQualifiedName -> Packages DOT . ModuleName
    (18) Packages -> Packages DOT . PackageName
    (16) ModuleName -> . IDENTIFIER
    (19) PackageName -> . IDENTIFIER

    IDENTIFIER      shift and go to state 291

    PackageName                    shift and go to state 296
    ModuleName                     shift and go to state 297

state 144

    (460) AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .

    SEMICOLON       reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CASE            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DEFAULT         reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LBRACE          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IDENTIFIER      reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IF              reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    WHILE           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DO              reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FOR             reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    SWITCH          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FINAL           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CONTINUE        reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    BREAK           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    RETURN          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    GOTO            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    WITH            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    MIXIN           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IMPORT          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    STATIC          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LPAREN          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ALIAS           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ENUM            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    EXTERN          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    AUTO            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CONST           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    IMMUTABLE       reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FOREACH         reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FOREACH_REVERSE reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CLASS           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    UNION           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    AMPERSAND       reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PLUS_PLUS       reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    MINUS_MINUS     reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TIMES           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    MINUS           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PLUS            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    EXCLAMATION     reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TILDE           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CAST            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DOT             reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    THIS            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    NULL            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TRUE            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FALSE           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DOLLAR          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    INUMBER         reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DNUMBER         reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LIT_CHAR        reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LIT_STR         reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LBRACKET        reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FUNCTION        reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    NEW             reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    BOOL            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    SHORT           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    USHORT          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    INT             reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    UINT            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    LONG            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ULONG           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    CHAR            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    FLOAT           reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    VOID            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TYPEOF          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    TYPEID          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    BODY            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    RBRACE          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    ELSE            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    DELETE          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PRIVATE         reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PROTECTED       reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    PUBLIC          reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)
    $end            reduce using rule 460 (AutoFuncDeclaration -> StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody .)


state 145

    (313) BlockStatement -> LBRACE . M_block_begin RBRACE M_block_end
    (314) BlockStatement -> LBRACE . M_block_begin StatementList RBRACE M_block_end
    (315) M_block_begin -> .

    RBRACE          reduce using rule 315 (M_block_begin -> .)
    SEMICOLON       reduce using rule 315 (M_block_begin -> .)
    CASE            reduce using rule 315 (M_block_begin -> .)
    DEFAULT         reduce using rule 315 (M_block_begin -> .)
    LBRACE          reduce using rule 315 (M_block_begin -> .)
    IDENTIFIER      reduce using rule 315 (M_block_begin -> .)
    IF              reduce using rule 315 (M_block_begin -> .)
    WHILE           reduce using rule 315 (M_block_begin -> .)
    DO              reduce using rule 315 (M_block_begin -> .)
    FOR             reduce using rule 315 (M_block_begin -> .)
    SWITCH          reduce using rule 315 (M_block_begin -> .)
    FINAL           reduce using rule 315 (M_block_begin -> .)
    CONTINUE        reduce using rule 315 (M_block_begin -> .)
    BREAK           reduce using rule 315 (M_block_begin -> .)
    RETURN          reduce using rule 315 (M_block_begin -> .)
    GOTO            reduce using rule 315 (M_block_begin -> .)
    WITH            reduce using rule 315 (M_block_begin -> .)
    MIXIN           reduce using rule 315 (M_block_begin -> .)
    IMPORT          reduce using rule 315 (M_block_begin -> .)
    STATIC          reduce using rule 315 (M_block_begin -> .)
    LPAREN          reduce using rule 315 (M_block_begin -> .)
    ALIAS           reduce using rule 315 (M_block_begin -> .)
    ENUM            reduce using rule 315 (M_block_begin -> .)
    EXTERN          reduce using rule 315 (M_block_begin -> .)
    AUTO            reduce using rule 315 (M_block_begin -> .)
    CONST           reduce using rule 315 (M_block_begin -> .)
    IMMUTABLE       reduce using rule 315 (M_block_begin -> .)
    FOREACH         reduce using rule 315 (M_block_begin -> .)
    FOREACH_REVERSE reduce using rule 315 (M_block_begin -> .)
    CLASS           reduce using rule 315 (M_block_begin -> .)
    UNION           reduce using rule 315 (M_block_begin -> .)
    AMPERSAND       reduce using rule 315 (M_block_begin -> .)
    PLUS_PLUS       reduce using rule 315 (M_block_begin -> .)
    MINUS_MINUS     reduce using rule 315 (M_block_begin -> .)
    TIMES           reduce using rule 315 (M_block_begin -> .)
    MINUS           reduce using rule 315 (M_block_begin -> .)
    PLUS            reduce using rule 315 (M_block_begin -> .)
    EXCLAMATION     reduce using rule 315 (M_block_begin -> .)
    TILDE           reduce using rule 315 (M_block_begin -> .)
    CAST            reduce using rule 315 (M_block_begin -> .)
    DOT             reduce using rule 315 (M_block_begin -> .)
    THIS            reduce using rule 315 (M_block_begin -> .)
    NULL            reduce using rule 315 (M_block_begin -> .)
    TRUE            reduce using rule 315 (M_block_begin -> .)
    FALSE           reduce using rule 315 (M_block_begin -> .)
    DOLLAR          reduce using rule 315 (M_block_begin -> .)
    INUMBER         reduce using rule 315 (M_block_begin -> .)
    DNUMBER         reduce using rule 315 (M_block_begin -> .)
    LIT_CHAR        reduce using rule 315 (M_block_begin -> .)
    LIT_STR         reduce using rule 315 (M_block_begin -> .)
    LBRACKET        reduce using rule 315 (M_block_begin -> .)
    FUNCTION        reduce using rule 315 (M_block_begin -> .)
    NEW             reduce using rule 315 (M_block_begin -> .)
    BOOL            reduce using rule 315 (M_block_begin -> .)
    SHORT           reduce using rule 315 (M_block_begin -> .)
    USHORT          reduce using rule 315 (M_block_begin -> .)
    INT             reduce using rule 315 (M_block_begin -> .)
    UINT            reduce using rule 315 (M_block_begin -> .)
    LONG            reduce using rule 315 (M_block_begin -> .)
    ULONG           reduce using rule 315 (M_block_begin -> .)
    CHAR            reduce using rule 315 (M_block_begin -> .)
    FLOAT           reduce using rule 315 (M_block_begin -> .)
    VOID            reduce using rule 315 (M_block_begin -> .)
    TYPEOF          reduce using rule 315 (M_block_begin -> .)
    TYPEID          reduce using rule 315 (M_block_begin -> .)
    BODY            reduce using rule 315 (M_block_begin -> .)

    M_block_begin                  shift and go to state 298

state 146

    (491) BodyStatement -> BODY . BlockStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end

    LBRACE          shift and go to state 145

    BlockStatement                 shift and go to state 299

state 147

    (489) FunctionBody -> BlockStatement .

    ALIAS           reduce using rule 489 (FunctionBody -> BlockStatement .)
    ENUM            reduce using rule 489 (FunctionBody -> BlockStatement .)
    IMPORT          reduce using rule 489 (FunctionBody -> BlockStatement .)
    STATIC          reduce using rule 489 (FunctionBody -> BlockStatement .)
    CLASS           reduce using rule 489 (FunctionBody -> BlockStatement .)
    UNION           reduce using rule 489 (FunctionBody -> BlockStatement .)
    EXTERN          reduce using rule 489 (FunctionBody -> BlockStatement .)
    FINAL           reduce using rule 489 (FunctionBody -> BlockStatement .)
    AUTO            reduce using rule 489 (FunctionBody -> BlockStatement .)
    CONST           reduce using rule 489 (FunctionBody -> BlockStatement .)
    IMMUTABLE       reduce using rule 489 (FunctionBody -> BlockStatement .)
    DOT             reduce using rule 489 (FunctionBody -> BlockStatement .)
    BOOL            reduce using rule 489 (FunctionBody -> BlockStatement .)
    SHORT           reduce using rule 489 (FunctionBody -> BlockStatement .)
    USHORT          reduce using rule 489 (FunctionBody -> BlockStatement .)
    INT             reduce using rule 489 (FunctionBody -> BlockStatement .)
    UINT            reduce using rule 489 (FunctionBody -> BlockStatement .)
    LONG            reduce using rule 489 (FunctionBody -> BlockStatement .)
    ULONG           reduce using rule 489 (FunctionBody -> BlockStatement .)
    CHAR            reduce using rule 489 (FunctionBody -> BlockStatement .)
    FLOAT           reduce using rule 489 (FunctionBody -> BlockStatement .)
    VOID            reduce using rule 489 (FunctionBody -> BlockStatement .)
    IDENTIFIER      reduce using rule 489 (FunctionBody -> BlockStatement .)
    TYPEOF          reduce using rule 489 (FunctionBody -> BlockStatement .)
    $end            reduce using rule 489 (FunctionBody -> BlockStatement .)
    SEMICOLON       reduce using rule 489 (FunctionBody -> BlockStatement .)
    NEW             reduce using rule 489 (FunctionBody -> BlockStatement .)
    DELETE          reduce using rule 489 (FunctionBody -> BlockStatement .)
    MIXIN           reduce using rule 489 (FunctionBody -> BlockStatement .)
    PRIVATE         reduce using rule 489 (FunctionBody -> BlockStatement .)
    PROTECTED       reduce using rule 489 (FunctionBody -> BlockStatement .)
    PUBLIC          reduce using rule 489 (FunctionBody -> BlockStatement .)
    RBRACE          reduce using rule 489 (FunctionBody -> BlockStatement .)
    CASE            reduce using rule 489 (FunctionBody -> BlockStatement .)
    DEFAULT         reduce using rule 489 (FunctionBody -> BlockStatement .)
    LBRACE          reduce using rule 489 (FunctionBody -> BlockStatement .)
    IF              reduce using rule 489 (FunctionBody -> BlockStatement .)
    WHILE           reduce using rule 489 (FunctionBody -> BlockStatement .)
    DO              reduce using rule 489 (FunctionBody -> BlockStatement .)
    FOR             reduce using rule 489 (FunctionBody -> BlockStatement .)
    SWITCH          reduce using rule 489 (FunctionBody -> BlockStatement .)
    CONTINUE        reduce using rule 489 (FunctionBody -> BlockStatement .)
    BREAK           reduce using rule 489 (FunctionBody -> BlockStatement .)
    RETURN          reduce using rule 489 (FunctionBody -> BlockStatement .)
    GOTO            reduce using rule 489 (FunctionBody -> BlockStatement .)
    WITH            reduce using rule 489 (FunctionBody -> BlockStatement .)
    LPAREN          reduce using rule 489 (FunctionBody -> BlockStatement .)
    FOREACH         reduce using rule 489 (FunctionBody -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 489 (FunctionBody -> BlockStatement .)
    AMPERSAND       reduce using rule 489 (FunctionBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 489 (FunctionBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 489 (FunctionBody -> BlockStatement .)
    TIMES           reduce using rule 489 (FunctionBody -> BlockStatement .)
    MINUS           reduce using rule 489 (FunctionBody -> BlockStatement .)
    PLUS            reduce using rule 489 (FunctionBody -> BlockStatement .)
    EXCLAMATION     reduce using rule 489 (FunctionBody -> BlockStatement .)
    TILDE           reduce using rule 489 (FunctionBody -> BlockStatement .)
    CAST            reduce using rule 489 (FunctionBody -> BlockStatement .)
    THIS            reduce using rule 489 (FunctionBody -> BlockStatement .)
    NULL            reduce using rule 489 (FunctionBody -> BlockStatement .)
    TRUE            reduce using rule 489 (FunctionBody -> BlockStatement .)
    FALSE           reduce using rule 489 (FunctionBody -> BlockStatement .)
    DOLLAR          reduce using rule 489 (FunctionBody -> BlockStatement .)
    INUMBER         reduce using rule 489 (FunctionBody -> BlockStatement .)
    DNUMBER         reduce using rule 489 (FunctionBody -> BlockStatement .)
    LIT_CHAR        reduce using rule 489 (FunctionBody -> BlockStatement .)
    LIT_STR         reduce using rule 489 (FunctionBody -> BlockStatement .)
    LBRACKET        reduce using rule 489 (FunctionBody -> BlockStatement .)
    FUNCTION        reduce using rule 489 (FunctionBody -> BlockStatement .)
    TYPEID          reduce using rule 489 (FunctionBody -> BlockStatement .)
    BODY            reduce using rule 489 (FunctionBody -> BlockStatement .)
    ELSE            reduce using rule 489 (FunctionBody -> BlockStatement .)


state 148

    (490) FunctionBody -> BodyStatement .

    ALIAS           reduce using rule 490 (FunctionBody -> BodyStatement .)
    ENUM            reduce using rule 490 (FunctionBody -> BodyStatement .)
    IMPORT          reduce using rule 490 (FunctionBody -> BodyStatement .)
    STATIC          reduce using rule 490 (FunctionBody -> BodyStatement .)
    CLASS           reduce using rule 490 (FunctionBody -> BodyStatement .)
    UNION           reduce using rule 490 (FunctionBody -> BodyStatement .)
    EXTERN          reduce using rule 490 (FunctionBody -> BodyStatement .)
    FINAL           reduce using rule 490 (FunctionBody -> BodyStatement .)
    AUTO            reduce using rule 490 (FunctionBody -> BodyStatement .)
    CONST           reduce using rule 490 (FunctionBody -> BodyStatement .)
    IMMUTABLE       reduce using rule 490 (FunctionBody -> BodyStatement .)
    DOT             reduce using rule 490 (FunctionBody -> BodyStatement .)
    BOOL            reduce using rule 490 (FunctionBody -> BodyStatement .)
    SHORT           reduce using rule 490 (FunctionBody -> BodyStatement .)
    USHORT          reduce using rule 490 (FunctionBody -> BodyStatement .)
    INT             reduce using rule 490 (FunctionBody -> BodyStatement .)
    UINT            reduce using rule 490 (FunctionBody -> BodyStatement .)
    LONG            reduce using rule 490 (FunctionBody -> BodyStatement .)
    ULONG           reduce using rule 490 (FunctionBody -> BodyStatement .)
    CHAR            reduce using rule 490 (FunctionBody -> BodyStatement .)
    FLOAT           reduce using rule 490 (FunctionBody -> BodyStatement .)
    VOID            reduce using rule 490 (FunctionBody -> BodyStatement .)
    IDENTIFIER      reduce using rule 490 (FunctionBody -> BodyStatement .)
    TYPEOF          reduce using rule 490 (FunctionBody -> BodyStatement .)
    $end            reduce using rule 490 (FunctionBody -> BodyStatement .)
    SEMICOLON       reduce using rule 490 (FunctionBody -> BodyStatement .)
    NEW             reduce using rule 490 (FunctionBody -> BodyStatement .)
    DELETE          reduce using rule 490 (FunctionBody -> BodyStatement .)
    MIXIN           reduce using rule 490 (FunctionBody -> BodyStatement .)
    PRIVATE         reduce using rule 490 (FunctionBody -> BodyStatement .)
    PROTECTED       reduce using rule 490 (FunctionBody -> BodyStatement .)
    PUBLIC          reduce using rule 490 (FunctionBody -> BodyStatement .)
    RBRACE          reduce using rule 490 (FunctionBody -> BodyStatement .)
    CASE            reduce using rule 490 (FunctionBody -> BodyStatement .)
    DEFAULT         reduce using rule 490 (FunctionBody -> BodyStatement .)
    LBRACE          reduce using rule 490 (FunctionBody -> BodyStatement .)
    IF              reduce using rule 490 (FunctionBody -> BodyStatement .)
    WHILE           reduce using rule 490 (FunctionBody -> BodyStatement .)
    DO              reduce using rule 490 (FunctionBody -> BodyStatement .)
    FOR             reduce using rule 490 (FunctionBody -> BodyStatement .)
    SWITCH          reduce using rule 490 (FunctionBody -> BodyStatement .)
    CONTINUE        reduce using rule 490 (FunctionBody -> BodyStatement .)
    BREAK           reduce using rule 490 (FunctionBody -> BodyStatement .)
    RETURN          reduce using rule 490 (FunctionBody -> BodyStatement .)
    GOTO            reduce using rule 490 (FunctionBody -> BodyStatement .)
    WITH            reduce using rule 490 (FunctionBody -> BodyStatement .)
    LPAREN          reduce using rule 490 (FunctionBody -> BodyStatement .)
    FOREACH         reduce using rule 490 (FunctionBody -> BodyStatement .)
    FOREACH_REVERSE reduce using rule 490 (FunctionBody -> BodyStatement .)
    AMPERSAND       reduce using rule 490 (FunctionBody -> BodyStatement .)
    PLUS_PLUS       reduce using rule 490 (FunctionBody -> BodyStatement .)
    MINUS_MINUS     reduce using rule 490 (FunctionBody -> BodyStatement .)
    TIMES           reduce using rule 490 (FunctionBody -> BodyStatement .)
    MINUS           reduce using rule 490 (FunctionBody -> BodyStatement .)
    PLUS            reduce using rule 490 (FunctionBody -> BodyStatement .)
    EXCLAMATION     reduce using rule 490 (FunctionBody -> BodyStatement .)
    TILDE           reduce using rule 490 (FunctionBody -> BodyStatement .)
    CAST            reduce using rule 490 (FunctionBody -> BodyStatement .)
    THIS            reduce using rule 490 (FunctionBody -> BodyStatement .)
    NULL            reduce using rule 490 (FunctionBody -> BodyStatement .)
    TRUE            reduce using rule 490 (FunctionBody -> BodyStatement .)
    FALSE           reduce using rule 490 (FunctionBody -> BodyStatement .)
    DOLLAR          reduce using rule 490 (FunctionBody -> BodyStatement .)
    INUMBER         reduce using rule 490 (FunctionBody -> BodyStatement .)
    DNUMBER         reduce using rule 490 (FunctionBody -> BodyStatement .)
    LIT_CHAR        reduce using rule 490 (FunctionBody -> BodyStatement .)
    LIT_STR         reduce using rule 490 (FunctionBody -> BodyStatement .)
    LBRACKET        reduce using rule 490 (FunctionBody -> BodyStatement .)
    FUNCTION        reduce using rule 490 (FunctionBody -> BodyStatement .)
    TYPEID          reduce using rule 490 (FunctionBody -> BodyStatement .)
    BODY            reduce using rule 490 (FunctionBody -> BodyStatement .)
    ELSE            reduce using rule 490 (FunctionBody -> BodyStatement .)


state 149

    (488) MemberFunctionAttribute -> RETURN .

    CONST           reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    IMMUTABLE       reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    RETURN          reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    ASSIGN          reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    COMMA           reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    SEMICOLON       reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    RPAREN          reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    ELLIPSIS        reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    LBRACE          reduce using rule 488 (MemberFunctionAttribute -> RETURN .)
    BODY            reduce using rule 488 (MemberFunctionAttribute -> RETURN .)


state 150

    (486) MemberFunctionAttribute -> CONST .

    CONST           reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    IMMUTABLE       reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    RETURN          reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    ASSIGN          reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    COMMA           reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    SEMICOLON       reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    RPAREN          reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    ELLIPSIS        reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    LBRACE          reduce using rule 486 (MemberFunctionAttribute -> CONST .)
    BODY            reduce using rule 486 (MemberFunctionAttribute -> CONST .)


state 151

    (463) FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .

    LBRACE          reduce using rule 463 (FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    BODY            reduce using rule 463 (FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    SEMICOLON       reduce using rule 463 (FuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)


state 152

    (482) MemberFunctionAttributes -> MemberFunctionAttribute .
    (483) MemberFunctionAttributes -> MemberFunctionAttribute . MemberFunctionAttributes
    (482) MemberFunctionAttributes -> . MemberFunctionAttribute
    (483) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (486) MemberFunctionAttribute -> . CONST
    (487) MemberFunctionAttribute -> . IMMUTABLE
    (488) MemberFunctionAttribute -> . RETURN

    LBRACE          reduce using rule 482 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    BODY            reduce using rule 482 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    SEMICOLON       reduce using rule 482 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    ASSIGN          reduce using rule 482 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    COMMA           reduce using rule 482 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    RPAREN          reduce using rule 482 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    ELLIPSIS        reduce using rule 482 (MemberFunctionAttributes -> MemberFunctionAttribute .)
    CONST           shift and go to state 150
    IMMUTABLE       shift and go to state 154
    RETURN          shift and go to state 149

    MemberFunctionAttribute        shift and go to state 152
    MemberFunctionAttributes       shift and go to state 300

state 153

    (484) MemberFunctionAttributes_opt -> MemberFunctionAttributes .

    LBRACE          reduce using rule 484 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    BODY            reduce using rule 484 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    SEMICOLON       reduce using rule 484 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    ASSIGN          reduce using rule 484 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    COMMA           reduce using rule 484 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    RPAREN          reduce using rule 484 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)
    ELLIPSIS        reduce using rule 484 (MemberFunctionAttributes_opt -> MemberFunctionAttributes .)


state 154

    (487) MemberFunctionAttribute -> IMMUTABLE .

    CONST           reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    RETURN          reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    ASSIGN          reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    COMMA           reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    SEMICOLON       reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    RPAREN          reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    ELLIPSIS        reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    LBRACE          reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)
    BODY            reduce using rule 487 (MemberFunctionAttribute -> IMMUTABLE .)


state 155

    (485) MemberFunctionAttributes_opt -> empty .

    LBRACE          reduce using rule 485 (MemberFunctionAttributes_opt -> empty .)
    BODY            reduce using rule 485 (MemberFunctionAttributes_opt -> empty .)
    SEMICOLON       reduce using rule 485 (MemberFunctionAttributes_opt -> empty .)
    ASSIGN          reduce using rule 485 (MemberFunctionAttributes_opt -> empty .)
    COMMA           reduce using rule 485 (MemberFunctionAttributes_opt -> empty .)
    RPAREN          reduce using rule 485 (MemberFunctionAttributes_opt -> empty .)
    ELLIPSIS        reduce using rule 485 (MemberFunctionAttributes_opt -> empty .)


state 156

    (470) Parameter -> InOut_opt . BasicType Declarator
    (471) Parameter -> InOut_opt . BasicType Declarator ELLIPSIS
    (472) Parameter -> InOut_opt . BasicType Declarator ASSIGN AssignExpression
    (473) Parameter -> InOut_opt . Type
    (474) Parameter -> InOut_opt . Type ELLIPSIS
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (76) Type -> . BasicType BasicType2_opt
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 302
    IdentifierList                 shift and go to state 34
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    Type                           shift and go to state 301

state 157

    (477) InOutX -> AUTO .

    AUTO            reduce using rule 477 (InOutX -> AUTO .)
    FINAL           reduce using rule 477 (InOutX -> AUTO .)
    SCOPE           reduce using rule 477 (InOutX -> AUTO .)
    DOT             reduce using rule 477 (InOutX -> AUTO .)
    BOOL            reduce using rule 477 (InOutX -> AUTO .)
    SHORT           reduce using rule 477 (InOutX -> AUTO .)
    USHORT          reduce using rule 477 (InOutX -> AUTO .)
    INT             reduce using rule 477 (InOutX -> AUTO .)
    UINT            reduce using rule 477 (InOutX -> AUTO .)
    LONG            reduce using rule 477 (InOutX -> AUTO .)
    ULONG           reduce using rule 477 (InOutX -> AUTO .)
    CHAR            reduce using rule 477 (InOutX -> AUTO .)
    FLOAT           reduce using rule 477 (InOutX -> AUTO .)
    VOID            reduce using rule 477 (InOutX -> AUTO .)
    IDENTIFIER      reduce using rule 477 (InOutX -> AUTO .)
    TYPEOF          reduce using rule 477 (InOutX -> AUTO .)


state 158

    (479) InOutX -> SCOPE .

    AUTO            reduce using rule 479 (InOutX -> SCOPE .)
    FINAL           reduce using rule 479 (InOutX -> SCOPE .)
    SCOPE           reduce using rule 479 (InOutX -> SCOPE .)
    DOT             reduce using rule 479 (InOutX -> SCOPE .)
    BOOL            reduce using rule 479 (InOutX -> SCOPE .)
    SHORT           reduce using rule 479 (InOutX -> SCOPE .)
    USHORT          reduce using rule 479 (InOutX -> SCOPE .)
    INT             reduce using rule 479 (InOutX -> SCOPE .)
    UINT            reduce using rule 479 (InOutX -> SCOPE .)
    LONG            reduce using rule 479 (InOutX -> SCOPE .)
    ULONG           reduce using rule 479 (InOutX -> SCOPE .)
    CHAR            reduce using rule 479 (InOutX -> SCOPE .)
    FLOAT           reduce using rule 479 (InOutX -> SCOPE .)
    VOID            reduce using rule 479 (InOutX -> SCOPE .)
    IDENTIFIER      reduce using rule 479 (InOutX -> SCOPE .)
    TYPEOF          reduce using rule 479 (InOutX -> SCOPE .)


state 159

    (478) InOutX -> FINAL .

    AUTO            reduce using rule 478 (InOutX -> FINAL .)
    FINAL           reduce using rule 478 (InOutX -> FINAL .)
    SCOPE           reduce using rule 478 (InOutX -> FINAL .)
    DOT             reduce using rule 478 (InOutX -> FINAL .)
    BOOL            reduce using rule 478 (InOutX -> FINAL .)
    SHORT           reduce using rule 478 (InOutX -> FINAL .)
    USHORT          reduce using rule 478 (InOutX -> FINAL .)
    INT             reduce using rule 478 (InOutX -> FINAL .)
    UINT            reduce using rule 478 (InOutX -> FINAL .)
    LONG            reduce using rule 478 (InOutX -> FINAL .)
    ULONG           reduce using rule 478 (InOutX -> FINAL .)
    CHAR            reduce using rule 478 (InOutX -> FINAL .)
    FLOAT           reduce using rule 478 (InOutX -> FINAL .)
    VOID            reduce using rule 478 (InOutX -> FINAL .)
    IDENTIFIER      reduce using rule 478 (InOutX -> FINAL .)
    TYPEOF          reduce using rule 478 (InOutX -> FINAL .)


state 160

    (468) ParameterList_opt -> ParameterList .

    RPAREN          reduce using rule 468 (ParameterList_opt -> ParameterList .)


state 161

    (480) InOut_opt -> InOut .
    (476) InOut -> InOut . InOutX
    (477) InOutX -> . AUTO
    (478) InOutX -> . FINAL
    (479) InOutX -> . SCOPE

    DOT             reduce using rule 480 (InOut_opt -> InOut .)
    BOOL            reduce using rule 480 (InOut_opt -> InOut .)
    SHORT           reduce using rule 480 (InOut_opt -> InOut .)
    USHORT          reduce using rule 480 (InOut_opt -> InOut .)
    INT             reduce using rule 480 (InOut_opt -> InOut .)
    UINT            reduce using rule 480 (InOut_opt -> InOut .)
    LONG            reduce using rule 480 (InOut_opt -> InOut .)
    ULONG           reduce using rule 480 (InOut_opt -> InOut .)
    CHAR            reduce using rule 480 (InOut_opt -> InOut .)
    FLOAT           reduce using rule 480 (InOut_opt -> InOut .)
    VOID            reduce using rule 480 (InOut_opt -> InOut .)
    IDENTIFIER      reduce using rule 480 (InOut_opt -> InOut .)
    TYPEOF          reduce using rule 480 (InOut_opt -> InOut .)
    AUTO            shift and go to state 157
    FINAL           shift and go to state 159
    SCOPE           shift and go to state 158

    InOutX                         shift and go to state 303

state 162

    (467) ParameterList -> ELLIPSIS .

    RPAREN          reduce using rule 467 (ParameterList -> ELLIPSIS .)


state 163

    (464) Parameters -> LPAREN ParameterList_opt . RPAREN

    RPAREN          shift and go to state 304


state 164

    (475) InOut -> InOutX .

    AUTO            reduce using rule 475 (InOut -> InOutX .)
    FINAL           reduce using rule 475 (InOut -> InOutX .)
    SCOPE           reduce using rule 475 (InOut -> InOutX .)
    DOT             reduce using rule 475 (InOut -> InOutX .)
    BOOL            reduce using rule 475 (InOut -> InOutX .)
    SHORT           reduce using rule 475 (InOut -> InOutX .)
    USHORT          reduce using rule 475 (InOut -> InOutX .)
    INT             reduce using rule 475 (InOut -> InOutX .)
    UINT            reduce using rule 475 (InOut -> InOutX .)
    LONG            reduce using rule 475 (InOut -> InOutX .)
    ULONG           reduce using rule 475 (InOut -> InOutX .)
    CHAR            reduce using rule 475 (InOut -> InOutX .)
    FLOAT           reduce using rule 475 (InOut -> InOutX .)
    VOID            reduce using rule 475 (InOut -> InOutX .)
    IDENTIFIER      reduce using rule 475 (InOut -> InOutX .)
    TYPEOF          reduce using rule 475 (InOut -> InOutX .)


state 165

    (465) ParameterList -> Parameter .
    (466) ParameterList -> Parameter . COMMA ParameterList

    RPAREN          reduce using rule 465 (ParameterList -> Parameter .)
    COMMA           shift and go to state 305


state 166

    (469) ParameterList_opt -> empty .
    (481) InOut_opt -> empty .

    RPAREN          reduce using rule 469 (ParameterList_opt -> empty .)
    DOT             reduce using rule 481 (InOut_opt -> empty .)
    BOOL            reduce using rule 481 (InOut_opt -> empty .)
    SHORT           reduce using rule 481 (InOut_opt -> empty .)
    USHORT          reduce using rule 481 (InOut_opt -> empty .)
    INT             reduce using rule 481 (InOut_opt -> empty .)
    UINT            reduce using rule 481 (InOut_opt -> empty .)
    LONG            reduce using rule 481 (InOut_opt -> empty .)
    ULONG           reduce using rule 481 (InOut_opt -> empty .)
    CHAR            reduce using rule 481 (InOut_opt -> empty .)
    FLOAT           reduce using rule 481 (InOut_opt -> empty .)
    VOID            reduce using rule 481 (InOut_opt -> empty .)
    IDENTIFIER      reduce using rule 481 (InOut_opt -> empty .)
    TYPEOF          reduce using rule 481 (InOut_opt -> empty .)


state 167

    (21) ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .

    SEMICOLON       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CASE            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DEFAULT         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LBRACE          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IF              reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    WHILE           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DO              reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FOR             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    SWITCH          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FINAL           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CONTINUE        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    BREAK           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    RETURN          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    GOTO            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    WITH            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    MIXIN           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IMPORT          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    STATIC          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LPAREN          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ALIAS           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ENUM            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    EXTERN          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    AUTO            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CONST           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    IMMUTABLE       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FOREACH         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FOREACH_REVERSE reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CLASS           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    UNION           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    AMPERSAND       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PLUS_PLUS       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    MINUS_MINUS     reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TIMES           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    MINUS           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PLUS            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    EXCLAMATION     reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TILDE           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CAST            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DOT             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    THIS            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    NULL            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TRUE            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FALSE           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DOLLAR          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    INUMBER         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DNUMBER         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LIT_CHAR        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LIT_STR         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LBRACKET        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FUNCTION        reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    NEW             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    BOOL            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    SHORT           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    USHORT          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    INT             reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    UINT            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    LONG            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ULONG           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    CHAR            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    FLOAT           reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    VOID            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TYPEOF          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    TYPEID          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    BODY            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    RBRACE          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    ELSE            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    $end            reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    DELETE          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PRIVATE         reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PROTECTED       reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)
    PUBLIC          reduce using rule 21 (ImportDeclaration -> STATIC IMPORT ImportList SEMICOLON .)


state 168

    (44) DeclaratorInitializer -> VarDeclarator ASSIGN . Initializer
    (115) Initializer -> . VoidInitializer
    (116) Initializer -> . NonVoidInitializer
    (143) VoidInitializer -> . VOID
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    VOID            shift and go to state 306
    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    Initializer                    shift and go to state 311
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    NonVoidInitializer             shift and go to state 308
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    ArrayInitializer               shift and go to state 309
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    IdentifierList                 shift and go to state 244
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    VoidInitializer                shift and go to state 310
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 313

state 169

    (257) ArrayLiteral -> LBRACKET . ArgumentList_opt RBRACKET
    (218) ArgumentList_opt -> . ArgumentList
    (219) ArgumentList_opt -> . empty
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (496) empty -> .
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RBRACKET        reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 314
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 316
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ArgumentList_opt               shift and go to state 315
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 170

    (175) XorExpression -> AndExpression .
    (178) AndExpression -> AndExpression . AMPERSAND CmpExpression

    CARET           reduce using rule 175 (XorExpression -> AndExpression .)
    PIPE            reduce using rule 175 (XorExpression -> AndExpression .)
    DOUBLE_AMPERSAND reduce using rule 175 (XorExpression -> AndExpression .)
    QUESTION        reduce using rule 175 (XorExpression -> AndExpression .)
    DOUBLE_PIPE     reduce using rule 175 (XorExpression -> AndExpression .)
    ASSIGN          reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_PLUS         reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_MINUS        reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_TIMES        reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_DIV          reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_MODULO       reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_AND_BIT      reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_OR_BIT       reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_XOR_BIT      reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_LEFT         reduce using rule 175 (XorExpression -> AndExpression .)
    EQ_RIGHT        reduce using rule 175 (XorExpression -> AndExpression .)
    COMMA           reduce using rule 175 (XorExpression -> AndExpression .)
    SEMICOLON       reduce using rule 175 (XorExpression -> AndExpression .)
    RPAREN          reduce using rule 175 (XorExpression -> AndExpression .)
    RANGE           reduce using rule 175 (XorExpression -> AndExpression .)
    RBRACKET        reduce using rule 175 (XorExpression -> AndExpression .)
    RBRACE          reduce using rule 175 (XorExpression -> AndExpression .)
    COLON           reduce using rule 175 (XorExpression -> AndExpression .)
    AMPERSAND       shift and go to state 318


state 171

    (240) PrimaryExpression -> TRUE .

    POWER           reduce using rule 240 (PrimaryExpression -> TRUE .)
    DOT             reduce using rule 240 (PrimaryExpression -> TRUE .)
    PLUS_PLUS       reduce using rule 240 (PrimaryExpression -> TRUE .)
    MINUS_MINUS     reduce using rule 240 (PrimaryExpression -> TRUE .)
    LPAREN          reduce using rule 240 (PrimaryExpression -> TRUE .)
    TIMES           reduce using rule 240 (PrimaryExpression -> TRUE .)
    DIV             reduce using rule 240 (PrimaryExpression -> TRUE .)
    MODULO          reduce using rule 240 (PrimaryExpression -> TRUE .)
    PLUS            reduce using rule 240 (PrimaryExpression -> TRUE .)
    MINUS           reduce using rule 240 (PrimaryExpression -> TRUE .)
    LEFT_SHIFT      reduce using rule 240 (PrimaryExpression -> TRUE .)
    RIGHT_SHIFT     reduce using rule 240 (PrimaryExpression -> TRUE .)
    IS_EQ           reduce using rule 240 (PrimaryExpression -> TRUE .)
    NOT_EQ          reduce using rule 240 (PrimaryExpression -> TRUE .)
    LESS            reduce using rule 240 (PrimaryExpression -> TRUE .)
    GREATER_EQ      reduce using rule 240 (PrimaryExpression -> TRUE .)
    GREATER         reduce using rule 240 (PrimaryExpression -> TRUE .)
    LESS_EQ         reduce using rule 240 (PrimaryExpression -> TRUE .)
    AMPERSAND       reduce using rule 240 (PrimaryExpression -> TRUE .)
    CARET           reduce using rule 240 (PrimaryExpression -> TRUE .)
    PIPE            reduce using rule 240 (PrimaryExpression -> TRUE .)
    DOUBLE_AMPERSAND reduce using rule 240 (PrimaryExpression -> TRUE .)
    QUESTION        reduce using rule 240 (PrimaryExpression -> TRUE .)
    DOUBLE_PIPE     reduce using rule 240 (PrimaryExpression -> TRUE .)
    ASSIGN          reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_PLUS         reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_MINUS        reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_TIMES        reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_DIV          reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_MODULO       reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_AND_BIT      reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_OR_BIT       reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_XOR_BIT      reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_LEFT         reduce using rule 240 (PrimaryExpression -> TRUE .)
    EQ_RIGHT        reduce using rule 240 (PrimaryExpression -> TRUE .)
    RBRACKET        reduce using rule 240 (PrimaryExpression -> TRUE .)
    RANGE           reduce using rule 240 (PrimaryExpression -> TRUE .)
    COMMA           reduce using rule 240 (PrimaryExpression -> TRUE .)
    RPAREN          reduce using rule 240 (PrimaryExpression -> TRUE .)
    SEMICOLON       reduce using rule 240 (PrimaryExpression -> TRUE .)
    RBRACE          reduce using rule 240 (PrimaryExpression -> TRUE .)
    COLON           reduce using rule 240 (PrimaryExpression -> TRUE .)


state 172

    (202) UnaryExpression -> MINUS . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 319
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 173

    (167) ConditionalExpression -> OrOrExpression .
    (168) ConditionalExpression -> OrOrExpression . QUESTION Expression COLON ConditionalExpression
    (170) OrOrExpression -> OrOrExpression . DOUBLE_PIPE AndAndExpression

    ASSIGN          reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_PLUS         reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_MINUS        reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_TIMES        reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_DIV          reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_MODULO       reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_AND_BIT      reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_OR_BIT       reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_XOR_BIT      reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_LEFT         reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    EQ_RIGHT        reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    COMMA           reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    SEMICOLON       reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    RBRACKET        reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    RANGE           reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    RPAREN          reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    RBRACE          reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    COLON           reduce using rule 167 (ConditionalExpression -> OrOrExpression .)
    QUESTION        shift and go to state 320
    DOUBLE_PIPE     shift and go to state 321


state 174

    (203) UnaryExpression -> PLUS . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 322
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 175

    (267) FunctionLiteralBody -> BlockStatement .

    POWER           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RBRACKET        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RANGE           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RPAREN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RBRACE          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    COLON           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)


state 176

    (272) ImportExpression -> IMPORT . LPAREN AssignExpression RPAREN

    LPAREN          shift and go to state 323


state 177

    (181) CmpExpression -> RelExpression .

    AMPERSAND       reduce using rule 181 (CmpExpression -> RelExpression .)
    CARET           reduce using rule 181 (CmpExpression -> RelExpression .)
    PIPE            reduce using rule 181 (CmpExpression -> RelExpression .)
    DOUBLE_AMPERSAND reduce using rule 181 (CmpExpression -> RelExpression .)
    QUESTION        reduce using rule 181 (CmpExpression -> RelExpression .)
    DOUBLE_PIPE     reduce using rule 181 (CmpExpression -> RelExpression .)
    ASSIGN          reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_PLUS         reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_MINUS        reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_TIMES        reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_DIV          reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_MODULO       reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_AND_BIT      reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_OR_BIT       reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_XOR_BIT      reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_LEFT         reduce using rule 181 (CmpExpression -> RelExpression .)
    EQ_RIGHT        reduce using rule 181 (CmpExpression -> RelExpression .)
    COMMA           reduce using rule 181 (CmpExpression -> RelExpression .)
    COLON           reduce using rule 181 (CmpExpression -> RelExpression .)
    RBRACKET        reduce using rule 181 (CmpExpression -> RelExpression .)
    RANGE           reduce using rule 181 (CmpExpression -> RelExpression .)
    RPAREN          reduce using rule 181 (CmpExpression -> RelExpression .)
    SEMICOLON       reduce using rule 181 (CmpExpression -> RelExpression .)
    RBRACE          reduce using rule 181 (CmpExpression -> RelExpression .)


state 178

    (244) PrimaryExpression -> DNUMBER .

    POWER           reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    DOT             reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    PLUS_PLUS       reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    MINUS_MINUS     reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    LPAREN          reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    TIMES           reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    DIV             reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    MODULO          reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    PLUS            reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    MINUS           reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    LEFT_SHIFT      reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    RIGHT_SHIFT     reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    IS_EQ           reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    NOT_EQ          reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    LESS            reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    GREATER_EQ      reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    GREATER         reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    LESS_EQ         reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    AMPERSAND       reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    CARET           reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    PIPE            reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    QUESTION        reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    DOUBLE_PIPE     reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    ASSIGN          reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_PLUS         reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_MINUS        reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_TIMES        reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_DIV          reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_MODULO       reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_AND_BIT      reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_OR_BIT       reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_XOR_BIT      reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_LEFT         reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    EQ_RIGHT        reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    RBRACKET        reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    RANGE           reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    COMMA           reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    RPAREN          reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    SEMICOLON       reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    RBRACE          reduce using rule 244 (PrimaryExpression -> DNUMBER .)
    COLON           reduce using rule 244 (PrimaryExpression -> DNUMBER .)


state 179

    (180) CmpExpression -> EqualExpression .

    AMPERSAND       reduce using rule 180 (CmpExpression -> EqualExpression .)
    CARET           reduce using rule 180 (CmpExpression -> EqualExpression .)
    PIPE            reduce using rule 180 (CmpExpression -> EqualExpression .)
    DOUBLE_AMPERSAND reduce using rule 180 (CmpExpression -> EqualExpression .)
    QUESTION        reduce using rule 180 (CmpExpression -> EqualExpression .)
    DOUBLE_PIPE     reduce using rule 180 (CmpExpression -> EqualExpression .)
    ASSIGN          reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_PLUS         reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_MINUS        reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_TIMES        reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_DIV          reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_MODULO       reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_AND_BIT      reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_OR_BIT       reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_XOR_BIT      reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_LEFT         reduce using rule 180 (CmpExpression -> EqualExpression .)
    EQ_RIGHT        reduce using rule 180 (CmpExpression -> EqualExpression .)
    COMMA           reduce using rule 180 (CmpExpression -> EqualExpression .)
    COLON           reduce using rule 180 (CmpExpression -> EqualExpression .)
    RBRACKET        reduce using rule 180 (CmpExpression -> EqualExpression .)
    RANGE           reduce using rule 180 (CmpExpression -> EqualExpression .)
    RPAREN          reduce using rule 180 (CmpExpression -> EqualExpression .)
    SEMICOLON       reduce using rule 180 (CmpExpression -> EqualExpression .)
    RBRACE          reduce using rule 180 (CmpExpression -> EqualExpression .)


state 180

    (155) AssignExpression -> ConditionalExpression .
    (156) AssignExpression -> ConditionalExpression . ASSIGN AssignExpression
    (157) AssignExpression -> ConditionalExpression . EQ_PLUS AssignExpression
    (158) AssignExpression -> ConditionalExpression . EQ_MINUS AssignExpression
    (159) AssignExpression -> ConditionalExpression . EQ_TIMES AssignExpression
    (160) AssignExpression -> ConditionalExpression . EQ_DIV AssignExpression
    (161) AssignExpression -> ConditionalExpression . EQ_MODULO AssignExpression
    (162) AssignExpression -> ConditionalExpression . EQ_AND_BIT AssignExpression
    (163) AssignExpression -> ConditionalExpression . EQ_OR_BIT AssignExpression
    (164) AssignExpression -> ConditionalExpression . EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> ConditionalExpression . EQ_LEFT AssignExpression
    (166) AssignExpression -> ConditionalExpression . EQ_RIGHT AssignExpression

    COMMA           reduce using rule 155 (AssignExpression -> ConditionalExpression .)
    SEMICOLON       reduce using rule 155 (AssignExpression -> ConditionalExpression .)
    RPAREN          reduce using rule 155 (AssignExpression -> ConditionalExpression .)
    RBRACKET        reduce using rule 155 (AssignExpression -> ConditionalExpression .)
    COLON           reduce using rule 155 (AssignExpression -> ConditionalExpression .)
    RANGE           reduce using rule 155 (AssignExpression -> ConditionalExpression .)
    RBRACE          reduce using rule 155 (AssignExpression -> ConditionalExpression .)
    ASSIGN          shift and go to state 334
    EQ_PLUS         shift and go to state 327
    EQ_MINUS        shift and go to state 330
    EQ_TIMES        shift and go to state 326
    EQ_DIV          shift and go to state 328
    EQ_MODULO       shift and go to state 333
    EQ_AND_BIT      shift and go to state 325
    EQ_OR_BIT       shift and go to state 332
    EQ_XOR_BIT      shift and go to state 329
    EQ_LEFT         shift and go to state 331
    EQ_RIGHT        shift and go to state 324


state 181

    (241) PrimaryExpression -> FALSE .

    POWER           reduce using rule 241 (PrimaryExpression -> FALSE .)
    DOT             reduce using rule 241 (PrimaryExpression -> FALSE .)
    PLUS_PLUS       reduce using rule 241 (PrimaryExpression -> FALSE .)
    MINUS_MINUS     reduce using rule 241 (PrimaryExpression -> FALSE .)
    LPAREN          reduce using rule 241 (PrimaryExpression -> FALSE .)
    TIMES           reduce using rule 241 (PrimaryExpression -> FALSE .)
    DIV             reduce using rule 241 (PrimaryExpression -> FALSE .)
    MODULO          reduce using rule 241 (PrimaryExpression -> FALSE .)
    PLUS            reduce using rule 241 (PrimaryExpression -> FALSE .)
    MINUS           reduce using rule 241 (PrimaryExpression -> FALSE .)
    LEFT_SHIFT      reduce using rule 241 (PrimaryExpression -> FALSE .)
    RIGHT_SHIFT     reduce using rule 241 (PrimaryExpression -> FALSE .)
    IS_EQ           reduce using rule 241 (PrimaryExpression -> FALSE .)
    NOT_EQ          reduce using rule 241 (PrimaryExpression -> FALSE .)
    LESS            reduce using rule 241 (PrimaryExpression -> FALSE .)
    GREATER_EQ      reduce using rule 241 (PrimaryExpression -> FALSE .)
    GREATER         reduce using rule 241 (PrimaryExpression -> FALSE .)
    LESS_EQ         reduce using rule 241 (PrimaryExpression -> FALSE .)
    AMPERSAND       reduce using rule 241 (PrimaryExpression -> FALSE .)
    CARET           reduce using rule 241 (PrimaryExpression -> FALSE .)
    PIPE            reduce using rule 241 (PrimaryExpression -> FALSE .)
    DOUBLE_AMPERSAND reduce using rule 241 (PrimaryExpression -> FALSE .)
    QUESTION        reduce using rule 241 (PrimaryExpression -> FALSE .)
    DOUBLE_PIPE     reduce using rule 241 (PrimaryExpression -> FALSE .)
    ASSIGN          reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_PLUS         reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_MINUS        reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_TIMES        reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_DIV          reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_MODULO       reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_AND_BIT      reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_OR_BIT       reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_XOR_BIT      reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_LEFT         reduce using rule 241 (PrimaryExpression -> FALSE .)
    EQ_RIGHT        reduce using rule 241 (PrimaryExpression -> FALSE .)
    RBRACKET        reduce using rule 241 (PrimaryExpression -> FALSE .)
    RANGE           reduce using rule 241 (PrimaryExpression -> FALSE .)
    COMMA           reduce using rule 241 (PrimaryExpression -> FALSE .)
    RPAREN          reduce using rule 241 (PrimaryExpression -> FALSE .)
    SEMICOLON       reduce using rule 241 (PrimaryExpression -> FALSE .)
    RBRACE          reduce using rule 241 (PrimaryExpression -> FALSE .)
    COLON           reduce using rule 241 (PrimaryExpression -> FALSE .)


state 182

    (238) PrimaryExpression -> THIS .

    POWER           reduce using rule 238 (PrimaryExpression -> THIS .)
    DOT             reduce using rule 238 (PrimaryExpression -> THIS .)
    PLUS_PLUS       reduce using rule 238 (PrimaryExpression -> THIS .)
    MINUS_MINUS     reduce using rule 238 (PrimaryExpression -> THIS .)
    LPAREN          reduce using rule 238 (PrimaryExpression -> THIS .)
    TIMES           reduce using rule 238 (PrimaryExpression -> THIS .)
    DIV             reduce using rule 238 (PrimaryExpression -> THIS .)
    MODULO          reduce using rule 238 (PrimaryExpression -> THIS .)
    PLUS            reduce using rule 238 (PrimaryExpression -> THIS .)
    MINUS           reduce using rule 238 (PrimaryExpression -> THIS .)
    LEFT_SHIFT      reduce using rule 238 (PrimaryExpression -> THIS .)
    RIGHT_SHIFT     reduce using rule 238 (PrimaryExpression -> THIS .)
    IS_EQ           reduce using rule 238 (PrimaryExpression -> THIS .)
    NOT_EQ          reduce using rule 238 (PrimaryExpression -> THIS .)
    LESS            reduce using rule 238 (PrimaryExpression -> THIS .)
    GREATER_EQ      reduce using rule 238 (PrimaryExpression -> THIS .)
    GREATER         reduce using rule 238 (PrimaryExpression -> THIS .)
    LESS_EQ         reduce using rule 238 (PrimaryExpression -> THIS .)
    AMPERSAND       reduce using rule 238 (PrimaryExpression -> THIS .)
    CARET           reduce using rule 238 (PrimaryExpression -> THIS .)
    PIPE            reduce using rule 238 (PrimaryExpression -> THIS .)
    DOUBLE_AMPERSAND reduce using rule 238 (PrimaryExpression -> THIS .)
    QUESTION        reduce using rule 238 (PrimaryExpression -> THIS .)
    DOUBLE_PIPE     reduce using rule 238 (PrimaryExpression -> THIS .)
    ASSIGN          reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_PLUS         reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_MINUS        reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_TIMES        reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_DIV          reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_MODULO       reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_AND_BIT      reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_OR_BIT       reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_XOR_BIT      reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_LEFT         reduce using rule 238 (PrimaryExpression -> THIS .)
    EQ_RIGHT        reduce using rule 238 (PrimaryExpression -> THIS .)
    RBRACKET        reduce using rule 238 (PrimaryExpression -> THIS .)
    RANGE           reduce using rule 238 (PrimaryExpression -> THIS .)
    COMMA           reduce using rule 238 (PrimaryExpression -> THIS .)
    RPAREN          reduce using rule 238 (PrimaryExpression -> THIS .)
    SEMICOLON       reduce using rule 238 (PrimaryExpression -> THIS .)
    RBRACE          reduce using rule 238 (PrimaryExpression -> THIS .)
    COLON           reduce using rule 238 (PrimaryExpression -> THIS .)


state 183

    (179) CmpExpression -> ShiftExpression .
    (189) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (190) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression
    (182) EqualExpression -> ShiftExpression . IS_EQ ShiftExpression
    (183) EqualExpression -> ShiftExpression . NOT_EQ ShiftExpression
    (184) RelExpression -> ShiftExpression . LESS ShiftExpression
    (185) RelExpression -> ShiftExpression . GREATER_EQ ShiftExpression
    (186) RelExpression -> ShiftExpression . GREATER ShiftExpression
    (187) RelExpression -> ShiftExpression . LESS_EQ ShiftExpression

    AMPERSAND       reduce using rule 179 (CmpExpression -> ShiftExpression .)
    CARET           reduce using rule 179 (CmpExpression -> ShiftExpression .)
    PIPE            reduce using rule 179 (CmpExpression -> ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 179 (CmpExpression -> ShiftExpression .)
    QUESTION        reduce using rule 179 (CmpExpression -> ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 179 (CmpExpression -> ShiftExpression .)
    ASSIGN          reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_PLUS         reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_MINUS        reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_TIMES        reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_DIV          reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_MODULO       reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_AND_BIT      reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_OR_BIT       reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_LEFT         reduce using rule 179 (CmpExpression -> ShiftExpression .)
    EQ_RIGHT        reduce using rule 179 (CmpExpression -> ShiftExpression .)
    COMMA           reduce using rule 179 (CmpExpression -> ShiftExpression .)
    COLON           reduce using rule 179 (CmpExpression -> ShiftExpression .)
    RBRACKET        reduce using rule 179 (CmpExpression -> ShiftExpression .)
    RANGE           reduce using rule 179 (CmpExpression -> ShiftExpression .)
    RPAREN          reduce using rule 179 (CmpExpression -> ShiftExpression .)
    SEMICOLON       reduce using rule 179 (CmpExpression -> ShiftExpression .)
    RBRACE          reduce using rule 179 (CmpExpression -> ShiftExpression .)
    LEFT_SHIFT      shift and go to state 339
    RIGHT_SHIFT     shift and go to state 341
    IS_EQ           shift and go to state 336
    NOT_EQ          shift and go to state 342
    LESS            shift and go to state 338
    GREATER_EQ      shift and go to state 340
    GREATER         shift and go to state 337
    LESS_EQ         shift and go to state 335


state 184

    (191) AddExpression -> MulExpression .
    (195) MulExpression -> MulExpression . TIMES UnaryExpression
    (196) MulExpression -> MulExpression . DIV UnaryExpression
    (197) MulExpression -> MulExpression . MODULO UnaryExpression

    PLUS            reduce using rule 191 (AddExpression -> MulExpression .)
    MINUS           reduce using rule 191 (AddExpression -> MulExpression .)
    LEFT_SHIFT      reduce using rule 191 (AddExpression -> MulExpression .)
    RIGHT_SHIFT     reduce using rule 191 (AddExpression -> MulExpression .)
    IS_EQ           reduce using rule 191 (AddExpression -> MulExpression .)
    NOT_EQ          reduce using rule 191 (AddExpression -> MulExpression .)
    LESS            reduce using rule 191 (AddExpression -> MulExpression .)
    GREATER_EQ      reduce using rule 191 (AddExpression -> MulExpression .)
    GREATER         reduce using rule 191 (AddExpression -> MulExpression .)
    LESS_EQ         reduce using rule 191 (AddExpression -> MulExpression .)
    AMPERSAND       reduce using rule 191 (AddExpression -> MulExpression .)
    CARET           reduce using rule 191 (AddExpression -> MulExpression .)
    PIPE            reduce using rule 191 (AddExpression -> MulExpression .)
    DOUBLE_AMPERSAND reduce using rule 191 (AddExpression -> MulExpression .)
    QUESTION        reduce using rule 191 (AddExpression -> MulExpression .)
    DOUBLE_PIPE     reduce using rule 191 (AddExpression -> MulExpression .)
    ASSIGN          reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_PLUS         reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_MINUS        reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_TIMES        reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_DIV          reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_MODULO       reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_AND_BIT      reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_OR_BIT       reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_XOR_BIT      reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_LEFT         reduce using rule 191 (AddExpression -> MulExpression .)
    EQ_RIGHT        reduce using rule 191 (AddExpression -> MulExpression .)
    COMMA           reduce using rule 191 (AddExpression -> MulExpression .)
    SEMICOLON       reduce using rule 191 (AddExpression -> MulExpression .)
    RBRACKET        reduce using rule 191 (AddExpression -> MulExpression .)
    RANGE           reduce using rule 191 (AddExpression -> MulExpression .)
    RPAREN          reduce using rule 191 (AddExpression -> MulExpression .)
    RBRACE          reduce using rule 191 (AddExpression -> MulExpression .)
    COLON           reduce using rule 191 (AddExpression -> MulExpression .)
    TIMES           shift and go to state 345
    DIV             shift and go to state 344
    MODULO          shift and go to state 343


state 185

    (214) NewExpressionWithArgs -> NewAnonClassExpression .

    POWER           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DOT             reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    PLUS_PLUS       reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    MINUS_MINUS     reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LPAREN          reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    TIMES           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DIV             reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    MODULO          reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    PLUS            reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    MINUS           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LEFT_SHIFT      reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RIGHT_SHIFT     reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    IS_EQ           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    NOT_EQ          reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LESS            reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    GREATER_EQ      reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    GREATER         reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    LESS_EQ         reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    AMPERSAND       reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    CARET           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    PIPE            reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DOUBLE_AMPERSAND reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    QUESTION        reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    DOUBLE_PIPE     reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    ASSIGN          reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_PLUS         reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_MINUS        reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_TIMES        reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_DIV          reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_MODULO       reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_AND_BIT      reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_OR_BIT       reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_XOR_BIT      reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_LEFT         reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    EQ_RIGHT        reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    COMMA           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RPAREN          reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RBRACKET        reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RANGE           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    SEMICOLON       reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    RBRACE          reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)
    COLON           reduce using rule 214 (NewExpressionWithArgs -> NewAnonClassExpression .)


state 186

    (266) ParameterMemberAttributes -> Parameters . MemberFunctionAttributes_opt
    (484) MemberFunctionAttributes_opt -> . MemberFunctionAttributes
    (485) MemberFunctionAttributes_opt -> . empty
    (482) MemberFunctionAttributes -> . MemberFunctionAttribute
    (483) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (496) empty -> .
    (486) MemberFunctionAttribute -> . CONST
    (487) MemberFunctionAttribute -> . IMMUTABLE
    (488) MemberFunctionAttribute -> . RETURN

    LBRACE          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    CONST           shift and go to state 150
    IMMUTABLE       shift and go to state 154
    RETURN          shift and go to state 149

    MemberFunctionAttributes       shift and go to state 153
    MemberFunctionAttributes_opt   shift and go to state 346
    empty                          shift and go to state 155
    MemberFunctionAttribute        shift and go to state 152

state 187

    (261) FunctionLiteral -> ParameterMemberAttributes . FunctionLiteralBody
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    FunctionLiteralBody            shift and go to state 347
    BlockStatement                 shift and go to state 175
    BodyStatement                  shift and go to state 213

state 188

    (250) PrimaryExpression -> ImportExpression .

    POWER           reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    DOT             reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    PLUS_PLUS       reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    MINUS_MINUS     reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    LPAREN          reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    TIMES           reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    DIV             reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    MODULO          reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    PLUS            reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    MINUS           reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    LEFT_SHIFT      reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    RIGHT_SHIFT     reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    IS_EQ           reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    NOT_EQ          reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    LESS            reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    GREATER_EQ      reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    GREATER         reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    LESS_EQ         reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    AMPERSAND       reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    CARET           reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    PIPE            reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    DOUBLE_AMPERSAND reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    QUESTION        reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    DOUBLE_PIPE     reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    ASSIGN          reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_PLUS         reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_MINUS        reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_TIMES        reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_DIV          reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_MODULO       reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_AND_BIT      reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_OR_BIT       reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_XOR_BIT      reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_LEFT         reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    EQ_RIGHT        reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    RBRACKET        reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    RANGE           reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    COMMA           reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    RPAREN          reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    SEMICOLON       reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    RBRACE          reduce using rule 250 (PrimaryExpression -> ImportExpression .)
    COLON           reduce using rule 250 (PrimaryExpression -> ImportExpression .)


state 189

    (81) BasicType -> IdentifierList .
    (236) PrimaryExpression -> IdentifierList .

  ! reduce/reduce conflict for LPAREN resolved using rule 81 (BasicType -> IdentifierList .)
  ! reduce/reduce conflict for TIMES resolved using rule 81 (BasicType -> IdentifierList .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (BasicType -> IdentifierList .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 81 (BasicType -> IdentifierList .)
    LPAREN          reduce using rule 81 (BasicType -> IdentifierList .)
    TIMES           reduce using rule 81 (BasicType -> IdentifierList .)
    LBRACKET        reduce using rule 81 (BasicType -> IdentifierList .)
    FUNCTION        reduce using rule 81 (BasicType -> IdentifierList .)
    RPAREN          reduce using rule 81 (BasicType -> IdentifierList .)
    IDENTIFIER      reduce using rule 81 (BasicType -> IdentifierList .)
    RBRACKET        reduce using rule 81 (BasicType -> IdentifierList .)
    POWER           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DOT             reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    PLUS_PLUS       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    MINUS_MINUS     reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DIV             reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    MODULO          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    PLUS            reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    MINUS           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    LEFT_SHIFT      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    RIGHT_SHIFT     reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    IS_EQ           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    NOT_EQ          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    LESS            reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    GREATER_EQ      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    GREATER         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    LESS_EQ         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    AMPERSAND       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    CARET           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    PIPE            reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    QUESTION        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DOUBLE_PIPE     reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    ASSIGN          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_PLUS         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_MINUS        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_TIMES        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_DIV          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_MODULO       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_AND_BIT      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_OR_BIT       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_XOR_BIT      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_LEFT         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_RIGHT        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    COMMA           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    RANGE           reduce using rule 236 (PrimaryExpression -> IdentifierList .)

  ! LPAREN          [ reduce using rule 236 (PrimaryExpression -> IdentifierList .) ]
  ! TIMES           [ reduce using rule 236 (PrimaryExpression -> IdentifierList .) ]
  ! RPAREN          [ reduce using rule 236 (PrimaryExpression -> IdentifierList .) ]
  ! RBRACKET        [ reduce using rule 236 (PrimaryExpression -> IdentifierList .) ]


state 190

    (208) UnaryExpression -> PowExpression .

    TIMES           reduce using rule 208 (UnaryExpression -> PowExpression .)
    DIV             reduce using rule 208 (UnaryExpression -> PowExpression .)
    MODULO          reduce using rule 208 (UnaryExpression -> PowExpression .)
    PLUS            reduce using rule 208 (UnaryExpression -> PowExpression .)
    MINUS           reduce using rule 208 (UnaryExpression -> PowExpression .)
    LEFT_SHIFT      reduce using rule 208 (UnaryExpression -> PowExpression .)
    RIGHT_SHIFT     reduce using rule 208 (UnaryExpression -> PowExpression .)
    IS_EQ           reduce using rule 208 (UnaryExpression -> PowExpression .)
    NOT_EQ          reduce using rule 208 (UnaryExpression -> PowExpression .)
    LESS            reduce using rule 208 (UnaryExpression -> PowExpression .)
    GREATER_EQ      reduce using rule 208 (UnaryExpression -> PowExpression .)
    GREATER         reduce using rule 208 (UnaryExpression -> PowExpression .)
    LESS_EQ         reduce using rule 208 (UnaryExpression -> PowExpression .)
    AMPERSAND       reduce using rule 208 (UnaryExpression -> PowExpression .)
    CARET           reduce using rule 208 (UnaryExpression -> PowExpression .)
    PIPE            reduce using rule 208 (UnaryExpression -> PowExpression .)
    DOUBLE_AMPERSAND reduce using rule 208 (UnaryExpression -> PowExpression .)
    QUESTION        reduce using rule 208 (UnaryExpression -> PowExpression .)
    DOUBLE_PIPE     reduce using rule 208 (UnaryExpression -> PowExpression .)
    ASSIGN          reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_PLUS         reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_MINUS        reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_TIMES        reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_DIV          reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_MODULO       reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_AND_BIT      reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_OR_BIT       reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_XOR_BIT      reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_LEFT         reduce using rule 208 (UnaryExpression -> PowExpression .)
    EQ_RIGHT        reduce using rule 208 (UnaryExpression -> PowExpression .)
    COMMA           reduce using rule 208 (UnaryExpression -> PowExpression .)
    RBRACKET        reduce using rule 208 (UnaryExpression -> PowExpression .)
    RANGE           reduce using rule 208 (UnaryExpression -> PowExpression .)
    RPAREN          reduce using rule 208 (UnaryExpression -> PowExpression .)
    SEMICOLON       reduce using rule 208 (UnaryExpression -> PowExpression .)
    RBRACE          reduce using rule 208 (UnaryExpression -> PowExpression .)
    COLON           reduce using rule 208 (UnaryExpression -> PowExpression .)


state 191

    (101) BasicType2X -> LBRACKET Type . RBRACKET

    RBRACKET        shift and go to state 348


state 192

    (200) UnaryExpression -> MINUS_MINUS . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 349
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 193

    (260) FunctionLiteral -> FUNCTION . Type_opt ParameterAttributes_opt FunctionLiteralBody
    (77) Type_opt -> . Type
    (78) Type_opt -> . empty
    (76) Type -> . BasicType BasicType2_opt
    (496) empty -> .
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    LBRACE          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    Type_opt                       shift and go to state 350
    BasicType                      shift and go to state 102
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    Type                           shift and go to state 351
    empty                          shift and go to state 352

state 194

    (171) AndAndExpression -> OrExpression .
    (174) OrExpression -> OrExpression . PIPE XorExpression

    DOUBLE_AMPERSAND reduce using rule 171 (AndAndExpression -> OrExpression .)
    QUESTION        reduce using rule 171 (AndAndExpression -> OrExpression .)
    DOUBLE_PIPE     reduce using rule 171 (AndAndExpression -> OrExpression .)
    ASSIGN          reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_PLUS         reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_MINUS        reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_TIMES        reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_DIV          reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_MODULO       reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_AND_BIT      reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_OR_BIT       reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_XOR_BIT      reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_LEFT         reduce using rule 171 (AndAndExpression -> OrExpression .)
    EQ_RIGHT        reduce using rule 171 (AndAndExpression -> OrExpression .)
    RBRACKET        reduce using rule 171 (AndAndExpression -> OrExpression .)
    COMMA           reduce using rule 171 (AndAndExpression -> OrExpression .)
    RPAREN          reduce using rule 171 (AndAndExpression -> OrExpression .)
    SEMICOLON       reduce using rule 171 (AndAndExpression -> OrExpression .)
    RANGE           reduce using rule 171 (AndAndExpression -> OrExpression .)
    RBRACE          reduce using rule 171 (AndAndExpression -> OrExpression .)
    COLON           reduce using rule 171 (AndAndExpression -> OrExpression .)
    PIPE            shift and go to state 353


state 195

    (198) UnaryExpression -> AMPERSAND . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 354
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 196

    (82) BasicType -> Typeof .
    (83) BasicType -> Typeof . DOT IdentifierList
    (254) PrimaryExpression -> Typeof .

  ! reduce/reduce conflict for LPAREN resolved using rule 82 (BasicType -> Typeof .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (BasicType -> Typeof .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (BasicType -> Typeof .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 82 (BasicType -> Typeof .)
    LPAREN          reduce using rule 82 (BasicType -> Typeof .)
    TIMES           reduce using rule 82 (BasicType -> Typeof .)
    LBRACKET        reduce using rule 82 (BasicType -> Typeof .)
    FUNCTION        reduce using rule 82 (BasicType -> Typeof .)
    RPAREN          reduce using rule 82 (BasicType -> Typeof .)
    IDENTIFIER      reduce using rule 82 (BasicType -> Typeof .)
    RBRACKET        reduce using rule 82 (BasicType -> Typeof .)
    DOT             shift and go to state 93
    POWER           reduce using rule 254 (PrimaryExpression -> Typeof .)
    PLUS_PLUS       reduce using rule 254 (PrimaryExpression -> Typeof .)
    MINUS_MINUS     reduce using rule 254 (PrimaryExpression -> Typeof .)
    DIV             reduce using rule 254 (PrimaryExpression -> Typeof .)
    MODULO          reduce using rule 254 (PrimaryExpression -> Typeof .)
    PLUS            reduce using rule 254 (PrimaryExpression -> Typeof .)
    MINUS           reduce using rule 254 (PrimaryExpression -> Typeof .)
    LEFT_SHIFT      reduce using rule 254 (PrimaryExpression -> Typeof .)
    RIGHT_SHIFT     reduce using rule 254 (PrimaryExpression -> Typeof .)
    IS_EQ           reduce using rule 254 (PrimaryExpression -> Typeof .)
    NOT_EQ          reduce using rule 254 (PrimaryExpression -> Typeof .)
    LESS            reduce using rule 254 (PrimaryExpression -> Typeof .)
    GREATER_EQ      reduce using rule 254 (PrimaryExpression -> Typeof .)
    GREATER         reduce using rule 254 (PrimaryExpression -> Typeof .)
    LESS_EQ         reduce using rule 254 (PrimaryExpression -> Typeof .)
    AMPERSAND       reduce using rule 254 (PrimaryExpression -> Typeof .)
    CARET           reduce using rule 254 (PrimaryExpression -> Typeof .)
    PIPE            reduce using rule 254 (PrimaryExpression -> Typeof .)
    DOUBLE_AMPERSAND reduce using rule 254 (PrimaryExpression -> Typeof .)
    QUESTION        reduce using rule 254 (PrimaryExpression -> Typeof .)
    DOUBLE_PIPE     reduce using rule 254 (PrimaryExpression -> Typeof .)
    ASSIGN          reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_PLUS         reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_MINUS        reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_TIMES        reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_DIV          reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_MODULO       reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_AND_BIT      reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_OR_BIT       reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_XOR_BIT      reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_LEFT         reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_RIGHT        reduce using rule 254 (PrimaryExpression -> Typeof .)
    COMMA           reduce using rule 254 (PrimaryExpression -> Typeof .)
    RANGE           reduce using rule 254 (PrimaryExpression -> Typeof .)

  ! DOT             [ reduce using rule 254 (PrimaryExpression -> Typeof .) ]
  ! LPAREN          [ reduce using rule 254 (PrimaryExpression -> Typeof .) ]
  ! TIMES           [ reduce using rule 254 (PrimaryExpression -> Typeof .) ]
  ! RPAREN          [ reduce using rule 254 (PrimaryExpression -> Typeof .) ]
  ! RBRACKET        [ reduce using rule 254 (PrimaryExpression -> Typeof .) ]


state 197

    (273) TypeidExpression -> TYPEID . LPAREN Type RPAREN
    (274) TypeidExpression -> TYPEID . LPAREN Expression RPAREN

    LPAREN          shift and go to state 355


state 198

    (243) PrimaryExpression -> INUMBER .

    POWER           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DOT             reduce using rule 243 (PrimaryExpression -> INUMBER .)
    PLUS_PLUS       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    MINUS_MINUS     reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LPAREN          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    TIMES           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DIV             reduce using rule 243 (PrimaryExpression -> INUMBER .)
    MODULO          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    PLUS            reduce using rule 243 (PrimaryExpression -> INUMBER .)
    MINUS           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LEFT_SHIFT      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    RIGHT_SHIFT     reduce using rule 243 (PrimaryExpression -> INUMBER .)
    IS_EQ           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    NOT_EQ          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LESS            reduce using rule 243 (PrimaryExpression -> INUMBER .)
    GREATER_EQ      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    GREATER         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LESS_EQ         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    AMPERSAND       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    CARET           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    PIPE            reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 243 (PrimaryExpression -> INUMBER .)
    QUESTION        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 243 (PrimaryExpression -> INUMBER .)
    ASSIGN          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_PLUS         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_MINUS        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_TIMES        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_DIV          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_MODULO       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_AND_BIT      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_OR_BIT       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_XOR_BIT      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_LEFT         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_RIGHT        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    RBRACKET        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    RANGE           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    COMMA           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    RPAREN          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    SEMICOLON       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    RBRACE          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    COLON           reduce using rule 243 (PrimaryExpression -> INUMBER .)


state 199

    (199) UnaryExpression -> PLUS_PLUS . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 356
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 200

    (204) UnaryExpression -> EXCLAMATION . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 357
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 201

    (225) PowExpression -> PostfixExpression .
    (226) PowExpression -> PostfixExpression . POWER UnaryExpression
    (228) PostfixExpression -> PostfixExpression . DOT IDENTIFIER
    (229) PostfixExpression -> PostfixExpression . DOT NewExpression
    (230) PostfixExpression -> PostfixExpression . PLUS_PLUS
    (231) PostfixExpression -> PostfixExpression . MINUS_MINUS
    (232) PostfixExpression -> PostfixExpression . LPAREN ArgumentList RPAREN

    TIMES           reduce using rule 225 (PowExpression -> PostfixExpression .)
    DIV             reduce using rule 225 (PowExpression -> PostfixExpression .)
    MODULO          reduce using rule 225 (PowExpression -> PostfixExpression .)
    PLUS            reduce using rule 225 (PowExpression -> PostfixExpression .)
    MINUS           reduce using rule 225 (PowExpression -> PostfixExpression .)
    LEFT_SHIFT      reduce using rule 225 (PowExpression -> PostfixExpression .)
    RIGHT_SHIFT     reduce using rule 225 (PowExpression -> PostfixExpression .)
    IS_EQ           reduce using rule 225 (PowExpression -> PostfixExpression .)
    NOT_EQ          reduce using rule 225 (PowExpression -> PostfixExpression .)
    LESS            reduce using rule 225 (PowExpression -> PostfixExpression .)
    GREATER_EQ      reduce using rule 225 (PowExpression -> PostfixExpression .)
    GREATER         reduce using rule 225 (PowExpression -> PostfixExpression .)
    LESS_EQ         reduce using rule 225 (PowExpression -> PostfixExpression .)
    AMPERSAND       reduce using rule 225 (PowExpression -> PostfixExpression .)
    CARET           reduce using rule 225 (PowExpression -> PostfixExpression .)
    PIPE            reduce using rule 225 (PowExpression -> PostfixExpression .)
    DOUBLE_AMPERSAND reduce using rule 225 (PowExpression -> PostfixExpression .)
    QUESTION        reduce using rule 225 (PowExpression -> PostfixExpression .)
    DOUBLE_PIPE     reduce using rule 225 (PowExpression -> PostfixExpression .)
    ASSIGN          reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_PLUS         reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_MINUS        reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_TIMES        reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_DIV          reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_MODULO       reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_AND_BIT      reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_OR_BIT       reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_XOR_BIT      reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_LEFT         reduce using rule 225 (PowExpression -> PostfixExpression .)
    EQ_RIGHT        reduce using rule 225 (PowExpression -> PostfixExpression .)
    COMMA           reduce using rule 225 (PowExpression -> PostfixExpression .)
    RBRACKET        reduce using rule 225 (PowExpression -> PostfixExpression .)
    RPAREN          reduce using rule 225 (PowExpression -> PostfixExpression .)
    COLON           reduce using rule 225 (PowExpression -> PostfixExpression .)
    RBRACE          reduce using rule 225 (PowExpression -> PostfixExpression .)
    SEMICOLON       reduce using rule 225 (PowExpression -> PostfixExpression .)
    RANGE           reduce using rule 225 (PowExpression -> PostfixExpression .)
    POWER           shift and go to state 359
    DOT             shift and go to state 362
    PLUS_PLUS       shift and go to state 361
    MINUS_MINUS     shift and go to state 360
    LPAREN          shift and go to state 358


state 202

    (212) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (428) NewAnonClassExpression -> NEW . AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (216) AllocatorArguments_opt -> . AllocatorArguments
    (217) AllocatorArguments_opt -> . empty
    (215) AllocatorArguments -> . LPAREN ArgumentList_opt RPAREN
    (496) empty -> .

    LPAREN          shift and go to state 364
    CLASS           reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)

    AllocatorArguments_opt         shift and go to state 363
    AllocatorArguments             shift and go to state 365
    empty                          shift and go to state 366

state 203

    (80) BasicType -> DOT . IdentifierList
    (237) PrimaryExpression -> DOT . IDENTIFIER
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 367

    IdentifierList                 shift and go to state 78

state 204

    (227) PostfixExpression -> PrimaryExpression .

    POWER           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    DOT             reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    PLUS_PLUS       reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    MINUS_MINUS     reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    LPAREN          reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    TIMES           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    DIV             reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    MODULO          reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    PLUS            reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    MINUS           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    LEFT_SHIFT      reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    RIGHT_SHIFT     reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    IS_EQ           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    NOT_EQ          reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    LESS            reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    GREATER_EQ      reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    GREATER         reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    LESS_EQ         reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    AMPERSAND       reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    CARET           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    PIPE            reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    QUESTION        reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    DOUBLE_PIPE     reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    ASSIGN          reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_PLUS         reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_MINUS        reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_TIMES        reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_DIV          reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_MODULO       reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_AND_BIT      reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_OR_BIT       reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_XOR_BIT      reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_LEFT         reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    EQ_RIGHT        reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    COMMA           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    RPAREN          reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    SEMICOLON       reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    RBRACKET        reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    COLON           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    RANGE           reduce using rule 227 (PostfixExpression -> PrimaryExpression .)
    RBRACE          reduce using rule 227 (PostfixExpression -> PrimaryExpression .)


state 205

    (205) UnaryExpression -> ComplementExpression .

    TIMES           reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    DIV             reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    MODULO          reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    PLUS            reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    MINUS           reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    LEFT_SHIFT      reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    RIGHT_SHIFT     reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    IS_EQ           reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    NOT_EQ          reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    LESS            reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    GREATER_EQ      reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    GREATER         reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    LESS_EQ         reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    AMPERSAND       reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    CARET           reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    PIPE            reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    DOUBLE_AMPERSAND reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    QUESTION        reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    DOUBLE_PIPE     reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    ASSIGN          reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_PLUS         reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_MINUS        reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_TIMES        reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_DIV          reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_MODULO       reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_AND_BIT      reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_OR_BIT       reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_XOR_BIT      reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_LEFT         reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    EQ_RIGHT        reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    COMMA           reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    RBRACKET        reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    RANGE           reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    RPAREN          reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    SEMICOLON       reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    RBRACE          reduce using rule 205 (UnaryExpression -> ComplementExpression .)
    COLON           reduce using rule 205 (UnaryExpression -> ComplementExpression .)


state 206

    (245) PrimaryExpression -> LIT_CHAR .

    POWER           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    DOT             reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    PLUS_PLUS       reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    MINUS_MINUS     reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    LPAREN          reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    TIMES           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    DIV             reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    MODULO          reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    PLUS            reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    MINUS           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    LEFT_SHIFT      reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    RIGHT_SHIFT     reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    IS_EQ           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    NOT_EQ          reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    LESS            reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    GREATER_EQ      reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    GREATER         reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    LESS_EQ         reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    AMPERSAND       reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    CARET           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    PIPE            reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    DOUBLE_AMPERSAND reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    QUESTION        reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    DOUBLE_PIPE     reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    ASSIGN          reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_PLUS         reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_MINUS        reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_TIMES        reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_DIV          reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_MODULO       reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_AND_BIT      reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_OR_BIT       reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_XOR_BIT      reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_LEFT         reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    EQ_RIGHT        reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    RBRACKET        reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    RANGE           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    COMMA           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    RPAREN          reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    SEMICOLON       reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    RBRACE          reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)
    COLON           reduce using rule 245 (PrimaryExpression -> LIT_CHAR .)


state 207

    (76) Type -> BasicType . BasicType2_opt
    (233) PostfixExpression -> BasicType . LPAREN ArgumentList_opt RPAREN JmpMark
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    LPAREN          shift and go to state 368
    RBRACKET        reduce using rule 496 (empty -> .)
    RPAREN          reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

    BasicType2X                    shift and go to state 84
    BasicType2                     shift and go to state 90
    BasicType2_opt                 shift and go to state 265
    empty                          shift and go to state 86

state 208

    (223) CastExpression -> CAST . LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> CAST . LPAREN RPAREN UnaryExpression

    LPAREN          shift and go to state 369


state 209

    (209) ComplementExpression -> TILDE . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 370
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 210

    (246) PrimaryExpression -> LIT_STRPlus .

    POWER           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    DOT             reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    LPAREN          reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    TIMES           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    DIV             reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    MODULO          reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    PLUS            reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    MINUS           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    IS_EQ           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    NOT_EQ          reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    LESS            reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    GREATER_EQ      reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    GREATER         reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    LESS_EQ         reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    AMPERSAND       reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    CARET           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    PIPE            reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    QUESTION        reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    ASSIGN          reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_PLUS         reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_MINUS        reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_TIMES        reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_DIV          reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_MODULO       reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_LEFT         reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    RBRACKET        reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    RANGE           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    COMMA           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    RPAREN          reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    SEMICOLON       reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    RBRACE          reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)
    COLON           reduce using rule 246 (PrimaryExpression -> LIT_STRPlus .)


state 211

    (249) PrimaryExpression -> MixinExpression .

    POWER           reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    DOT             reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    PLUS_PLUS       reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    MINUS_MINUS     reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    LPAREN          reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    TIMES           reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    DIV             reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    MODULO          reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    PLUS            reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    MINUS           reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    LEFT_SHIFT      reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    RIGHT_SHIFT     reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    IS_EQ           reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    NOT_EQ          reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    LESS            reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    GREATER_EQ      reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    GREATER         reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    LESS_EQ         reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    AMPERSAND       reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    CARET           reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    PIPE            reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    DOUBLE_AMPERSAND reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    QUESTION        reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    DOUBLE_PIPE     reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    ASSIGN          reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_PLUS         reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_MINUS        reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_TIMES        reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_DIV          reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_MODULO       reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_AND_BIT      reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_OR_BIT       reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_XOR_BIT      reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_LEFT         reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    EQ_RIGHT        reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    RBRACKET        reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    RANGE           reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    COMMA           reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    RPAREN          reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    SEMICOLON       reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    RBRACE          reduce using rule 249 (PrimaryExpression -> MixinExpression .)
    COLON           reduce using rule 249 (PrimaryExpression -> MixinExpression .)


state 212

    (248) PrimaryExpression -> FunctionLiteral .

    POWER           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    DOT             reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    PLUS_PLUS       reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    MINUS_MINUS     reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    LPAREN          reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    TIMES           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    DIV             reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    MODULO          reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    PLUS            reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    MINUS           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    LEFT_SHIFT      reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    RIGHT_SHIFT     reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    IS_EQ           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    NOT_EQ          reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    LESS            reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    GREATER_EQ      reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    GREATER         reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    LESS_EQ         reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    AMPERSAND       reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    CARET           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    PIPE            reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    DOUBLE_AMPERSAND reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    QUESTION        reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    DOUBLE_PIPE     reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    ASSIGN          reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_PLUS         reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_MINUS        reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_TIMES        reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_DIV          reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_MODULO       reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_AND_BIT      reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_OR_BIT       reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_XOR_BIT      reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_LEFT         reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    EQ_RIGHT        reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    RBRACKET        reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    RANGE           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    COMMA           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    RPAREN          reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    SEMICOLON       reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    RBRACE          reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)
    COLON           reduce using rule 248 (PrimaryExpression -> FunctionLiteral .)


state 213

    (268) FunctionLiteralBody -> BodyStatement .

    POWER           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    DOT             reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    PLUS_PLUS       reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    MINUS_MINUS     reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    LPAREN          reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    TIMES           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    DIV             reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    MODULO          reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    PLUS            reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    MINUS           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    LEFT_SHIFT      reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    RIGHT_SHIFT     reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    IS_EQ           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    NOT_EQ          reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    LESS            reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    GREATER_EQ      reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    GREATER         reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    LESS_EQ         reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    AMPERSAND       reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    CARET           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    PIPE            reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    DOUBLE_AMPERSAND reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    QUESTION        reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    DOUBLE_PIPE     reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    ASSIGN          reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_PLUS         reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_MINUS        reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_TIMES        reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_DIV          reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_MODULO       reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_AND_BIT      reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_OR_BIT       reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_XOR_BIT      reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_LEFT         reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    EQ_RIGHT        reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    COMMA           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    SEMICOLON       reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    RBRACKET        reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    RANGE           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    RPAREN          reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    RBRACE          reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)
    COLON           reduce using rule 268 (FunctionLiteralBody -> BodyStatement .)


state 214

    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (235) PrimaryExpression -> IDENTIFIER .
    (258) ArrayLiteral -> IDENTIFIER . LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> IDENTIFIER . LBRACKET AssignExpression RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! reduce/reduce conflict for POWER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for CARET resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESTION resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RANGE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    FUNCTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RBRACKET        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    POWER           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DIV             reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MODULO          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IS_EQ           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    NOT_EQ          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS_EQ         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    AMPERSAND       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    CARET           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PIPE            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    QUESTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_DIV          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RANGE           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COMMA           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 371

  ! LBRACKET        [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]
  ! POWER           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS_MINUS     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DIV             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MODULO          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LEFT_SHIFT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RIGHT_SHIFT     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! IS_EQ           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! NOT_EQ          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER_EQ      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS_EQ         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! AMPERSAND       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! CARET           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PIPE            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! QUESTION        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_PIPE     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! ASSIGN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_PLUS         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MINUS        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_TIMES        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_DIV          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MODULO       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_AND_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_OR_BIT       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_XOR_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_LEFT         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_RIGHT        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RBRACKET        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RANGE           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]


state 215

    (194) MulExpression -> UnaryExpression .

    TIMES           reduce using rule 194 (MulExpression -> UnaryExpression .)
    DIV             reduce using rule 194 (MulExpression -> UnaryExpression .)
    MODULO          reduce using rule 194 (MulExpression -> UnaryExpression .)
    PLUS            reduce using rule 194 (MulExpression -> UnaryExpression .)
    MINUS           reduce using rule 194 (MulExpression -> UnaryExpression .)
    LEFT_SHIFT      reduce using rule 194 (MulExpression -> UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 194 (MulExpression -> UnaryExpression .)
    IS_EQ           reduce using rule 194 (MulExpression -> UnaryExpression .)
    NOT_EQ          reduce using rule 194 (MulExpression -> UnaryExpression .)
    LESS            reduce using rule 194 (MulExpression -> UnaryExpression .)
    GREATER_EQ      reduce using rule 194 (MulExpression -> UnaryExpression .)
    GREATER         reduce using rule 194 (MulExpression -> UnaryExpression .)
    LESS_EQ         reduce using rule 194 (MulExpression -> UnaryExpression .)
    AMPERSAND       reduce using rule 194 (MulExpression -> UnaryExpression .)
    CARET           reduce using rule 194 (MulExpression -> UnaryExpression .)
    PIPE            reduce using rule 194 (MulExpression -> UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 194 (MulExpression -> UnaryExpression .)
    QUESTION        reduce using rule 194 (MulExpression -> UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 194 (MulExpression -> UnaryExpression .)
    ASSIGN          reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_PLUS         reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_MINUS        reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_TIMES        reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_DIV          reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_MODULO       reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_AND_BIT      reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_OR_BIT       reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_LEFT         reduce using rule 194 (MulExpression -> UnaryExpression .)
    EQ_RIGHT        reduce using rule 194 (MulExpression -> UnaryExpression .)
    COMMA           reduce using rule 194 (MulExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 194 (MulExpression -> UnaryExpression .)
    RBRACKET        reduce using rule 194 (MulExpression -> UnaryExpression .)
    COLON           reduce using rule 194 (MulExpression -> UnaryExpression .)
    RANGE           reduce using rule 194 (MulExpression -> UnaryExpression .)
    RPAREN          reduce using rule 194 (MulExpression -> UnaryExpression .)
    RBRACE          reduce using rule 194 (MulExpression -> UnaryExpression .)


state 216

    (251) PrimaryExpression -> NewExpressionWithArgs .

    POWER           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    DOT             reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    PLUS_PLUS       reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    MINUS_MINUS     reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    LPAREN          reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    TIMES           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    DIV             reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    MODULO          reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    PLUS            reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    MINUS           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    LEFT_SHIFT      reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    RIGHT_SHIFT     reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    IS_EQ           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    NOT_EQ          reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    LESS            reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    GREATER_EQ      reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    GREATER         reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    LESS_EQ         reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    AMPERSAND       reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    CARET           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    PIPE            reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    DOUBLE_AMPERSAND reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    QUESTION        reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    DOUBLE_PIPE     reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    ASSIGN          reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_PLUS         reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_MINUS        reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_TIMES        reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_DIV          reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_MODULO       reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_AND_BIT      reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_OR_BIT       reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_XOR_BIT      reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_LEFT         reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    EQ_RIGHT        reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    RBRACKET        reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    RANGE           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    COMMA           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    RPAREN          reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    SEMICOLON       reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    RBRACE          reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)
    COLON           reduce using rule 251 (PrimaryExpression -> NewExpressionWithArgs .)


state 217

    (169) OrOrExpression -> AndAndExpression .
    (172) AndAndExpression -> AndAndExpression . DOUBLE_AMPERSAND OrExpression

    QUESTION        reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    DOUBLE_PIPE     reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    ASSIGN          reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_PLUS         reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_MINUS        reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_TIMES        reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_DIV          reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_MODULO       reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_AND_BIT      reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_OR_BIT       reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_XOR_BIT      reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_LEFT         reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    EQ_RIGHT        reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    RBRACKET        reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    RANGE           reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    COMMA           reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    RPAREN          reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    SEMICOLON       reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    RBRACE          reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    COLON           reduce using rule 169 (OrOrExpression -> AndAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 372


state 218

    (207) UnaryExpression -> CastExpression .

    TIMES           reduce using rule 207 (UnaryExpression -> CastExpression .)
    DIV             reduce using rule 207 (UnaryExpression -> CastExpression .)
    MODULO          reduce using rule 207 (UnaryExpression -> CastExpression .)
    PLUS            reduce using rule 207 (UnaryExpression -> CastExpression .)
    MINUS           reduce using rule 207 (UnaryExpression -> CastExpression .)
    LEFT_SHIFT      reduce using rule 207 (UnaryExpression -> CastExpression .)
    RIGHT_SHIFT     reduce using rule 207 (UnaryExpression -> CastExpression .)
    IS_EQ           reduce using rule 207 (UnaryExpression -> CastExpression .)
    NOT_EQ          reduce using rule 207 (UnaryExpression -> CastExpression .)
    LESS            reduce using rule 207 (UnaryExpression -> CastExpression .)
    GREATER_EQ      reduce using rule 207 (UnaryExpression -> CastExpression .)
    GREATER         reduce using rule 207 (UnaryExpression -> CastExpression .)
    LESS_EQ         reduce using rule 207 (UnaryExpression -> CastExpression .)
    AMPERSAND       reduce using rule 207 (UnaryExpression -> CastExpression .)
    CARET           reduce using rule 207 (UnaryExpression -> CastExpression .)
    PIPE            reduce using rule 207 (UnaryExpression -> CastExpression .)
    DOUBLE_AMPERSAND reduce using rule 207 (UnaryExpression -> CastExpression .)
    QUESTION        reduce using rule 207 (UnaryExpression -> CastExpression .)
    DOUBLE_PIPE     reduce using rule 207 (UnaryExpression -> CastExpression .)
    ASSIGN          reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_PLUS         reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_MINUS        reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_TIMES        reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_DIV          reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_MODULO       reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_AND_BIT      reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_OR_BIT       reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_XOR_BIT      reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_LEFT         reduce using rule 207 (UnaryExpression -> CastExpression .)
    EQ_RIGHT        reduce using rule 207 (UnaryExpression -> CastExpression .)
    COMMA           reduce using rule 207 (UnaryExpression -> CastExpression .)
    RBRACKET        reduce using rule 207 (UnaryExpression -> CastExpression .)
    RANGE           reduce using rule 207 (UnaryExpression -> CastExpression .)
    RPAREN          reduce using rule 207 (UnaryExpression -> CastExpression .)
    SEMICOLON       reduce using rule 207 (UnaryExpression -> CastExpression .)
    RBRACE          reduce using rule 207 (UnaryExpression -> CastExpression .)
    COLON           reduce using rule 207 (UnaryExpression -> CastExpression .)


state 219

    (262) FunctionLiteral -> FunctionLiteralBody .

    POWER           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    DOT             reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    PLUS_PLUS       reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    MINUS_MINUS     reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    LPAREN          reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    TIMES           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    DIV             reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    MODULO          reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    PLUS            reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    MINUS           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    LEFT_SHIFT      reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    RIGHT_SHIFT     reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    IS_EQ           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    NOT_EQ          reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    LESS            reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    GREATER_EQ      reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    GREATER         reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    LESS_EQ         reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    AMPERSAND       reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    CARET           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    PIPE            reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    DOUBLE_AMPERSAND reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    QUESTION        reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    DOUBLE_PIPE     reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    ASSIGN          reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_PLUS         reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_MINUS        reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_TIMES        reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_DIV          reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_MODULO       reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_AND_BIT      reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_OR_BIT       reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_XOR_BIT      reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_LEFT         reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    EQ_RIGHT        reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    COMMA           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    SEMICOLON       reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    COLON           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    RBRACKET        reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    RANGE           reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    RPAREN          reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)
    RBRACE          reduce using rule 262 (FunctionLiteral -> FunctionLiteralBody .)


state 220

    (256) PrimaryExpression -> TypeidExpression .

    POWER           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    DOT             reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    PLUS_PLUS       reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    MINUS_MINUS     reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    LPAREN          reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    TIMES           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    DIV             reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    MODULO          reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    PLUS            reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    MINUS           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    LEFT_SHIFT      reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    RIGHT_SHIFT     reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    IS_EQ           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    NOT_EQ          reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    LESS            reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    GREATER_EQ      reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    GREATER         reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    LESS_EQ         reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    AMPERSAND       reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    CARET           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    PIPE            reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    DOUBLE_AMPERSAND reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    QUESTION        reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    DOUBLE_PIPE     reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    ASSIGN          reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_PLUS         reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_MINUS        reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_TIMES        reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_DIV          reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_MODULO       reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_AND_BIT      reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_OR_BIT       reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_XOR_BIT      reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_LEFT         reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    EQ_RIGHT        reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    RBRACKET        reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    RANGE           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    COMMA           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    RPAREN          reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    SEMICOLON       reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    RBRACE          reduce using rule 256 (PrimaryExpression -> TypeidExpression .)
    COLON           reduce using rule 256 (PrimaryExpression -> TypeidExpression .)


state 221

    (239) PrimaryExpression -> NULL .

    POWER           reduce using rule 239 (PrimaryExpression -> NULL .)
    DOT             reduce using rule 239 (PrimaryExpression -> NULL .)
    PLUS_PLUS       reduce using rule 239 (PrimaryExpression -> NULL .)
    MINUS_MINUS     reduce using rule 239 (PrimaryExpression -> NULL .)
    LPAREN          reduce using rule 239 (PrimaryExpression -> NULL .)
    TIMES           reduce using rule 239 (PrimaryExpression -> NULL .)
    DIV             reduce using rule 239 (PrimaryExpression -> NULL .)
    MODULO          reduce using rule 239 (PrimaryExpression -> NULL .)
    PLUS            reduce using rule 239 (PrimaryExpression -> NULL .)
    MINUS           reduce using rule 239 (PrimaryExpression -> NULL .)
    LEFT_SHIFT      reduce using rule 239 (PrimaryExpression -> NULL .)
    RIGHT_SHIFT     reduce using rule 239 (PrimaryExpression -> NULL .)
    IS_EQ           reduce using rule 239 (PrimaryExpression -> NULL .)
    NOT_EQ          reduce using rule 239 (PrimaryExpression -> NULL .)
    LESS            reduce using rule 239 (PrimaryExpression -> NULL .)
    GREATER_EQ      reduce using rule 239 (PrimaryExpression -> NULL .)
    GREATER         reduce using rule 239 (PrimaryExpression -> NULL .)
    LESS_EQ         reduce using rule 239 (PrimaryExpression -> NULL .)
    AMPERSAND       reduce using rule 239 (PrimaryExpression -> NULL .)
    CARET           reduce using rule 239 (PrimaryExpression -> NULL .)
    PIPE            reduce using rule 239 (PrimaryExpression -> NULL .)
    DOUBLE_AMPERSAND reduce using rule 239 (PrimaryExpression -> NULL .)
    QUESTION        reduce using rule 239 (PrimaryExpression -> NULL .)
    DOUBLE_PIPE     reduce using rule 239 (PrimaryExpression -> NULL .)
    ASSIGN          reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_PLUS         reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_MINUS        reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_TIMES        reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_DIV          reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_MODULO       reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_AND_BIT      reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_OR_BIT       reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_XOR_BIT      reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_LEFT         reduce using rule 239 (PrimaryExpression -> NULL .)
    EQ_RIGHT        reduce using rule 239 (PrimaryExpression -> NULL .)
    RBRACKET        reduce using rule 239 (PrimaryExpression -> NULL .)
    RANGE           reduce using rule 239 (PrimaryExpression -> NULL .)
    COMMA           reduce using rule 239 (PrimaryExpression -> NULL .)
    RPAREN          reduce using rule 239 (PrimaryExpression -> NULL .)
    SEMICOLON       reduce using rule 239 (PrimaryExpression -> NULL .)
    RBRACE          reduce using rule 239 (PrimaryExpression -> NULL .)
    COLON           reduce using rule 239 (PrimaryExpression -> NULL .)


state 222

    (79) BasicType -> BasicTypeX .
    (252) PrimaryExpression -> BasicTypeX . DOT IDENTIFIER
    (253) PrimaryExpression -> BasicTypeX . LPAREN ArgumentList_opt RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    TIMES           reduce using rule 79 (BasicType -> BasicTypeX .)
    LBRACKET        reduce using rule 79 (BasicType -> BasicTypeX .)
    FUNCTION        reduce using rule 79 (BasicType -> BasicTypeX .)
    RPAREN          reduce using rule 79 (BasicType -> BasicTypeX .)
    IDENTIFIER      reduce using rule 79 (BasicType -> BasicTypeX .)
    RBRACKET        reduce using rule 79 (BasicType -> BasicTypeX .)
    DOT             shift and go to state 374
    LPAREN          shift and go to state 373

  ! LPAREN          [ reduce using rule 79 (BasicType -> BasicTypeX .) ]


state 223

    (173) OrExpression -> XorExpression .
    (176) XorExpression -> XorExpression . CARET AndExpression

    PIPE            reduce using rule 173 (OrExpression -> XorExpression .)
    DOUBLE_AMPERSAND reduce using rule 173 (OrExpression -> XorExpression .)
    QUESTION        reduce using rule 173 (OrExpression -> XorExpression .)
    DOUBLE_PIPE     reduce using rule 173 (OrExpression -> XorExpression .)
    ASSIGN          reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_PLUS         reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_MINUS        reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_TIMES        reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_DIV          reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_MODULO       reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_AND_BIT      reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_OR_BIT       reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_XOR_BIT      reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_LEFT         reduce using rule 173 (OrExpression -> XorExpression .)
    EQ_RIGHT        reduce using rule 173 (OrExpression -> XorExpression .)
    RBRACKET        reduce using rule 173 (OrExpression -> XorExpression .)
    RANGE           reduce using rule 173 (OrExpression -> XorExpression .)
    COMMA           reduce using rule 173 (OrExpression -> XorExpression .)
    RPAREN          reduce using rule 173 (OrExpression -> XorExpression .)
    SEMICOLON       reduce using rule 173 (OrExpression -> XorExpression .)
    RBRACE          reduce using rule 173 (OrExpression -> XorExpression .)
    COLON           reduce using rule 173 (OrExpression -> XorExpression .)
    CARET           shift and go to state 375


state 224

    (271) MixinExpression -> MIXIN . LPAREN AssignExpression RPAREN

    LPAREN          shift and go to state 376


state 225

    (247) PrimaryExpression -> ArrayLiteral .

    POWER           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    DOT             reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    PLUS_PLUS       reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    MINUS_MINUS     reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    LPAREN          reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    TIMES           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    DIV             reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    MODULO          reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    PLUS            reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    MINUS           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    LEFT_SHIFT      reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    RIGHT_SHIFT     reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    IS_EQ           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    NOT_EQ          reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    LESS            reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    GREATER_EQ      reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    GREATER         reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    LESS_EQ         reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    AMPERSAND       reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    CARET           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    PIPE            reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    DOUBLE_AMPERSAND reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    QUESTION        reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    DOUBLE_PIPE     reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    ASSIGN          reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_PLUS         reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_MINUS        reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_TIMES        reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_DIV          reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_MODULO       reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_AND_BIT      reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_OR_BIT       reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_XOR_BIT      reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_LEFT         reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    EQ_RIGHT        reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    RBRACKET        reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    RANGE           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    COMMA           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    RPAREN          reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    SEMICOLON       reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    RBRACE          reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)
    COLON           reduce using rule 247 (PrimaryExpression -> ArrayLiteral .)


state 226

    (242) PrimaryExpression -> DOLLAR .

    POWER           reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    DOT             reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    PLUS_PLUS       reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    MINUS_MINUS     reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    LPAREN          reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    TIMES           reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    DIV             reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    MODULO          reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    PLUS            reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    MINUS           reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    LEFT_SHIFT      reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    RIGHT_SHIFT     reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    IS_EQ           reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    NOT_EQ          reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    LESS            reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    GREATER_EQ      reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    GREATER         reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    LESS_EQ         reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    AMPERSAND       reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    CARET           reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    PIPE            reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    DOUBLE_AMPERSAND reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    QUESTION        reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    DOUBLE_PIPE     reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    ASSIGN          reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_PLUS         reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_MINUS        reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_TIMES        reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_DIV          reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_MODULO       reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_AND_BIT      reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_OR_BIT       reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_XOR_BIT      reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_LEFT         reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    EQ_RIGHT        reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    RBRACKET        reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    RANGE           reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    COMMA           reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    RPAREN          reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    SEMICOLON       reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    RBRACE          reduce using rule 242 (PrimaryExpression -> DOLLAR .)
    COLON           reduce using rule 242 (PrimaryExpression -> DOLLAR .)


state 227

    (201) UnaryExpression -> TIMES . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 377
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 228

    (206) UnaryExpression -> LPAREN . Type RPAREN DOT IDENTIFIER
    (255) PrimaryExpression -> LPAREN . Expression RPAREN
    (464) Parameters -> LPAREN . ParameterList_opt RPAREN
    (76) Type -> . BasicType BasicType2_opt
    (152) Expression -> . CommaExpression
    (468) ParameterList_opt -> . ParameterList
    (469) ParameterList_opt -> . empty
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (465) ParameterList -> . Parameter
    (466) ParameterList -> . Parameter COMMA ParameterList
    (467) ParameterList -> . ELLIPSIS
    (496) empty -> .
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (470) Parameter -> . InOut_opt BasicType Declarator
    (471) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (472) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (473) Parameter -> . InOut_opt Type
    (474) Parameter -> . InOut_opt Type ELLIPSIS
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (480) InOut_opt -> . InOut
    (481) InOut_opt -> . empty
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (475) InOut -> . InOutX
    (476) InOut -> . InOut InOutX
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (477) InOutX -> . AUTO
    (478) InOutX -> . FINAL
    (479) InOutX -> . SCOPE
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    DOT             shift and go to state 203
    ELLIPSIS        shift and go to state 162
    RPAREN          reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AUTO            shift and go to state 157
    FINAL           shift and go to state 159
    SCOPE           shift and go to state 158
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! IDENTIFIER      [ shift and go to state 214 ]
  ! TYPEOF          [ shift and go to state 47 ]

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ParameterList                  shift and go to state 160
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 189
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    Parameter                      shift and go to state 165
    ParameterList_opt              shift and go to state 163
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    Type                           shift and go to state 379
    BasicType                      shift and go to state 207
    InOutX                         shift and go to state 164
    FunctionLiteralBody            shift and go to state 219
    BasicTypeX                     shift and go to state 222
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    InOut                          shift and go to state 161
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 196
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 378
    BodyStatement                  shift and go to state 213
    InOut_opt                      shift and go to state 156
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    TypeidExpression               shift and go to state 220
    empty                          shift and go to state 166
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 229

    (188) ShiftExpression -> AddExpression .
    (192) AddExpression -> AddExpression . PLUS MulExpression
    (193) AddExpression -> AddExpression . MINUS MulExpression

    LEFT_SHIFT      reduce using rule 188 (ShiftExpression -> AddExpression .)
    RIGHT_SHIFT     reduce using rule 188 (ShiftExpression -> AddExpression .)
    IS_EQ           reduce using rule 188 (ShiftExpression -> AddExpression .)
    NOT_EQ          reduce using rule 188 (ShiftExpression -> AddExpression .)
    LESS            reduce using rule 188 (ShiftExpression -> AddExpression .)
    GREATER_EQ      reduce using rule 188 (ShiftExpression -> AddExpression .)
    GREATER         reduce using rule 188 (ShiftExpression -> AddExpression .)
    LESS_EQ         reduce using rule 188 (ShiftExpression -> AddExpression .)
    AMPERSAND       reduce using rule 188 (ShiftExpression -> AddExpression .)
    CARET           reduce using rule 188 (ShiftExpression -> AddExpression .)
    PIPE            reduce using rule 188 (ShiftExpression -> AddExpression .)
    DOUBLE_AMPERSAND reduce using rule 188 (ShiftExpression -> AddExpression .)
    QUESTION        reduce using rule 188 (ShiftExpression -> AddExpression .)
    DOUBLE_PIPE     reduce using rule 188 (ShiftExpression -> AddExpression .)
    ASSIGN          reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_PLUS         reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_MINUS        reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_TIMES        reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_DIV          reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_MODULO       reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_AND_BIT      reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_OR_BIT       reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_XOR_BIT      reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_LEFT         reduce using rule 188 (ShiftExpression -> AddExpression .)
    EQ_RIGHT        reduce using rule 188 (ShiftExpression -> AddExpression .)
    COMMA           reduce using rule 188 (ShiftExpression -> AddExpression .)
    RPAREN          reduce using rule 188 (ShiftExpression -> AddExpression .)
    COLON           reduce using rule 188 (ShiftExpression -> AddExpression .)
    SEMICOLON       reduce using rule 188 (ShiftExpression -> AddExpression .)
    RBRACKET        reduce using rule 188 (ShiftExpression -> AddExpression .)
    RANGE           reduce using rule 188 (ShiftExpression -> AddExpression .)
    RBRACE          reduce using rule 188 (ShiftExpression -> AddExpression .)
    PLUS            shift and go to state 380
    MINUS           shift and go to state 381


state 230

    (177) AndExpression -> CmpExpression .

    AMPERSAND       reduce using rule 177 (AndExpression -> CmpExpression .)
    CARET           reduce using rule 177 (AndExpression -> CmpExpression .)
    PIPE            reduce using rule 177 (AndExpression -> CmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 177 (AndExpression -> CmpExpression .)
    QUESTION        reduce using rule 177 (AndExpression -> CmpExpression .)
    DOUBLE_PIPE     reduce using rule 177 (AndExpression -> CmpExpression .)
    ASSIGN          reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_PLUS         reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_MINUS        reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_TIMES        reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_DIV          reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_MODULO       reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_AND_BIT      reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_OR_BIT       reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_XOR_BIT      reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_LEFT         reduce using rule 177 (AndExpression -> CmpExpression .)
    EQ_RIGHT        reduce using rule 177 (AndExpression -> CmpExpression .)
    RBRACKET        reduce using rule 177 (AndExpression -> CmpExpression .)
    RPAREN          reduce using rule 177 (AndExpression -> CmpExpression .)
    COMMA           reduce using rule 177 (AndExpression -> CmpExpression .)
    SEMICOLON       reduce using rule 177 (AndExpression -> CmpExpression .)
    RANGE           reduce using rule 177 (AndExpression -> CmpExpression .)
    RBRACE          reduce using rule 177 (AndExpression -> CmpExpression .)
    COLON           reduce using rule 177 (AndExpression -> CmpExpression .)


state 231

    (269) LIT_STRPlus -> LIT_STR . LIT_STRPlus
    (270) LIT_STRPlus -> LIT_STR .
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR

    POWER           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    DOT             reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    PLUS_PLUS       reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    MINUS_MINUS     reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    LPAREN          reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    TIMES           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    DIV             reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    MODULO          reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    PLUS            reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    MINUS           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    LEFT_SHIFT      reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    RIGHT_SHIFT     reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    IS_EQ           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ          reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    LESS            reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ      reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    GREATER         reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ         reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    AMPERSAND       reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    CARET           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    PIPE            reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_AMPERSAND reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    QUESTION        reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_PIPE     reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    ASSIGN          reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_PLUS         reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_MINUS        reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_TIMES        reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_DIV          reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_MODULO       reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_AND_BIT      reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_OR_BIT       reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_XOR_BIT      reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_LEFT         reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    EQ_RIGHT        reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    COMMA           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    SEMICOLON       reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    RPAREN          reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    RBRACKET        reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    RANGE           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    RBRACE          reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    COLON           reduce using rule 270 (LIT_STRPlus -> LIT_STR .)
    LIT_STR         shift and go to state 231

    LIT_STRPlus                    shift and go to state 382

state 232

    (98) BasicType2X -> LBRACKET RBRACKET .

    TIMES           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    ELLIPSIS        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    BODY            reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    POWER           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    DOT             reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    MINUS_MINUS     reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    DIV             reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    MODULO          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    LESS            reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    GREATER         reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    CARET           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    PIPE            reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    QUESTION        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    RANGE           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)
    COLON           reduce using rule 98 (BasicType2X -> LBRACKET RBRACKET .)


state 233

    (99) BasicType2X -> LBRACKET AssignExpression . RBRACKET
    (100) BasicType2X -> LBRACKET AssignExpression . RANGE AssignExpression RBRACKET

    RBRACKET        shift and go to state 383
    RANGE           shift and go to state 384


state 234

    (40) VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .

    SEMICOLON       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CASE            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DEFAULT         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACE          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IF              reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    WHILE           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DO              reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOR             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    SWITCH          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FINAL           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONTINUE        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    BREAK           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    RETURN          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    GOTO            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    WITH            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    MIXIN           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMPORT          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    STATIC          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LPAREN          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    ALIAS           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    ENUM            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXTERN          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    AUTO            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONST           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMMUTABLE       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH_REVERSE reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CLASS           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    UNION           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    AMPERSAND       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PLUS_PLUS       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    MINUS_MINUS     reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TIMES           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    MINUS           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PLUS            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXCLAMATION     reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TILDE           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CAST            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOT             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    THIS            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    NULL            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TRUE            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FALSE           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOLLAR          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    INUMBER         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DNUMBER         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_CHAR        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_STR         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACKET        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FUNCTION        reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    NEW             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    BOOL            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    SHORT           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    USHORT          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    INT             reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    UINT            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    LONG            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    ULONG           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    CHAR            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    FLOAT           reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    VOID            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEOF          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEID          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    BODY            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    RBRACE          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    ELSE            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    DELETE          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PRIVATE         reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PROTECTED       reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    PUBLIC          reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)
    $end            reduce using rule 40 (VarDeclarations -> StorageClasses_opt BasicType Declarators SEMICOLON .)


state 235

    (62) AltDeclarator -> BasicType2_opt LPAREN . AltDeclaratorX RPAREN
    (63) AltDeclarator -> BasicType2_opt LPAREN . AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> BasicType2_opt LPAREN . AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (65) AltDeclaratorX -> . BasicType2_opt IDENTIFIER
    (66) AltDeclaratorX -> . BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix
    (67) AltDeclaratorX -> . AltDeclarator
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (61) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

    AltDeclaratorX                 shift and go to state 385
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 386
    empty                          shift and go to state 86
    BasicType2_opt                 shift and go to state 387
    BasicType2                     shift and go to state 90

state 236

    (461) FuncDeclarator -> BasicType2_opt IDENTIFIER . func_m3 FuncDeclaratorSuffix
    (60) VarDeclarator -> BasicType2_opt IDENTIFIER .
    (61) AltDeclarator -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (462) func_m3 -> . empty
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (69) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (496) empty -> .
    (72) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ASSIGN          reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    COMMA           reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    SEMICOLON       reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    LPAREN          reduce using rule 496 (empty -> .)
    LBRACKET        shift and go to state 389

    func_m3                        shift and go to state 388
    AltDeclaratorSuffix            shift and go to state 390
    AltDeclaratorSuffixes          shift and go to state 391
    empty                          shift and go to state 392

state 237

    (42) Declarators -> DeclaratorInitializer COMMA . DeclaratorIdentifierList
    (47) DeclaratorIdentifierList -> . mark1 DeclaratorIdentifier
    (48) DeclaratorIdentifierList -> . mark1 DeclaratorIdentifier COMMA DeclaratorIdentifierList
    (49) mark1 -> . empty
    (496) empty -> .

    IDENTIFIER      reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)

    DeclaratorIdentifierList       shift and go to state 393
    mark1                          shift and go to state 394
    empty                          shift and go to state 395

state 238

    (94) BasicType2 -> BasicType2X BasicType2_opt .

    IDENTIFIER      reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    LPAREN          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    RBRACKET        reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    RPAREN          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    ELLIPSIS        reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    COMMA           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    LBRACE          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    SEMICOLON       reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    BODY            reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    LBRACKET        reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    POWER           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    DOT             reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    PLUS_PLUS       reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    MINUS_MINUS     reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    TIMES           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    DIV             reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    MODULO          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    PLUS            reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    MINUS           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    LEFT_SHIFT      reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    RIGHT_SHIFT     reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    IS_EQ           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    NOT_EQ          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    LESS            reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    GREATER_EQ      reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    GREATER         reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    LESS_EQ         reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    AMPERSAND       reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    CARET           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    PIPE            reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    DOUBLE_AMPERSAND reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    QUESTION        reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    DOUBLE_PIPE     reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    ASSIGN          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_PLUS         reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_MINUS        reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_TIMES        reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_DIV          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_MODULO       reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_AND_BIT      reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_OR_BIT       reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_XOR_BIT      reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_LEFT         reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    EQ_RIGHT        reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    RANGE           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    RBRACE          reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)
    COLON           reduce using rule 94 (BasicType2 -> BasicType2X BasicType2_opt .)


state 239

    (45) DeclaratorInitializer -> AltDeclarator ASSIGN . Initializer
    (115) Initializer -> . VoidInitializer
    (116) Initializer -> . NonVoidInitializer
    (143) VoidInitializer -> . VOID
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    VOID            shift and go to state 306
    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    Initializer                    shift and go to state 396
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    NonVoidInitializer             shift and go to state 308
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    ArrayInitializer               shift and go to state 309
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    VoidInitializer                shift and go to state 310
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 313

state 240

    (102) BasicType2X -> FUNCTION Parameters .

    TIMES           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    LBRACKET        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    FUNCTION        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    IDENTIFIER      reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    LPAREN          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    ELLIPSIS        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    COMMA           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    RPAREN          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    LBRACE          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    SEMICOLON       reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    BODY            reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    POWER           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    DOT             reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    PLUS_PLUS       reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    MINUS_MINUS     reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    DIV             reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    MODULO          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    PLUS            reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    MINUS           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    LEFT_SHIFT      reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    RIGHT_SHIFT     reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    IS_EQ           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    NOT_EQ          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    LESS            reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    GREATER_EQ      reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    GREATER         reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    LESS_EQ         reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    AMPERSAND       reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    CARET           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    PIPE            reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    DOUBLE_AMPERSAND reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    QUESTION        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    DOUBLE_PIPE     reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    ASSIGN          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_PLUS         reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_MINUS        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_TIMES        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_DIV          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_MODULO       reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_AND_BIT      reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_OR_BIT       reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_XOR_BIT      reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_LEFT         reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    EQ_RIGHT        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    RBRACKET        reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    RANGE           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    RBRACE          reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)
    COLON           reduce using rule 102 (BasicType2X -> FUNCTION Parameters .)


state 241

    (455) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 . FunctionBody
    (489) FunctionBody -> . BlockStatement
    (490) FunctionBody -> . BodyStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    FunctionBody                   shift and go to state 397
    BlockStatement                 shift and go to state 147
    BodyStatement                  shift and go to state 148

state 242

    (456) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 . SEMICOLON

    SEMICOLON       shift and go to state 398


state 243

    (458) func_m1 -> empty .
    (459) func_m2 -> empty .

    LBRACE          reduce using rule 458 (func_m1 -> empty .)
    BODY            reduce using rule 458 (func_m1 -> empty .)
    SEMICOLON       reduce using rule 459 (func_m2 -> empty .)


state 244

    (236) PrimaryExpression -> IdentifierList .
    (81) BasicType -> IdentifierList .

  ! reduce/reduce conflict for LPAREN resolved using rule 81 (BasicType -> IdentifierList .)
    POWER           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DOT             reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    PLUS_PLUS       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    MINUS_MINUS     reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    TIMES           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DIV             reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    MODULO          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    PLUS            reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    MINUS           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    LEFT_SHIFT      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    RIGHT_SHIFT     reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    IS_EQ           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    NOT_EQ          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    LESS            reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    GREATER_EQ      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    GREATER         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    LESS_EQ         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    AMPERSAND       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    CARET           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    PIPE            reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    QUESTION        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    DOUBLE_PIPE     reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    ASSIGN          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_PLUS         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_MINUS        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_TIMES        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_DIV          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_MODULO       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_AND_BIT      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_OR_BIT       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_XOR_BIT      reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_LEFT         reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    EQ_RIGHT        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    RBRACKET        reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    RANGE           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    COMMA           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    RPAREN          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    SEMICOLON       reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    RBRACE          reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    COLON           reduce using rule 236 (PrimaryExpression -> IdentifierList .)
    LPAREN          reduce using rule 81 (BasicType -> IdentifierList .)

  ! LPAREN          [ reduce using rule 236 (PrimaryExpression -> IdentifierList .) ]


state 245

    (254) PrimaryExpression -> Typeof .
    (82) BasicType -> Typeof .
    (83) BasicType -> Typeof . DOT IdentifierList

  ! reduce/reduce conflict for LPAREN resolved using rule 82 (BasicType -> Typeof .)
  ! shift/reduce conflict for DOT resolved as shift
    POWER           reduce using rule 254 (PrimaryExpression -> Typeof .)
    PLUS_PLUS       reduce using rule 254 (PrimaryExpression -> Typeof .)
    MINUS_MINUS     reduce using rule 254 (PrimaryExpression -> Typeof .)
    TIMES           reduce using rule 254 (PrimaryExpression -> Typeof .)
    DIV             reduce using rule 254 (PrimaryExpression -> Typeof .)
    MODULO          reduce using rule 254 (PrimaryExpression -> Typeof .)
    PLUS            reduce using rule 254 (PrimaryExpression -> Typeof .)
    MINUS           reduce using rule 254 (PrimaryExpression -> Typeof .)
    LEFT_SHIFT      reduce using rule 254 (PrimaryExpression -> Typeof .)
    RIGHT_SHIFT     reduce using rule 254 (PrimaryExpression -> Typeof .)
    IS_EQ           reduce using rule 254 (PrimaryExpression -> Typeof .)
    NOT_EQ          reduce using rule 254 (PrimaryExpression -> Typeof .)
    LESS            reduce using rule 254 (PrimaryExpression -> Typeof .)
    GREATER_EQ      reduce using rule 254 (PrimaryExpression -> Typeof .)
    GREATER         reduce using rule 254 (PrimaryExpression -> Typeof .)
    LESS_EQ         reduce using rule 254 (PrimaryExpression -> Typeof .)
    AMPERSAND       reduce using rule 254 (PrimaryExpression -> Typeof .)
    CARET           reduce using rule 254 (PrimaryExpression -> Typeof .)
    PIPE            reduce using rule 254 (PrimaryExpression -> Typeof .)
    DOUBLE_AMPERSAND reduce using rule 254 (PrimaryExpression -> Typeof .)
    QUESTION        reduce using rule 254 (PrimaryExpression -> Typeof .)
    DOUBLE_PIPE     reduce using rule 254 (PrimaryExpression -> Typeof .)
    ASSIGN          reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_PLUS         reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_MINUS        reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_TIMES        reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_DIV          reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_MODULO       reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_AND_BIT      reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_OR_BIT       reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_XOR_BIT      reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_LEFT         reduce using rule 254 (PrimaryExpression -> Typeof .)
    EQ_RIGHT        reduce using rule 254 (PrimaryExpression -> Typeof .)
    RBRACKET        reduce using rule 254 (PrimaryExpression -> Typeof .)
    RANGE           reduce using rule 254 (PrimaryExpression -> Typeof .)
    COMMA           reduce using rule 254 (PrimaryExpression -> Typeof .)
    RPAREN          reduce using rule 254 (PrimaryExpression -> Typeof .)
    SEMICOLON       reduce using rule 254 (PrimaryExpression -> Typeof .)
    RBRACE          reduce using rule 254 (PrimaryExpression -> Typeof .)
    COLON           reduce using rule 254 (PrimaryExpression -> Typeof .)
    LPAREN          reduce using rule 82 (BasicType -> Typeof .)
    DOT             shift and go to state 93

  ! DOT             [ reduce using rule 254 (PrimaryExpression -> Typeof .) ]
  ! LPAREN          [ reduce using rule 254 (PrimaryExpression -> Typeof .) ]


state 246

    (237) PrimaryExpression -> DOT . IDENTIFIER
    (80) BasicType -> DOT . IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 367

    IdentifierList                 shift and go to state 78

state 247

    (233) PostfixExpression -> BasicType . LPAREN ArgumentList_opt RPAREN JmpMark

    LPAREN          shift and go to state 368


state 248

    (235) PrimaryExpression -> IDENTIFIER .
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (258) ArrayLiteral -> IDENTIFIER . LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> IDENTIFIER . LBRACKET AssignExpression RBRACKET

  ! reduce/reduce conflict for POWER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for CARET resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESTION resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RANGE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
    POWER           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DIV             reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MODULO          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IS_EQ           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    NOT_EQ          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS_EQ         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    AMPERSAND       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    CARET           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PIPE            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    QUESTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_DIV          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RBRACKET        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RANGE           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COMMA           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    SEMICOLON       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RBRACE          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COLON           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 371

  ! POWER           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS_MINUS     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DIV             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MODULO          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LEFT_SHIFT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RIGHT_SHIFT     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! IS_EQ           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! NOT_EQ          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER_EQ      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS_EQ         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! AMPERSAND       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! CARET           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PIPE            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! QUESTION        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_PIPE     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! ASSIGN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_PLUS         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MINUS        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_TIMES        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_DIV          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MODULO       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_AND_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_OR_BIT       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_XOR_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_LEFT         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_RIGHT        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RBRACKET        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RANGE           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RBRACE          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! COLON           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 249

    (252) PrimaryExpression -> BasicTypeX . DOT IDENTIFIER
    (253) PrimaryExpression -> BasicTypeX . LPAREN ArgumentList_opt RPAREN
    (79) BasicType -> BasicTypeX .

    DOT             shift and go to state 374
    LPAREN          reduce using rule 79 (BasicType -> BasicTypeX .)

  ! LPAREN          [ shift and go to state 373 ]


state 250

    (105) IdentifierList -> IDENTIFIER LBRACKET AssignExpression . RBRACKET DOT IdentifierList

    RBRACKET        shift and go to state 399


state 251

    (104) IdentifierList -> IDENTIFIER DOT IdentifierList .

    POWER           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DOT             reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LPAREN          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    TIMES           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DIV             reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    MODULO          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    PLUS            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    MINUS           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    IS_EQ           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    NOT_EQ          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LESS            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    GREATER_EQ      reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    GREATER         reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LESS_EQ         reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    AMPERSAND       reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    CARET           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    PIPE            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    QUESTION        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    ASSIGN          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_PLUS         reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_MINUS        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_TIMES        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_DIV          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_MODULO       reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_LEFT         reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RBRACKET        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RANGE           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    COMMA           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RPAREN          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    SEMICOLON       reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    RBRACE          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    COLON           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LBRACKET        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    FUNCTION        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    IDENTIFIER      reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LBRACE          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    BODY            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    ELLIPSIS        reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    BOOL            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    SHORT           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    USHORT          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    INT             reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    UINT            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    LONG            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    ULONG           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    CHAR            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    FLOAT           reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    VOID            reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)
    TYPEOF          reduce using rule 104 (IdentifierList -> IDENTIFIER DOT IdentifierList .)


state 252

    (83) BasicType -> Typeof DOT IdentifierList .

    LPAREN          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    TIMES           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    LBRACKET        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    FUNCTION        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    IDENTIFIER      reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    DOT             reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    BOOL            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    SHORT           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    USHORT          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    INT             reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    UINT            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    LONG            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    ULONG           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    CHAR            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    FLOAT           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    VOID            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    TYPEOF          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    LBRACE          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    COMMA           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    ELLIPSIS        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    RPAREN          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    SEMICOLON       reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    POWER           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    DIV             reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    MODULO          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    PLUS            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    MINUS           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    IS_EQ           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    NOT_EQ          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    LESS            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    GREATER_EQ      reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    GREATER         reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    LESS_EQ         reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    AMPERSAND       reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    CARET           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    PIPE            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    QUESTION        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    ASSIGN          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_PLUS         reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_MINUS        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_TIMES        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_DIV          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_MODULO       reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_LEFT         reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    RBRACKET        reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    RANGE           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    RBRACE          reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    COLON           reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)
    BODY            reduce using rule 83 (BasicType -> Typeof DOT IdentifierList .)


state 253

    (142) Typeof -> TYPEOF LPAREN RETURN . RPAREN

    RPAREN          shift and go to state 400


state 254

    (141) Typeof -> TYPEOF LPAREN Expression . RPAREN

    RPAREN          shift and go to state 401


state 255

    (152) Expression -> CommaExpression .

    SEMICOLON       reduce using rule 152 (Expression -> CommaExpression .)
    RPAREN          reduce using rule 152 (Expression -> CommaExpression .)
    COLON           reduce using rule 152 (Expression -> CommaExpression .)
    RANGE           reduce using rule 152 (Expression -> CommaExpression .)


state 256

    (153) CommaExpression -> AssignExpression .
    (154) CommaExpression -> AssignExpression . COMMA CommaExpression

    RANGE           reduce using rule 153 (CommaExpression -> AssignExpression .)
    SEMICOLON       reduce using rule 153 (CommaExpression -> AssignExpression .)
    RPAREN          reduce using rule 153 (CommaExpression -> AssignExpression .)
    COLON           reduce using rule 153 (CommaExpression -> AssignExpression .)
    COMMA           shift and go to state 402


state 257

    (414) BaseClassList -> COLON SuperClass .
    (415) BaseClassList -> COLON SuperClass . COMMA Interfaces

    LBRACE          reduce using rule 414 (BaseClassList -> COLON SuperClass .)
    COMMA           shift and go to state 403


state 258

    (416) BaseClassList -> COLON Interfaces .

    LBRACE          reduce using rule 416 (BaseClassList -> COLON Interfaces .)


state 259

    (419) SuperClass -> BasicType .
    (422) Interface -> BasicType .

  ! reduce/reduce conflict for COMMA resolved using rule 419 (SuperClass -> BasicType .)
  ! reduce/reduce conflict for LBRACE resolved using rule 419 (SuperClass -> BasicType .)
    COMMA           reduce using rule 419 (SuperClass -> BasicType .)
    LBRACE          reduce using rule 419 (SuperClass -> BasicType .)

  ! COMMA           [ reduce using rule 422 (Interface -> BasicType .) ]
  ! LBRACE          [ reduce using rule 422 (Interface -> BasicType .) ]


state 260

    (420) Interfaces -> Interface .
    (421) Interfaces -> Interface . COMMA Interfaces

    LBRACE          reduce using rule 420 (Interfaces -> Interface .)
    COMMA           shift and go to state 404


state 261

    (411) ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 . AggregateBody class_m2
    (409) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    LBRACE          shift and go to state 52

    AggregateBody                  shift and go to state 405

state 262

    (412) class_m1 -> empty .

    LBRACE          reduce using rule 412 (class_m1 -> empty .)


state 263

    (448) AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .

    SEMICOLON       reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CASE            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DEFAULT         reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LBRACE          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IF              reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    WHILE           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DO              reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FOR             reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    SWITCH          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FINAL           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CONTINUE        reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    BREAK           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    RETURN          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    GOTO            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    WITH            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    MIXIN           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IMPORT          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    STATIC          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LPAREN          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    ALIAS           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    ENUM            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    EXTERN          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    AUTO            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CONST           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FOREACH         reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CLASS           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    UNION           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    AMPERSAND       reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TIMES           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    MINUS           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PLUS            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TILDE           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CAST            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DOT             reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    THIS            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    NULL            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TRUE            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FALSE           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DOLLAR          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    INUMBER         reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DNUMBER         reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LIT_STR         reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LBRACKET        reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FUNCTION        reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    NEW             reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    BOOL            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    SHORT           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    USHORT          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    INT             reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    UINT            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    LONG            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    ULONG           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    CHAR            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    FLOAT           reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    VOID            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TYPEOF          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    TYPEID          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    BODY            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    RBRACE          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    ELSE            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    DELETE          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PRIVATE         reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PROTECTED       reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    PUBLIC          reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)
    $end            reduce using rule 448 (AnonymousEnumDeclaration -> ENUM LBRACE EnumMembers RBRACE .)


state 264

    (454) AnonymousEnumMember -> Type IDENTIFIER . ASSIGN AssignExpression

    ASSIGN          shift and go to state 406


state 265

    (76) Type -> BasicType BasicType2_opt .

    RPAREN          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    LBRACE          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    SEMICOLON       reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    LBRACKET        reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    LPAREN          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    RBRACKET        reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    IDENTIFIER      reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    POWER           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    DOT             reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    PLUS_PLUS       reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    MINUS_MINUS     reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    TIMES           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    DIV             reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    MODULO          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    PLUS            reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    MINUS           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    LEFT_SHIFT      reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    RIGHT_SHIFT     reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    IS_EQ           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    NOT_EQ          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    LESS            reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    GREATER_EQ      reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    GREATER         reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    LESS_EQ         reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    AMPERSAND       reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    CARET           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    PIPE            reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    DOUBLE_AMPERSAND reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    QUESTION        reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    DOUBLE_PIPE     reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    ASSIGN          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_PLUS         reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_MINUS        reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_TIMES        reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_DIV          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_MODULO       reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_AND_BIT      reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_OR_BIT       reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_XOR_BIT      reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_LEFT         reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    EQ_RIGHT        reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    RANGE           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    COMMA           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    RBRACE          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    COLON           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    BODY            reduce using rule 76 (Type -> BasicType BasicType2_opt .)


state 266

    (449) AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .

    SEMICOLON       reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CASE            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DEFAULT         reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LBRACE          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IF              reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    WHILE           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DO              reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FOR             reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    SWITCH          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FINAL           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CONTINUE        reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    BREAK           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    RETURN          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    GOTO            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    WITH            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    MIXIN           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IMPORT          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    STATIC          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LPAREN          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    ALIAS           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    ENUM            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    EXTERN          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    AUTO            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CONST           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FOREACH         reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CLASS           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    UNION           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    AMPERSAND       reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TIMES           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    MINUS           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PLUS            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TILDE           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CAST            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DOT             reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    THIS            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    NULL            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TRUE            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FALSE           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DOLLAR          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    INUMBER         reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DNUMBER         reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LIT_STR         reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LBRACKET        reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FUNCTION        reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    NEW             reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    BOOL            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    SHORT           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    USHORT          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    INT             reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    UINT            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    LONG            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    ULONG           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    CHAR            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    FLOAT           reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    VOID            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TYPEOF          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    TYPEID          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    BODY            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    RBRACE          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    ELSE            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    DELETE          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PRIVATE         reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PROTECTED       reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    PUBLIC          reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)
    $end            reduce using rule 449 (AnonymousEnumDeclaration -> ENUM LBRACE AnonymousEnumMembers RBRACE .)


state 267

    (446) EnumMember -> IDENTIFIER ASSIGN . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 407

state 268

    (443) EnumMembers -> EnumMember COMMA .
    (444) EnumMembers -> EnumMember COMMA . EnumMembers
    (442) EnumMembers -> . EnumMember
    (443) EnumMembers -> . EnumMember COMMA
    (444) EnumMembers -> . EnumMember COMMA EnumMembers
    (445) EnumMember -> . IDENTIFIER
    (446) EnumMember -> . IDENTIFIER ASSIGN AssignExpression

    RBRACE          reduce using rule 443 (EnumMembers -> EnumMember COMMA .)
    IDENTIFIER      shift and go to state 273

    EnumMember                     shift and go to state 272
    EnumMembers                    shift and go to state 408

state 269

    (451) AnonymousEnumMembers -> AnonymousEnumMember COMMA .
    (452) AnonymousEnumMembers -> AnonymousEnumMember COMMA . AnonymousEnumMembers
    (450) AnonymousEnumMembers -> . AnonymousEnumMember
    (451) AnonymousEnumMembers -> . AnonymousEnumMember COMMA
    (452) AnonymousEnumMembers -> . AnonymousEnumMember COMMA AnonymousEnumMembers
    (453) AnonymousEnumMember -> . EnumMember
    (454) AnonymousEnumMember -> . Type IDENTIFIER ASSIGN AssignExpression
    (445) EnumMember -> . IDENTIFIER
    (446) EnumMember -> . IDENTIFIER ASSIGN AssignExpression
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    RBRACE          reduce using rule 451 (AnonymousEnumMembers -> AnonymousEnumMember COMMA .)
    IDENTIFIER      shift and go to state 104
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47

    EnumMember                     shift and go to state 410
    BasicType                      shift and go to state 102
    AnonymousEnumMembers           shift and go to state 409
    AnonymousEnumMember            shift and go to state 106
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    Type                           shift and go to state 101

state 270

    (447) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE . EnumMembers RBRACE
    (442) EnumMembers -> . EnumMember
    (443) EnumMembers -> . EnumMember COMMA
    (444) EnumMembers -> . EnumMember COMMA EnumMembers
    (445) EnumMember -> . IDENTIFIER
    (446) EnumMember -> . IDENTIFIER ASSIGN AssignExpression

    IDENTIFIER      shift and go to state 273

    EnumMembers                    shift and go to state 411
    EnumMember                     shift and go to state 272

state 271

    (440) EnumBody -> LBRACE EnumMembers . RBRACE

    RBRACE          shift and go to state 412


state 272

    (442) EnumMembers -> EnumMember .
    (443) EnumMembers -> EnumMember . COMMA
    (444) EnumMembers -> EnumMember . COMMA EnumMembers

    RBRACE          reduce using rule 442 (EnumMembers -> EnumMember .)
    COMMA           shift and go to state 268


state 273

    (445) EnumMember -> IDENTIFIER .
    (446) EnumMember -> IDENTIFIER . ASSIGN AssignExpression

    COMMA           reduce using rule 445 (EnumMember -> IDENTIFIER .)
    RBRACE          reduce using rule 445 (EnumMember -> IDENTIFIER .)
    ASSIGN          shift and go to state 267


state 274

    (437) EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType . EnumBody
    (440) EnumBody -> . LBRACE EnumMembers RBRACE
    (441) EnumBody -> . SEMICOLON

    LBRACE          shift and go to state 109
    SEMICOLON       shift and go to state 110

    EnumBody                       shift and go to state 413

state 275

    (423) Allocator -> NEW Parameters . SEMICOLON
    (424) Allocator -> NEW Parameters . FunctionBody
    (489) FunctionBody -> . BlockStatement
    (490) FunctionBody -> . BodyStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    SEMICOLON       shift and go to state 415
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    FunctionBody                   shift and go to state 414
    BlockStatement                 shift and go to state 147
    BodyStatement                  shift and go to state 148

state 276

    (409) AggregateBody -> LBRACE DeclDefs_opt RBRACE .

    POWER           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOT             reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PLUS_PLUS       reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MINUS_MINUS     reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LPAREN          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TIMES           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DIV             reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MODULO          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PLUS            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MINUS           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LEFT_SHIFT      reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RIGHT_SHIFT     reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IS_EQ           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    NOT_EQ          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LESS            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    GREATER_EQ      reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    GREATER         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LESS_EQ         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    AMPERSAND       reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CARET           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PIPE            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    QUESTION        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOUBLE_PIPE     reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ASSIGN          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_PLUS         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_MINUS        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_TIMES        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_DIV          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_MODULO       reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_AND_BIT      reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_OR_BIT       reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_XOR_BIT      reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_LEFT         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EQ_RIGHT        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RBRACKET        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RANGE           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    COMMA           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RPAREN          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    SEMICOLON       reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RBRACE          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    COLON           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ALIAS           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ENUM            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IMPORT          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    STATIC          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CLASS           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    UNION           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EXTERN          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FINAL           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    AUTO            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CONST           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IMMUTABLE       reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    BOOL            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    SHORT           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    USHORT          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    INT             reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    UINT            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LONG            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ULONG           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CHAR            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FLOAT           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    VOID            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IDENTIFIER      reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TYPEOF          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    $end            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    NEW             reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DELETE          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    MIXIN           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PRIVATE         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PROTECTED       reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    PUBLIC          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CASE            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DEFAULT         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LBRACE          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    IF              reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    WHILE           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DO              reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FOR             reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    SWITCH          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CONTINUE        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    BREAK           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    RETURN          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    GOTO            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    WITH            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FOREACH         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FOREACH_REVERSE reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    EXCLAMATION     reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TILDE           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    CAST            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    THIS            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    NULL            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TRUE            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FALSE           reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DOLLAR          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    INUMBER         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    DNUMBER         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LIT_CHAR        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LIT_STR         reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    LBRACKET        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    FUNCTION        reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    TYPEID          reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    BODY            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)
    ELSE            reduce using rule 409 (AggregateBody -> LBRACE DeclDefs_opt RBRACE .)


state 277

    (4) DeclDefs -> DeclDef DeclDefs .

    RBRACE          reduce using rule 4 (DeclDefs -> DeclDef DeclDefs .)


state 278

    (427) AliasThis -> ALIAS IDENTIFIER . THIS SEMICOLON
    (139) AliasDeclarationY -> IDENTIFIER . ASSIGN StorageClasses_opt Type
    (140) AliasDeclarationY -> IDENTIFIER . ASSIGN FunctionLiteral

    THIS            shift and go to state 416
    ASSIGN          shift and go to state 138


state 279

    (144) AttributeSpecifier -> Attribute COLON .

    SEMICOLON       reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    NEW             reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    DELETE          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    ALIAS           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    MIXIN           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    ENUM            reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    IMPORT          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    STATIC          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    PRIVATE         reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    PROTECTED       reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    PUBLIC          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    CLASS           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    UNION           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    EXTERN          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    FINAL           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    AUTO            reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    CONST           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    IMMUTABLE       reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    DOT             reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    BOOL            reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    SHORT           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    USHORT          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    INT             reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    UINT            reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    LONG            reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    ULONG           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    CHAR            reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    FLOAT           reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    VOID            reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    IDENTIFIER      reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    TYPEOF          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)
    RBRACE          reduce using rule 144 (AttributeSpecifier -> Attribute COLON .)


state 280

    (147) DeclarationBlock -> DeclDef .

    SEMICOLON       reduce using rule 147 (DeclarationBlock -> DeclDef .)
    NEW             reduce using rule 147 (DeclarationBlock -> DeclDef .)
    DELETE          reduce using rule 147 (DeclarationBlock -> DeclDef .)
    ALIAS           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    MIXIN           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    ENUM            reduce using rule 147 (DeclarationBlock -> DeclDef .)
    IMPORT          reduce using rule 147 (DeclarationBlock -> DeclDef .)
    STATIC          reduce using rule 147 (DeclarationBlock -> DeclDef .)
    PRIVATE         reduce using rule 147 (DeclarationBlock -> DeclDef .)
    PROTECTED       reduce using rule 147 (DeclarationBlock -> DeclDef .)
    PUBLIC          reduce using rule 147 (DeclarationBlock -> DeclDef .)
    CLASS           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    UNION           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    EXTERN          reduce using rule 147 (DeclarationBlock -> DeclDef .)
    FINAL           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    AUTO            reduce using rule 147 (DeclarationBlock -> DeclDef .)
    CONST           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    IMMUTABLE       reduce using rule 147 (DeclarationBlock -> DeclDef .)
    DOT             reduce using rule 147 (DeclarationBlock -> DeclDef .)
    BOOL            reduce using rule 147 (DeclarationBlock -> DeclDef .)
    SHORT           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    USHORT          reduce using rule 147 (DeclarationBlock -> DeclDef .)
    INT             reduce using rule 147 (DeclarationBlock -> DeclDef .)
    UINT            reduce using rule 147 (DeclarationBlock -> DeclDef .)
    LONG            reduce using rule 147 (DeclarationBlock -> DeclDef .)
    ULONG           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    CHAR            reduce using rule 147 (DeclarationBlock -> DeclDef .)
    FLOAT           reduce using rule 147 (DeclarationBlock -> DeclDef .)
    VOID            reduce using rule 147 (DeclarationBlock -> DeclDef .)
    IDENTIFIER      reduce using rule 147 (DeclarationBlock -> DeclDef .)
    TYPEOF          reduce using rule 147 (DeclarationBlock -> DeclDef .)
    RBRACE          reduce using rule 147 (DeclarationBlock -> DeclDef .)


state 281

    (145) AttributeSpecifier -> Attribute DeclarationBlock .

    SEMICOLON       reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    NEW             reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    DELETE          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    ALIAS           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    MIXIN           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    ENUM            reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    IMPORT          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    STATIC          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    PRIVATE         reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    PROTECTED       reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    PUBLIC          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    CLASS           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    UNION           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    EXTERN          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    FINAL           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    AUTO            reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    CONST           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    IMMUTABLE       reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    DOT             reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    BOOL            reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    SHORT           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    USHORT          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    INT             reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    UINT            reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    LONG            reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    ULONG           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    CHAR            reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    FLOAT           reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    VOID            reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    IDENTIFIER      reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    TYPEOF          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)
    RBRACE          reduce using rule 145 (AttributeSpecifier -> Attribute DeclarationBlock .)


state 282

    (148) DeclarationBlock -> LBRACE . DeclDefs_opt RBRACE
    (5) DeclDefs_opt -> . DeclDefs
    (6) DeclDefs_opt -> . empty
    (3) DeclDefs -> . DeclDef
    (4) DeclDefs -> . DeclDef DeclDefs
    (496) empty -> .
    (7) DeclDef -> . AttributeSpecifier
    (8) DeclDef -> . Declaration
    (9) DeclDef -> . Allocator
    (10) DeclDef -> . Deallocator
    (11) DeclDef -> . AliasThis
    (12) DeclDef -> . MixinDeclaration
    (13) DeclDef -> . SEMICOLON
    (144) AttributeSpecifier -> . Attribute COLON
    (145) AttributeSpecifier -> . Attribute DeclarationBlock
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (423) Allocator -> . NEW Parameters SEMICOLON
    (424) Allocator -> . NEW Parameters FunctionBody
    (425) Deallocator -> . DELETE Parameters SEMICOLON
    (426) Deallocator -> . DELETE Parameters FunctionBody
    (427) AliasThis -> . ALIAS IDENTIFIER THIS SEMICOLON
    (33) MixinDeclaration -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (146) Attribute -> . VisibilityAttribute
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (149) VisibilityAttribute -> . PRIVATE
    (150) VisibilityAttribute -> . PROTECTED
    (151) VisibilityAttribute -> . PUBLIC
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

    RBRACE          reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    SEMICOLON       shift and go to state 116
    NEW             shift and go to state 113
    DELETE          shift and go to state 132
    ALIAS           shift and go to state 126
    MIXIN           shift and go to state 130
    ENUM            shift and go to state 17
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    PRIVATE         shift and go to state 120
    PROTECTED       shift and go to state 129
    PUBLIC          shift and go to state 128
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

    StorageClasses                 shift and go to state 1
    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    AttributeSpecifier             shift and go to state 114
    StorageClasses_opt             shift and go to state 9
    DeclDefs                       shift and go to state 117
    VisibilityAttribute            shift and go to state 118
    DeclDefs_opt                   shift and go to state 417
    AliasThis                      shift and go to state 121
    DeclDef                        shift and go to state 122
    Deallocator                    shift and go to state 123
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    empty                          shift and go to state 124
    AutoFuncDeclaration            shift and go to state 16
    MixinDeclaration               shift and go to state 115
    Declaration                    shift and go to state 125
    AnonymousEnumDeclaration       shift and go to state 21
    AnonUnionDeclaration           shift and go to state 23
    EnumDeclaration                shift and go to state 24
    Attribute                      shift and go to state 127
    UnionDeclaration               shift and go to state 25
    ImportDeclaration              shift and go to state 10
    ClassDeclaration               shift and go to state 26
    Allocator                      shift and go to state 131
    StorageClass                   shift and go to state 28

state 283

    (33) MixinDeclaration -> MIXIN LPAREN . AssignExpression RPAREN SEMICOLON
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 418

state 284

    (425) Deallocator -> DELETE Parameters . SEMICOLON
    (426) Deallocator -> DELETE Parameters . FunctionBody
    (489) FunctionBody -> . BlockStatement
    (490) FunctionBody -> . BodyStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    SEMICOLON       shift and go to state 420
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    FunctionBody                   shift and go to state 419
    BlockStatement                 shift and go to state 147
    BodyStatement                  shift and go to state 148

state 285

    (134) AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators . SEMICOLON

    SEMICOLON       shift and go to state 421


state 286

    (135) AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator . SEMICOLON

    SEMICOLON       shift and go to state 422


state 287

    (138) AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY .

    SEMICOLON       reduce using rule 138 (AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY .)
    COMMA           reduce using rule 138 (AliasDeclarationX -> AliasDeclarationX COMMA AliasDeclarationY .)


state 288

    (139) AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt . Type
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    Type                           shift and go to state 423
    BasicType                      shift and go to state 102
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34

state 289

    (140) AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral .

    SEMICOLON       reduce using rule 140 (AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral .)
    COMMA           reduce using rule 140 (AliasDeclarationY -> IDENTIFIER ASSIGN FunctionLiteral .)


state 290

    (26) Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .

    COMMA           reduce using rule 26 (Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .)
    COLON           reduce using rule 26 (Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .)
    SEMICOLON       reduce using rule 26 (Import -> ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName .)


state 291

    (16) ModuleName -> IDENTIFIER .
    (19) PackageName -> IDENTIFIER .

    COMMA           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    COLON           reduce using rule 16 (ModuleName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 16 (ModuleName -> IDENTIFIER .)
    DOT             reduce using rule 19 (PackageName -> IDENTIFIER .)


state 292

    (27) ImportBindings -> Import COLON ImportBindList .

    SEMICOLON       reduce using rule 27 (ImportBindings -> Import COLON ImportBindList .)


state 293

    (28) ImportBindList -> ImportBind .
    (29) ImportBindList -> ImportBind . COMMA ImportBindList

    SEMICOLON       reduce using rule 28 (ImportBindList -> ImportBind .)
    COMMA           shift and go to state 424


state 294

    (30) ImportBind -> IDENTIFIER .
    (31) ImportBind -> IDENTIFIER . ASSIGN IDENTIFIER

    COMMA           reduce using rule 30 (ImportBind -> IDENTIFIER .)
    SEMICOLON       reduce using rule 30 (ImportBind -> IDENTIFIER .)
    ASSIGN          shift and go to state 425


state 295

    (24) ImportList -> Import COMMA ImportList .

    SEMICOLON       reduce using rule 24 (ImportList -> Import COMMA ImportList .)


state 296

    (18) Packages -> Packages DOT PackageName .

    DOT             reduce using rule 18 (Packages -> Packages DOT PackageName .)


state 297

    (15) ModuleFullyQualifiedName -> Packages DOT ModuleName .

    COMMA           reduce using rule 15 (ModuleFullyQualifiedName -> Packages DOT ModuleName .)
    COLON           reduce using rule 15 (ModuleFullyQualifiedName -> Packages DOT ModuleName .)
    SEMICOLON       reduce using rule 15 (ModuleFullyQualifiedName -> Packages DOT ModuleName .)


state 298

    (313) BlockStatement -> LBRACE M_block_begin . RBRACE M_block_end
    (314) BlockStatement -> LBRACE M_block_begin . StatementList RBRACE M_block_end
    (317) StatementList -> . Statement
    (318) StatementList -> . Statement StatementList
    (275) Statement -> . SEMICOLON
    (276) Statement -> . NonEmptyStatement
    (277) Statement -> . ScopeBlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (309) ScopeBlockStatement -> . BlockStatement
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RBRACE          shift and go to state 474
    SEMICOLON       shift and go to state 455
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    LBRACE          shift and go to state 145
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    Statement                      shift and go to state 427
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 430
    RelExpression                  shift and go to state 177
    StatementList                  shift and go to state 434
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 468
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    ScopeBlockStatement            shift and go to state 475
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 299

    (491) BodyStatement -> BODY BlockStatement .

    POWER           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DOT             reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    PLUS_PLUS       reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    MINUS_MINUS     reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LPAREN          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    TIMES           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DIV             reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    MODULO          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    PLUS            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    MINUS           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LEFT_SHIFT      reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    RIGHT_SHIFT     reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    IS_EQ           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    NOT_EQ          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LESS            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    GREATER_EQ      reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    GREATER         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LESS_EQ         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    AMPERSAND       reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    CARET           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    PIPE            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    QUESTION        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DOUBLE_PIPE     reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    ASSIGN          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_PLUS         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_MINUS        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_TIMES        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_DIV          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_MODULO       reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_AND_BIT      reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_OR_BIT       reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_XOR_BIT      reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_LEFT         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EQ_RIGHT        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    COMMA           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    SEMICOLON       reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    RBRACKET        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    RANGE           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    RPAREN          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    RBRACE          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    COLON           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    ALIAS           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    ENUM            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    IMPORT          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    STATIC          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    CLASS           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    UNION           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EXTERN          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    FINAL           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    AUTO            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    CONST           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    IMMUTABLE       reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    BOOL            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    SHORT           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    USHORT          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    INT             reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    UINT            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LONG            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    ULONG           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    CHAR            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    FLOAT           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    VOID            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    IDENTIFIER      reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    TYPEOF          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    $end            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    NEW             reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DELETE          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    MIXIN           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    PRIVATE         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    PROTECTED       reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    PUBLIC          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    CASE            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DEFAULT         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LBRACE          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    IF              reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    WHILE           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DO              reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    FOR             reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    SWITCH          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    CONTINUE        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    BREAK           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    RETURN          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    GOTO            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    WITH            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    FOREACH         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    FOREACH_REVERSE reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    EXCLAMATION     reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    TILDE           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    CAST            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    THIS            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    NULL            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    TRUE            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    FALSE           reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DOLLAR          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    INUMBER         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    DNUMBER         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LIT_CHAR        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LIT_STR         reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    LBRACKET        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    FUNCTION        reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    TYPEID          reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    BODY            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)
    ELSE            reduce using rule 491 (BodyStatement -> BODY BlockStatement .)


state 300

    (483) MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .

    LBRACE          reduce using rule 483 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    BODY            reduce using rule 483 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    SEMICOLON       reduce using rule 483 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    ASSIGN          reduce using rule 483 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    COMMA           reduce using rule 483 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    RPAREN          reduce using rule 483 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)
    ELLIPSIS        reduce using rule 483 (MemberFunctionAttributes -> MemberFunctionAttribute MemberFunctionAttributes .)


state 301

    (473) Parameter -> InOut_opt Type .
    (474) Parameter -> InOut_opt Type . ELLIPSIS

    COMMA           reduce using rule 473 (Parameter -> InOut_opt Type .)
    RPAREN          reduce using rule 473 (Parameter -> InOut_opt Type .)
    ELLIPSIS        shift and go to state 481


state 302

    (470) Parameter -> InOut_opt BasicType . Declarator
    (471) Parameter -> InOut_opt BasicType . Declarator ELLIPSIS
    (472) Parameter -> InOut_opt BasicType . Declarator ASSIGN AssignExpression
    (76) Type -> BasicType . BasicType2_opt
    (58) Declarator -> . VarDeclarator
    (59) Declarator -> . AltDeclarator
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (60) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (61) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ELLIPSIS        reduce using rule 496 (empty -> .)
    COMMA           reduce using rule 496 (empty -> .)
    RPAREN          reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

    VarDeclarator                  shift and go to state 482
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 484
    empty                          shift and go to state 86
    Declarator                     shift and go to state 485
    BasicType2_opt                 shift and go to state 483
    BasicType2                     shift and go to state 90

state 303

    (476) InOut -> InOut InOutX .

    AUTO            reduce using rule 476 (InOut -> InOut InOutX .)
    FINAL           reduce using rule 476 (InOut -> InOut InOutX .)
    SCOPE           reduce using rule 476 (InOut -> InOut InOutX .)
    DOT             reduce using rule 476 (InOut -> InOut InOutX .)
    BOOL            reduce using rule 476 (InOut -> InOut InOutX .)
    SHORT           reduce using rule 476 (InOut -> InOut InOutX .)
    USHORT          reduce using rule 476 (InOut -> InOut InOutX .)
    INT             reduce using rule 476 (InOut -> InOut InOutX .)
    UINT            reduce using rule 476 (InOut -> InOut InOutX .)
    LONG            reduce using rule 476 (InOut -> InOut InOutX .)
    ULONG           reduce using rule 476 (InOut -> InOut InOutX .)
    CHAR            reduce using rule 476 (InOut -> InOut InOutX .)
    FLOAT           reduce using rule 476 (InOut -> InOut InOutX .)
    VOID            reduce using rule 476 (InOut -> InOut InOutX .)
    IDENTIFIER      reduce using rule 476 (InOut -> InOut InOutX .)
    TYPEOF          reduce using rule 476 (InOut -> InOut InOutX .)


state 304

    (464) Parameters -> LPAREN ParameterList_opt RPAREN .

    SEMICOLON       reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LBRACE          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    BODY            reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    CONST           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    IMMUTABLE       reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RETURN          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    TIMES           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LBRACKET        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    FUNCTION        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    IDENTIFIER      reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LPAREN          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    COMMA           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RPAREN          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    POWER           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DOT             reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DIV             reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    MODULO          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    PLUS            reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    MINUS           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    IS_EQ           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    NOT_EQ          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LESS            reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    GREATER_EQ      reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    GREATER         reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    LESS_EQ         reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    AMPERSAND       reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    CARET           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    PIPE            reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    QUESTION        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    ASSIGN          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_PLUS         reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_MINUS        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_TIMES        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_DIV          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_MODULO       reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_LEFT         reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RBRACKET        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RANGE           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    RBRACE          reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    COLON           reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)
    ELLIPSIS        reduce using rule 464 (Parameters -> LPAREN ParameterList_opt RPAREN .)


state 305

    (466) ParameterList -> Parameter COMMA . ParameterList
    (465) ParameterList -> . Parameter
    (466) ParameterList -> . Parameter COMMA ParameterList
    (467) ParameterList -> . ELLIPSIS
    (470) Parameter -> . InOut_opt BasicType Declarator
    (471) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (472) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (473) Parameter -> . InOut_opt Type
    (474) Parameter -> . InOut_opt Type ELLIPSIS
    (480) InOut_opt -> . InOut
    (481) InOut_opt -> . empty
    (475) InOut -> . InOutX
    (476) InOut -> . InOut InOutX
    (496) empty -> .
    (477) InOutX -> . AUTO
    (478) InOutX -> . FINAL
    (479) InOutX -> . SCOPE

    ELLIPSIS        shift and go to state 162
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AUTO            shift and go to state 157
    FINAL           shift and go to state 159
    SCOPE           shift and go to state 158

    InOut_opt                      shift and go to state 156
    InOutX                         shift and go to state 164
    ParameterList                  shift and go to state 486
    empty                          shift and go to state 487
    Parameter                      shift and go to state 165
    InOut                          shift and go to state 161

state 306

    (143) VoidInitializer -> VOID .
    (93) BasicTypeX -> VOID .

    COMMA           reduce using rule 143 (VoidInitializer -> VOID .)
    SEMICOLON       reduce using rule 143 (VoidInitializer -> VOID .)
    DOT             reduce using rule 93 (BasicTypeX -> VOID .)
    LPAREN          reduce using rule 93 (BasicTypeX -> VOID .)


state 307

    (120) ArrayInitializer -> LBRACKET . ArrayMemberInitializations_opt RBRACKET
    (257) ArrayLiteral -> LBRACKET . ArgumentList_opt RBRACKET
    (124) ArrayMemberInitializations_opt -> . ArrayMemberInitializations
    (125) ArrayMemberInitializations_opt -> . empty
    (218) ArgumentList_opt -> . ArgumentList
    (219) ArgumentList_opt -> . empty
    (121) ArrayMemberInitializations -> . ArrayMemberInitialization
    (122) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA
    (123) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA ArrayMemberInitializations
    (496) empty -> .
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (126) ArrayMemberInitialization -> . NonVoidInitializer
    (127) ArrayMemberInitialization -> . AssignExpression COLON NonVoidInitializer
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RBRACKET        reduce using rule 496 (empty -> .)
    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    ArrayMemberInitialization      shift and go to state 489
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 314
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    ArrayMemberInitializations     shift and go to state 490
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    NonVoidInitializer             shift and go to state 488
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 492
    ArrayInitializer               shift and go to state 309
    ArrayMemberInitializations_opt shift and go to state 491
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ArgumentList_opt               shift and go to state 315
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 493

state 308

    (116) Initializer -> NonVoidInitializer .

    COMMA           reduce using rule 116 (Initializer -> NonVoidInitializer .)
    SEMICOLON       reduce using rule 116 (Initializer -> NonVoidInitializer .)


state 309

    (118) NonVoidInitializer -> ArrayInitializer .

    COMMA           reduce using rule 118 (NonVoidInitializer -> ArrayInitializer .)
    RBRACKET        reduce using rule 118 (NonVoidInitializer -> ArrayInitializer .)
    SEMICOLON       reduce using rule 118 (NonVoidInitializer -> ArrayInitializer .)


state 310

    (115) Initializer -> VoidInitializer .

    COMMA           reduce using rule 115 (Initializer -> VoidInitializer .)
    SEMICOLON       reduce using rule 115 (Initializer -> VoidInitializer .)


state 311

    (44) DeclaratorInitializer -> VarDeclarator ASSIGN Initializer .

    COMMA           reduce using rule 44 (DeclaratorInitializer -> VarDeclarator ASSIGN Initializer .)
    SEMICOLON       reduce using rule 44 (DeclaratorInitializer -> VarDeclarator ASSIGN Initializer .)


state 312

    (117) NonVoidInitializer -> ExpInitializer .

    COMMA           reduce using rule 117 (NonVoidInitializer -> ExpInitializer .)
    RBRACKET        reduce using rule 117 (NonVoidInitializer -> ExpInitializer .)
    SEMICOLON       reduce using rule 117 (NonVoidInitializer -> ExpInitializer .)


state 313

    (119) ExpInitializer -> AssignExpression .

    COMMA           reduce using rule 119 (ExpInitializer -> AssignExpression .)
    SEMICOLON       reduce using rule 119 (ExpInitializer -> AssignExpression .)
    RBRACKET        reduce using rule 119 (ExpInitializer -> AssignExpression .)


state 314

    (218) ArgumentList_opt -> ArgumentList .

    RPAREN          reduce using rule 218 (ArgumentList_opt -> ArgumentList .)
    RBRACKET        reduce using rule 218 (ArgumentList_opt -> ArgumentList .)


state 315

    (257) ArrayLiteral -> LBRACKET ArgumentList_opt . RBRACKET

    RBRACKET        shift and go to state 494


state 316

    (219) ArgumentList_opt -> empty .

    RPAREN          reduce using rule 219 (ArgumentList_opt -> empty .)
    RBRACKET        reduce using rule 219 (ArgumentList_opt -> empty .)


state 317

    (220) ArgumentList -> AssignExpression .
    (221) ArgumentList -> AssignExpression . COMMA
    (222) ArgumentList -> AssignExpression . COMMA ArgumentList

    RPAREN          reduce using rule 220 (ArgumentList -> AssignExpression .)
    RBRACKET        reduce using rule 220 (ArgumentList -> AssignExpression .)
    COLON           reduce using rule 220 (ArgumentList -> AssignExpression .)
    COMMA           shift and go to state 495


state 318

    (178) AndExpression -> AndExpression AMPERSAND . CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 496
    NewAnonClassExpression         shift and go to state 185

state 319

    (202) UnaryExpression -> MINUS UnaryExpression .

    TIMES           reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    DIV             reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    MODULO          reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    PLUS            reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    MINUS           reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    IS_EQ           reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    NOT_EQ          reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    LESS            reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    GREATER_EQ      reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    GREATER         reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    LESS_EQ         reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    AMPERSAND       reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    CARET           reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    PIPE            reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    QUESTION        reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    ASSIGN          reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_PLUS         reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_MINUS        reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_TIMES        reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_DIV          reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_MODULO       reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_LEFT         reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    COMMA           reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    RBRACKET        reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    RANGE           reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    RPAREN          reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    SEMICOLON       reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    RBRACE          reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)
    COLON           reduce using rule 202 (UnaryExpression -> MINUS UnaryExpression .)


state 320

    (168) ConditionalExpression -> OrOrExpression QUESTION . Expression COLON ConditionalExpression
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 497
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 321

    (170) OrOrExpression -> OrOrExpression DOUBLE_PIPE . AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 498
    NewAnonClassExpression         shift and go to state 185

state 322

    (203) UnaryExpression -> PLUS UnaryExpression .

    TIMES           reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    DIV             reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    MODULO          reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    PLUS            reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    MINUS           reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    IS_EQ           reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    NOT_EQ          reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    LESS            reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    GREATER_EQ      reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    GREATER         reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    LESS_EQ         reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    AMPERSAND       reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    CARET           reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    PIPE            reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    QUESTION        reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    ASSIGN          reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_PLUS         reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_MINUS        reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_TIMES        reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_DIV          reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_MODULO       reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_LEFT         reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    COMMA           reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    RBRACKET        reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    RANGE           reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    RPAREN          reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    SEMICOLON       reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    RBRACE          reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)
    COLON           reduce using rule 203 (UnaryExpression -> PLUS UnaryExpression .)


state 323

    (272) ImportExpression -> IMPORT LPAREN . AssignExpression RPAREN
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 499

state 324

    (166) AssignExpression -> ConditionalExpression EQ_RIGHT . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 500

state 325

    (162) AssignExpression -> ConditionalExpression EQ_AND_BIT . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 501

state 326

    (159) AssignExpression -> ConditionalExpression EQ_TIMES . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 502

state 327

    (157) AssignExpression -> ConditionalExpression EQ_PLUS . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 503

state 328

    (160) AssignExpression -> ConditionalExpression EQ_DIV . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 504

state 329

    (164) AssignExpression -> ConditionalExpression EQ_XOR_BIT . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 505

state 330

    (158) AssignExpression -> ConditionalExpression EQ_MINUS . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 506

state 331

    (165) AssignExpression -> ConditionalExpression EQ_LEFT . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 507

state 332

    (163) AssignExpression -> ConditionalExpression EQ_OR_BIT . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 508

state 333

    (161) AssignExpression -> ConditionalExpression EQ_MODULO . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 509

state 334

    (156) AssignExpression -> ConditionalExpression ASSIGN . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 510

state 335

    (187) RelExpression -> ShiftExpression LESS_EQ . ShiftExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 511
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 336

    (182) EqualExpression -> ShiftExpression IS_EQ . ShiftExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 512
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 337

    (186) RelExpression -> ShiftExpression GREATER . ShiftExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 513
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 338

    (184) RelExpression -> ShiftExpression LESS . ShiftExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 514
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 339

    (189) ShiftExpression -> ShiftExpression LEFT_SHIFT . AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 515
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 340

    (185) RelExpression -> ShiftExpression GREATER_EQ . ShiftExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 516
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 341

    (190) ShiftExpression -> ShiftExpression RIGHT_SHIFT . AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 517
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 342

    (183) EqualExpression -> ShiftExpression NOT_EQ . ShiftExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 518
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 343

    (197) MulExpression -> MulExpression MODULO . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 519
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 344

    (196) MulExpression -> MulExpression DIV . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 520
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 345

    (195) MulExpression -> MulExpression TIMES . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 521
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 346

    (266) ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt .

    LBRACE          reduce using rule 266 (ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt .)
    BODY            reduce using rule 266 (ParameterMemberAttributes -> Parameters MemberFunctionAttributes_opt .)


state 347

    (261) FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .

    POWER           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DOT             reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    PLUS_PLUS       reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    MINUS_MINUS     reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LPAREN          reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    TIMES           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DIV             reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    MODULO          reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    PLUS            reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    MINUS           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LEFT_SHIFT      reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RIGHT_SHIFT     reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    IS_EQ           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    NOT_EQ          reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LESS            reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    GREATER_EQ      reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    GREATER         reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    LESS_EQ         reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    AMPERSAND       reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    CARET           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    PIPE            reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DOUBLE_AMPERSAND reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    QUESTION        reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    DOUBLE_PIPE     reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    ASSIGN          reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_PLUS         reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_MINUS        reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_TIMES        reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_DIV          reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_MODULO       reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_AND_BIT      reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_OR_BIT       reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_XOR_BIT      reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_LEFT         reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    EQ_RIGHT        reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    COMMA           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    SEMICOLON       reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    COLON           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RBRACKET        reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RANGE           reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RPAREN          reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)
    RBRACE          reduce using rule 261 (FunctionLiteral -> ParameterMemberAttributes FunctionLiteralBody .)


state 348

    (101) BasicType2X -> LBRACKET Type RBRACKET .

    TIMES           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    LBRACKET        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    FUNCTION        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    IDENTIFIER      reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    LPAREN          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    ELLIPSIS        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    COMMA           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    RPAREN          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    LBRACE          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    SEMICOLON       reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    BODY            reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    POWER           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    DOT             reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    PLUS_PLUS       reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    MINUS_MINUS     reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    DIV             reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    MODULO          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    PLUS            reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    MINUS           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    LEFT_SHIFT      reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    RIGHT_SHIFT     reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    IS_EQ           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    NOT_EQ          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    LESS            reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    GREATER_EQ      reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    GREATER         reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    LESS_EQ         reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    AMPERSAND       reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    CARET           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    PIPE            reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    QUESTION        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    DOUBLE_PIPE     reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    ASSIGN          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_PLUS         reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_MINUS        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_TIMES        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_DIV          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_MODULO       reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_AND_BIT      reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_OR_BIT       reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_XOR_BIT      reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_LEFT         reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    EQ_RIGHT        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    RBRACKET        reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    RANGE           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    RBRACE          reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)
    COLON           reduce using rule 101 (BasicType2X -> LBRACKET Type RBRACKET .)


state 349

    (200) UnaryExpression -> MINUS_MINUS UnaryExpression .

    TIMES           reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    DIV             reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    MODULO          reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    PLUS            reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    MINUS           reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    IS_EQ           reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    NOT_EQ          reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    LESS            reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    GREATER_EQ      reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    GREATER         reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    LESS_EQ         reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    AMPERSAND       reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    CARET           reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    PIPE            reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    QUESTION        reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    ASSIGN          reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_PLUS         reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_MINUS        reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_TIMES        reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_DIV          reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_MODULO       reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_LEFT         reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    COMMA           reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RBRACKET        reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RANGE           reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RPAREN          reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    SEMICOLON       reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    RBRACE          reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)
    COLON           reduce using rule 200 (UnaryExpression -> MINUS_MINUS UnaryExpression .)


state 350

    (260) FunctionLiteral -> FUNCTION Type_opt . ParameterAttributes_opt FunctionLiteralBody
    (264) ParameterAttributes_opt -> . ParameterAttributes_opt
    (265) ParameterAttributes_opt -> . empty
    (496) empty -> .

    LBRACE          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)

    empty                          shift and go to state 522
    ParameterAttributes_opt        shift and go to state 523

state 351

    (77) Type_opt -> Type .

    LBRACE          reduce using rule 77 (Type_opt -> Type .)
    BODY            reduce using rule 77 (Type_opt -> Type .)


state 352

    (78) Type_opt -> empty .

    LBRACE          reduce using rule 78 (Type_opt -> empty .)
    BODY            reduce using rule 78 (Type_opt -> empty .)


state 353

    (174) OrExpression -> OrExpression PIPE . XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 524
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    NewAnonClassExpression         shift and go to state 185

state 354

    (198) UnaryExpression -> AMPERSAND UnaryExpression .

    TIMES           reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    DIV             reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    MODULO          reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    PLUS            reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    MINUS           reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    LEFT_SHIFT      reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    IS_EQ           reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    NOT_EQ          reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    LESS            reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    GREATER_EQ      reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    GREATER         reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    LESS_EQ         reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    AMPERSAND       reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    CARET           reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    PIPE            reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    QUESTION        reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    ASSIGN          reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_PLUS         reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_MINUS        reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_TIMES        reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_DIV          reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_MODULO       reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_AND_BIT      reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_OR_BIT       reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_LEFT         reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    EQ_RIGHT        reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    COMMA           reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    RBRACKET        reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    RANGE           reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    RPAREN          reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    SEMICOLON       reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    RBRACE          reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)
    COLON           reduce using rule 198 (UnaryExpression -> AMPERSAND UnaryExpression .)


state 355

    (273) TypeidExpression -> TYPEID LPAREN . Type RPAREN
    (274) TypeidExpression -> TYPEID LPAREN . Expression RPAREN
    (76) Type -> . BasicType BasicType2_opt
    (152) Expression -> . CommaExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    DOT             shift and go to state 203
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 214
    TYPEOF          shift and go to state 47
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 189
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    Type                           shift and go to state 525
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 207
    BasicTypeX                     shift and go to state 222
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 196
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 526
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 356

    (199) UnaryExpression -> PLUS_PLUS UnaryExpression .

    TIMES           reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    DIV             reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    MODULO          reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    PLUS            reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    MINUS           reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    LEFT_SHIFT      reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    IS_EQ           reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    NOT_EQ          reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    LESS            reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    GREATER_EQ      reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    GREATER         reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    LESS_EQ         reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    AMPERSAND       reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    CARET           reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    PIPE            reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    QUESTION        reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    ASSIGN          reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_PLUS         reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_MINUS        reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_TIMES        reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_DIV          reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_MODULO       reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_AND_BIT      reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_OR_BIT       reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_LEFT         reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    EQ_RIGHT        reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    COMMA           reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RBRACKET        reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RANGE           reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RPAREN          reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    SEMICOLON       reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    RBRACE          reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)
    COLON           reduce using rule 199 (UnaryExpression -> PLUS_PLUS UnaryExpression .)


state 357

    (204) UnaryExpression -> EXCLAMATION UnaryExpression .

    TIMES           reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    DIV             reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    MODULO          reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    PLUS            reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    MINUS           reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    LEFT_SHIFT      reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    IS_EQ           reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    NOT_EQ          reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    LESS            reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    GREATER_EQ      reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    GREATER         reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    LESS_EQ         reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    AMPERSAND       reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    CARET           reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    PIPE            reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    QUESTION        reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    ASSIGN          reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_PLUS         reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_MINUS        reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_TIMES        reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_DIV          reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_MODULO       reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_AND_BIT      reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_OR_BIT       reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_LEFT         reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    EQ_RIGHT        reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    COMMA           reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RBRACKET        reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RANGE           reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RPAREN          reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    SEMICOLON       reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    RBRACE          reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)
    COLON           reduce using rule 204 (UnaryExpression -> EXCLAMATION UnaryExpression .)


state 358

    (232) PostfixExpression -> PostfixExpression LPAREN . ArgumentList RPAREN
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 527
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 359

    (226) PowExpression -> PostfixExpression POWER . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 528
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 360

    (231) PostfixExpression -> PostfixExpression MINUS_MINUS .

    POWER           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DOT             reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LPAREN          reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    TIMES           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DIV             reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    MODULO          reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    PLUS            reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    MINUS           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LEFT_SHIFT      reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RIGHT_SHIFT     reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    IS_EQ           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    NOT_EQ          reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LESS            reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    GREATER_EQ      reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    GREATER         reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    LESS_EQ         reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    AMPERSAND       reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    CARET           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    PIPE            reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    QUESTION        reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    DOUBLE_PIPE     reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    ASSIGN          reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_PLUS         reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_MINUS        reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_TIMES        reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_DIV          reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_MODULO       reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_AND_BIT      reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_OR_BIT       reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_XOR_BIT      reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_LEFT         reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    EQ_RIGHT        reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    COMMA           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RPAREN          reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    SEMICOLON       reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RBRACKET        reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    COLON           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RANGE           reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)
    RBRACE          reduce using rule 231 (PostfixExpression -> PostfixExpression MINUS_MINUS .)


state 361

    (230) PostfixExpression -> PostfixExpression PLUS_PLUS .

    POWER           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DOT             reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LPAREN          reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    TIMES           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DIV             reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    MODULO          reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    PLUS            reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    MINUS           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LEFT_SHIFT      reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RIGHT_SHIFT     reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    IS_EQ           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    NOT_EQ          reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LESS            reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    GREATER_EQ      reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    GREATER         reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    LESS_EQ         reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    AMPERSAND       reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    CARET           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    PIPE            reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    QUESTION        reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    DOUBLE_PIPE     reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    ASSIGN          reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_PLUS         reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_MINUS        reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_TIMES        reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_DIV          reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_MODULO       reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_AND_BIT      reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_OR_BIT       reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_XOR_BIT      reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_LEFT         reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    EQ_RIGHT        reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    COMMA           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RPAREN          reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    SEMICOLON       reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RBRACKET        reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    COLON           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RANGE           reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)
    RBRACE          reduce using rule 230 (PostfixExpression -> PostfixExpression PLUS_PLUS .)


state 362

    (228) PostfixExpression -> PostfixExpression DOT . IDENTIFIER
    (229) PostfixExpression -> PostfixExpression DOT . NewExpression
    (210) NewExpression -> . NEW AllocatorArguments_opt Type
    (211) NewExpression -> . NewExpressionWithArgs
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody

    IDENTIFIER      shift and go to state 532
    NEW             shift and go to state 531

    NewExpressionWithArgs          shift and go to state 529
    NewExpression                  shift and go to state 530
    NewAnonClassExpression         shift and go to state 185

state 363

    (212) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LPAREN ArgumentList_opt RPAREN
    (428) NewAnonClassExpression -> NEW AllocatorArguments_opt . CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    CLASS           shift and go to state 534
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 102
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    Type                           shift and go to state 533

state 364

    (215) AllocatorArguments -> LPAREN . ArgumentList_opt RPAREN
    (218) ArgumentList_opt -> . ArgumentList
    (219) ArgumentList_opt -> . empty
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (496) empty -> .
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RPAREN          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 314
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 316
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ArgumentList_opt               shift and go to state 535
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 365

    (216) AllocatorArguments_opt -> AllocatorArguments .

    CLASS           reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    DOT             reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    BOOL            reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    SHORT           reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    USHORT          reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    INT             reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    UINT            reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    LONG            reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    ULONG           reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    CHAR            reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    FLOAT           reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    VOID            reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    IDENTIFIER      reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)
    TYPEOF          reduce using rule 216 (AllocatorArguments_opt -> AllocatorArguments .)


state 366

    (217) AllocatorArguments_opt -> empty .

    CLASS           reduce using rule 217 (AllocatorArguments_opt -> empty .)
    DOT             reduce using rule 217 (AllocatorArguments_opt -> empty .)
    BOOL            reduce using rule 217 (AllocatorArguments_opt -> empty .)
    SHORT           reduce using rule 217 (AllocatorArguments_opt -> empty .)
    USHORT          reduce using rule 217 (AllocatorArguments_opt -> empty .)
    INT             reduce using rule 217 (AllocatorArguments_opt -> empty .)
    UINT            reduce using rule 217 (AllocatorArguments_opt -> empty .)
    LONG            reduce using rule 217 (AllocatorArguments_opt -> empty .)
    ULONG           reduce using rule 217 (AllocatorArguments_opt -> empty .)
    CHAR            reduce using rule 217 (AllocatorArguments_opt -> empty .)
    FLOAT           reduce using rule 217 (AllocatorArguments_opt -> empty .)
    VOID            reduce using rule 217 (AllocatorArguments_opt -> empty .)
    IDENTIFIER      reduce using rule 217 (AllocatorArguments_opt -> empty .)
    TYPEOF          reduce using rule 217 (AllocatorArguments_opt -> empty .)


state 367

    (237) PrimaryExpression -> DOT IDENTIFIER .
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! reduce/reduce conflict for LPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    POWER           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    DIV             reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    MODULO          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS            reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    IS_EQ           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS            reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    CARET           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    PIPE            reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    QUESTION        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    RANGE           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    COMMA           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    RBRACE          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    COLON           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    FUNCTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RBRACKET        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 91

  ! DOT             [ reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! RBRACKET        [ reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 368

    (233) PostfixExpression -> BasicType LPAREN . ArgumentList_opt RPAREN JmpMark
    (218) ArgumentList_opt -> . ArgumentList
    (219) ArgumentList_opt -> . empty
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (496) empty -> .
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RPAREN          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 314
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 316
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ArgumentList_opt               shift and go to state 536
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 369

    (223) CastExpression -> CAST LPAREN . Type RPAREN UnaryExpression
    (224) CastExpression -> CAST LPAREN . RPAREN UnaryExpression
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    RPAREN          shift and go to state 537
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    Type                           shift and go to state 538
    BasicType                      shift and go to state 102
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34

state 370

    (209) ComplementExpression -> TILDE UnaryExpression .

    TIMES           reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    DIV             reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    MODULO          reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    PLUS            reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    MINUS           reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    LEFT_SHIFT      reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    IS_EQ           reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    NOT_EQ          reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    LESS            reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    GREATER_EQ      reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    GREATER         reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    LESS_EQ         reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    AMPERSAND       reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    CARET           reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    PIPE            reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    QUESTION        reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    ASSIGN          reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_PLUS         reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_MINUS        reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_TIMES        reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_DIV          reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_MODULO       reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_AND_BIT      reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_OR_BIT       reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_LEFT         reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    EQ_RIGHT        reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    COMMA           reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    SEMICOLON       reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    RANGE           reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    RPAREN          reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    RBRACKET        reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    RBRACE          reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)
    COLON           reduce using rule 209 (ComplementExpression -> TILDE UnaryExpression .)


state 371

    (105) IdentifierList -> IDENTIFIER LBRACKET . AssignExpression RBRACKET DOT IdentifierList
    (258) ArrayLiteral -> IDENTIFIER LBRACKET . INUMBER RBRACKET
    (259) ArrayLiteral -> IDENTIFIER LBRACKET . AssignExpression RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    INUMBER         shift and go to state 539
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 540

state 372

    (172) AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND . OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 541
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    NewAnonClassExpression         shift and go to state 185

state 373

    (253) PrimaryExpression -> BasicTypeX LPAREN . ArgumentList_opt RPAREN
    (218) ArgumentList_opt -> . ArgumentList
    (219) ArgumentList_opt -> . empty
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (496) empty -> .
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RPAREN          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 314
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 316
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ArgumentList_opt               shift and go to state 542
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 374

    (252) PrimaryExpression -> BasicTypeX DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 543


state 375

    (176) XorExpression -> XorExpression CARET . AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 544
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    NewAnonClassExpression         shift and go to state 185

state 376

    (271) MixinExpression -> MIXIN LPAREN . AssignExpression RPAREN
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 545

state 377

    (201) UnaryExpression -> TIMES UnaryExpression .

    TIMES           reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    DIV             reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    MODULO          reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    PLUS            reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    MINUS           reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    LEFT_SHIFT      reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    IS_EQ           reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    NOT_EQ          reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    LESS            reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    GREATER_EQ      reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    GREATER         reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    LESS_EQ         reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    AMPERSAND       reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    CARET           reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    PIPE            reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    QUESTION        reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    ASSIGN          reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_PLUS         reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_MINUS        reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_TIMES        reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_DIV          reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_MODULO       reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_AND_BIT      reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_OR_BIT       reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_LEFT         reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    EQ_RIGHT        reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    COMMA           reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    RBRACKET        reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    RANGE           reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    RPAREN          reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    SEMICOLON       reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    RBRACE          reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)
    COLON           reduce using rule 201 (UnaryExpression -> TIMES UnaryExpression .)


state 378

    (255) PrimaryExpression -> LPAREN Expression . RPAREN

    RPAREN          shift and go to state 546


state 379

    (206) UnaryExpression -> LPAREN Type . RPAREN DOT IDENTIFIER

    RPAREN          shift and go to state 547


state 380

    (192) AddExpression -> AddExpression PLUS . MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 548
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 381

    (193) AddExpression -> AddExpression MINUS . MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 549
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 382

    (269) LIT_STRPlus -> LIT_STR LIT_STRPlus .

    POWER           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOT             reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LPAREN          reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TIMES           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DIV             reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MODULO          reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS            reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ          reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS            reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ      reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER         reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ         reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    AMPERSAND       reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    CARET           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PIPE            reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    QUESTION        reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    ASSIGN          reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_PLUS         reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MINUS        reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_TIMES        reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_DIV          reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MODULO       reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_LEFT         reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COMMA           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    SEMICOLON       reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RPAREN          reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACKET        reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RANGE           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACE          reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COLON           reduce using rule 269 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)


state 383

    (99) BasicType2X -> LBRACKET AssignExpression RBRACKET .

    TIMES           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LBRACKET        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    FUNCTION        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LPAREN          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    COMMA           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RPAREN          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LBRACE          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    BODY            reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    POWER           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DOT             reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DIV             reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    MODULO          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    PLUS            reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    MINUS           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    IS_EQ           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    NOT_EQ          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LESS            reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    GREATER         reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    LESS_EQ         reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    AMPERSAND       reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    CARET           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    PIPE            reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    QUESTION        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_DIV          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RBRACKET        reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RANGE           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    RBRACE          reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)
    COLON           reduce using rule 99 (BasicType2X -> LBRACKET AssignExpression RBRACKET .)


state 384

    (100) BasicType2X -> LBRACKET AssignExpression RANGE . AssignExpression RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 550

state 385

    (62) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX . RPAREN
    (63) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX . RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX . RPAREN AltDeclaratorSuffixes

    RPAREN          shift and go to state 551


state 386

    (67) AltDeclaratorX -> AltDeclarator .

    RPAREN          reduce using rule 67 (AltDeclaratorX -> AltDeclarator .)


state 387

    (65) AltDeclaratorX -> BasicType2_opt . IDENTIFIER
    (66) AltDeclaratorX -> BasicType2_opt . IDENTIFIER AltFuncDeclaratorSuffix
    (61) AltDeclarator -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes

    IDENTIFIER      shift and go to state 552
    LPAREN          shift and go to state 235


state 388

    (461) FuncDeclarator -> BasicType2_opt IDENTIFIER func_m3 . FuncDeclaratorSuffix
    (463) FuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN

    LPAREN          shift and go to state 76

    FuncDeclaratorSuffix           shift and go to state 553
    Parameters                     shift and go to state 75

state 389

    (72) AltDeclaratorSuffix -> LBRACKET . RBRACKET
    (73) AltDeclaratorSuffix -> LBRACKET . AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> LBRACKET . Type RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (76) Type -> . BasicType BasicType2_opt
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RBRACKET        shift and go to state 555
    DOT             shift and go to state 203
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 214
    TYPEOF          shift and go to state 47
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 189
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    Type                           shift and go to state 554
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 207
    BasicTypeX                     shift and go to state 222
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 196
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 556

state 390

    (68) AltDeclaratorSuffixes -> AltDeclaratorSuffix .
    (69) AltDeclaratorSuffixes -> AltDeclaratorSuffix . AltDeclaratorSuffixes
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (69) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (72) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ELLIPSIS        reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    ASSIGN          reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    COMMA           reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    RPAREN          reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    SEMICOLON       reduce using rule 68 (AltDeclaratorSuffixes -> AltDeclaratorSuffix .)
    LBRACKET        shift and go to state 389

    AltDeclaratorSuffix            shift and go to state 390
    AltDeclaratorSuffixes          shift and go to state 557

state 391

    (61) AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .

    ASSIGN          reduce using rule 61 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    COMMA           reduce using rule 61 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 61 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    RPAREN          reduce using rule 61 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    ELLIPSIS        reduce using rule 61 (AltDeclarator -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)


state 392

    (462) func_m3 -> empty .

    LPAREN          reduce using rule 462 (func_m3 -> empty .)


state 393

    (42) Declarators -> DeclaratorInitializer COMMA DeclaratorIdentifierList .

    SEMICOLON       reduce using rule 42 (Declarators -> DeclaratorInitializer COMMA DeclaratorIdentifierList .)


state 394

    (47) DeclaratorIdentifierList -> mark1 . DeclaratorIdentifier
    (48) DeclaratorIdentifierList -> mark1 . DeclaratorIdentifier COMMA DeclaratorIdentifierList
    (50) DeclaratorIdentifier -> . VarDeclaratorIdentifier
    (51) DeclaratorIdentifier -> . AltDeclaratorIdentifier
    (52) VarDeclaratorIdentifier -> . IDENTIFIER
    (53) VarDeclaratorIdentifier -> . IDENTIFIER ASSIGN Initializer
    (54) AltDeclaratorIdentifier -> . BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt
    (55) AltDeclaratorIdentifier -> . BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer
    (56) AltDeclaratorIdentifier -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (57) AltDeclaratorIdentifier -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters
    (496) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 561
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]

    DeclaratorIdentifier           shift and go to state 558
    VarDeclaratorIdentifier        shift and go to state 562
    empty                          shift and go to state 86
    AltDeclaratorIdentifier        shift and go to state 559
    BasicType2X                    shift and go to state 84
    BasicType2_opt                 shift and go to state 560
    BasicType2                     shift and go to state 563

state 395

    (49) mark1 -> empty .

    IDENTIFIER      reduce using rule 49 (mark1 -> empty .)
    TIMES           reduce using rule 49 (mark1 -> empty .)
    LBRACKET        reduce using rule 49 (mark1 -> empty .)
    FUNCTION        reduce using rule 49 (mark1 -> empty .)


state 396

    (45) DeclaratorInitializer -> AltDeclarator ASSIGN Initializer .

    COMMA           reduce using rule 45 (DeclaratorInitializer -> AltDeclarator ASSIGN Initializer .)
    SEMICOLON       reduce using rule 45 (DeclaratorInitializer -> AltDeclarator ASSIGN Initializer .)


state 397

    (455) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .

    SEMICOLON       reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    CASE            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    DEFAULT         reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    LBRACE          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    IDENTIFIER      reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    IF              reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    WHILE           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    DO              reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    FOR             reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    SWITCH          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    FINAL           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    CONTINUE        reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    BREAK           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    RETURN          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    GOTO            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    WITH            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    MIXIN           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    IMPORT          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    STATIC          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    LPAREN          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    ALIAS           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    ENUM            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    EXTERN          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    AUTO            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    CONST           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    IMMUTABLE       reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    FOREACH         reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    FOREACH_REVERSE reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    CLASS           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    UNION           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    AMPERSAND       reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    PLUS_PLUS       reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    MINUS_MINUS     reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    TIMES           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    MINUS           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    PLUS            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    EXCLAMATION     reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    TILDE           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    CAST            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    DOT             reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    THIS            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    NULL            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    TRUE            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    FALSE           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    DOLLAR          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    INUMBER         reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    DNUMBER         reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    LIT_CHAR        reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    LIT_STR         reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    LBRACKET        reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    FUNCTION        reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    NEW             reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    BOOL            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    SHORT           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    USHORT          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    INT             reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    UINT            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    LONG            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    ULONG           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    CHAR            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    FLOAT           reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    VOID            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    TYPEOF          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    TYPEID          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    BODY            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    RBRACE          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    ELSE            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    DELETE          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    PRIVATE         reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    PROTECTED       reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    PUBLIC          reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)
    $end            reduce using rule 455 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody .)


state 398

    (456) FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .

    SEMICOLON       reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    CASE            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    DEFAULT         reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    LBRACE          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    IDENTIFIER      reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    IF              reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    WHILE           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    DO              reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    FOR             reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    SWITCH          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    FINAL           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    CONTINUE        reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    BREAK           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    RETURN          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    GOTO            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    WITH            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    MIXIN           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    IMPORT          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    STATIC          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    LPAREN          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    ALIAS           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    ENUM            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    EXTERN          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    AUTO            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    CONST           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    IMMUTABLE       reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    FOREACH         reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    FOREACH_REVERSE reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    CLASS           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    UNION           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    AMPERSAND       reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    PLUS_PLUS       reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    MINUS_MINUS     reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    TIMES           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    MINUS           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    PLUS            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    EXCLAMATION     reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    TILDE           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    CAST            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    DOT             reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    THIS            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    NULL            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    TRUE            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    FALSE           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    DOLLAR          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    INUMBER         reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    DNUMBER         reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    LIT_CHAR        reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    LIT_STR         reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    LBRACKET        reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    FUNCTION        reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    NEW             reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    BOOL            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    SHORT           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    USHORT          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    INT             reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    UINT            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    LONG            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    ULONG           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    CHAR            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    FLOAT           reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    VOID            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    TYPEOF          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    TYPEID          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    BODY            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    RBRACE          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    ELSE            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    DELETE          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    PRIVATE         reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    PROTECTED       reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    PUBLIC          reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)
    $end            reduce using rule 456 (FuncDeclaration -> StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON .)


state 399

    (105) IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET . DOT IdentifierList

    DOT             shift and go to state 564


state 400

    (142) Typeof -> TYPEOF LPAREN RETURN RPAREN .

    DOT             reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    POWER           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    PLUS_PLUS       reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    MINUS_MINUS     reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LPAREN          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    TIMES           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    DIV             reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    MODULO          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    PLUS            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    MINUS           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LEFT_SHIFT      reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RIGHT_SHIFT     reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    IS_EQ           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    NOT_EQ          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LESS            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER_EQ      reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER         reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LESS_EQ         reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    AMPERSAND       reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    CARET           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    PIPE            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    QUESTION        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    DOUBLE_PIPE     reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    ASSIGN          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_PLUS         reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_MINUS        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_TIMES        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_DIV          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_MODULO       reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_AND_BIT      reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_OR_BIT       reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_XOR_BIT      reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_LEFT         reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_RIGHT        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RPAREN          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    COLON           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    COMMA           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RBRACKET        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RANGE           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    SEMICOLON       reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    RBRACE          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LBRACKET        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    FUNCTION        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    IDENTIFIER      reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LBRACE          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    ELLIPSIS        reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    BODY            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    BOOL            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    SHORT           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    USHORT          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    INT             reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    UINT            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    LONG            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    ULONG           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    CHAR            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    FLOAT           reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    VOID            reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)
    TYPEOF          reduce using rule 142 (Typeof -> TYPEOF LPAREN RETURN RPAREN .)


state 401

    (141) Typeof -> TYPEOF LPAREN Expression RPAREN .

    DOT             reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    POWER           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    PLUS_PLUS       reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    MINUS_MINUS     reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    TIMES           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    DIV             reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    MODULO          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    PLUS            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    MINUS           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LEFT_SHIFT      reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    IS_EQ           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    NOT_EQ          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LESS            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    GREATER_EQ      reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    GREATER         reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LESS_EQ         reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    CARET           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    PIPE            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    ASSIGN          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_PLUS         reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_MINUS        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_TIMES        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_DIV          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_MODULO       reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_AND_BIT      reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_OR_BIT       reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_LEFT         reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    EQ_RIGHT        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    COLON           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    COMMA           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RANGE           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LBRACKET        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    FUNCTION        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    IDENTIFIER      reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LBRACE          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    ELLIPSIS        reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    BODY            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    BOOL            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    SHORT           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    USHORT          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    INT             reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    UINT            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    LONG            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    ULONG           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    CHAR            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    FLOAT           reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    VOID            reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)
    TYPEOF          reduce using rule 141 (Typeof -> TYPEOF LPAREN Expression RPAREN .)


state 402

    (154) CommaExpression -> AssignExpression COMMA . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 565
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 403

    (415) BaseClassList -> COLON SuperClass COMMA . Interfaces
    (420) Interfaces -> . Interface
    (421) Interfaces -> . Interface COMMA Interfaces
    (422) Interface -> . BasicType
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    Interfaces                     shift and go to state 566
    BasicType                      shift and go to state 567
    BasicTypeX                     shift and go to state 39
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 260
    Typeof                         shift and go to state 43

state 404

    (421) Interfaces -> Interface COMMA . Interfaces
    (420) Interfaces -> . Interface
    (421) Interfaces -> . Interface COMMA Interfaces
    (422) Interface -> . BasicType
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    Interfaces                     shift and go to state 568
    BasicType                      shift and go to state 567
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 260

state 405

    (411) ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody . class_m2
    (413) class_m2 -> . empty
    (496) empty -> .

    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    $end            reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    DELETE          reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    PRIVATE         reduce using rule 496 (empty -> .)
    PROTECTED       reduce using rule 496 (empty -> .)
    PUBLIC          reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    ELSE            reduce using rule 496 (empty -> .)

    class_m2                       shift and go to state 569
    empty                          shift and go to state 570

state 406

    (454) AnonymousEnumMember -> Type IDENTIFIER ASSIGN . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 571

state 407

    (446) EnumMember -> IDENTIFIER ASSIGN AssignExpression .

    COMMA           reduce using rule 446 (EnumMember -> IDENTIFIER ASSIGN AssignExpression .)
    RBRACE          reduce using rule 446 (EnumMember -> IDENTIFIER ASSIGN AssignExpression .)


state 408

    (444) EnumMembers -> EnumMember COMMA EnumMembers .

    RBRACE          reduce using rule 444 (EnumMembers -> EnumMember COMMA EnumMembers .)


state 409

    (452) AnonymousEnumMembers -> AnonymousEnumMember COMMA AnonymousEnumMembers .

    RBRACE          reduce using rule 452 (AnonymousEnumMembers -> AnonymousEnumMember COMMA AnonymousEnumMembers .)


state 410

    (453) AnonymousEnumMember -> EnumMember .

    COMMA           reduce using rule 453 (AnonymousEnumMember -> EnumMember .)
    RBRACE          reduce using rule 453 (AnonymousEnumMember -> EnumMember .)


state 411

    (447) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers . RBRACE

    RBRACE          shift and go to state 572


state 412

    (440) EnumBody -> LBRACE EnumMembers RBRACE .

    ALIAS           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    ENUM            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IMPORT          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    STATIC          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CLASS           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    UNION           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    EXTERN          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FINAL           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    AUTO            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CONST           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DOT             reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    BOOL            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    SHORT           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    USHORT          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    INT             reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    UINT            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LONG            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    ULONG           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CHAR            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FLOAT           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    VOID            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TYPEOF          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    $end            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    SEMICOLON       reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    NEW             reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DELETE          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    MIXIN           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PRIVATE         reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PROTECTED       reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PUBLIC          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    RBRACE          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CASE            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DEFAULT         reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LBRACE          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    IF              reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    WHILE           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DO              reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FOR             reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    SWITCH          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CONTINUE        reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    BREAK           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    RETURN          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    GOTO            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    WITH            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LPAREN          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FOREACH         reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    AMPERSAND       reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TIMES           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    MINUS           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    PLUS            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TILDE           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    CAST            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    THIS            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    NULL            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TRUE            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FALSE           reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DOLLAR          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    INUMBER         reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    DNUMBER         reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LIT_STR         reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    LBRACKET        reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    FUNCTION        reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    TYPEID          reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    BODY            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)
    ELSE            reduce using rule 440 (EnumBody -> LBRACE EnumMembers RBRACE .)


state 413

    (437) EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .

    SEMICOLON       reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CASE            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DEFAULT         reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LBRACE          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IDENTIFIER      reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IF              reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    WHILE           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DO              reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FOR             reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    SWITCH          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FINAL           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CONTINUE        reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    BREAK           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    RETURN          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    GOTO            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    WITH            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    MIXIN           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IMPORT          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    STATIC          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LPAREN          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ALIAS           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ENUM            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    EXTERN          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    AUTO            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CONST           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    IMMUTABLE       reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FOREACH         reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FOREACH_REVERSE reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CLASS           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    UNION           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    AMPERSAND       reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PLUS_PLUS       reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    MINUS_MINUS     reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TIMES           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    MINUS           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PLUS            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    EXCLAMATION     reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TILDE           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CAST            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DOT             reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    THIS            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    NULL            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TRUE            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FALSE           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DOLLAR          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    INUMBER         reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DNUMBER         reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LIT_CHAR        reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LIT_STR         reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LBRACKET        reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FUNCTION        reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    NEW             reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    BOOL            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    SHORT           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    USHORT          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    INT             reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    UINT            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    LONG            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ULONG           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    CHAR            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    FLOAT           reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    VOID            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TYPEOF          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    TYPEID          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    BODY            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    RBRACE          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    ELSE            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    DELETE          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PRIVATE         reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PROTECTED       reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    PUBLIC          reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)
    $end            reduce using rule 437 (EnumDeclaration -> ENUM IDENTIFIER COLON EnumBaseType EnumBody .)


state 414

    (424) Allocator -> NEW Parameters FunctionBody .

    SEMICOLON       reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    NEW             reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    DELETE          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    ALIAS           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    MIXIN           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    ENUM            reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    IMPORT          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    STATIC          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    PRIVATE         reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    PROTECTED       reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    PUBLIC          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    CLASS           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    UNION           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    EXTERN          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    FINAL           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    AUTO            reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    CONST           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    IMMUTABLE       reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    DOT             reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    BOOL            reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    SHORT           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    USHORT          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    INT             reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    UINT            reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    LONG            reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    ULONG           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    CHAR            reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    FLOAT           reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    VOID            reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    IDENTIFIER      reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    TYPEOF          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)
    RBRACE          reduce using rule 424 (Allocator -> NEW Parameters FunctionBody .)


state 415

    (423) Allocator -> NEW Parameters SEMICOLON .

    SEMICOLON       reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    NEW             reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    DELETE          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    ALIAS           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    MIXIN           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    ENUM            reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    IMPORT          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    STATIC          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    PRIVATE         reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    PROTECTED       reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    PUBLIC          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    CLASS           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    UNION           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    EXTERN          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    FINAL           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    AUTO            reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    CONST           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    IMMUTABLE       reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    DOT             reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    BOOL            reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    SHORT           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    USHORT          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    INT             reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    UINT            reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    LONG            reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    ULONG           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    CHAR            reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    FLOAT           reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    VOID            reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    IDENTIFIER      reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    TYPEOF          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)
    RBRACE          reduce using rule 423 (Allocator -> NEW Parameters SEMICOLON .)


state 416

    (427) AliasThis -> ALIAS IDENTIFIER THIS . SEMICOLON

    SEMICOLON       shift and go to state 573


state 417

    (148) DeclarationBlock -> LBRACE DeclDefs_opt . RBRACE

    RBRACE          shift and go to state 574


state 418

    (33) MixinDeclaration -> MIXIN LPAREN AssignExpression . RPAREN SEMICOLON

    RPAREN          shift and go to state 575


state 419

    (426) Deallocator -> DELETE Parameters FunctionBody .

    SEMICOLON       reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    NEW             reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    DELETE          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    ALIAS           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    MIXIN           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    ENUM            reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    IMPORT          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    STATIC          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    PRIVATE         reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    PROTECTED       reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    PUBLIC          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    CLASS           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    UNION           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    EXTERN          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    FINAL           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    AUTO            reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    CONST           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    IMMUTABLE       reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    DOT             reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    BOOL            reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    SHORT           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    USHORT          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    INT             reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    UINT            reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    LONG            reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    ULONG           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    CHAR            reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    FLOAT           reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    VOID            reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    IDENTIFIER      reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    TYPEOF          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)
    RBRACE          reduce using rule 426 (Deallocator -> DELETE Parameters FunctionBody .)


state 420

    (425) Deallocator -> DELETE Parameters SEMICOLON .

    SEMICOLON       reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    NEW             reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    DELETE          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    ALIAS           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    MIXIN           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    ENUM            reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    IMPORT          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    STATIC          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    PRIVATE         reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    PROTECTED       reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    PUBLIC          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    CLASS           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    UNION           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    EXTERN          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    FINAL           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    AUTO            reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    CONST           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    IMMUTABLE       reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    DOT             reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    BOOL            reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    SHORT           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    USHORT          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    INT             reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    UINT            reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    LONG            reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    ULONG           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    CHAR            reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    FLOAT           reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    VOID            reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    IDENTIFIER      reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    TYPEOF          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)
    RBRACE          reduce using rule 425 (Deallocator -> DELETE Parameters SEMICOLON .)


state 421

    (134) AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .

    SEMICOLON       reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CASE            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DEFAULT         reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACE          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IDENTIFIER      reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IF              reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    WHILE           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DO              reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOR             reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    SWITCH          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FINAL           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONTINUE        reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    BREAK           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    RETURN          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    GOTO            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    WITH            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    MIXIN           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMPORT          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    STATIC          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LPAREN          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ALIAS           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ENUM            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXTERN          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    AUTO            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CONST           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    IMMUTABLE       reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH         reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FOREACH_REVERSE reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CLASS           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    UNION           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    AMPERSAND       reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PLUS_PLUS       reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    MINUS_MINUS     reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TIMES           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    MINUS           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PLUS            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    EXCLAMATION     reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TILDE           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CAST            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOT             reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    THIS            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    NULL            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TRUE            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FALSE           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DOLLAR          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    INUMBER         reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DNUMBER         reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_CHAR        reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LIT_STR         reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LBRACKET        reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FUNCTION        reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    NEW             reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    BOOL            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    SHORT           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    USHORT          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    INT             reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    UINT            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    LONG            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ULONG           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    CHAR            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    FLOAT           reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    VOID            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEOF          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    TYPEID          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    BODY            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    RBRACE          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    ELSE            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    DELETE          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PRIVATE         reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PROTECTED       reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    PUBLIC          reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)
    $end            reduce using rule 134 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType Declarators SEMICOLON .)


state 422

    (135) AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .

    SEMICOLON       reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CASE            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DEFAULT         reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LBRACE          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IDENTIFIER      reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IF              reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    WHILE           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DO              reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOR             reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    SWITCH          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FINAL           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CONTINUE        reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BREAK           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    RETURN          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    GOTO            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    WITH            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    MIXIN           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IMPORT          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    STATIC          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LPAREN          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ALIAS           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ENUM            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    EXTERN          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    AUTO            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CONST           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    IMMUTABLE       reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOREACH         reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FOREACH_REVERSE reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CLASS           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UNION           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    AMPERSAND       reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PLUS_PLUS       reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    MINUS_MINUS     reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TIMES           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    MINUS           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PLUS            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    EXCLAMATION     reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TILDE           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CAST            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DOT             reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    THIS            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    NULL            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TRUE            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FALSE           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DOLLAR          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    INUMBER         reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DNUMBER         reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LIT_CHAR        reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LIT_STR         reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LBRACKET        reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FUNCTION        reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    NEW             reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BOOL            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    SHORT           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    USHORT          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    INT             reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    UINT            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    LONG            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ULONG           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    CHAR            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    FLOAT           reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    VOID            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TYPEOF          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    TYPEID          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    BODY            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    RBRACE          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    ELSE            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    DELETE          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PRIVATE         reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PROTECTED       reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    PUBLIC          reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)
    $end            reduce using rule 135 (AliasDeclaration -> ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON .)


state 423

    (139) AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type .

    SEMICOLON       reduce using rule 139 (AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type .)
    COMMA           reduce using rule 139 (AliasDeclarationY -> IDENTIFIER ASSIGN StorageClasses_opt Type .)


state 424

    (29) ImportBindList -> ImportBind COMMA . ImportBindList
    (28) ImportBindList -> . ImportBind
    (29) ImportBindList -> . ImportBind COMMA ImportBindList
    (30) ImportBind -> . IDENTIFIER
    (31) ImportBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 294

    ImportBind                     shift and go to state 293
    ImportBindList                 shift and go to state 576

state 425

    (31) ImportBind -> IDENTIFIER ASSIGN . IDENTIFIER

    IDENTIFIER      shift and go to state 577


state 426

    (290) NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .

    SEMICOLON       reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CASE            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DEFAULT         reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LBRACE          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IDENTIFIER      reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IF              reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    WHILE           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DO              reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FOR             reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    SWITCH          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FINAL           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CONTINUE        reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    BREAK           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    RETURN          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    GOTO            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    WITH            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    MIXIN           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IMPORT          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    STATIC          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LPAREN          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ALIAS           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ENUM            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    EXTERN          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    AUTO            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CONST           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    IMMUTABLE       reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FOREACH         reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FOREACH_REVERSE reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CLASS           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    UNION           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    AMPERSAND       reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    PLUS_PLUS       reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    MINUS_MINUS     reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TIMES           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    MINUS           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    PLUS            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    EXCLAMATION     reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TILDE           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CAST            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DOT             reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    THIS            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    NULL            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TRUE            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FALSE           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DOLLAR          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    INUMBER         reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    DNUMBER         reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LIT_CHAR        reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LIT_STR         reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LBRACKET        reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FUNCTION        reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    NEW             reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    BOOL            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    SHORT           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    USHORT          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    INT             reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    UINT            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    LONG            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ULONG           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    CHAR            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    FLOAT           reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    VOID            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TYPEOF          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    TYPEID          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    BODY            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    RBRACE          reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)
    ELSE            reduce using rule 290 (NonEmptyStatementNoCaseNoDefault -> ExpressionStatement .)


state 427

    (317) StatementList -> Statement .
    (318) StatementList -> Statement . StatementList
    (317) StatementList -> . Statement
    (318) StatementList -> . Statement StatementList
    (275) Statement -> . SEMICOLON
    (276) Statement -> . NonEmptyStatement
    (277) Statement -> . ScopeBlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (309) ScopeBlockStatement -> . BlockStatement
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RBRACE          reduce using rule 317 (StatementList -> Statement .)
    SEMICOLON       shift and go to state 455
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    LBRACE          shift and go to state 145
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    Statement                      shift and go to state 427
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 430
    RelExpression                  shift and go to state 177
    StatementList                  shift and go to state 578
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 468
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    ScopeBlockStatement            shift and go to state 475
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 428

    (400) WithStatement -> WITH . LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> WITH . LPAREN Symbol RPAREN ScopeStatement

    LPAREN          shift and go to state 579


state 429

    (298) NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .

    SEMICOLON       reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CASE            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DEFAULT         reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LBRACE          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IDENTIFIER      reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IF              reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    WHILE           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DO              reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FOR             reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    SWITCH          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FINAL           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CONTINUE        reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    BREAK           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    RETURN          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    GOTO            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    WITH            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    MIXIN           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IMPORT          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    STATIC          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LPAREN          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ALIAS           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ENUM            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    EXTERN          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    AUTO            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CONST           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    IMMUTABLE       reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FOREACH         reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FOREACH_REVERSE reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CLASS           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    UNION           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    AMPERSAND       reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    PLUS_PLUS       reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    MINUS_MINUS     reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TIMES           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    MINUS           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    PLUS            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    EXCLAMATION     reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TILDE           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CAST            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DOT             reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    THIS            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    NULL            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TRUE            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FALSE           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DOLLAR          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    INUMBER         reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    DNUMBER         reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LIT_CHAR        reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LIT_STR         reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LBRACKET        reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FUNCTION        reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    NEW             reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    BOOL            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    SHORT           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    USHORT          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    INT             reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    UINT            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    LONG            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ULONG           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    CHAR            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    FLOAT           reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    VOID            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TYPEOF          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    TYPEID          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    BODY            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    RBRACE          reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)
    ELSE            reduce using rule 298 (NonEmptyStatementNoCaseNoDefault -> FinalSwitchStatement .)


state 430

    (309) ScopeBlockStatement -> BlockStatement .
    (267) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    DEFAULT         reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    LBRACE          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    IF              reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    WHILE           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    DO              reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    FOR             reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    SWITCH          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    FINAL           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    CONTINUE        reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    BREAK           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    RETURN          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    GOTO            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    WITH            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    MIXIN           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    IMPORT          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    STATIC          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    ALIAS           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    ENUM            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    EXTERN          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    AUTO            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    CONST           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    FOREACH         reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    CLASS           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    UNION           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    TILDE           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    CAST            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    THIS            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    NULL            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    TRUE            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    FALSE           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    DOLLAR          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    INUMBER         reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    DNUMBER         reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    LIT_STR         reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    LBRACKET        reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    FUNCTION        reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    NEW             reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    BOOL            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    SHORT           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    USHORT          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    INT             reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    UINT            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    LONG            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    ULONG           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    CHAR            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    FLOAT           reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    VOID            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    TYPEOF          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    TYPEID          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    BODY            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    RBRACE          reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    ELSE            reduce using rule 309 (ScopeBlockStatement -> BlockStatement .)
    POWER           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! AMPERSAND       [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! MINUS           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! PLUS            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]


state 431

    (20) ImportDeclaration -> IMPORT . ImportList SEMICOLON
    (272) ImportExpression -> IMPORT . LPAREN AssignExpression RPAREN
    (22) ImportList -> . Import
    (23) ImportList -> . ImportBindings
    (24) ImportList -> . Import COMMA ImportList
    (25) Import -> . ModuleFullyQualifiedName
    (26) Import -> . ModuleAliasIdentifier ASSIGN ModuleFullyQualifiedName
    (27) ImportBindings -> . Import COLON ImportBindList
    (14) ModuleFullyQualifiedName -> . ModuleName
    (15) ModuleFullyQualifiedName -> . Packages DOT ModuleName
    (32) ModuleAliasIdentifier -> . IDENTIFIER
    (16) ModuleName -> . IDENTIFIER
    (17) Packages -> . PackageName
    (18) Packages -> . Packages DOT PackageName
    (19) PackageName -> . IDENTIFIER

    LPAREN          shift and go to state 323
    IDENTIFIER      shift and go to state 69

    ModuleFullyQualifiedName       shift and go to state 64
    ImportBindings                 shift and go to state 65
    ModuleAliasIdentifier          shift and go to state 66
    ImportList                     shift and go to state 67
    PackageName                    shift and go to state 68
    ModuleName                     shift and go to state 72
    Import                         shift and go to state 70
    Packages                       shift and go to state 71

state 432

    (396) GotoStatement -> GOTO . IDENTIFIER SEMICOLON
    (397) GotoStatement -> GOTO . DEFAULT SEMICOLON
    (398) GotoStatement -> GOTO . CASE SEMICOLON
    (399) GotoStatement -> GOTO . CASE Expression SEMICOLON

    IDENTIFIER      shift and go to state 582
    DEFAULT         shift and go to state 581
    CASE            shift and go to state 580


state 433

    (436) EnumDeclaration -> ENUM . IDENTIFIER EnumBody
    (437) EnumDeclaration -> ENUM . IDENTIFIER COLON EnumBaseType EnumBody
    (108) StorageClass -> ENUM .
    (447) AnonymousEnumDeclaration -> ENUM . COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> ENUM . LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> ENUM . LBRACE AnonymousEnumMembers RBRACE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 51
    ENUM            reduce using rule 108 (StorageClass -> ENUM .)
    STATIC          reduce using rule 108 (StorageClass -> ENUM .)
    EXTERN          reduce using rule 108 (StorageClass -> ENUM .)
    FINAL           reduce using rule 108 (StorageClass -> ENUM .)
    AUTO            reduce using rule 108 (StorageClass -> ENUM .)
    CONST           reduce using rule 108 (StorageClass -> ENUM .)
    IMMUTABLE       reduce using rule 108 (StorageClass -> ENUM .)
    ALIAS           reduce using rule 108 (StorageClass -> ENUM .)
    IMPORT          reduce using rule 108 (StorageClass -> ENUM .)
    CLASS           reduce using rule 108 (StorageClass -> ENUM .)
    UNION           reduce using rule 108 (StorageClass -> ENUM .)
    DOT             reduce using rule 108 (StorageClass -> ENUM .)
    BOOL            reduce using rule 108 (StorageClass -> ENUM .)
    SHORT           reduce using rule 108 (StorageClass -> ENUM .)
    USHORT          reduce using rule 108 (StorageClass -> ENUM .)
    INT             reduce using rule 108 (StorageClass -> ENUM .)
    UINT            reduce using rule 108 (StorageClass -> ENUM .)
    LONG            reduce using rule 108 (StorageClass -> ENUM .)
    ULONG           reduce using rule 108 (StorageClass -> ENUM .)
    CHAR            reduce using rule 108 (StorageClass -> ENUM .)
    FLOAT           reduce using rule 108 (StorageClass -> ENUM .)
    VOID            reduce using rule 108 (StorageClass -> ENUM .)
    TYPEOF          reduce using rule 108 (StorageClass -> ENUM .)
    COLON           shift and go to state 50
    LBRACE          shift and go to state 49

  ! IDENTIFIER      [ reduce using rule 108 (StorageClass -> ENUM .) ]


state 434

    (314) BlockStatement -> LBRACE M_block_begin StatementList . RBRACE M_block_end

    RBRACE          shift and go to state 583


state 435

    (355) Foreach -> FOREACH .

    LPAREN          reduce using rule 355 (Foreach -> FOREACH .)


state 436

    (301) NonEmptyStatementNoCaseNoDefault -> ReturnStatement .

    SEMICOLON       reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CASE            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DEFAULT         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LBRACE          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IDENTIFIER      reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IF              reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    WHILE           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DO              reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FOR             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    SWITCH          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FINAL           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CONTINUE        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    BREAK           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    RETURN          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    GOTO            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    WITH            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    MIXIN           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IMPORT          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    STATIC          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LPAREN          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ALIAS           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ENUM            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    EXTERN          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    AUTO            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CONST           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    IMMUTABLE       reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FOREACH         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FOREACH_REVERSE reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CLASS           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    UNION           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    AMPERSAND       reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    PLUS_PLUS       reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    MINUS_MINUS     reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TIMES           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    MINUS           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    PLUS            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    EXCLAMATION     reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TILDE           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CAST            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DOT             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    THIS            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    NULL            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TRUE            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FALSE           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DOLLAR          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    INUMBER         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    DNUMBER         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LIT_CHAR        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LIT_STR         reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LBRACKET        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FUNCTION        reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    NEW             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    BOOL            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    SHORT           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    USHORT          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    INT             reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    UINT            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    LONG            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ULONG           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    CHAR            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    FLOAT           reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    VOID            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TYPEOF          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    TYPEID          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    BODY            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    RBRACE          reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)
    ELSE            reduce using rule 301 (NonEmptyStatementNoCaseNoDefault -> ReturnStatement .)


state 437

    (321) DeclarationStatement -> StorageClasses . Declaration
    (132) StorageClasses_opt -> StorageClasses .
    (460) AutoFuncDeclaration -> StorageClasses . IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! reduce/reduce conflict for DOT resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for BOOL resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for SHORT resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for USHORT resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for INT resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for UINT resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for LONG resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for ULONG resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for CHAR resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for FLOAT resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! reduce/reduce conflict for VOID resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! reduce/reduce conflict for TYPEOF resolved using rule 132 (StorageClasses_opt -> StorageClasses .)
    DOT             reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    BOOL            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    SHORT           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    USHORT          reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    INT             reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    UINT            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    LONG            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    ULONG           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    CHAR            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    FLOAT           reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    VOID            reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    TYPEOF          reduce using rule 132 (StorageClasses_opt -> StorageClasses .)
    IDENTIFIER      shift and go to state 29
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 17
    IMPORT          shift and go to state 27
    STATIC          shift and go to state 5
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    EXTERN          shift and go to state 7
    FINAL           shift and go to state 15
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22

  ! IDENTIFIER      [ reduce using rule 132 (StorageClasses_opt -> StorageClasses .) ]
  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ reduce using rule 496 (empty -> .) ]
  ! SHORT           [ reduce using rule 496 (empty -> .) ]
  ! USHORT          [ reduce using rule 496 (empty -> .) ]
  ! INT             [ reduce using rule 496 (empty -> .) ]
  ! UINT            [ reduce using rule 496 (empty -> .) ]
  ! LONG            [ reduce using rule 496 (empty -> .) ]
  ! ULONG           [ reduce using rule 496 (empty -> .) ]
  ! CHAR            [ reduce using rule 496 (empty -> .) ]
  ! FLOAT           [ reduce using rule 496 (empty -> .) ]
  ! VOID            [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 496 (empty -> .) ]

    AggregateDeclaration           shift and go to state 4
    FuncDeclaration                shift and go to state 6
    StorageClasses_opt             shift and go to state 9
    ImportDeclaration              shift and go to state 10
    AliasDeclaration               shift and go to state 11
    ClassDeclaration               shift and go to state 26
    VarDeclarations                shift and go to state 12
    empty                          shift and go to state 62
    Declaration                    shift and go to state 584
    AutoFuncDeclaration            shift and go to state 16
    StorageClasses                 shift and go to state 1
    AnonymousEnumDeclaration       shift and go to state 21
    AnonUnionDeclaration           shift and go to state 23
    EnumDeclaration                shift and go to state 24
    UnionDeclaration               shift and go to state 25
    StorageClass                   shift and go to state 28

state 438

    (395) ReturnStatement -> RETURN . Expression_opt SEMICOLON
    (391) Expression_opt -> . Expression
    (392) Expression_opt -> . empty
    (152) Expression -> . CommaExpression
    (496) empty -> .
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    SEMICOLON       reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 585
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 586
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    Expression_opt                 shift and go to state 587
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 439

    (353) AggregateForeach -> Foreach . LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN

    LPAREN          shift and go to state 588


state 440

    (388) FinalSwitchStatement -> FINAL . SWITCH LPAREN Expression RPAREN ScopeStatement
    (111) StorageClass -> FINAL .

    SWITCH          shift and go to state 589
    ENUM            reduce using rule 111 (StorageClass -> FINAL .)
    STATIC          reduce using rule 111 (StorageClass -> FINAL .)
    EXTERN          reduce using rule 111 (StorageClass -> FINAL .)
    FINAL           reduce using rule 111 (StorageClass -> FINAL .)
    AUTO            reduce using rule 111 (StorageClass -> FINAL .)
    CONST           reduce using rule 111 (StorageClass -> FINAL .)
    IMMUTABLE       reduce using rule 111 (StorageClass -> FINAL .)
    IDENTIFIER      reduce using rule 111 (StorageClass -> FINAL .)
    ALIAS           reduce using rule 111 (StorageClass -> FINAL .)
    IMPORT          reduce using rule 111 (StorageClass -> FINAL .)
    CLASS           reduce using rule 111 (StorageClass -> FINAL .)
    UNION           reduce using rule 111 (StorageClass -> FINAL .)
    DOT             reduce using rule 111 (StorageClass -> FINAL .)
    BOOL            reduce using rule 111 (StorageClass -> FINAL .)
    SHORT           reduce using rule 111 (StorageClass -> FINAL .)
    USHORT          reduce using rule 111 (StorageClass -> FINAL .)
    INT             reduce using rule 111 (StorageClass -> FINAL .)
    UINT            reduce using rule 111 (StorageClass -> FINAL .)
    LONG            reduce using rule 111 (StorageClass -> FINAL .)
    ULONG           reduce using rule 111 (StorageClass -> FINAL .)
    CHAR            reduce using rule 111 (StorageClass -> FINAL .)
    FLOAT           reduce using rule 111 (StorageClass -> FINAL .)
    VOID            reduce using rule 111 (StorageClass -> FINAL .)
    TYPEOF          reduce using rule 111 (StorageClass -> FINAL .)


state 441

    (356) Foreach -> FOREACH_REVERSE .

    LPAREN          reduce using rule 356 (Foreach -> FOREACH_REVERSE .)


state 442

    (300) NonEmptyStatementNoCaseNoDefault -> BreakStatement .

    SEMICOLON       reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CASE            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DEFAULT         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LBRACE          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IDENTIFIER      reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IF              reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    WHILE           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DO              reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FOR             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    SWITCH          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FINAL           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CONTINUE        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    BREAK           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    RETURN          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    GOTO            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    WITH            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    MIXIN           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IMPORT          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    STATIC          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LPAREN          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ALIAS           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ENUM            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    EXTERN          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    AUTO            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CONST           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    IMMUTABLE       reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FOREACH         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FOREACH_REVERSE reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CLASS           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    UNION           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    AMPERSAND       reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    PLUS_PLUS       reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    MINUS_MINUS     reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TIMES           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    MINUS           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    PLUS            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    EXCLAMATION     reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TILDE           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CAST            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DOT             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    THIS            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    NULL            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TRUE            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FALSE           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DOLLAR          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    INUMBER         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    DNUMBER         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LIT_CHAR        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LIT_STR         reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LBRACKET        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FUNCTION        reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    NEW             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    BOOL            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    SHORT           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    USHORT          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    INT             reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    UINT            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    LONG            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ULONG           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    CHAR            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    FLOAT           reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    VOID            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TYPEOF          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    TYPEID          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    BODY            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    RBRACE          reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)
    ELSE            reduce using rule 300 (NonEmptyStatementNoCaseNoDefault -> BreakStatement .)


state 443

    (302) NonEmptyStatementNoCaseNoDefault -> GotoStatement .

    SEMICOLON       reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CASE            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DEFAULT         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LBRACE          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IDENTIFIER      reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IF              reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    WHILE           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DO              reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FOR             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    SWITCH          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FINAL           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CONTINUE        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    BREAK           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    RETURN          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    GOTO            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    WITH            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    MIXIN           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IMPORT          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    STATIC          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LPAREN          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ALIAS           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ENUM            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    EXTERN          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    AUTO            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CONST           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    IMMUTABLE       reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FOREACH         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FOREACH_REVERSE reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CLASS           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    UNION           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    AMPERSAND       reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    PLUS_PLUS       reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    MINUS_MINUS     reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TIMES           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    MINUS           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    PLUS            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    EXCLAMATION     reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TILDE           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CAST            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DOT             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    THIS            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    NULL            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TRUE            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FALSE           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DOLLAR          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    INUMBER         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    DNUMBER         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LIT_CHAR        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LIT_STR         reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LBRACKET        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FUNCTION        reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    NEW             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    BOOL            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    SHORT           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    USHORT          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    INT             reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    UINT            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    LONG            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ULONG           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    CHAR            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    FLOAT           reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    VOID            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TYPEOF          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    TYPEID          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    BODY            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    RBRACE          reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)
    ELSE            reduce using rule 302 (NonEmptyStatementNoCaseNoDefault -> GotoStatement .)


state 444

    (295) NonEmptyStatementNoCaseNoDefault -> ForStatement .

    SEMICOLON       reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CASE            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DEFAULT         reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LBRACE          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IDENTIFIER      reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IF              reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    WHILE           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DO              reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FOR             reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    SWITCH          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FINAL           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CONTINUE        reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    BREAK           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    RETURN          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    GOTO            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    WITH            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    MIXIN           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IMPORT          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    STATIC          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LPAREN          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ALIAS           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ENUM            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    EXTERN          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    AUTO            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CONST           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    IMMUTABLE       reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FOREACH         reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FOREACH_REVERSE reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CLASS           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    UNION           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    AMPERSAND       reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    PLUS_PLUS       reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    MINUS_MINUS     reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TIMES           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    MINUS           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    PLUS            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    EXCLAMATION     reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TILDE           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CAST            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DOT             reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    THIS            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    NULL            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TRUE            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FALSE           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DOLLAR          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    INUMBER         reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    DNUMBER         reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LIT_CHAR        reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LIT_STR         reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LBRACKET        reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FUNCTION        reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    NEW             reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    BOOL            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    SHORT           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    USHORT          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    INT             reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    UINT            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    LONG            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ULONG           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    CHAR            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    FLOAT           reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    VOID            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TYPEOF          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    TYPEID          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    BODY            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    RBRACE          reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)
    ELSE            reduce using rule 295 (NonEmptyStatementNoCaseNoDefault -> ForStatement .)


state 445

    (340) ForStatement -> FOR . LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3

    LPAREN          shift and go to state 590


state 446

    (296) NonEmptyStatementNoCaseNoDefault -> ForeachStatement .

    SEMICOLON       reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CASE            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DEFAULT         reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LBRACE          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IDENTIFIER      reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IF              reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    WHILE           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DO              reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FOR             reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    SWITCH          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FINAL           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CONTINUE        reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    BREAK           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    RETURN          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    GOTO            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    WITH            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    MIXIN           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IMPORT          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    STATIC          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LPAREN          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ALIAS           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ENUM            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    EXTERN          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    AUTO            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CONST           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    IMMUTABLE       reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FOREACH         reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FOREACH_REVERSE reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CLASS           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    UNION           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    AMPERSAND       reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    PLUS_PLUS       reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    MINUS_MINUS     reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TIMES           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    MINUS           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    PLUS            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    EXCLAMATION     reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TILDE           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CAST            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DOT             reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    THIS            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    NULL            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TRUE            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FALSE           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DOLLAR          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    INUMBER         reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    DNUMBER         reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LIT_CHAR        reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LIT_STR         reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LBRACKET        reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FUNCTION        reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    NEW             reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    BOOL            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    SHORT           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    USHORT          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    INT             reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    UINT            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    LONG            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ULONG           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    CHAR            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    FLOAT           reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    VOID            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TYPEOF          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    TYPEID          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    BODY            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    RBRACE          reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)
    ELSE            reduce using rule 296 (NonEmptyStatementNoCaseNoDefault -> ForeachStatement .)


state 447

    (304) NonEmptyStatementNoCaseNoDefault -> MixinStatement .

    SEMICOLON       reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CASE            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DEFAULT         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LBRACE          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IDENTIFIER      reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IF              reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    WHILE           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DO              reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FOR             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    SWITCH          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FINAL           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CONTINUE        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    BREAK           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    RETURN          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    GOTO            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    WITH            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    MIXIN           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IMPORT          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    STATIC          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LPAREN          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ALIAS           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ENUM            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    EXTERN          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    AUTO            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CONST           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    IMMUTABLE       reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FOREACH         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FOREACH_REVERSE reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CLASS           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    UNION           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    AMPERSAND       reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    PLUS_PLUS       reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    MINUS_MINUS     reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TIMES           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    MINUS           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    PLUS            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    EXCLAMATION     reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TILDE           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CAST            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DOT             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    THIS            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    NULL            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TRUE            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FALSE           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DOLLAR          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    INUMBER         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    DNUMBER         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LIT_CHAR        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LIT_STR         reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LBRACKET        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FUNCTION        reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    NEW             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    BOOL            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    SHORT           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    USHORT          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    INT             reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    UINT            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    LONG            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ULONG           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    CHAR            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    FLOAT           reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    VOID            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TYPEOF          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    TYPEID          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    BODY            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    RBRACE          reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)
    ELSE            reduce using rule 304 (NonEmptyStatementNoCaseNoDefault -> MixinStatement .)


state 448

    (393) ContinueStatement -> CONTINUE . IDENTIFIER_opt SEMICOLON
    (389) IDENTIFIER_opt -> . IDENTIFIER
    (390) IDENTIFIER_opt -> . empty
    (496) empty -> .

    IDENTIFIER      shift and go to state 592
    SEMICOLON       reduce using rule 496 (empty -> .)

    IDENTIFIER_opt                 shift and go to state 591
    empty                          shift and go to state 593

state 449

    (402) MixinStatement -> MIXIN . LPAREN AssignExpression RPAREN SEMICOLON
    (271) MixinExpression -> MIXIN . LPAREN AssignExpression RPAREN

    LPAREN          shift and go to state 594


state 450

    (371) ForeachRangeStatement -> RangeForeach . ScopeStatement
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 596
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 451

    (381) DefaultStatement -> DEFAULT . COLON ScopeStatementList

    COLON           shift and go to state 598


state 452

    (333) WhileStatement -> WHILE . LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2

    LPAREN          shift and go to state 599


state 453

    (305) NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .

    SEMICOLON       reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CASE            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DEFAULT         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LBRACE          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IDENTIFIER      reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IF              reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    WHILE           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DO              reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FOR             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    SWITCH          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FINAL           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CONTINUE        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    BREAK           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    RETURN          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    GOTO            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    WITH            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    MIXIN           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IMPORT          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    STATIC          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LPAREN          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ALIAS           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ENUM            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    EXTERN          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    AUTO            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CONST           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    IMMUTABLE       reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FOREACH         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FOREACH_REVERSE reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CLASS           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    UNION           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    AMPERSAND       reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    PLUS_PLUS       reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    MINUS_MINUS     reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TIMES           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    MINUS           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    PLUS            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    EXCLAMATION     reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TILDE           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CAST            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DOT             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    THIS            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    NULL            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TRUE            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FALSE           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DOLLAR          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    INUMBER         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    DNUMBER         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LIT_CHAR        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LIT_STR         reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LBRACKET        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FUNCTION        reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    NEW             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    BOOL            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    SHORT           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    USHORT          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    INT             reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    UINT            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    LONG            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ULONG           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    CHAR            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    FLOAT           reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    VOID            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TYPEOF          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    TYPEID          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    BODY            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    RBRACE          reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)
    ELSE            reduce using rule 305 (NonEmptyStatementNoCaseNoDefault -> ForeachRangeStatement .)


state 454

    (375) CaseStatement -> CASE . ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> CASE . FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (379) FirstExp -> . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 600
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    FirstExp                       shift and go to state 601
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ImportExpression               shift and go to state 188
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 602

state 455

    (275) Statement -> SEMICOLON .

    SEMICOLON       reduce using rule 275 (Statement -> SEMICOLON .)
    CASE            reduce using rule 275 (Statement -> SEMICOLON .)
    DEFAULT         reduce using rule 275 (Statement -> SEMICOLON .)
    LBRACE          reduce using rule 275 (Statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 275 (Statement -> SEMICOLON .)
    IF              reduce using rule 275 (Statement -> SEMICOLON .)
    WHILE           reduce using rule 275 (Statement -> SEMICOLON .)
    DO              reduce using rule 275 (Statement -> SEMICOLON .)
    FOR             reduce using rule 275 (Statement -> SEMICOLON .)
    SWITCH          reduce using rule 275 (Statement -> SEMICOLON .)
    FINAL           reduce using rule 275 (Statement -> SEMICOLON .)
    CONTINUE        reduce using rule 275 (Statement -> SEMICOLON .)
    BREAK           reduce using rule 275 (Statement -> SEMICOLON .)
    RETURN          reduce using rule 275 (Statement -> SEMICOLON .)
    GOTO            reduce using rule 275 (Statement -> SEMICOLON .)
    WITH            reduce using rule 275 (Statement -> SEMICOLON .)
    MIXIN           reduce using rule 275 (Statement -> SEMICOLON .)
    IMPORT          reduce using rule 275 (Statement -> SEMICOLON .)
    STATIC          reduce using rule 275 (Statement -> SEMICOLON .)
    LPAREN          reduce using rule 275 (Statement -> SEMICOLON .)
    ALIAS           reduce using rule 275 (Statement -> SEMICOLON .)
    ENUM            reduce using rule 275 (Statement -> SEMICOLON .)
    EXTERN          reduce using rule 275 (Statement -> SEMICOLON .)
    AUTO            reduce using rule 275 (Statement -> SEMICOLON .)
    CONST           reduce using rule 275 (Statement -> SEMICOLON .)
    IMMUTABLE       reduce using rule 275 (Statement -> SEMICOLON .)
    FOREACH         reduce using rule 275 (Statement -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 275 (Statement -> SEMICOLON .)
    CLASS           reduce using rule 275 (Statement -> SEMICOLON .)
    UNION           reduce using rule 275 (Statement -> SEMICOLON .)
    AMPERSAND       reduce using rule 275 (Statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 275 (Statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 275 (Statement -> SEMICOLON .)
    TIMES           reduce using rule 275 (Statement -> SEMICOLON .)
    MINUS           reduce using rule 275 (Statement -> SEMICOLON .)
    PLUS            reduce using rule 275 (Statement -> SEMICOLON .)
    EXCLAMATION     reduce using rule 275 (Statement -> SEMICOLON .)
    TILDE           reduce using rule 275 (Statement -> SEMICOLON .)
    CAST            reduce using rule 275 (Statement -> SEMICOLON .)
    DOT             reduce using rule 275 (Statement -> SEMICOLON .)
    THIS            reduce using rule 275 (Statement -> SEMICOLON .)
    NULL            reduce using rule 275 (Statement -> SEMICOLON .)
    TRUE            reduce using rule 275 (Statement -> SEMICOLON .)
    FALSE           reduce using rule 275 (Statement -> SEMICOLON .)
    DOLLAR          reduce using rule 275 (Statement -> SEMICOLON .)
    INUMBER         reduce using rule 275 (Statement -> SEMICOLON .)
    DNUMBER         reduce using rule 275 (Statement -> SEMICOLON .)
    LIT_CHAR        reduce using rule 275 (Statement -> SEMICOLON .)
    LIT_STR         reduce using rule 275 (Statement -> SEMICOLON .)
    LBRACKET        reduce using rule 275 (Statement -> SEMICOLON .)
    FUNCTION        reduce using rule 275 (Statement -> SEMICOLON .)
    NEW             reduce using rule 275 (Statement -> SEMICOLON .)
    BOOL            reduce using rule 275 (Statement -> SEMICOLON .)
    SHORT           reduce using rule 275 (Statement -> SEMICOLON .)
    USHORT          reduce using rule 275 (Statement -> SEMICOLON .)
    INT             reduce using rule 275 (Statement -> SEMICOLON .)
    UINT            reduce using rule 275 (Statement -> SEMICOLON .)
    LONG            reduce using rule 275 (Statement -> SEMICOLON .)
    ULONG           reduce using rule 275 (Statement -> SEMICOLON .)
    CHAR            reduce using rule 275 (Statement -> SEMICOLON .)
    FLOAT           reduce using rule 275 (Statement -> SEMICOLON .)
    VOID            reduce using rule 275 (Statement -> SEMICOLON .)
    TYPEOF          reduce using rule 275 (Statement -> SEMICOLON .)
    TYPEID          reduce using rule 275 (Statement -> SEMICOLON .)
    BODY            reduce using rule 275 (Statement -> SEMICOLON .)
    RBRACE          reduce using rule 275 (Statement -> SEMICOLON .)


state 456

    (299) NonEmptyStatementNoCaseNoDefault -> ContinueStatement .

    SEMICOLON       reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CASE            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DEFAULT         reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LBRACE          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IDENTIFIER      reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IF              reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    WHILE           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DO              reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FOR             reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    SWITCH          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FINAL           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CONTINUE        reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    BREAK           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    RETURN          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    GOTO            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    WITH            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    MIXIN           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IMPORT          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    STATIC          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LPAREN          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ALIAS           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ENUM            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    EXTERN          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    AUTO            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CONST           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    IMMUTABLE       reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FOREACH         reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FOREACH_REVERSE reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CLASS           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    UNION           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    AMPERSAND       reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    PLUS_PLUS       reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    MINUS_MINUS     reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TIMES           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    MINUS           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    PLUS            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    EXCLAMATION     reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TILDE           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CAST            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DOT             reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    THIS            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    NULL            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TRUE            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FALSE           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DOLLAR          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    INUMBER         reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    DNUMBER         reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LIT_CHAR        reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LIT_STR         reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LBRACKET        reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FUNCTION        reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    NEW             reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    BOOL            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    SHORT           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    USHORT          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    INT             reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    UINT            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    LONG            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ULONG           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    CHAR            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    FLOAT           reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    VOID            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TYPEOF          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    TYPEID          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    BODY            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    RBRACE          reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)
    ELSE            reduce using rule 299 (NonEmptyStatementNoCaseNoDefault -> ContinueStatement .)


state 457

    (306) NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .
    (39) Declaration -> ImportDeclaration .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for CASE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for LBRACE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for IF resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for WHILE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for DO resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for FOR resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for SWITCH resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for FINAL resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for BREAK resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for RETURN resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for GOTO resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for WITH resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for MIXIN resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for IMPORT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for STATIC resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for LPAREN resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for ALIAS resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for ENUM resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for EXTERN resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for AUTO resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for CONST resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for FOREACH resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for FOREACH_REVERSE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for CLASS resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for UNION resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for TIMES resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for MINUS resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for PLUS resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for TILDE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for CAST resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for DOT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for THIS resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for NULL resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for TRUE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for FALSE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for INUMBER resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for DNUMBER resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for LIT_CHAR resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for LIT_STR resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for NEW resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for SHORT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for USHORT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for INT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for UINT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for LONG resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for ULONG resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for CHAR resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for VOID resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for TYPEID resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for BODY resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for RBRACE resolved using rule 39 (Declaration -> ImportDeclaration .)
  ! reduce/reduce conflict for ELSE resolved using rule 39 (Declaration -> ImportDeclaration .)
    SEMICOLON       reduce using rule 39 (Declaration -> ImportDeclaration .)
    CASE            reduce using rule 39 (Declaration -> ImportDeclaration .)
    DEFAULT         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LBRACE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    IDENTIFIER      reduce using rule 39 (Declaration -> ImportDeclaration .)
    IF              reduce using rule 39 (Declaration -> ImportDeclaration .)
    WHILE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    DO              reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOR             reduce using rule 39 (Declaration -> ImportDeclaration .)
    SWITCH          reduce using rule 39 (Declaration -> ImportDeclaration .)
    FINAL           reduce using rule 39 (Declaration -> ImportDeclaration .)
    CONTINUE        reduce using rule 39 (Declaration -> ImportDeclaration .)
    BREAK           reduce using rule 39 (Declaration -> ImportDeclaration .)
    RETURN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    GOTO            reduce using rule 39 (Declaration -> ImportDeclaration .)
    WITH            reduce using rule 39 (Declaration -> ImportDeclaration .)
    MIXIN           reduce using rule 39 (Declaration -> ImportDeclaration .)
    IMPORT          reduce using rule 39 (Declaration -> ImportDeclaration .)
    STATIC          reduce using rule 39 (Declaration -> ImportDeclaration .)
    LPAREN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    ALIAS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    ENUM            reduce using rule 39 (Declaration -> ImportDeclaration .)
    EXTERN          reduce using rule 39 (Declaration -> ImportDeclaration .)
    AUTO            reduce using rule 39 (Declaration -> ImportDeclaration .)
    CONST           reduce using rule 39 (Declaration -> ImportDeclaration .)
    IMMUTABLE       reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOREACH         reduce using rule 39 (Declaration -> ImportDeclaration .)
    FOREACH_REVERSE reduce using rule 39 (Declaration -> ImportDeclaration .)
    CLASS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    UNION           reduce using rule 39 (Declaration -> ImportDeclaration .)
    AMPERSAND       reduce using rule 39 (Declaration -> ImportDeclaration .)
    PLUS_PLUS       reduce using rule 39 (Declaration -> ImportDeclaration .)
    MINUS_MINUS     reduce using rule 39 (Declaration -> ImportDeclaration .)
    TIMES           reduce using rule 39 (Declaration -> ImportDeclaration .)
    MINUS           reduce using rule 39 (Declaration -> ImportDeclaration .)
    PLUS            reduce using rule 39 (Declaration -> ImportDeclaration .)
    EXCLAMATION     reduce using rule 39 (Declaration -> ImportDeclaration .)
    TILDE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    CAST            reduce using rule 39 (Declaration -> ImportDeclaration .)
    DOT             reduce using rule 39 (Declaration -> ImportDeclaration .)
    THIS            reduce using rule 39 (Declaration -> ImportDeclaration .)
    NULL            reduce using rule 39 (Declaration -> ImportDeclaration .)
    TRUE            reduce using rule 39 (Declaration -> ImportDeclaration .)
    FALSE           reduce using rule 39 (Declaration -> ImportDeclaration .)
    DOLLAR          reduce using rule 39 (Declaration -> ImportDeclaration .)
    INUMBER         reduce using rule 39 (Declaration -> ImportDeclaration .)
    DNUMBER         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LIT_CHAR        reduce using rule 39 (Declaration -> ImportDeclaration .)
    LIT_STR         reduce using rule 39 (Declaration -> ImportDeclaration .)
    LBRACKET        reduce using rule 39 (Declaration -> ImportDeclaration .)
    FUNCTION        reduce using rule 39 (Declaration -> ImportDeclaration .)
    NEW             reduce using rule 39 (Declaration -> ImportDeclaration .)
    BOOL            reduce using rule 39 (Declaration -> ImportDeclaration .)
    SHORT           reduce using rule 39 (Declaration -> ImportDeclaration .)
    USHORT          reduce using rule 39 (Declaration -> ImportDeclaration .)
    INT             reduce using rule 39 (Declaration -> ImportDeclaration .)
    UINT            reduce using rule 39 (Declaration -> ImportDeclaration .)
    LONG            reduce using rule 39 (Declaration -> ImportDeclaration .)
    ULONG           reduce using rule 39 (Declaration -> ImportDeclaration .)
    CHAR            reduce using rule 39 (Declaration -> ImportDeclaration .)
    FLOAT           reduce using rule 39 (Declaration -> ImportDeclaration .)
    VOID            reduce using rule 39 (Declaration -> ImportDeclaration .)
    TYPEOF          reduce using rule 39 (Declaration -> ImportDeclaration .)
    TYPEID          reduce using rule 39 (Declaration -> ImportDeclaration .)
    BODY            reduce using rule 39 (Declaration -> ImportDeclaration .)
    RBRACE          reduce using rule 39 (Declaration -> ImportDeclaration .)
    ELSE            reduce using rule 39 (Declaration -> ImportDeclaration .)

  ! SEMICOLON       [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! CASE            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! DEFAULT         [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! LBRACE          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! IDENTIFIER      [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! IF              [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! WHILE           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! DO              [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! FOR             [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! SWITCH          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! FINAL           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! CONTINUE        [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! BREAK           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! RETURN          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! GOTO            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! WITH            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! MIXIN           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! IMPORT          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! STATIC          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! LPAREN          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! ALIAS           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! ENUM            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! EXTERN          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! AUTO            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! CONST           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! IMMUTABLE       [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! FOREACH         [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! FOREACH_REVERSE [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! CLASS           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! UNION           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! AMPERSAND       [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! PLUS_PLUS       [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! MINUS_MINUS     [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! TIMES           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! MINUS           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! PLUS            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! EXCLAMATION     [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! TILDE           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! CAST            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! DOT             [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! THIS            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! NULL            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! TRUE            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! FALSE           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! DOLLAR          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! INUMBER         [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! DNUMBER         [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! LIT_CHAR        [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! LIT_STR         [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! LBRACKET        [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! FUNCTION        [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! NEW             [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! BOOL            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! SHORT           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! USHORT          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! INT             [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! UINT            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! LONG            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! ULONG           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! CHAR            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! FLOAT           [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! VOID            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! TYPEOF          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! TYPEID          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! BODY            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! RBRACE          [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]
  ! ELSE            [ reduce using rule 306 (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration .) ]


state 458

    (297) NonEmptyStatementNoCaseNoDefault -> SwitchStatement .

    SEMICOLON       reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CASE            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DEFAULT         reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LBRACE          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IDENTIFIER      reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IF              reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    WHILE           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DO              reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FOR             reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    SWITCH          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FINAL           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CONTINUE        reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    BREAK           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    RETURN          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    GOTO            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    WITH            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    MIXIN           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IMPORT          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    STATIC          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LPAREN          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ALIAS           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ENUM            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    EXTERN          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    AUTO            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CONST           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    IMMUTABLE       reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FOREACH         reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FOREACH_REVERSE reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CLASS           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    UNION           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    AMPERSAND       reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    PLUS_PLUS       reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    MINUS_MINUS     reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TIMES           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    MINUS           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    PLUS            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    EXCLAMATION     reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TILDE           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CAST            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DOT             reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    THIS            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    NULL            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TRUE            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FALSE           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DOLLAR          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    INUMBER         reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    DNUMBER         reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LIT_CHAR        reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LIT_STR         reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LBRACKET        reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FUNCTION        reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    NEW             reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    BOOL            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    SHORT           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    USHORT          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    INT             reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    UINT            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    LONG            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ULONG           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    CHAR            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    FLOAT           reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    VOID            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TYPEOF          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    TYPEID          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    BODY            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    RBRACE          reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)
    ELSE            reduce using rule 297 (NonEmptyStatementNoCaseNoDefault -> SwitchStatement .)


state 459

    (372) SwitchStatement -> SWITCH . LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2

    LPAREN          shift and go to state 603


state 460

    (288) NonEmptyStatement -> DefaultStatement .

    SEMICOLON       reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    CASE            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    DEFAULT         reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    LBRACE          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    IDENTIFIER      reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    IF              reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    WHILE           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    DO              reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    FOR             reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    SWITCH          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    FINAL           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    CONTINUE        reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    BREAK           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    RETURN          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    GOTO            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    WITH            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    MIXIN           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    IMPORT          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    STATIC          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    LPAREN          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    ALIAS           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    ENUM            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    EXTERN          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    AUTO            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    CONST           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    IMMUTABLE       reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    FOREACH         reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    FOREACH_REVERSE reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    CLASS           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    UNION           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    AMPERSAND       reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    PLUS_PLUS       reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    MINUS_MINUS     reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    TIMES           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    MINUS           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    PLUS            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    EXCLAMATION     reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    TILDE           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    CAST            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    DOT             reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    THIS            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    NULL            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    TRUE            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    FALSE           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    DOLLAR          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    INUMBER         reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    DNUMBER         reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    LIT_CHAR        reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    LIT_STR         reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    LBRACKET        reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    FUNCTION        reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    NEW             reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    BOOL            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    SHORT           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    USHORT          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    INT             reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    UINT            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    LONG            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    ULONG           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    CHAR            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    FLOAT           reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    VOID            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    TYPEOF          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    TYPEID          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    BODY            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    RBRACE          reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)
    ELSE            reduce using rule 288 (NonEmptyStatement -> DefaultStatement .)


state 461

    (310) LabeledStatement -> IDENTIFIER . COLON
    (311) LabeledStatement -> IDENTIFIER . COLON NoScopeStatement
    (312) LabeledStatement -> IDENTIFIER . COLON Statement
    (235) PrimaryExpression -> IDENTIFIER .
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (258) ArrayLiteral -> IDENTIFIER . LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> IDENTIFIER . LBRACKET AssignExpression RBRACKET

  ! reduce/reduce conflict for POWER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for CARET resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESTION resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
    COLON           shift and go to state 604
    POWER           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DIV             reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MODULO          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IS_EQ           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    NOT_EQ          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS_EQ         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    AMPERSAND       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    CARET           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PIPE            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    QUESTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_DIV          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COMMA           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    SEMICOLON       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 371

  ! POWER           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS_MINUS     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DIV             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MODULO          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LEFT_SHIFT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RIGHT_SHIFT     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! IS_EQ           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! NOT_EQ          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER_EQ      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS_EQ         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! AMPERSAND       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! CARET           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PIPE            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! QUESTION        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_PIPE     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! ASSIGN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_PLUS         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MINUS        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_TIMES        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_DIV          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MODULO       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_AND_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_OR_BIT       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_XOR_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_LEFT         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_RIGHT        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! SEMICOLON       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 462

    (286) NonEmptyStatement -> CaseStatement .

    SEMICOLON       reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    CASE            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    DEFAULT         reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    LBRACE          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    IDENTIFIER      reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    IF              reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    WHILE           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    DO              reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    FOR             reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    SWITCH          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    FINAL           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    CONTINUE        reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    BREAK           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    RETURN          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    GOTO            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    WITH            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    MIXIN           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    IMPORT          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    STATIC          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    LPAREN          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    ALIAS           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    ENUM            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    EXTERN          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    AUTO            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    CONST           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    IMMUTABLE       reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    FOREACH         reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    FOREACH_REVERSE reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    CLASS           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    UNION           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    AMPERSAND       reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    PLUS_PLUS       reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    MINUS_MINUS     reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    TIMES           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    MINUS           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    PLUS            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    EXCLAMATION     reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    TILDE           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    CAST            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    DOT             reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    THIS            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    NULL            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    TRUE            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    FALSE           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    DOLLAR          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    INUMBER         reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    DNUMBER         reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    LIT_CHAR        reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    LIT_STR         reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    LBRACKET        reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    FUNCTION        reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    NEW             reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    BOOL            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    SHORT           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    USHORT          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    INT             reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    UINT            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    LONG            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    ULONG           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    CHAR            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    FLOAT           reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    VOID            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    TYPEOF          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    TYPEID          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    BODY            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    RBRACE          reduce using rule 286 (NonEmptyStatement -> CaseStatement .)
    ELSE            reduce using rule 286 (NonEmptyStatement -> CaseStatement .)


state 463

    (285) NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .

    SEMICOLON       reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CASE            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DEFAULT         reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LBRACE          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IF              reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    WHILE           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DO              reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FOR             reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    SWITCH          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FINAL           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CONTINUE        reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    BREAK           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    RETURN          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    GOTO            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    WITH            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    MIXIN           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IMPORT          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    STATIC          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LPAREN          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ALIAS           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ENUM            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    EXTERN          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    AUTO            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CONST           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH         reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CLASS           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    UNION           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    AMPERSAND       reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TIMES           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    MINUS           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    PLUS            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TILDE           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CAST            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DOT             reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    THIS            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    NULL            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TRUE            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FALSE           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DOLLAR          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    INUMBER         reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    DNUMBER         reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LIT_STR         reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LBRACKET        reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FUNCTION        reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    NEW             reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    BOOL            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    SHORT           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    USHORT          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    INT             reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    UINT            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    LONG            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ULONG           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    CHAR            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    FLOAT           reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    VOID            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TYPEOF          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    TYPEID          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    BODY            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    RBRACE          reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)
    ELSE            reduce using rule 285 (NonEmptyStatement -> NonEmptyStatementNoCaseNoDefault .)


state 464

    (294) NonEmptyStatementNoCaseNoDefault -> DoStatement .

    SEMICOLON       reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CASE            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DEFAULT         reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LBRACE          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IDENTIFIER      reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IF              reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    WHILE           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DO              reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FOR             reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    SWITCH          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FINAL           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CONTINUE        reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    BREAK           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    RETURN          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    GOTO            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    WITH            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    MIXIN           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IMPORT          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    STATIC          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LPAREN          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ALIAS           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ENUM            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    EXTERN          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    AUTO            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CONST           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    IMMUTABLE       reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FOREACH         reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FOREACH_REVERSE reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CLASS           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    UNION           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    AMPERSAND       reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    PLUS_PLUS       reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    MINUS_MINUS     reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TIMES           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    MINUS           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    PLUS            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    EXCLAMATION     reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TILDE           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CAST            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DOT             reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    THIS            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    NULL            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TRUE            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FALSE           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DOLLAR          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    INUMBER         reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    DNUMBER         reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LIT_CHAR        reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LIT_STR         reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LBRACKET        reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FUNCTION        reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    NEW             reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    BOOL            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    SHORT           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    USHORT          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    INT             reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    UINT            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    LONG            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ULONG           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    CHAR            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    FLOAT           reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    VOID            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TYPEOF          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    TYPEID          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    BODY            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    RBRACE          reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)
    ELSE            reduce using rule 294 (NonEmptyStatementNoCaseNoDefault -> DoStatement .)


state 465

    (320) DeclarationStatement -> Declaration .

    SEMICOLON       reduce using rule 320 (DeclarationStatement -> Declaration .)
    CASE            reduce using rule 320 (DeclarationStatement -> Declaration .)
    DEFAULT         reduce using rule 320 (DeclarationStatement -> Declaration .)
    LBRACE          reduce using rule 320 (DeclarationStatement -> Declaration .)
    IDENTIFIER      reduce using rule 320 (DeclarationStatement -> Declaration .)
    IF              reduce using rule 320 (DeclarationStatement -> Declaration .)
    WHILE           reduce using rule 320 (DeclarationStatement -> Declaration .)
    DO              reduce using rule 320 (DeclarationStatement -> Declaration .)
    FOR             reduce using rule 320 (DeclarationStatement -> Declaration .)
    SWITCH          reduce using rule 320 (DeclarationStatement -> Declaration .)
    FINAL           reduce using rule 320 (DeclarationStatement -> Declaration .)
    CONTINUE        reduce using rule 320 (DeclarationStatement -> Declaration .)
    BREAK           reduce using rule 320 (DeclarationStatement -> Declaration .)
    RETURN          reduce using rule 320 (DeclarationStatement -> Declaration .)
    GOTO            reduce using rule 320 (DeclarationStatement -> Declaration .)
    WITH            reduce using rule 320 (DeclarationStatement -> Declaration .)
    MIXIN           reduce using rule 320 (DeclarationStatement -> Declaration .)
    IMPORT          reduce using rule 320 (DeclarationStatement -> Declaration .)
    STATIC          reduce using rule 320 (DeclarationStatement -> Declaration .)
    LPAREN          reduce using rule 320 (DeclarationStatement -> Declaration .)
    ALIAS           reduce using rule 320 (DeclarationStatement -> Declaration .)
    ENUM            reduce using rule 320 (DeclarationStatement -> Declaration .)
    EXTERN          reduce using rule 320 (DeclarationStatement -> Declaration .)
    AUTO            reduce using rule 320 (DeclarationStatement -> Declaration .)
    CONST           reduce using rule 320 (DeclarationStatement -> Declaration .)
    IMMUTABLE       reduce using rule 320 (DeclarationStatement -> Declaration .)
    FOREACH         reduce using rule 320 (DeclarationStatement -> Declaration .)
    FOREACH_REVERSE reduce using rule 320 (DeclarationStatement -> Declaration .)
    CLASS           reduce using rule 320 (DeclarationStatement -> Declaration .)
    UNION           reduce using rule 320 (DeclarationStatement -> Declaration .)
    AMPERSAND       reduce using rule 320 (DeclarationStatement -> Declaration .)
    PLUS_PLUS       reduce using rule 320 (DeclarationStatement -> Declaration .)
    MINUS_MINUS     reduce using rule 320 (DeclarationStatement -> Declaration .)
    TIMES           reduce using rule 320 (DeclarationStatement -> Declaration .)
    MINUS           reduce using rule 320 (DeclarationStatement -> Declaration .)
    PLUS            reduce using rule 320 (DeclarationStatement -> Declaration .)
    EXCLAMATION     reduce using rule 320 (DeclarationStatement -> Declaration .)
    TILDE           reduce using rule 320 (DeclarationStatement -> Declaration .)
    CAST            reduce using rule 320 (DeclarationStatement -> Declaration .)
    DOT             reduce using rule 320 (DeclarationStatement -> Declaration .)
    THIS            reduce using rule 320 (DeclarationStatement -> Declaration .)
    NULL            reduce using rule 320 (DeclarationStatement -> Declaration .)
    TRUE            reduce using rule 320 (DeclarationStatement -> Declaration .)
    FALSE           reduce using rule 320 (DeclarationStatement -> Declaration .)
    DOLLAR          reduce using rule 320 (DeclarationStatement -> Declaration .)
    INUMBER         reduce using rule 320 (DeclarationStatement -> Declaration .)
    DNUMBER         reduce using rule 320 (DeclarationStatement -> Declaration .)
    LIT_CHAR        reduce using rule 320 (DeclarationStatement -> Declaration .)
    LIT_STR         reduce using rule 320 (DeclarationStatement -> Declaration .)
    LBRACKET        reduce using rule 320 (DeclarationStatement -> Declaration .)
    FUNCTION        reduce using rule 320 (DeclarationStatement -> Declaration .)
    NEW             reduce using rule 320 (DeclarationStatement -> Declaration .)
    BOOL            reduce using rule 320 (DeclarationStatement -> Declaration .)
    SHORT           reduce using rule 320 (DeclarationStatement -> Declaration .)
    USHORT          reduce using rule 320 (DeclarationStatement -> Declaration .)
    INT             reduce using rule 320 (DeclarationStatement -> Declaration .)
    UINT            reduce using rule 320 (DeclarationStatement -> Declaration .)
    LONG            reduce using rule 320 (DeclarationStatement -> Declaration .)
    ULONG           reduce using rule 320 (DeclarationStatement -> Declaration .)
    CHAR            reduce using rule 320 (DeclarationStatement -> Declaration .)
    FLOAT           reduce using rule 320 (DeclarationStatement -> Declaration .)
    VOID            reduce using rule 320 (DeclarationStatement -> Declaration .)
    TYPEOF          reduce using rule 320 (DeclarationStatement -> Declaration .)
    TYPEID          reduce using rule 320 (DeclarationStatement -> Declaration .)
    BODY            reduce using rule 320 (DeclarationStatement -> Declaration .)
    RBRACE          reduce using rule 320 (DeclarationStatement -> Declaration .)
    ELSE            reduce using rule 320 (DeclarationStatement -> Declaration .)


state 466

    (319) ExpressionStatement -> Expression . SEMICOLON

    SEMICOLON       shift and go to state 605


state 467

    (293) NonEmptyStatementNoCaseNoDefault -> WhileStatement .

    SEMICOLON       reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CASE            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DEFAULT         reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LBRACE          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IDENTIFIER      reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IF              reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    WHILE           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DO              reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FOR             reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    SWITCH          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FINAL           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CONTINUE        reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    BREAK           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    RETURN          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    GOTO            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    WITH            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    MIXIN           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IMPORT          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    STATIC          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LPAREN          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ALIAS           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ENUM            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    EXTERN          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    AUTO            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CONST           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    IMMUTABLE       reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FOREACH         reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FOREACH_REVERSE reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CLASS           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    UNION           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    AMPERSAND       reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    PLUS_PLUS       reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    MINUS_MINUS     reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TIMES           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    MINUS           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    PLUS            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    EXCLAMATION     reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TILDE           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CAST            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DOT             reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    THIS            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    NULL            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TRUE            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FALSE           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DOLLAR          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    INUMBER         reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    DNUMBER         reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LIT_CHAR        reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LIT_STR         reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LBRACKET        reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FUNCTION        reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    NEW             reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    BOOL            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    SHORT           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    USHORT          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    INT             reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    UINT            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    LONG            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ULONG           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    CHAR            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    FLOAT           reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    VOID            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TYPEOF          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    TYPEID          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    BODY            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    RBRACE          reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)
    ELSE            reduce using rule 293 (NonEmptyStatementNoCaseNoDefault -> WhileStatement .)


state 468

    (276) Statement -> NonEmptyStatement .

    SEMICOLON       reduce using rule 276 (Statement -> NonEmptyStatement .)
    CASE            reduce using rule 276 (Statement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 276 (Statement -> NonEmptyStatement .)
    LBRACE          reduce using rule 276 (Statement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 276 (Statement -> NonEmptyStatement .)
    IF              reduce using rule 276 (Statement -> NonEmptyStatement .)
    WHILE           reduce using rule 276 (Statement -> NonEmptyStatement .)
    DO              reduce using rule 276 (Statement -> NonEmptyStatement .)
    FOR             reduce using rule 276 (Statement -> NonEmptyStatement .)
    SWITCH          reduce using rule 276 (Statement -> NonEmptyStatement .)
    FINAL           reduce using rule 276 (Statement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 276 (Statement -> NonEmptyStatement .)
    BREAK           reduce using rule 276 (Statement -> NonEmptyStatement .)
    RETURN          reduce using rule 276 (Statement -> NonEmptyStatement .)
    GOTO            reduce using rule 276 (Statement -> NonEmptyStatement .)
    WITH            reduce using rule 276 (Statement -> NonEmptyStatement .)
    MIXIN           reduce using rule 276 (Statement -> NonEmptyStatement .)
    IMPORT          reduce using rule 276 (Statement -> NonEmptyStatement .)
    STATIC          reduce using rule 276 (Statement -> NonEmptyStatement .)
    LPAREN          reduce using rule 276 (Statement -> NonEmptyStatement .)
    ALIAS           reduce using rule 276 (Statement -> NonEmptyStatement .)
    ENUM            reduce using rule 276 (Statement -> NonEmptyStatement .)
    EXTERN          reduce using rule 276 (Statement -> NonEmptyStatement .)
    AUTO            reduce using rule 276 (Statement -> NonEmptyStatement .)
    CONST           reduce using rule 276 (Statement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 276 (Statement -> NonEmptyStatement .)
    FOREACH         reduce using rule 276 (Statement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 276 (Statement -> NonEmptyStatement .)
    CLASS           reduce using rule 276 (Statement -> NonEmptyStatement .)
    UNION           reduce using rule 276 (Statement -> NonEmptyStatement .)
    AMPERSAND       reduce using rule 276 (Statement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 276 (Statement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 276 (Statement -> NonEmptyStatement .)
    TIMES           reduce using rule 276 (Statement -> NonEmptyStatement .)
    MINUS           reduce using rule 276 (Statement -> NonEmptyStatement .)
    PLUS            reduce using rule 276 (Statement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 276 (Statement -> NonEmptyStatement .)
    TILDE           reduce using rule 276 (Statement -> NonEmptyStatement .)
    CAST            reduce using rule 276 (Statement -> NonEmptyStatement .)
    DOT             reduce using rule 276 (Statement -> NonEmptyStatement .)
    THIS            reduce using rule 276 (Statement -> NonEmptyStatement .)
    NULL            reduce using rule 276 (Statement -> NonEmptyStatement .)
    TRUE            reduce using rule 276 (Statement -> NonEmptyStatement .)
    FALSE           reduce using rule 276 (Statement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 276 (Statement -> NonEmptyStatement .)
    INUMBER         reduce using rule 276 (Statement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 276 (Statement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 276 (Statement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 276 (Statement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 276 (Statement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 276 (Statement -> NonEmptyStatement .)
    NEW             reduce using rule 276 (Statement -> NonEmptyStatement .)
    BOOL            reduce using rule 276 (Statement -> NonEmptyStatement .)
    SHORT           reduce using rule 276 (Statement -> NonEmptyStatement .)
    USHORT          reduce using rule 276 (Statement -> NonEmptyStatement .)
    INT             reduce using rule 276 (Statement -> NonEmptyStatement .)
    UINT            reduce using rule 276 (Statement -> NonEmptyStatement .)
    LONG            reduce using rule 276 (Statement -> NonEmptyStatement .)
    ULONG           reduce using rule 276 (Statement -> NonEmptyStatement .)
    CHAR            reduce using rule 276 (Statement -> NonEmptyStatement .)
    FLOAT           reduce using rule 276 (Statement -> NonEmptyStatement .)
    VOID            reduce using rule 276 (Statement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 276 (Statement -> NonEmptyStatement .)
    TYPEID          reduce using rule 276 (Statement -> NonEmptyStatement .)
    BODY            reduce using rule 276 (Statement -> NonEmptyStatement .)
    RBRACE          reduce using rule 276 (Statement -> NonEmptyStatement .)


state 469

    (394) BreakStatement -> BREAK . IDENTIFIER_opt SEMICOLON
    (389) IDENTIFIER_opt -> . IDENTIFIER
    (390) IDENTIFIER_opt -> . empty
    (496) empty -> .

    IDENTIFIER      shift and go to state 592
    SEMICOLON       reduce using rule 496 (empty -> .)

    IDENTIFIER_opt                 shift and go to state 606
    empty                          shift and go to state 593

state 470

    (337) DoStatement -> DO . Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (338) Dowhile_M1 -> . empty
    (496) empty -> .

    LBRACE          reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)

    empty                          shift and go to state 608
    Dowhile_M1                     shift and go to state 607

state 471

    (354) ForeachStatement -> AggregateForeach . NoScopeNonEmptyStatement
    (278) NoScopeNonEmptyStatement -> . NonEmptyStatement
    (279) NoScopeNonEmptyStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 609
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 610
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    NoScopeNonEmptyStatement       shift and go to state 611
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 472

    (289) NonEmptyStatementNoCaseNoDefault -> LabeledStatement .

    SEMICOLON       reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CASE            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DEFAULT         reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LBRACE          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IDENTIFIER      reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IF              reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    WHILE           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DO              reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FOR             reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    SWITCH          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FINAL           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CONTINUE        reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    BREAK           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    RETURN          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    GOTO            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    WITH            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    MIXIN           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IMPORT          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    STATIC          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LPAREN          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ALIAS           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ENUM            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    EXTERN          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    AUTO            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CONST           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    IMMUTABLE       reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FOREACH         reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FOREACH_REVERSE reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CLASS           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    UNION           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    AMPERSAND       reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    PLUS_PLUS       reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    MINUS_MINUS     reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TIMES           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    MINUS           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    PLUS            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    EXCLAMATION     reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TILDE           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CAST            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DOT             reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    THIS            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    NULL            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TRUE            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FALSE           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DOLLAR          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    INUMBER         reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    DNUMBER         reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LIT_CHAR        reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LIT_STR         reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LBRACKET        reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FUNCTION        reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    NEW             reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    BOOL            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    SHORT           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    USHORT          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    INT             reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    UINT            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    LONG            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ULONG           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    CHAR            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    FLOAT           reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    VOID            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TYPEOF          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    TYPEID          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    BODY            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    RBRACE          reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)
    ELSE            reduce using rule 289 (NonEmptyStatementNoCaseNoDefault -> LabeledStatement .)


state 473

    (291) NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .

    SEMICOLON       reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CASE            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DEFAULT         reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LBRACE          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IDENTIFIER      reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IF              reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    WHILE           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DO              reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FOR             reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    SWITCH          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FINAL           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CONTINUE        reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    BREAK           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    RETURN          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    GOTO            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    WITH            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    MIXIN           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IMPORT          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    STATIC          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LPAREN          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ALIAS           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ENUM            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    EXTERN          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    AUTO            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CONST           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    IMMUTABLE       reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FOREACH         reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FOREACH_REVERSE reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CLASS           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    UNION           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    AMPERSAND       reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    PLUS_PLUS       reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    MINUS_MINUS     reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TIMES           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    MINUS           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    PLUS            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    EXCLAMATION     reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TILDE           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CAST            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DOT             reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    THIS            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    NULL            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TRUE            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FALSE           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DOLLAR          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    INUMBER         reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    DNUMBER         reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LIT_CHAR        reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LIT_STR         reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LBRACKET        reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FUNCTION        reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    NEW             reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    BOOL            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    SHORT           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    USHORT          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    INT             reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    UINT            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    LONG            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ULONG           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    CHAR            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    FLOAT           reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    VOID            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TYPEOF          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    TYPEID          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    BODY            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    RBRACE          reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)
    ELSE            reduce using rule 291 (NonEmptyStatementNoCaseNoDefault -> DeclarationStatement .)


state 474

    (313) BlockStatement -> LBRACE M_block_begin RBRACE . M_block_end
    (316) M_block_end -> .

    ALIAS           reduce using rule 316 (M_block_end -> .)
    ENUM            reduce using rule 316 (M_block_end -> .)
    IMPORT          reduce using rule 316 (M_block_end -> .)
    STATIC          reduce using rule 316 (M_block_end -> .)
    CLASS           reduce using rule 316 (M_block_end -> .)
    UNION           reduce using rule 316 (M_block_end -> .)
    EXTERN          reduce using rule 316 (M_block_end -> .)
    FINAL           reduce using rule 316 (M_block_end -> .)
    AUTO            reduce using rule 316 (M_block_end -> .)
    CONST           reduce using rule 316 (M_block_end -> .)
    IMMUTABLE       reduce using rule 316 (M_block_end -> .)
    DOT             reduce using rule 316 (M_block_end -> .)
    BOOL            reduce using rule 316 (M_block_end -> .)
    SHORT           reduce using rule 316 (M_block_end -> .)
    USHORT          reduce using rule 316 (M_block_end -> .)
    INT             reduce using rule 316 (M_block_end -> .)
    UINT            reduce using rule 316 (M_block_end -> .)
    LONG            reduce using rule 316 (M_block_end -> .)
    ULONG           reduce using rule 316 (M_block_end -> .)
    CHAR            reduce using rule 316 (M_block_end -> .)
    FLOAT           reduce using rule 316 (M_block_end -> .)
    VOID            reduce using rule 316 (M_block_end -> .)
    IDENTIFIER      reduce using rule 316 (M_block_end -> .)
    TYPEOF          reduce using rule 316 (M_block_end -> .)
    $end            reduce using rule 316 (M_block_end -> .)
    SEMICOLON       reduce using rule 316 (M_block_end -> .)
    NEW             reduce using rule 316 (M_block_end -> .)
    DELETE          reduce using rule 316 (M_block_end -> .)
    MIXIN           reduce using rule 316 (M_block_end -> .)
    PRIVATE         reduce using rule 316 (M_block_end -> .)
    PROTECTED       reduce using rule 316 (M_block_end -> .)
    PUBLIC          reduce using rule 316 (M_block_end -> .)
    RBRACE          reduce using rule 316 (M_block_end -> .)
    CASE            reduce using rule 316 (M_block_end -> .)
    DEFAULT         reduce using rule 316 (M_block_end -> .)
    LBRACE          reduce using rule 316 (M_block_end -> .)
    IF              reduce using rule 316 (M_block_end -> .)
    WHILE           reduce using rule 316 (M_block_end -> .)
    DO              reduce using rule 316 (M_block_end -> .)
    FOR             reduce using rule 316 (M_block_end -> .)
    SWITCH          reduce using rule 316 (M_block_end -> .)
    CONTINUE        reduce using rule 316 (M_block_end -> .)
    BREAK           reduce using rule 316 (M_block_end -> .)
    RETURN          reduce using rule 316 (M_block_end -> .)
    GOTO            reduce using rule 316 (M_block_end -> .)
    WITH            reduce using rule 316 (M_block_end -> .)
    LPAREN          reduce using rule 316 (M_block_end -> .)
    FOREACH         reduce using rule 316 (M_block_end -> .)
    FOREACH_REVERSE reduce using rule 316 (M_block_end -> .)
    AMPERSAND       reduce using rule 316 (M_block_end -> .)
    PLUS_PLUS       reduce using rule 316 (M_block_end -> .)
    MINUS_MINUS     reduce using rule 316 (M_block_end -> .)
    TIMES           reduce using rule 316 (M_block_end -> .)
    MINUS           reduce using rule 316 (M_block_end -> .)
    PLUS            reduce using rule 316 (M_block_end -> .)
    EXCLAMATION     reduce using rule 316 (M_block_end -> .)
    TILDE           reduce using rule 316 (M_block_end -> .)
    CAST            reduce using rule 316 (M_block_end -> .)
    THIS            reduce using rule 316 (M_block_end -> .)
    NULL            reduce using rule 316 (M_block_end -> .)
    TRUE            reduce using rule 316 (M_block_end -> .)
    FALSE           reduce using rule 316 (M_block_end -> .)
    DOLLAR          reduce using rule 316 (M_block_end -> .)
    INUMBER         reduce using rule 316 (M_block_end -> .)
    DNUMBER         reduce using rule 316 (M_block_end -> .)
    LIT_CHAR        reduce using rule 316 (M_block_end -> .)
    LIT_STR         reduce using rule 316 (M_block_end -> .)
    LBRACKET        reduce using rule 316 (M_block_end -> .)
    FUNCTION        reduce using rule 316 (M_block_end -> .)
    TYPEID          reduce using rule 316 (M_block_end -> .)
    BODY            reduce using rule 316 (M_block_end -> .)
    ELSE            reduce using rule 316 (M_block_end -> .)
    POWER           reduce using rule 316 (M_block_end -> .)
    DIV             reduce using rule 316 (M_block_end -> .)
    MODULO          reduce using rule 316 (M_block_end -> .)
    LEFT_SHIFT      reduce using rule 316 (M_block_end -> .)
    RIGHT_SHIFT     reduce using rule 316 (M_block_end -> .)
    IS_EQ           reduce using rule 316 (M_block_end -> .)
    NOT_EQ          reduce using rule 316 (M_block_end -> .)
    LESS            reduce using rule 316 (M_block_end -> .)
    GREATER_EQ      reduce using rule 316 (M_block_end -> .)
    GREATER         reduce using rule 316 (M_block_end -> .)
    LESS_EQ         reduce using rule 316 (M_block_end -> .)
    CARET           reduce using rule 316 (M_block_end -> .)
    PIPE            reduce using rule 316 (M_block_end -> .)
    DOUBLE_AMPERSAND reduce using rule 316 (M_block_end -> .)
    QUESTION        reduce using rule 316 (M_block_end -> .)
    DOUBLE_PIPE     reduce using rule 316 (M_block_end -> .)
    ASSIGN          reduce using rule 316 (M_block_end -> .)
    EQ_PLUS         reduce using rule 316 (M_block_end -> .)
    EQ_MINUS        reduce using rule 316 (M_block_end -> .)
    EQ_TIMES        reduce using rule 316 (M_block_end -> .)
    EQ_DIV          reduce using rule 316 (M_block_end -> .)
    EQ_MODULO       reduce using rule 316 (M_block_end -> .)
    EQ_AND_BIT      reduce using rule 316 (M_block_end -> .)
    EQ_OR_BIT       reduce using rule 316 (M_block_end -> .)
    EQ_XOR_BIT      reduce using rule 316 (M_block_end -> .)
    EQ_LEFT         reduce using rule 316 (M_block_end -> .)
    EQ_RIGHT        reduce using rule 316 (M_block_end -> .)
    RBRACKET        reduce using rule 316 (M_block_end -> .)
    RANGE           reduce using rule 316 (M_block_end -> .)
    COMMA           reduce using rule 316 (M_block_end -> .)
    RPAREN          reduce using rule 316 (M_block_end -> .)
    COLON           reduce using rule 316 (M_block_end -> .)

    M_block_end                    shift and go to state 612

state 475

    (277) Statement -> ScopeBlockStatement .

    SEMICOLON       reduce using rule 277 (Statement -> ScopeBlockStatement .)
    CASE            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    DEFAULT         reduce using rule 277 (Statement -> ScopeBlockStatement .)
    LBRACE          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    IDENTIFIER      reduce using rule 277 (Statement -> ScopeBlockStatement .)
    IF              reduce using rule 277 (Statement -> ScopeBlockStatement .)
    WHILE           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    DO              reduce using rule 277 (Statement -> ScopeBlockStatement .)
    FOR             reduce using rule 277 (Statement -> ScopeBlockStatement .)
    SWITCH          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    FINAL           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    CONTINUE        reduce using rule 277 (Statement -> ScopeBlockStatement .)
    BREAK           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    RETURN          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    GOTO            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    WITH            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    MIXIN           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    IMPORT          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    STATIC          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    LPAREN          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    ALIAS           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    ENUM            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    EXTERN          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    AUTO            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    CONST           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    IMMUTABLE       reduce using rule 277 (Statement -> ScopeBlockStatement .)
    FOREACH         reduce using rule 277 (Statement -> ScopeBlockStatement .)
    FOREACH_REVERSE reduce using rule 277 (Statement -> ScopeBlockStatement .)
    CLASS           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    UNION           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    AMPERSAND       reduce using rule 277 (Statement -> ScopeBlockStatement .)
    PLUS_PLUS       reduce using rule 277 (Statement -> ScopeBlockStatement .)
    MINUS_MINUS     reduce using rule 277 (Statement -> ScopeBlockStatement .)
    TIMES           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    MINUS           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    PLUS            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    EXCLAMATION     reduce using rule 277 (Statement -> ScopeBlockStatement .)
    TILDE           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    CAST            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    DOT             reduce using rule 277 (Statement -> ScopeBlockStatement .)
    THIS            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    NULL            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    TRUE            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    FALSE           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    DOLLAR          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    INUMBER         reduce using rule 277 (Statement -> ScopeBlockStatement .)
    DNUMBER         reduce using rule 277 (Statement -> ScopeBlockStatement .)
    LIT_CHAR        reduce using rule 277 (Statement -> ScopeBlockStatement .)
    LIT_STR         reduce using rule 277 (Statement -> ScopeBlockStatement .)
    LBRACKET        reduce using rule 277 (Statement -> ScopeBlockStatement .)
    FUNCTION        reduce using rule 277 (Statement -> ScopeBlockStatement .)
    NEW             reduce using rule 277 (Statement -> ScopeBlockStatement .)
    BOOL            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    SHORT           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    USHORT          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    INT             reduce using rule 277 (Statement -> ScopeBlockStatement .)
    UINT            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    LONG            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    ULONG           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    CHAR            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    FLOAT           reduce using rule 277 (Statement -> ScopeBlockStatement .)
    VOID            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    TYPEOF          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    TYPEID          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    BODY            reduce using rule 277 (Statement -> ScopeBlockStatement .)
    RBRACE          reduce using rule 277 (Statement -> ScopeBlockStatement .)
    ELSE            reduce using rule 277 (Statement -> ScopeBlockStatement .)


state 476

    (287) NonEmptyStatement -> CaseRangeStatement .

    SEMICOLON       reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    CASE            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    DEFAULT         reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    LBRACE          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    IDENTIFIER      reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    IF              reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    WHILE           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    DO              reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    FOR             reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    SWITCH          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    FINAL           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    CONTINUE        reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    BREAK           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    RETURN          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    GOTO            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    WITH            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    MIXIN           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    IMPORT          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    STATIC          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    LPAREN          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    ALIAS           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    ENUM            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    EXTERN          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    AUTO            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    CONST           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    IMMUTABLE       reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    FOREACH         reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    FOREACH_REVERSE reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    CLASS           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    UNION           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    AMPERSAND       reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    PLUS_PLUS       reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    MINUS_MINUS     reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    TIMES           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    MINUS           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    PLUS            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    EXCLAMATION     reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    TILDE           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    CAST            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    DOT             reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    THIS            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    NULL            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    TRUE            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    FALSE           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    DOLLAR          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    INUMBER         reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    DNUMBER         reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    LIT_CHAR        reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    LIT_STR         reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    LBRACKET        reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    FUNCTION        reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    NEW             reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    BOOL            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    SHORT           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    USHORT          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    INT             reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    UINT            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    LONG            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    ULONG           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    CHAR            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    FLOAT           reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    VOID            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    TYPEOF          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    TYPEID          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    BODY            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    RBRACE          reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)
    ELSE            reduce using rule 287 (NonEmptyStatement -> CaseRangeStatement .)


state 477

    (368) RangeForeach -> LPAREN . ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (206) UnaryExpression -> LPAREN . Type RPAREN DOT IDENTIFIER
    (255) PrimaryExpression -> LPAREN . Expression RPAREN
    (464) Parameters -> LPAREN . ParameterList_opt RPAREN
    (359) ForeachType -> . ForeachTypeAttributes_opt BasicType Declarator
    (360) ForeachType -> . ForeachTypeAttributes_opt IDENTIFIER
    (361) ForeachType -> . ForeachTypeAttributes_opt ALIAS IDENTIFIER
    (76) Type -> . BasicType BasicType2_opt
    (152) Expression -> . CommaExpression
    (468) ParameterList_opt -> . ParameterList
    (469) ParameterList_opt -> . empty
    (362) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (363) ForeachTypeAttributes_opt -> . empty
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (465) ParameterList -> . Parameter
    (466) ParameterList -> . Parameter COMMA ParameterList
    (467) ParameterList -> . ELLIPSIS
    (496) empty -> .
    (364) ForeachTypeAttributes -> . ForeachTypeAttribute
    (365) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (470) Parameter -> . InOut_opt BasicType Declarator
    (471) Parameter -> . InOut_opt BasicType Declarator ELLIPSIS
    (472) Parameter -> . InOut_opt BasicType Declarator ASSIGN AssignExpression
    (473) Parameter -> . InOut_opt Type
    (474) Parameter -> . InOut_opt Type ELLIPSIS
    (366) ForeachTypeAttribute -> . ENUM
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (480) InOut_opt -> . InOut
    (481) InOut_opt -> . empty
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (475) InOut -> . InOutX
    (476) InOut -> . InOut InOutX
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (477) InOutX -> . AUTO
    (478) InOutX -> . FINAL
    (479) InOutX -> . SCOPE
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    DOT             shift and go to state 203
    ELLIPSIS        shift and go to state 162
    RPAREN          reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ENUM            shift and go to state 614
    AUTO            shift and go to state 157
    FINAL           shift and go to state 159
    SCOPE           shift and go to state 158
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! IDENTIFIER      [ shift and go to state 214 ]
  ! TYPEOF          [ shift and go to state 47 ]

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ParameterList                  shift and go to state 160
    ImportExpression               shift and go to state 188
    ForeachTypeAttribute           shift and go to state 613
    IdentifierList                 shift and go to state 189
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    Parameter                      shift and go to state 165
    ParameterList_opt              shift and go to state 163
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    ForeachType                    shift and go to state 615
    BasicType                      shift and go to state 207
    InOutX                         shift and go to state 164
    FunctionLiteralBody            shift and go to state 219
    BasicTypeX                     shift and go to state 222
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 616
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    ForeachTypeAttributes_opt      shift and go to state 617
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 196
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 378
    BodyStatement                  shift and go to state 213
    InOut_opt                      shift and go to state 156
    Type                           shift and go to state 379
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    TypeidExpression               shift and go to state 220
    ForeachTypeAttributes          shift and go to state 618
    InOut                          shift and go to state 161
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 478

    (322) IfStatement -> IF . LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> IF . LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4

    LPAREN          shift and go to state 619


state 479

    (303) NonEmptyStatementNoCaseNoDefault -> WithStatement .

    SEMICOLON       reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CASE            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DEFAULT         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LBRACE          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IDENTIFIER      reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IF              reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    WHILE           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DO              reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FOR             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    SWITCH          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FINAL           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CONTINUE        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    BREAK           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    RETURN          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    GOTO            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    WITH            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    MIXIN           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IMPORT          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    STATIC          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LPAREN          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ALIAS           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ENUM            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    EXTERN          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    AUTO            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CONST           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    IMMUTABLE       reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FOREACH         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FOREACH_REVERSE reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CLASS           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    UNION           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    AMPERSAND       reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    PLUS_PLUS       reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    MINUS_MINUS     reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TIMES           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    MINUS           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    PLUS            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    EXCLAMATION     reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TILDE           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CAST            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DOT             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    THIS            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    NULL            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TRUE            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FALSE           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DOLLAR          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    INUMBER         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    DNUMBER         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LIT_CHAR        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LIT_STR         reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LBRACKET        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FUNCTION        reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    NEW             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    BOOL            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    SHORT           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    USHORT          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    INT             reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    UINT            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    LONG            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ULONG           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    CHAR            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    FLOAT           reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    VOID            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TYPEOF          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    TYPEID          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    BODY            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    RBRACE          reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)
    ELSE            reduce using rule 303 (NonEmptyStatementNoCaseNoDefault -> WithStatement .)


state 480

    (292) NonEmptyStatementNoCaseNoDefault -> IfStatement .

    SEMICOLON       reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CASE            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DEFAULT         reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LBRACE          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IDENTIFIER      reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IF              reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    WHILE           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DO              reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FOR             reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    SWITCH          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FINAL           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CONTINUE        reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    BREAK           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    RETURN          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    GOTO            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    WITH            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    MIXIN           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IMPORT          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    STATIC          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LPAREN          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ALIAS           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ENUM            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    EXTERN          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    AUTO            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CONST           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    IMMUTABLE       reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FOREACH         reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FOREACH_REVERSE reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CLASS           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    UNION           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    AMPERSAND       reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    PLUS_PLUS       reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    MINUS_MINUS     reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TIMES           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    MINUS           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    PLUS            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    EXCLAMATION     reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TILDE           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CAST            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DOT             reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    THIS            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    NULL            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TRUE            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FALSE           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DOLLAR          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    INUMBER         reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    DNUMBER         reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LIT_CHAR        reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LIT_STR         reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LBRACKET        reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FUNCTION        reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    NEW             reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    BOOL            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    SHORT           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    USHORT          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    INT             reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    UINT            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    LONG            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ULONG           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    CHAR            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    FLOAT           reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    VOID            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TYPEOF          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    TYPEID          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    BODY            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    RBRACE          reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)
    ELSE            reduce using rule 292 (NonEmptyStatementNoCaseNoDefault -> IfStatement .)


state 481

    (474) Parameter -> InOut_opt Type ELLIPSIS .

    COMMA           reduce using rule 474 (Parameter -> InOut_opt Type ELLIPSIS .)
    RPAREN          reduce using rule 474 (Parameter -> InOut_opt Type ELLIPSIS .)


state 482

    (58) Declarator -> VarDeclarator .

    ASSIGN          reduce using rule 58 (Declarator -> VarDeclarator .)
    ELLIPSIS        reduce using rule 58 (Declarator -> VarDeclarator .)
    COMMA           reduce using rule 58 (Declarator -> VarDeclarator .)
    RPAREN          reduce using rule 58 (Declarator -> VarDeclarator .)
    SEMICOLON       reduce using rule 58 (Declarator -> VarDeclarator .)


state 483

    (76) Type -> BasicType BasicType2_opt .
    (60) VarDeclarator -> BasicType2_opt . IDENTIFIER
    (61) AltDeclarator -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes

    ELLIPSIS        reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    COMMA           reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    RPAREN          reduce using rule 76 (Type -> BasicType BasicType2_opt .)
    IDENTIFIER      shift and go to state 620
    LPAREN          shift and go to state 235


state 484

    (59) Declarator -> AltDeclarator .

    ASSIGN          reduce using rule 59 (Declarator -> AltDeclarator .)
    ELLIPSIS        reduce using rule 59 (Declarator -> AltDeclarator .)
    COMMA           reduce using rule 59 (Declarator -> AltDeclarator .)
    RPAREN          reduce using rule 59 (Declarator -> AltDeclarator .)
    SEMICOLON       reduce using rule 59 (Declarator -> AltDeclarator .)


state 485

    (470) Parameter -> InOut_opt BasicType Declarator .
    (471) Parameter -> InOut_opt BasicType Declarator . ELLIPSIS
    (472) Parameter -> InOut_opt BasicType Declarator . ASSIGN AssignExpression

    COMMA           reduce using rule 470 (Parameter -> InOut_opt BasicType Declarator .)
    RPAREN          reduce using rule 470 (Parameter -> InOut_opt BasicType Declarator .)
    ELLIPSIS        shift and go to state 622
    ASSIGN          shift and go to state 621


state 486

    (466) ParameterList -> Parameter COMMA ParameterList .

    RPAREN          reduce using rule 466 (ParameterList -> Parameter COMMA ParameterList .)


state 487

    (481) InOut_opt -> empty .

    DOT             reduce using rule 481 (InOut_opt -> empty .)
    BOOL            reduce using rule 481 (InOut_opt -> empty .)
    SHORT           reduce using rule 481 (InOut_opt -> empty .)
    USHORT          reduce using rule 481 (InOut_opt -> empty .)
    INT             reduce using rule 481 (InOut_opt -> empty .)
    UINT            reduce using rule 481 (InOut_opt -> empty .)
    LONG            reduce using rule 481 (InOut_opt -> empty .)
    ULONG           reduce using rule 481 (InOut_opt -> empty .)
    CHAR            reduce using rule 481 (InOut_opt -> empty .)
    FLOAT           reduce using rule 481 (InOut_opt -> empty .)
    VOID            reduce using rule 481 (InOut_opt -> empty .)
    IDENTIFIER      reduce using rule 481 (InOut_opt -> empty .)
    TYPEOF          reduce using rule 481 (InOut_opt -> empty .)


state 488

    (126) ArrayMemberInitialization -> NonVoidInitializer .

    COMMA           reduce using rule 126 (ArrayMemberInitialization -> NonVoidInitializer .)
    RBRACKET        reduce using rule 126 (ArrayMemberInitialization -> NonVoidInitializer .)


state 489

    (121) ArrayMemberInitializations -> ArrayMemberInitialization .
    (122) ArrayMemberInitializations -> ArrayMemberInitialization . COMMA
    (123) ArrayMemberInitializations -> ArrayMemberInitialization . COMMA ArrayMemberInitializations

    RBRACKET        reduce using rule 121 (ArrayMemberInitializations -> ArrayMemberInitialization .)
    COMMA           shift and go to state 623


state 490

    (124) ArrayMemberInitializations_opt -> ArrayMemberInitializations .

    RBRACKET        reduce using rule 124 (ArrayMemberInitializations_opt -> ArrayMemberInitializations .)


state 491

    (120) ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt . RBRACKET

    RBRACKET        shift and go to state 624


state 492

    (125) ArrayMemberInitializations_opt -> empty .
    (219) ArgumentList_opt -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 125 (ArrayMemberInitializations_opt -> empty .)
    RBRACKET        reduce using rule 125 (ArrayMemberInitializations_opt -> empty .)

  ! RBRACKET        [ reduce using rule 219 (ArgumentList_opt -> empty .) ]


state 493

    (220) ArgumentList -> AssignExpression .
    (221) ArgumentList -> AssignExpression . COMMA
    (222) ArgumentList -> AssignExpression . COMMA ArgumentList
    (127) ArrayMemberInitialization -> AssignExpression . COLON NonVoidInitializer
    (119) ExpInitializer -> AssignExpression .

  ! reduce/reduce conflict for RBRACKET resolved using rule 119 (ExpInitializer -> AssignExpression .)
    COLON           shift and go to state 625
    COMMA           reduce using rule 119 (ExpInitializer -> AssignExpression .)
    RBRACKET        reduce using rule 119 (ExpInitializer -> AssignExpression .)

  ! RBRACKET        [ reduce using rule 220 (ArgumentList -> AssignExpression .) ]
  ! COMMA           [ shift and go to state 495 ]


state 494

    (257) ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .

    POWER           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DOT             reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    PLUS_PLUS       reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    MINUS_MINUS     reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LPAREN          reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    TIMES           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DIV             reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    MODULO          reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    PLUS            reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    MINUS           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LEFT_SHIFT      reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RIGHT_SHIFT     reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    IS_EQ           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    NOT_EQ          reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LESS            reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    GREATER_EQ      reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    GREATER         reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    LESS_EQ         reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    AMPERSAND       reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    CARET           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    PIPE            reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    QUESTION        reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    DOUBLE_PIPE     reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    ASSIGN          reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_PLUS         reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_MINUS        reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_TIMES        reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_DIV          reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_MODULO       reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_AND_BIT      reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_OR_BIT       reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_XOR_BIT      reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_LEFT         reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    EQ_RIGHT        reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RBRACKET        reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RPAREN          reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RANGE           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    COMMA           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    SEMICOLON       reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    RBRACE          reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)
    COLON           reduce using rule 257 (ArrayLiteral -> LBRACKET ArgumentList_opt RBRACKET .)


state 495

    (221) ArgumentList -> AssignExpression COMMA .
    (222) ArgumentList -> AssignExpression COMMA . ArgumentList
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RPAREN          reduce using rule 221 (ArgumentList -> AssignExpression COMMA .)
    COLON           reduce using rule 221 (ArgumentList -> AssignExpression COMMA .)
    RBRACKET        reduce using rule 221 (ArgumentList -> AssignExpression COMMA .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 626
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 496

    (178) AndExpression -> AndExpression AMPERSAND CmpExpression .

    AMPERSAND       reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    CARET           reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    PIPE            reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    QUESTION        reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    DOUBLE_PIPE     reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    ASSIGN          reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_PLUS         reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_MINUS        reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_TIMES        reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_DIV          reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_MODULO       reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_AND_BIT      reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_OR_BIT       reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_XOR_BIT      reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_LEFT         reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    EQ_RIGHT        reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RBRACKET        reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RPAREN          reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    COMMA           reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    SEMICOLON       reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RANGE           reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    RBRACE          reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)
    COLON           reduce using rule 178 (AndExpression -> AndExpression AMPERSAND CmpExpression .)


state 497

    (168) ConditionalExpression -> OrOrExpression QUESTION Expression . COLON ConditionalExpression

    COLON           shift and go to state 627


state 498

    (170) OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .
    (172) AndAndExpression -> AndAndExpression . DOUBLE_AMPERSAND OrExpression

    QUESTION        reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    DOUBLE_PIPE     reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    ASSIGN          reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_PLUS         reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_MINUS        reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_TIMES        reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_DIV          reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_MODULO       reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_AND_BIT      reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_OR_BIT       reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_XOR_BIT      reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_LEFT         reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    EQ_RIGHT        reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RBRACKET        reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RANGE           reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    COMMA           reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RPAREN          reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    SEMICOLON       reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    RBRACE          reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    COLON           reduce using rule 170 (OrOrExpression -> OrOrExpression DOUBLE_PIPE AndAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 372


state 499

    (272) ImportExpression -> IMPORT LPAREN AssignExpression . RPAREN

    RPAREN          shift and go to state 628


state 500

    (166) AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .

    COMMA           reduce using rule 166 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    SEMICOLON       reduce using rule 166 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RPAREN          reduce using rule 166 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RBRACKET        reduce using rule 166 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    COLON           reduce using rule 166 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RANGE           reduce using rule 166 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)
    RBRACE          reduce using rule 166 (AssignExpression -> ConditionalExpression EQ_RIGHT AssignExpression .)


state 501

    (162) AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .

    COMMA           reduce using rule 162 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    SEMICOLON       reduce using rule 162 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RPAREN          reduce using rule 162 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RBRACKET        reduce using rule 162 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    COLON           reduce using rule 162 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RANGE           reduce using rule 162 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)
    RBRACE          reduce using rule 162 (AssignExpression -> ConditionalExpression EQ_AND_BIT AssignExpression .)


state 502

    (159) AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .

    COMMA           reduce using rule 159 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    SEMICOLON       reduce using rule 159 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RPAREN          reduce using rule 159 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RBRACKET        reduce using rule 159 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    COLON           reduce using rule 159 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RANGE           reduce using rule 159 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)
    RBRACE          reduce using rule 159 (AssignExpression -> ConditionalExpression EQ_TIMES AssignExpression .)


state 503

    (157) AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .

    COMMA           reduce using rule 157 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    SEMICOLON       reduce using rule 157 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RPAREN          reduce using rule 157 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RBRACKET        reduce using rule 157 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    COLON           reduce using rule 157 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RANGE           reduce using rule 157 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)
    RBRACE          reduce using rule 157 (AssignExpression -> ConditionalExpression EQ_PLUS AssignExpression .)


state 504

    (160) AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .

    COMMA           reduce using rule 160 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    SEMICOLON       reduce using rule 160 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RPAREN          reduce using rule 160 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RBRACKET        reduce using rule 160 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    COLON           reduce using rule 160 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RANGE           reduce using rule 160 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)
    RBRACE          reduce using rule 160 (AssignExpression -> ConditionalExpression EQ_DIV AssignExpression .)


state 505

    (164) AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .

    COMMA           reduce using rule 164 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    SEMICOLON       reduce using rule 164 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RPAREN          reduce using rule 164 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RBRACKET        reduce using rule 164 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    COLON           reduce using rule 164 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RANGE           reduce using rule 164 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)
    RBRACE          reduce using rule 164 (AssignExpression -> ConditionalExpression EQ_XOR_BIT AssignExpression .)


state 506

    (158) AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .

    COMMA           reduce using rule 158 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    SEMICOLON       reduce using rule 158 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RPAREN          reduce using rule 158 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RBRACKET        reduce using rule 158 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    COLON           reduce using rule 158 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RANGE           reduce using rule 158 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)
    RBRACE          reduce using rule 158 (AssignExpression -> ConditionalExpression EQ_MINUS AssignExpression .)


state 507

    (165) AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .

    COMMA           reduce using rule 165 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    SEMICOLON       reduce using rule 165 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RPAREN          reduce using rule 165 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RBRACKET        reduce using rule 165 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    COLON           reduce using rule 165 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RANGE           reduce using rule 165 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)
    RBRACE          reduce using rule 165 (AssignExpression -> ConditionalExpression EQ_LEFT AssignExpression .)


state 508

    (163) AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .

    COMMA           reduce using rule 163 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    SEMICOLON       reduce using rule 163 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RPAREN          reduce using rule 163 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RBRACKET        reduce using rule 163 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    COLON           reduce using rule 163 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RANGE           reduce using rule 163 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)
    RBRACE          reduce using rule 163 (AssignExpression -> ConditionalExpression EQ_OR_BIT AssignExpression .)


state 509

    (161) AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .

    COMMA           reduce using rule 161 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    SEMICOLON       reduce using rule 161 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RPAREN          reduce using rule 161 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RBRACKET        reduce using rule 161 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    COLON           reduce using rule 161 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RANGE           reduce using rule 161 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)
    RBRACE          reduce using rule 161 (AssignExpression -> ConditionalExpression EQ_MODULO AssignExpression .)


state 510

    (156) AssignExpression -> ConditionalExpression ASSIGN AssignExpression .

    COMMA           reduce using rule 156 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    SEMICOLON       reduce using rule 156 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RPAREN          reduce using rule 156 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RBRACKET        reduce using rule 156 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    COLON           reduce using rule 156 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RANGE           reduce using rule 156 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)
    RBRACE          reduce using rule 156 (AssignExpression -> ConditionalExpression ASSIGN AssignExpression .)


state 511

    (187) RelExpression -> ShiftExpression LESS_EQ ShiftExpression .
    (189) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (190) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    CARET           reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    PIPE            reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    QUESTION        reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    ASSIGN          reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RBRACKET        reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RANGE           reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    COMMA           reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RPAREN          reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    RBRACE          reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    COLON           reduce using rule 187 (RelExpression -> ShiftExpression LESS_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 339
    RIGHT_SHIFT     shift and go to state 341


state 512

    (182) EqualExpression -> ShiftExpression IS_EQ ShiftExpression .
    (189) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (190) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    CARET           reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    PIPE            reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    QUESTION        reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    ASSIGN          reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RBRACKET        reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RANGE           reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    COMMA           reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RPAREN          reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    RBRACE          reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    COLON           reduce using rule 182 (EqualExpression -> ShiftExpression IS_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 339
    RIGHT_SHIFT     shift and go to state 341


state 513

    (186) RelExpression -> ShiftExpression GREATER ShiftExpression .
    (189) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (190) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    CARET           reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    PIPE            reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    QUESTION        reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    ASSIGN          reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_PLUS         reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_MINUS        reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_TIMES        reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_DIV          reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_MODULO       reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_AND_BIT      reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_OR_BIT       reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_LEFT         reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    EQ_RIGHT        reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RBRACKET        reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RANGE           reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    COMMA           reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RPAREN          reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    SEMICOLON       reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    RBRACE          reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    COLON           reduce using rule 186 (RelExpression -> ShiftExpression GREATER ShiftExpression .)
    LEFT_SHIFT      shift and go to state 339
    RIGHT_SHIFT     shift and go to state 341


state 514

    (184) RelExpression -> ShiftExpression LESS ShiftExpression .
    (189) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (190) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    CARET           reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    PIPE            reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    QUESTION        reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    ASSIGN          reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_PLUS         reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_MINUS        reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_TIMES        reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_DIV          reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_MODULO       reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_AND_BIT      reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_OR_BIT       reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_LEFT         reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    EQ_RIGHT        reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RBRACKET        reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RANGE           reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    COMMA           reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RPAREN          reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    SEMICOLON       reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    RBRACE          reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    COLON           reduce using rule 184 (RelExpression -> ShiftExpression LESS ShiftExpression .)
    LEFT_SHIFT      shift and go to state 339
    RIGHT_SHIFT     shift and go to state 341


state 515

    (189) ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .
    (192) AddExpression -> AddExpression . PLUS MulExpression
    (193) AddExpression -> AddExpression . MINUS MulExpression

    LEFT_SHIFT      reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RIGHT_SHIFT     reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    IS_EQ           reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    NOT_EQ          reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    LESS            reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    GREATER_EQ      reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    GREATER         reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    LESS_EQ         reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    AMPERSAND       reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    CARET           reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    PIPE            reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    DOUBLE_AMPERSAND reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    QUESTION        reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    DOUBLE_PIPE     reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    ASSIGN          reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_PLUS         reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_MINUS        reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_TIMES        reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_DIV          reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_MODULO       reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_AND_BIT      reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_OR_BIT       reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_XOR_BIT      reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_LEFT         reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    EQ_RIGHT        reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    COMMA           reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RPAREN          reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    COLON           reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    SEMICOLON       reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RBRACKET        reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RANGE           reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    RBRACE          reduce using rule 189 (ShiftExpression -> ShiftExpression LEFT_SHIFT AddExpression .)
    PLUS            shift and go to state 380
    MINUS           shift and go to state 381


state 516

    (185) RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .
    (189) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (190) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    CARET           reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    PIPE            reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    QUESTION        reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    ASSIGN          reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RBRACKET        reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RANGE           reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    COMMA           reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RPAREN          reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    RBRACE          reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    COLON           reduce using rule 185 (RelExpression -> ShiftExpression GREATER_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 339
    RIGHT_SHIFT     shift and go to state 341


state 517

    (190) ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .
    (192) AddExpression -> AddExpression . PLUS MulExpression
    (193) AddExpression -> AddExpression . MINUS MulExpression

    LEFT_SHIFT      reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RIGHT_SHIFT     reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    IS_EQ           reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    NOT_EQ          reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    LESS            reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    GREATER_EQ      reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    GREATER         reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    LESS_EQ         reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    AMPERSAND       reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    CARET           reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    PIPE            reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    DOUBLE_AMPERSAND reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    QUESTION        reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    DOUBLE_PIPE     reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    ASSIGN          reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_PLUS         reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_MINUS        reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_TIMES        reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_DIV          reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_MODULO       reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_AND_BIT      reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_OR_BIT       reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_XOR_BIT      reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_LEFT         reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    EQ_RIGHT        reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    COMMA           reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RPAREN          reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    COLON           reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    SEMICOLON       reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RBRACKET        reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RANGE           reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    RBRACE          reduce using rule 190 (ShiftExpression -> ShiftExpression RIGHT_SHIFT AddExpression .)
    PLUS            shift and go to state 380
    MINUS           shift and go to state 381


state 518

    (183) EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .
    (189) ShiftExpression -> ShiftExpression . LEFT_SHIFT AddExpression
    (190) ShiftExpression -> ShiftExpression . RIGHT_SHIFT AddExpression

    AMPERSAND       reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    CARET           reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    PIPE            reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    QUESTION        reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    DOUBLE_PIPE     reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    ASSIGN          reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_PLUS         reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_MINUS        reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_TIMES        reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_DIV          reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_MODULO       reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_AND_BIT      reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_OR_BIT       reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_XOR_BIT      reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_LEFT         reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    EQ_RIGHT        reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RBRACKET        reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RANGE           reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    COMMA           reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RPAREN          reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    SEMICOLON       reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    RBRACE          reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    COLON           reduce using rule 183 (EqualExpression -> ShiftExpression NOT_EQ ShiftExpression .)
    LEFT_SHIFT      shift and go to state 339
    RIGHT_SHIFT     shift and go to state 341


state 519

    (197) MulExpression -> MulExpression MODULO UnaryExpression .

    TIMES           reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    DIV             reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    MODULO          reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    PLUS            reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    MINUS           reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    LEFT_SHIFT      reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    IS_EQ           reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    NOT_EQ          reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    LESS            reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    GREATER_EQ      reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    GREATER         reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    LESS_EQ         reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    AMPERSAND       reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    CARET           reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    PIPE            reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    QUESTION        reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    ASSIGN          reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_PLUS         reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_MINUS        reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_TIMES        reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_DIV          reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_MODULO       reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_AND_BIT      reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_OR_BIT       reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_LEFT         reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    EQ_RIGHT        reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    COMMA           reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    SEMICOLON       reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RBRACKET        reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    COLON           reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RANGE           reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RPAREN          reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)
    RBRACE          reduce using rule 197 (MulExpression -> MulExpression MODULO UnaryExpression .)


state 520

    (196) MulExpression -> MulExpression DIV UnaryExpression .

    TIMES           reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    DIV             reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    MODULO          reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    PLUS            reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    MINUS           reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    LEFT_SHIFT      reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    IS_EQ           reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    NOT_EQ          reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    LESS            reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    GREATER_EQ      reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    GREATER         reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    LESS_EQ         reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    AMPERSAND       reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    CARET           reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    PIPE            reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    QUESTION        reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    ASSIGN          reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_PLUS         reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_MINUS        reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_TIMES        reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_DIV          reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_MODULO       reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_AND_BIT      reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_OR_BIT       reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_LEFT         reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    EQ_RIGHT        reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    COMMA           reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    SEMICOLON       reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    RBRACKET        reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    COLON           reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    RANGE           reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    RPAREN          reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)
    RBRACE          reduce using rule 196 (MulExpression -> MulExpression DIV UnaryExpression .)


state 521

    (195) MulExpression -> MulExpression TIMES UnaryExpression .

    TIMES           reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    DIV             reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    MODULO          reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    PLUS            reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    MINUS           reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    LEFT_SHIFT      reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    IS_EQ           reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    NOT_EQ          reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    LESS            reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    GREATER_EQ      reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    GREATER         reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    LESS_EQ         reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    AMPERSAND       reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    CARET           reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    PIPE            reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    QUESTION        reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    ASSIGN          reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_PLUS         reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_MINUS        reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_TIMES        reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_DIV          reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_MODULO       reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_AND_BIT      reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_OR_BIT       reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_LEFT         reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    EQ_RIGHT        reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    COMMA           reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    SEMICOLON       reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RBRACKET        reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    COLON           reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RANGE           reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RPAREN          reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)
    RBRACE          reduce using rule 195 (MulExpression -> MulExpression TIMES UnaryExpression .)


state 522

    (265) ParameterAttributes_opt -> empty .

    LBRACE          reduce using rule 265 (ParameterAttributes_opt -> empty .)
    BODY            reduce using rule 265 (ParameterAttributes_opt -> empty .)


state 523

    (260) FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt . FunctionLiteralBody
    (264) ParameterAttributes_opt -> ParameterAttributes_opt .
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for BODY resolved as shift
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

  ! LBRACE          [ reduce using rule 264 (ParameterAttributes_opt -> ParameterAttributes_opt .) ]
  ! BODY            [ reduce using rule 264 (ParameterAttributes_opt -> ParameterAttributes_opt .) ]

    FunctionLiteralBody            shift and go to state 629
    BlockStatement                 shift and go to state 175
    BodyStatement                  shift and go to state 213

state 524

    (174) OrExpression -> OrExpression PIPE XorExpression .
    (176) XorExpression -> XorExpression . CARET AndExpression

    PIPE            reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    DOUBLE_AMPERSAND reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    QUESTION        reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    DOUBLE_PIPE     reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    ASSIGN          reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_PLUS         reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_MINUS        reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_TIMES        reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_DIV          reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_MODULO       reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_AND_BIT      reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_OR_BIT       reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_XOR_BIT      reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_LEFT         reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    EQ_RIGHT        reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    RBRACKET        reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    RANGE           reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    COMMA           reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    RPAREN          reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    SEMICOLON       reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    RBRACE          reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    COLON           reduce using rule 174 (OrExpression -> OrExpression PIPE XorExpression .)
    CARET           shift and go to state 375


state 525

    (273) TypeidExpression -> TYPEID LPAREN Type . RPAREN

    RPAREN          shift and go to state 630


state 526

    (274) TypeidExpression -> TYPEID LPAREN Expression . RPAREN

    RPAREN          shift and go to state 631


state 527

    (232) PostfixExpression -> PostfixExpression LPAREN ArgumentList . RPAREN

    RPAREN          shift and go to state 632


state 528

    (226) PowExpression -> PostfixExpression POWER UnaryExpression .

    TIMES           reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    DIV             reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    MODULO          reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    PLUS            reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    MINUS           reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    LEFT_SHIFT      reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    IS_EQ           reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    NOT_EQ          reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    LESS            reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    GREATER_EQ      reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    GREATER         reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    LESS_EQ         reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    AMPERSAND       reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    CARET           reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    PIPE            reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    QUESTION        reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    ASSIGN          reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_PLUS         reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_MINUS        reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_TIMES        reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_DIV          reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_MODULO       reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_AND_BIT      reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_OR_BIT       reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_LEFT         reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    EQ_RIGHT        reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    COMMA           reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RBRACKET        reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RPAREN          reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    COLON           reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RBRACE          reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    SEMICOLON       reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)
    RANGE           reduce using rule 226 (PowExpression -> PostfixExpression POWER UnaryExpression .)


state 529

    (211) NewExpression -> NewExpressionWithArgs .

    POWER           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    DOT             reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    PLUS_PLUS       reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    MINUS_MINUS     reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    LPAREN          reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    TIMES           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    DIV             reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    MODULO          reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    PLUS            reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    MINUS           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    LEFT_SHIFT      reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    RIGHT_SHIFT     reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    IS_EQ           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    NOT_EQ          reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    LESS            reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    GREATER_EQ      reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    GREATER         reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    LESS_EQ         reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    AMPERSAND       reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    CARET           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    PIPE            reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    DOUBLE_AMPERSAND reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    QUESTION        reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    DOUBLE_PIPE     reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    ASSIGN          reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_PLUS         reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_MINUS        reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_TIMES        reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_DIV          reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_MODULO       reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_AND_BIT      reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_OR_BIT       reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_XOR_BIT      reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_LEFT         reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    EQ_RIGHT        reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    RBRACKET        reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    RANGE           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    COMMA           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    RPAREN          reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    SEMICOLON       reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    RBRACE          reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)
    COLON           reduce using rule 211 (NewExpression -> NewExpressionWithArgs .)


state 530

    (229) PostfixExpression -> PostfixExpression DOT NewExpression .

    POWER           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DOT             reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    PLUS_PLUS       reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    MINUS_MINUS     reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LPAREN          reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    TIMES           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DIV             reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    MODULO          reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    PLUS            reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    MINUS           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LEFT_SHIFT      reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RIGHT_SHIFT     reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    IS_EQ           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    NOT_EQ          reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LESS            reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    GREATER_EQ      reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    GREATER         reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    LESS_EQ         reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    AMPERSAND       reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    CARET           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    PIPE            reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DOUBLE_AMPERSAND reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    QUESTION        reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    DOUBLE_PIPE     reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    ASSIGN          reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_PLUS         reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_MINUS        reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_TIMES        reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_DIV          reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_MODULO       reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_AND_BIT      reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_OR_BIT       reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_XOR_BIT      reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_LEFT         reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    EQ_RIGHT        reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    COMMA           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RPAREN          reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    SEMICOLON       reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RBRACKET        reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    COLON           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RANGE           reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)
    RBRACE          reduce using rule 229 (PostfixExpression -> PostfixExpression DOT NewExpression .)


state 531

    (210) NewExpression -> NEW . AllocatorArguments_opt Type
    (212) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> NEW . AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (428) NewAnonClassExpression -> NEW . AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (216) AllocatorArguments_opt -> . AllocatorArguments
    (217) AllocatorArguments_opt -> . empty
    (215) AllocatorArguments -> . LPAREN ArgumentList_opt RPAREN
    (496) empty -> .

    LPAREN          shift and go to state 364
    CLASS           reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)

    AllocatorArguments_opt         shift and go to state 633
    AllocatorArguments             shift and go to state 365
    empty                          shift and go to state 366

state 532

    (228) PostfixExpression -> PostfixExpression DOT IDENTIFIER .

    POWER           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DOT             reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LPAREN          reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    TIMES           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DIV             reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    MODULO          reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    PLUS            reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    MINUS           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    IS_EQ           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LESS            reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    GREATER         reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    CARET           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    PIPE            reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    QUESTION        reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    COMMA           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RPAREN          reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    COLON           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RANGE           reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)
    RBRACE          reduce using rule 228 (PostfixExpression -> PostfixExpression DOT IDENTIFIER .)


state 533

    (212) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LPAREN ArgumentList_opt RPAREN

    LBRACKET        shift and go to state 634
    LPAREN          shift and go to state 635


state 534

    (428) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS . ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (430) ClassArguments_opt -> . ClassArguments
    (431) ClassArguments_opt -> . empty
    (429) ClassArguments -> . LPAREN ArgumentList_opt RPAREN
    (496) empty -> .

    LPAREN          shift and go to state 638
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)

    ClassArguments                 shift and go to state 636
    ClassArguments_opt             shift and go to state 637
    empty                          shift and go to state 639

state 535

    (215) AllocatorArguments -> LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 640


state 536

    (233) PostfixExpression -> BasicType LPAREN ArgumentList_opt . RPAREN JmpMark

    RPAREN          shift and go to state 641


state 537

    (224) CastExpression -> CAST LPAREN RPAREN . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 642
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 538

    (223) CastExpression -> CAST LPAREN Type . RPAREN UnaryExpression

    RPAREN          shift and go to state 643


state 539

    (258) ArrayLiteral -> IDENTIFIER LBRACKET INUMBER . RBRACKET
    (243) PrimaryExpression -> INUMBER .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 644
    POWER           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DOT             reduce using rule 243 (PrimaryExpression -> INUMBER .)
    PLUS_PLUS       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    MINUS_MINUS     reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LPAREN          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    TIMES           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DIV             reduce using rule 243 (PrimaryExpression -> INUMBER .)
    MODULO          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    PLUS            reduce using rule 243 (PrimaryExpression -> INUMBER .)
    MINUS           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LEFT_SHIFT      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    RIGHT_SHIFT     reduce using rule 243 (PrimaryExpression -> INUMBER .)
    IS_EQ           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    NOT_EQ          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LESS            reduce using rule 243 (PrimaryExpression -> INUMBER .)
    GREATER_EQ      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    GREATER         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    LESS_EQ         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    AMPERSAND       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    CARET           reduce using rule 243 (PrimaryExpression -> INUMBER .)
    PIPE            reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 243 (PrimaryExpression -> INUMBER .)
    QUESTION        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 243 (PrimaryExpression -> INUMBER .)
    ASSIGN          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_PLUS         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_MINUS        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_TIMES        reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_DIV          reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_MODULO       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_AND_BIT      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_OR_BIT       reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_XOR_BIT      reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_LEFT         reduce using rule 243 (PrimaryExpression -> INUMBER .)
    EQ_RIGHT        reduce using rule 243 (PrimaryExpression -> INUMBER .)

  ! RBRACKET        [ reduce using rule 243 (PrimaryExpression -> INUMBER .) ]


state 540

    (105) IdentifierList -> IDENTIFIER LBRACKET AssignExpression . RBRACKET DOT IdentifierList
    (259) ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression . RBRACKET

    RBRACKET        shift and go to state 645


state 541

    (172) AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .
    (174) OrExpression -> OrExpression . PIPE XorExpression

    DOUBLE_AMPERSAND reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    QUESTION        reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    DOUBLE_PIPE     reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    ASSIGN          reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_PLUS         reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_MINUS        reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_TIMES        reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_DIV          reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_MODULO       reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_AND_BIT      reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_OR_BIT       reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_XOR_BIT      reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_LEFT         reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    EQ_RIGHT        reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RBRACKET        reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    COMMA           reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RPAREN          reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    SEMICOLON       reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RANGE           reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    RBRACE          reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    COLON           reduce using rule 172 (AndAndExpression -> AndAndExpression DOUBLE_AMPERSAND OrExpression .)
    PIPE            shift and go to state 353


state 542

    (253) PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 646


state 543

    (252) PrimaryExpression -> BasicTypeX DOT IDENTIFIER .

    POWER           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    DOT             reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    LPAREN          reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    TIMES           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    DIV             reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    MODULO          reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    PLUS            reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    MINUS           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    IS_EQ           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    LESS            reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    GREATER         reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    CARET           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    PIPE            reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    QUESTION        reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    ASSIGN          reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    RBRACKET        reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    RANGE           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    COMMA           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    RPAREN          reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    RBRACE          reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)
    COLON           reduce using rule 252 (PrimaryExpression -> BasicTypeX DOT IDENTIFIER .)


state 544

    (176) XorExpression -> XorExpression CARET AndExpression .
    (178) AndExpression -> AndExpression . AMPERSAND CmpExpression

    CARET           reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    PIPE            reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    DOUBLE_AMPERSAND reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    QUESTION        reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    DOUBLE_PIPE     reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    ASSIGN          reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_PLUS         reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_MINUS        reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_TIMES        reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_DIV          reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_MODULO       reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_AND_BIT      reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_OR_BIT       reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_XOR_BIT      reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_LEFT         reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    EQ_RIGHT        reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    COMMA           reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    SEMICOLON       reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    RPAREN          reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    RANGE           reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    RBRACKET        reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    RBRACE          reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    COLON           reduce using rule 176 (XorExpression -> XorExpression CARET AndExpression .)
    AMPERSAND       shift and go to state 318


state 545

    (271) MixinExpression -> MIXIN LPAREN AssignExpression . RPAREN

    RPAREN          shift and go to state 647


state 546

    (255) PrimaryExpression -> LPAREN Expression RPAREN .

    POWER           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DOT             reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    PLUS_PLUS       reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    MINUS_MINUS     reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    TIMES           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DIV             reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    MODULO          reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    PLUS            reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    MINUS           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LEFT_SHIFT      reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    IS_EQ           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    NOT_EQ          reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LESS            reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    GREATER_EQ      reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    GREATER         reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    LESS_EQ         reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    CARET           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    PIPE            reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    ASSIGN          reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_PLUS         reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_MINUS        reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_TIMES        reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_DIV          reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_MODULO       reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_AND_BIT      reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_OR_BIT       reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_LEFT         reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    EQ_RIGHT        reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RANGE           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    COMMA           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)
    COLON           reduce using rule 255 (PrimaryExpression -> LPAREN Expression RPAREN .)


state 547

    (206) UnaryExpression -> LPAREN Type RPAREN . DOT IDENTIFIER

    DOT             shift and go to state 648


state 548

    (192) AddExpression -> AddExpression PLUS MulExpression .
    (195) MulExpression -> MulExpression . TIMES UnaryExpression
    (196) MulExpression -> MulExpression . DIV UnaryExpression
    (197) MulExpression -> MulExpression . MODULO UnaryExpression

    PLUS            reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    MINUS           reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    LEFT_SHIFT      reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    RIGHT_SHIFT     reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    IS_EQ           reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    NOT_EQ          reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    LESS            reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    GREATER_EQ      reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    GREATER         reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    LESS_EQ         reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    AMPERSAND       reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    CARET           reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    PIPE            reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    DOUBLE_AMPERSAND reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    QUESTION        reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    DOUBLE_PIPE     reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    ASSIGN          reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_PLUS         reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_MINUS        reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_TIMES        reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_DIV          reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_MODULO       reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_AND_BIT      reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_OR_BIT       reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_XOR_BIT      reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_LEFT         reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    EQ_RIGHT        reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    COMMA           reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    SEMICOLON       reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    RBRACKET        reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    RANGE           reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    RPAREN          reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    RBRACE          reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    COLON           reduce using rule 192 (AddExpression -> AddExpression PLUS MulExpression .)
    TIMES           shift and go to state 345
    DIV             shift and go to state 344
    MODULO          shift and go to state 343


state 549

    (193) AddExpression -> AddExpression MINUS MulExpression .
    (195) MulExpression -> MulExpression . TIMES UnaryExpression
    (196) MulExpression -> MulExpression . DIV UnaryExpression
    (197) MulExpression -> MulExpression . MODULO UnaryExpression

    PLUS            reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    MINUS           reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    LEFT_SHIFT      reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    RIGHT_SHIFT     reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    IS_EQ           reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    NOT_EQ          reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    LESS            reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    GREATER_EQ      reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    GREATER         reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    LESS_EQ         reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    AMPERSAND       reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    CARET           reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    PIPE            reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    DOUBLE_AMPERSAND reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    QUESTION        reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    DOUBLE_PIPE     reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    ASSIGN          reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_PLUS         reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_MINUS        reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_TIMES        reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_DIV          reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_MODULO       reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_AND_BIT      reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_OR_BIT       reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_XOR_BIT      reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_LEFT         reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    EQ_RIGHT        reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    COMMA           reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    SEMICOLON       reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    RBRACKET        reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    RANGE           reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    RPAREN          reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    RBRACE          reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    COLON           reduce using rule 193 (AddExpression -> AddExpression MINUS MulExpression .)
    TIMES           shift and go to state 345
    DIV             shift and go to state 344
    MODULO          shift and go to state 343


state 550

    (100) BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression . RBRACKET

    RBRACKET        shift and go to state 649


state 551

    (62) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .
    (63) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN . AltFuncDeclaratorSuffix
    (64) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN . AltDeclaratorSuffixes
    (75) AltFuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (69) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (72) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ASSIGN          reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    COMMA           reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    SEMICOLON       reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    RPAREN          reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    ELLIPSIS        reduce using rule 62 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN .)
    LPAREN          shift and go to state 76
    LBRACKET        shift and go to state 389

    Parameters                     shift and go to state 650
    AltDeclaratorSuffix            shift and go to state 390
    AltDeclaratorSuffixes          shift and go to state 651
    AltFuncDeclaratorSuffix        shift and go to state 652

state 552

    (65) AltDeclaratorX -> BasicType2_opt IDENTIFIER .
    (66) AltDeclaratorX -> BasicType2_opt IDENTIFIER . AltFuncDeclaratorSuffix
    (61) AltDeclarator -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (75) AltFuncDeclaratorSuffix -> . Parameters MemberFunctionAttributes_opt
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (69) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (72) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    RPAREN          reduce using rule 65 (AltDeclaratorX -> BasicType2_opt IDENTIFIER .)
    LPAREN          shift and go to state 76
    LBRACKET        shift and go to state 389

    Parameters                     shift and go to state 650
    AltDeclaratorSuffix            shift and go to state 390
    AltDeclaratorSuffixes          shift and go to state 391
    AltFuncDeclaratorSuffix        shift and go to state 653

state 553

    (461) FuncDeclarator -> BasicType2_opt IDENTIFIER func_m3 FuncDeclaratorSuffix .

    SEMICOLON       reduce using rule 461 (FuncDeclarator -> BasicType2_opt IDENTIFIER func_m3 FuncDeclaratorSuffix .)
    LBRACE          reduce using rule 461 (FuncDeclarator -> BasicType2_opt IDENTIFIER func_m3 FuncDeclaratorSuffix .)
    BODY            reduce using rule 461 (FuncDeclarator -> BasicType2_opt IDENTIFIER func_m3 FuncDeclaratorSuffix .)


state 554

    (74) AltDeclaratorSuffix -> LBRACKET Type . RBRACKET

    RBRACKET        shift and go to state 654


state 555

    (72) AltDeclaratorSuffix -> LBRACKET RBRACKET .

    LBRACKET        reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    ELLIPSIS        reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 72 (AltDeclaratorSuffix -> LBRACKET RBRACKET .)


state 556

    (73) AltDeclaratorSuffix -> LBRACKET AssignExpression . RBRACKET

    RBRACKET        shift and go to state 655


state 557

    (69) AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .

    ELLIPSIS        reduce using rule 69 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    ASSIGN          reduce using rule 69 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    COMMA           reduce using rule 69 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    RPAREN          reduce using rule 69 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 69 (AltDeclaratorSuffixes -> AltDeclaratorSuffix AltDeclaratorSuffixes .)


state 558

    (47) DeclaratorIdentifierList -> mark1 DeclaratorIdentifier .
    (48) DeclaratorIdentifierList -> mark1 DeclaratorIdentifier . COMMA DeclaratorIdentifierList

    SEMICOLON       reduce using rule 47 (DeclaratorIdentifierList -> mark1 DeclaratorIdentifier .)
    COMMA           shift and go to state 656


state 559

    (51) DeclaratorIdentifier -> AltDeclaratorIdentifier .

    COMMA           reduce using rule 51 (DeclaratorIdentifier -> AltDeclaratorIdentifier .)
    SEMICOLON       reduce using rule 51 (DeclaratorIdentifier -> AltDeclaratorIdentifier .)


state 560

    (56) AltDeclaratorIdentifier -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (57) AltDeclaratorIdentifier -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer

    IDENTIFIER      shift and go to state 657


state 561

    (52) VarDeclaratorIdentifier -> IDENTIFIER .
    (53) VarDeclaratorIdentifier -> IDENTIFIER . ASSIGN Initializer

    COMMA           reduce using rule 52 (VarDeclaratorIdentifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 52 (VarDeclaratorIdentifier -> IDENTIFIER .)
    ASSIGN          shift and go to state 658


state 562

    (50) DeclaratorIdentifier -> VarDeclaratorIdentifier .

    COMMA           reduce using rule 50 (DeclaratorIdentifier -> VarDeclaratorIdentifier .)
    SEMICOLON       reduce using rule 50 (DeclaratorIdentifier -> VarDeclaratorIdentifier .)


state 563

    (54) AltDeclaratorIdentifier -> BasicType2 . IDENTIFIER AltDeclaratorSuffixes_opt
    (55) AltDeclaratorIdentifier -> BasicType2 . IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer
    (95) BasicType2_opt -> BasicType2 .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 659

  ! IDENTIFIER      [ reduce using rule 95 (BasicType2_opt -> BasicType2 .) ]


state 564

    (105) IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT . IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 40

    IdentifierList                 shift and go to state 660

state 565

    (154) CommaExpression -> AssignExpression COMMA CommaExpression .

    RANGE           reduce using rule 154 (CommaExpression -> AssignExpression COMMA CommaExpression .)
    SEMICOLON       reduce using rule 154 (CommaExpression -> AssignExpression COMMA CommaExpression .)
    RPAREN          reduce using rule 154 (CommaExpression -> AssignExpression COMMA CommaExpression .)
    COLON           reduce using rule 154 (CommaExpression -> AssignExpression COMMA CommaExpression .)


state 566

    (415) BaseClassList -> COLON SuperClass COMMA Interfaces .

    LBRACE          reduce using rule 415 (BaseClassList -> COLON SuperClass COMMA Interfaces .)


state 567

    (422) Interface -> BasicType .

    COMMA           reduce using rule 422 (Interface -> BasicType .)
    LBRACE          reduce using rule 422 (Interface -> BasicType .)


state 568

    (421) Interfaces -> Interface COMMA Interfaces .

    LBRACE          reduce using rule 421 (Interfaces -> Interface COMMA Interfaces .)


state 569

    (411) ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .

    SEMICOLON       reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    CASE            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    DEFAULT         reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    LBRACE          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    IDENTIFIER      reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    IF              reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    WHILE           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    DO              reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    FOR             reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    SWITCH          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    FINAL           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    CONTINUE        reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    BREAK           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    RETURN          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    GOTO            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    WITH            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    MIXIN           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    IMPORT          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    STATIC          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    LPAREN          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    ALIAS           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    ENUM            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    EXTERN          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    AUTO            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    CONST           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    IMMUTABLE       reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    FOREACH         reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    FOREACH_REVERSE reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    CLASS           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    UNION           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    AMPERSAND       reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    PLUS_PLUS       reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    MINUS_MINUS     reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    TIMES           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    MINUS           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    PLUS            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    EXCLAMATION     reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    TILDE           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    CAST            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    DOT             reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    THIS            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    NULL            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    TRUE            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    FALSE           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    DOLLAR          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    INUMBER         reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    DNUMBER         reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    LIT_CHAR        reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    LIT_STR         reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    LBRACKET        reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    FUNCTION        reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    NEW             reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    BOOL            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    SHORT           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    USHORT          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    INT             reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    UINT            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    LONG            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    ULONG           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    CHAR            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    FLOAT           reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    VOID            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    TYPEOF          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    TYPEID          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    BODY            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    RBRACE          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    ELSE            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    $end            reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    DELETE          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    PRIVATE         reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    PROTECTED       reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)
    PUBLIC          reduce using rule 411 (ClassDeclaration -> CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2 .)


state 570

    (413) class_m2 -> empty .

    ALIAS           reduce using rule 413 (class_m2 -> empty .)
    ENUM            reduce using rule 413 (class_m2 -> empty .)
    IMPORT          reduce using rule 413 (class_m2 -> empty .)
    STATIC          reduce using rule 413 (class_m2 -> empty .)
    CLASS           reduce using rule 413 (class_m2 -> empty .)
    UNION           reduce using rule 413 (class_m2 -> empty .)
    EXTERN          reduce using rule 413 (class_m2 -> empty .)
    FINAL           reduce using rule 413 (class_m2 -> empty .)
    AUTO            reduce using rule 413 (class_m2 -> empty .)
    CONST           reduce using rule 413 (class_m2 -> empty .)
    IMMUTABLE       reduce using rule 413 (class_m2 -> empty .)
    DOT             reduce using rule 413 (class_m2 -> empty .)
    BOOL            reduce using rule 413 (class_m2 -> empty .)
    SHORT           reduce using rule 413 (class_m2 -> empty .)
    USHORT          reduce using rule 413 (class_m2 -> empty .)
    INT             reduce using rule 413 (class_m2 -> empty .)
    UINT            reduce using rule 413 (class_m2 -> empty .)
    LONG            reduce using rule 413 (class_m2 -> empty .)
    ULONG           reduce using rule 413 (class_m2 -> empty .)
    CHAR            reduce using rule 413 (class_m2 -> empty .)
    FLOAT           reduce using rule 413 (class_m2 -> empty .)
    VOID            reduce using rule 413 (class_m2 -> empty .)
    IDENTIFIER      reduce using rule 413 (class_m2 -> empty .)
    TYPEOF          reduce using rule 413 (class_m2 -> empty .)
    $end            reduce using rule 413 (class_m2 -> empty .)
    SEMICOLON       reduce using rule 413 (class_m2 -> empty .)
    NEW             reduce using rule 413 (class_m2 -> empty .)
    DELETE          reduce using rule 413 (class_m2 -> empty .)
    MIXIN           reduce using rule 413 (class_m2 -> empty .)
    PRIVATE         reduce using rule 413 (class_m2 -> empty .)
    PROTECTED       reduce using rule 413 (class_m2 -> empty .)
    PUBLIC          reduce using rule 413 (class_m2 -> empty .)
    RBRACE          reduce using rule 413 (class_m2 -> empty .)
    CASE            reduce using rule 413 (class_m2 -> empty .)
    DEFAULT         reduce using rule 413 (class_m2 -> empty .)
    LBRACE          reduce using rule 413 (class_m2 -> empty .)
    IF              reduce using rule 413 (class_m2 -> empty .)
    WHILE           reduce using rule 413 (class_m2 -> empty .)
    DO              reduce using rule 413 (class_m2 -> empty .)
    FOR             reduce using rule 413 (class_m2 -> empty .)
    SWITCH          reduce using rule 413 (class_m2 -> empty .)
    CONTINUE        reduce using rule 413 (class_m2 -> empty .)
    BREAK           reduce using rule 413 (class_m2 -> empty .)
    RETURN          reduce using rule 413 (class_m2 -> empty .)
    GOTO            reduce using rule 413 (class_m2 -> empty .)
    WITH            reduce using rule 413 (class_m2 -> empty .)
    LPAREN          reduce using rule 413 (class_m2 -> empty .)
    FOREACH         reduce using rule 413 (class_m2 -> empty .)
    FOREACH_REVERSE reduce using rule 413 (class_m2 -> empty .)
    AMPERSAND       reduce using rule 413 (class_m2 -> empty .)
    PLUS_PLUS       reduce using rule 413 (class_m2 -> empty .)
    MINUS_MINUS     reduce using rule 413 (class_m2 -> empty .)
    TIMES           reduce using rule 413 (class_m2 -> empty .)
    MINUS           reduce using rule 413 (class_m2 -> empty .)
    PLUS            reduce using rule 413 (class_m2 -> empty .)
    EXCLAMATION     reduce using rule 413 (class_m2 -> empty .)
    TILDE           reduce using rule 413 (class_m2 -> empty .)
    CAST            reduce using rule 413 (class_m2 -> empty .)
    THIS            reduce using rule 413 (class_m2 -> empty .)
    NULL            reduce using rule 413 (class_m2 -> empty .)
    TRUE            reduce using rule 413 (class_m2 -> empty .)
    FALSE           reduce using rule 413 (class_m2 -> empty .)
    DOLLAR          reduce using rule 413 (class_m2 -> empty .)
    INUMBER         reduce using rule 413 (class_m2 -> empty .)
    DNUMBER         reduce using rule 413 (class_m2 -> empty .)
    LIT_CHAR        reduce using rule 413 (class_m2 -> empty .)
    LIT_STR         reduce using rule 413 (class_m2 -> empty .)
    LBRACKET        reduce using rule 413 (class_m2 -> empty .)
    FUNCTION        reduce using rule 413 (class_m2 -> empty .)
    TYPEID          reduce using rule 413 (class_m2 -> empty .)
    BODY            reduce using rule 413 (class_m2 -> empty .)
    ELSE            reduce using rule 413 (class_m2 -> empty .)


state 571

    (454) AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression .

    COMMA           reduce using rule 454 (AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression .)
    RBRACE          reduce using rule 454 (AnonymousEnumMember -> Type IDENTIFIER ASSIGN AssignExpression .)


state 572

    (447) AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .

    SEMICOLON       reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CASE            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DEFAULT         reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LBRACE          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IDENTIFIER      reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IF              reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    WHILE           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DO              reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FOR             reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    SWITCH          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FINAL           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CONTINUE        reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    BREAK           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    RETURN          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    GOTO            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    WITH            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    MIXIN           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IMPORT          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    STATIC          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LPAREN          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    ALIAS           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    ENUM            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    EXTERN          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    AUTO            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CONST           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    IMMUTABLE       reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FOREACH         reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FOREACH_REVERSE reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CLASS           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    UNION           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    AMPERSAND       reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PLUS_PLUS       reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    MINUS_MINUS     reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TIMES           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    MINUS           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PLUS            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    EXCLAMATION     reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TILDE           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CAST            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DOT             reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    THIS            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    NULL            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TRUE            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FALSE           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DOLLAR          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    INUMBER         reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DNUMBER         reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LIT_CHAR        reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LIT_STR         reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LBRACKET        reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FUNCTION        reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    NEW             reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    BOOL            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    SHORT           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    USHORT          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    INT             reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    UINT            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    LONG            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    ULONG           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    CHAR            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    FLOAT           reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    VOID            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TYPEOF          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    TYPEID          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    BODY            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    RBRACE          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    ELSE            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    DELETE          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PRIVATE         reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PROTECTED       reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    PUBLIC          reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)
    $end            reduce using rule 447 (AnonymousEnumDeclaration -> ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE .)


state 573

    (427) AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .

    SEMICOLON       reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    NEW             reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DELETE          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ALIAS           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    MIXIN           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ENUM            reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMPORT          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    STATIC          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PRIVATE         reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PROTECTED       reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PUBLIC          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CLASS           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UNION           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    EXTERN          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FINAL           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    AUTO            reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CONST           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMMUTABLE       reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DOT             reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    BOOL            reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SHORT           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    USHORT          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    INT             reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UINT            reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LONG            reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ULONG           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CHAR            reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FLOAT           reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    VOID            reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IDENTIFIER      reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TYPEOF          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RBRACE          reduce using rule 427 (AliasThis -> ALIAS IDENTIFIER THIS SEMICOLON .)


state 574

    (148) DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .

    SEMICOLON       reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    NEW             reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    DELETE          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    ALIAS           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    MIXIN           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    ENUM            reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    IMPORT          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    STATIC          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    PRIVATE         reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    PROTECTED       reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    PUBLIC          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    CLASS           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    UNION           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    EXTERN          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    FINAL           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    AUTO            reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    CONST           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    IMMUTABLE       reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    DOT             reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    BOOL            reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    SHORT           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    USHORT          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    INT             reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    UINT            reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    LONG            reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    ULONG           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    CHAR            reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    FLOAT           reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    VOID            reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    IDENTIFIER      reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    TYPEOF          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)
    RBRACE          reduce using rule 148 (DeclarationBlock -> LBRACE DeclDefs_opt RBRACE .)


state 575

    (33) MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 661


state 576

    (29) ImportBindList -> ImportBind COMMA ImportBindList .

    SEMICOLON       reduce using rule 29 (ImportBindList -> ImportBind COMMA ImportBindList .)


state 577

    (31) ImportBind -> IDENTIFIER ASSIGN IDENTIFIER .

    COMMA           reduce using rule 31 (ImportBind -> IDENTIFIER ASSIGN IDENTIFIER .)
    SEMICOLON       reduce using rule 31 (ImportBind -> IDENTIFIER ASSIGN IDENTIFIER .)


state 578

    (318) StatementList -> Statement StatementList .

    RBRACE          reduce using rule 318 (StatementList -> Statement StatementList .)


state 579

    (400) WithStatement -> WITH LPAREN . Expression RPAREN ScopeStatement
    (401) WithStatement -> WITH LPAREN . Symbol RPAREN ScopeStatement
    (152) Expression -> . CommaExpression
    (492) Symbol -> . SymbolTail
    (493) Symbol -> . DOT SymbolTail
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (494) SymbolTail -> . IDENTIFIER
    (495) SymbolTail -> . IDENTIFIER DOT SymbolTail
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    DOT             shift and go to state 663
    IDENTIFIER      shift and go to state 666
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    SymbolTail                     shift and go to state 662
    Symbol                         shift and go to state 664
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 665
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    TypeidExpression               shift and go to state 220
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 580

    (398) GotoStatement -> GOTO CASE . SEMICOLON
    (399) GotoStatement -> GOTO CASE . Expression SEMICOLON
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    SEMICOLON       shift and go to state 667
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 668
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 581

    (397) GotoStatement -> GOTO DEFAULT . SEMICOLON

    SEMICOLON       shift and go to state 669


state 582

    (396) GotoStatement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 670


state 583

    (314) BlockStatement -> LBRACE M_block_begin StatementList RBRACE . M_block_end
    (316) M_block_end -> .

    ALIAS           reduce using rule 316 (M_block_end -> .)
    ENUM            reduce using rule 316 (M_block_end -> .)
    IMPORT          reduce using rule 316 (M_block_end -> .)
    STATIC          reduce using rule 316 (M_block_end -> .)
    CLASS           reduce using rule 316 (M_block_end -> .)
    UNION           reduce using rule 316 (M_block_end -> .)
    EXTERN          reduce using rule 316 (M_block_end -> .)
    FINAL           reduce using rule 316 (M_block_end -> .)
    AUTO            reduce using rule 316 (M_block_end -> .)
    CONST           reduce using rule 316 (M_block_end -> .)
    IMMUTABLE       reduce using rule 316 (M_block_end -> .)
    DOT             reduce using rule 316 (M_block_end -> .)
    BOOL            reduce using rule 316 (M_block_end -> .)
    SHORT           reduce using rule 316 (M_block_end -> .)
    USHORT          reduce using rule 316 (M_block_end -> .)
    INT             reduce using rule 316 (M_block_end -> .)
    UINT            reduce using rule 316 (M_block_end -> .)
    LONG            reduce using rule 316 (M_block_end -> .)
    ULONG           reduce using rule 316 (M_block_end -> .)
    CHAR            reduce using rule 316 (M_block_end -> .)
    FLOAT           reduce using rule 316 (M_block_end -> .)
    VOID            reduce using rule 316 (M_block_end -> .)
    IDENTIFIER      reduce using rule 316 (M_block_end -> .)
    TYPEOF          reduce using rule 316 (M_block_end -> .)
    $end            reduce using rule 316 (M_block_end -> .)
    SEMICOLON       reduce using rule 316 (M_block_end -> .)
    NEW             reduce using rule 316 (M_block_end -> .)
    DELETE          reduce using rule 316 (M_block_end -> .)
    MIXIN           reduce using rule 316 (M_block_end -> .)
    PRIVATE         reduce using rule 316 (M_block_end -> .)
    PROTECTED       reduce using rule 316 (M_block_end -> .)
    PUBLIC          reduce using rule 316 (M_block_end -> .)
    RBRACE          reduce using rule 316 (M_block_end -> .)
    CASE            reduce using rule 316 (M_block_end -> .)
    DEFAULT         reduce using rule 316 (M_block_end -> .)
    LBRACE          reduce using rule 316 (M_block_end -> .)
    IF              reduce using rule 316 (M_block_end -> .)
    WHILE           reduce using rule 316 (M_block_end -> .)
    DO              reduce using rule 316 (M_block_end -> .)
    FOR             reduce using rule 316 (M_block_end -> .)
    SWITCH          reduce using rule 316 (M_block_end -> .)
    CONTINUE        reduce using rule 316 (M_block_end -> .)
    BREAK           reduce using rule 316 (M_block_end -> .)
    RETURN          reduce using rule 316 (M_block_end -> .)
    GOTO            reduce using rule 316 (M_block_end -> .)
    WITH            reduce using rule 316 (M_block_end -> .)
    LPAREN          reduce using rule 316 (M_block_end -> .)
    FOREACH         reduce using rule 316 (M_block_end -> .)
    FOREACH_REVERSE reduce using rule 316 (M_block_end -> .)
    AMPERSAND       reduce using rule 316 (M_block_end -> .)
    PLUS_PLUS       reduce using rule 316 (M_block_end -> .)
    MINUS_MINUS     reduce using rule 316 (M_block_end -> .)
    TIMES           reduce using rule 316 (M_block_end -> .)
    MINUS           reduce using rule 316 (M_block_end -> .)
    PLUS            reduce using rule 316 (M_block_end -> .)
    EXCLAMATION     reduce using rule 316 (M_block_end -> .)
    TILDE           reduce using rule 316 (M_block_end -> .)
    CAST            reduce using rule 316 (M_block_end -> .)
    THIS            reduce using rule 316 (M_block_end -> .)
    NULL            reduce using rule 316 (M_block_end -> .)
    TRUE            reduce using rule 316 (M_block_end -> .)
    FALSE           reduce using rule 316 (M_block_end -> .)
    DOLLAR          reduce using rule 316 (M_block_end -> .)
    INUMBER         reduce using rule 316 (M_block_end -> .)
    DNUMBER         reduce using rule 316 (M_block_end -> .)
    LIT_CHAR        reduce using rule 316 (M_block_end -> .)
    LIT_STR         reduce using rule 316 (M_block_end -> .)
    LBRACKET        reduce using rule 316 (M_block_end -> .)
    FUNCTION        reduce using rule 316 (M_block_end -> .)
    TYPEID          reduce using rule 316 (M_block_end -> .)
    BODY            reduce using rule 316 (M_block_end -> .)
    ELSE            reduce using rule 316 (M_block_end -> .)
    POWER           reduce using rule 316 (M_block_end -> .)
    DIV             reduce using rule 316 (M_block_end -> .)
    MODULO          reduce using rule 316 (M_block_end -> .)
    LEFT_SHIFT      reduce using rule 316 (M_block_end -> .)
    RIGHT_SHIFT     reduce using rule 316 (M_block_end -> .)
    IS_EQ           reduce using rule 316 (M_block_end -> .)
    NOT_EQ          reduce using rule 316 (M_block_end -> .)
    LESS            reduce using rule 316 (M_block_end -> .)
    GREATER_EQ      reduce using rule 316 (M_block_end -> .)
    GREATER         reduce using rule 316 (M_block_end -> .)
    LESS_EQ         reduce using rule 316 (M_block_end -> .)
    CARET           reduce using rule 316 (M_block_end -> .)
    PIPE            reduce using rule 316 (M_block_end -> .)
    DOUBLE_AMPERSAND reduce using rule 316 (M_block_end -> .)
    QUESTION        reduce using rule 316 (M_block_end -> .)
    DOUBLE_PIPE     reduce using rule 316 (M_block_end -> .)
    ASSIGN          reduce using rule 316 (M_block_end -> .)
    EQ_PLUS         reduce using rule 316 (M_block_end -> .)
    EQ_MINUS        reduce using rule 316 (M_block_end -> .)
    EQ_TIMES        reduce using rule 316 (M_block_end -> .)
    EQ_DIV          reduce using rule 316 (M_block_end -> .)
    EQ_MODULO       reduce using rule 316 (M_block_end -> .)
    EQ_AND_BIT      reduce using rule 316 (M_block_end -> .)
    EQ_OR_BIT       reduce using rule 316 (M_block_end -> .)
    EQ_XOR_BIT      reduce using rule 316 (M_block_end -> .)
    EQ_LEFT         reduce using rule 316 (M_block_end -> .)
    EQ_RIGHT        reduce using rule 316 (M_block_end -> .)
    RBRACKET        reduce using rule 316 (M_block_end -> .)
    RANGE           reduce using rule 316 (M_block_end -> .)
    COMMA           reduce using rule 316 (M_block_end -> .)
    RPAREN          reduce using rule 316 (M_block_end -> .)
    COLON           reduce using rule 316 (M_block_end -> .)

    M_block_end                    shift and go to state 671

state 584

    (321) DeclarationStatement -> StorageClasses Declaration .

    SEMICOLON       reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    CASE            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    DEFAULT         reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    LBRACE          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    IDENTIFIER      reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    IF              reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    WHILE           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    DO              reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    FOR             reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    SWITCH          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    FINAL           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    CONTINUE        reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    BREAK           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    RETURN          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    GOTO            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    WITH            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    MIXIN           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    IMPORT          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    STATIC          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    LPAREN          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    ALIAS           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    ENUM            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    EXTERN          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    AUTO            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    CONST           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    IMMUTABLE       reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    FOREACH         reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    FOREACH_REVERSE reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    CLASS           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    UNION           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    AMPERSAND       reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    PLUS_PLUS       reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    MINUS_MINUS     reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    TIMES           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    MINUS           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    PLUS            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    EXCLAMATION     reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    TILDE           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    CAST            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    DOT             reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    THIS            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    NULL            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    TRUE            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    FALSE           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    DOLLAR          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    INUMBER         reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    DNUMBER         reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    LIT_CHAR        reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    LIT_STR         reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    LBRACKET        reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    FUNCTION        reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    NEW             reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    BOOL            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    SHORT           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    USHORT          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    INT             reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    UINT            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    LONG            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    ULONG           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    CHAR            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    FLOAT           reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    VOID            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    TYPEOF          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    TYPEID          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    BODY            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    RBRACE          reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)
    ELSE            reduce using rule 321 (DeclarationStatement -> StorageClasses Declaration .)


state 585

    (392) Expression_opt -> empty .

    SEMICOLON       reduce using rule 392 (Expression_opt -> empty .)


state 586

    (391) Expression_opt -> Expression .

    SEMICOLON       reduce using rule 391 (Expression_opt -> Expression .)


state 587

    (395) ReturnStatement -> RETURN Expression_opt . SEMICOLON

    SEMICOLON       shift and go to state 672


state 588

    (353) AggregateForeach -> Foreach LPAREN . ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (357) ForeachTypeList -> . ForeachType
    (358) ForeachTypeList -> . ForeachType COMMA ForeachTypeList
    (359) ForeachType -> . ForeachTypeAttributes_opt BasicType Declarator
    (360) ForeachType -> . ForeachTypeAttributes_opt IDENTIFIER
    (361) ForeachType -> . ForeachTypeAttributes_opt ALIAS IDENTIFIER
    (362) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (363) ForeachTypeAttributes_opt -> . empty
    (364) ForeachTypeAttributes -> . ForeachTypeAttribute
    (365) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (496) empty -> .
    (366) ForeachTypeAttribute -> . ENUM

    IDENTIFIER      reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ENUM            shift and go to state 614

    ForeachType                    shift and go to state 673
    ForeachTypeAttributes_opt      shift and go to state 617
    ForeachTypeAttribute           shift and go to state 613
    ForeachTypeAttributes          shift and go to state 618
    ForeachTypeList                shift and go to state 674
    empty                          shift and go to state 675

state 589

    (388) FinalSwitchStatement -> FINAL SWITCH . LPAREN Expression RPAREN ScopeStatement

    LPAREN          shift and go to state 676


state 590

    (340) ForStatement -> FOR LPAREN . Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (345) Initialize -> . SEMICOLON
    (346) Initialize -> . NoScopeNonEmptyStatement
    (278) NoScopeNonEmptyStatement -> . NonEmptyStatement
    (279) NoScopeNonEmptyStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    SEMICOLON       shift and go to state 677
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 609
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    Initialize                     shift and go to state 678
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 610
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    NoScopeNonEmptyStatement       shift and go to state 679
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 591

    (393) ContinueStatement -> CONTINUE IDENTIFIER_opt . SEMICOLON

    SEMICOLON       shift and go to state 680


state 592

    (389) IDENTIFIER_opt -> IDENTIFIER .

    SEMICOLON       reduce using rule 389 (IDENTIFIER_opt -> IDENTIFIER .)


state 593

    (390) IDENTIFIER_opt -> empty .

    SEMICOLON       reduce using rule 390 (IDENTIFIER_opt -> empty .)


state 594

    (402) MixinStatement -> MIXIN LPAREN . AssignExpression RPAREN SEMICOLON
    (271) MixinExpression -> MIXIN LPAREN . AssignExpression RPAREN
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    MulExpression                  shift and go to state 184
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 681

state 595

    (308) ScopeStatement -> BlockStatement .
    (267) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    DEFAULT         reduce using rule 308 (ScopeStatement -> BlockStatement .)
    LBRACE          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 308 (ScopeStatement -> BlockStatement .)
    IF              reduce using rule 308 (ScopeStatement -> BlockStatement .)
    WHILE           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    DO              reduce using rule 308 (ScopeStatement -> BlockStatement .)
    FOR             reduce using rule 308 (ScopeStatement -> BlockStatement .)
    SWITCH          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    FINAL           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    CONTINUE        reduce using rule 308 (ScopeStatement -> BlockStatement .)
    BREAK           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    RETURN          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    GOTO            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    WITH            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    MIXIN           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    IMPORT          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    STATIC          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    ALIAS           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    ENUM            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    EXTERN          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    AUTO            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    CONST           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 308 (ScopeStatement -> BlockStatement .)
    FOREACH         reduce using rule 308 (ScopeStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 308 (ScopeStatement -> BlockStatement .)
    CLASS           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    UNION           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 308 (ScopeStatement -> BlockStatement .)
    TILDE           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    CAST            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    THIS            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    NULL            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    TRUE            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    FALSE           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    DOLLAR          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    INUMBER         reduce using rule 308 (ScopeStatement -> BlockStatement .)
    DNUMBER         reduce using rule 308 (ScopeStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 308 (ScopeStatement -> BlockStatement .)
    LIT_STR         reduce using rule 308 (ScopeStatement -> BlockStatement .)
    LBRACKET        reduce using rule 308 (ScopeStatement -> BlockStatement .)
    FUNCTION        reduce using rule 308 (ScopeStatement -> BlockStatement .)
    NEW             reduce using rule 308 (ScopeStatement -> BlockStatement .)
    BOOL            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    SHORT           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    USHORT          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    INT             reduce using rule 308 (ScopeStatement -> BlockStatement .)
    UINT            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    LONG            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    ULONG           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    CHAR            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    FLOAT           reduce using rule 308 (ScopeStatement -> BlockStatement .)
    VOID            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    TYPEOF          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    TYPEID          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    BODY            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    RBRACE          reduce using rule 308 (ScopeStatement -> BlockStatement .)
    ELSE            reduce using rule 308 (ScopeStatement -> BlockStatement .)
    POWER           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! AMPERSAND       [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! MINUS           [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! PLUS            [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 308 (ScopeStatement -> BlockStatement .) ]


state 596

    (371) ForeachRangeStatement -> RangeForeach ScopeStatement .

    SEMICOLON       reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CASE            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DEFAULT         reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LBRACE          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IDENTIFIER      reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IF              reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    WHILE           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DO              reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FOR             reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    SWITCH          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FINAL           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CONTINUE        reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    BREAK           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    RETURN          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    GOTO            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    WITH            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    MIXIN           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IMPORT          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    STATIC          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LPAREN          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ALIAS           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ENUM            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    EXTERN          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    AUTO            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CONST           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    IMMUTABLE       reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FOREACH         reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FOREACH_REVERSE reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CLASS           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    UNION           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    AMPERSAND       reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    PLUS_PLUS       reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    MINUS_MINUS     reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TIMES           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    MINUS           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    PLUS            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    EXCLAMATION     reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TILDE           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CAST            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DOT             reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    THIS            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    NULL            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TRUE            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FALSE           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DOLLAR          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    INUMBER         reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    DNUMBER         reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LIT_CHAR        reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LIT_STR         reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LBRACKET        reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FUNCTION        reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    NEW             reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    BOOL            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    SHORT           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    USHORT          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    INT             reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    UINT            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    LONG            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ULONG           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    CHAR            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    FLOAT           reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    VOID            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TYPEOF          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    TYPEID          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    BODY            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    RBRACE          reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)
    ELSE            reduce using rule 371 (ForeachRangeStatement -> RangeForeach ScopeStatement .)


state 597

    (307) ScopeStatement -> NonEmptyStatement .

    SEMICOLON       reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    CASE            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    LBRACE          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    IF              reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    WHILE           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    DO              reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    FOR             reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    SWITCH          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    FINAL           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    BREAK           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    RETURN          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    GOTO            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    WITH            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    MIXIN           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    IMPORT          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    STATIC          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    LPAREN          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    ALIAS           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    ENUM            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    EXTERN          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    AUTO            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    CONST           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    FOREACH         reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    CLASS           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    UNION           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    AMPERSAND       reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    TIMES           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    MINUS           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    PLUS            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    TILDE           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    CAST            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    DOT             reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    THIS            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    NULL            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    TRUE            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    FALSE           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    INUMBER         reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    NEW             reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    BOOL            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    SHORT           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    USHORT          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    INT             reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    UINT            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    LONG            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    ULONG           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    CHAR            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    FLOAT           reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    VOID            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    TYPEID          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    BODY            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    RBRACE          reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)
    ELSE            reduce using rule 307 (ScopeStatement -> NonEmptyStatement .)


state 598

    (381) DefaultStatement -> DEFAULT COLON . ScopeStatementList
    (382) ScopeStatementList -> . StatementListNoCaseNoDefault
    (383) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (384) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (385) StatementNoCaseNoDefault -> . SEMICOLON
    (386) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (387) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (309) ScopeBlockStatement -> . BlockStatement
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    SEMICOLON       shift and go to state 684
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 145
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 430
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    ScopeStatementList             shift and go to state 682
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StatementNoCaseNoDefault       shift and go to state 683
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    StatementListNoCaseNoDefault   shift and go to state 685
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    Declaration                    shift and go to state 465
    LIT_STRPlus                    shift and go to state 210
    empty                          shift and go to state 62
    NonEmptyStatementNoCaseNoDefault shift and go to state 686
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    ScopeBlockStatement            shift and go to state 687
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 599

    (333) WhileStatement -> WHILE LPAREN . while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (334) while_M0 -> . empty
    (496) empty -> .

    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)

    while_M0                       shift and go to state 688
    empty                          shift and go to state 689

state 600

    (375) CaseStatement -> CASE ArgumentList . COLON c_m1 ScopeStatementList c_m2

    COLON           shift and go to state 690


state 601

    (378) CaseRangeStatement -> CASE FirstExp . COLON RANGE LastExp COLON ScopeStatementList

    COLON           shift and go to state 691


state 602

    (220) ArgumentList -> AssignExpression .
    (221) ArgumentList -> AssignExpression . COMMA
    (222) ArgumentList -> AssignExpression . COMMA ArgumentList
    (379) FirstExp -> AssignExpression .

  ! reduce/reduce conflict for COLON resolved using rule 220 (ArgumentList -> AssignExpression .)
    COLON           reduce using rule 220 (ArgumentList -> AssignExpression .)
    COMMA           shift and go to state 495

  ! COLON           [ reduce using rule 379 (FirstExp -> AssignExpression .) ]


state 603

    (372) SwitchStatement -> SWITCH LPAREN . Expression RPAREN switch_M1 ScopeStatement switch_M2
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BlockStatement                 shift and go to state 175
    BasicTypeX                     shift and go to state 249
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 692
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 604

    (310) LabeledStatement -> IDENTIFIER COLON .
    (311) LabeledStatement -> IDENTIFIER COLON . NoScopeStatement
    (312) LabeledStatement -> IDENTIFIER COLON . Statement
    (280) NoScopeStatement -> . SEMICOLON
    (281) NoScopeStatement -> . NonEmptyStatement
    (282) NoScopeStatement -> . BlockStatement
    (275) Statement -> . SEMICOLON
    (276) Statement -> . NonEmptyStatement
    (277) Statement -> . ScopeBlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (309) ScopeBlockStatement -> . BlockStatement
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for UNION resolved as shift
  ! reduce/reduce conflict for DOT resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for BOOL resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for SHORT resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for USHORT resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for INT resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for UINT resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for LONG resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for ULONG resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for CHAR resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! reduce/reduce conflict for VOID resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! reduce/reduce conflict for TYPEOF resolved using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
  ! shift/reduce conflict for BODY resolved as shift
    RBRACE          reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
    ELSE            reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .)
    SEMICOLON       shift and go to state 695
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! SEMICOLON       [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CASE            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DEFAULT         [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LBRACE          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IDENTIFIER      [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IF              [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! WHILE           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DO              [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FOR             [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! SWITCH          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FINAL           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CONTINUE        [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! BREAK           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! RETURN          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! GOTO            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! WITH            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! MIXIN           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IMPORT          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! STATIC          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LPAREN          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! ALIAS           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! ENUM            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! EXTERN          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! AUTO            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CONST           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! IMMUTABLE       [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FOREACH         [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FOREACH_REVERSE [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CLASS           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! UNION           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! AMPERSAND       [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! PLUS_PLUS       [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! MINUS_MINUS     [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TIMES           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! MINUS           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! PLUS            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! EXCLAMATION     [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TILDE           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CAST            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DOT             [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! THIS            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! NULL            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TRUE            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FALSE           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DOLLAR          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! INUMBER         [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DNUMBER         [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LIT_CHAR        [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LIT_STR         [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LBRACKET        [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FUNCTION        [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! NEW             [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! BOOL            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! SHORT           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! USHORT          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! INT             [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! UINT            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! LONG            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! ULONG           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! CHAR            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! FLOAT           [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! VOID            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TYPEOF          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! TYPEID          [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! BODY            [ reduce using rule 310 (LabeledStatement -> IDENTIFIER COLON .) ]
  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ reduce using rule 496 (empty -> .) ]
  ! SHORT           [ reduce using rule 496 (empty -> .) ]
  ! USHORT          [ reduce using rule 496 (empty -> .) ]
  ! INT             [ reduce using rule 496 (empty -> .) ]
  ! UINT            [ reduce using rule 496 (empty -> .) ]
  ! LONG            [ reduce using rule 496 (empty -> .) ]
  ! ULONG           [ reduce using rule 496 (empty -> .) ]
  ! CHAR            [ reduce using rule 496 (empty -> .) ]
  ! FLOAT           [ reduce using rule 496 (empty -> .) ]
  ! VOID            [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 496 (empty -> .) ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    Statement                      shift and go to state 693
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 694
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    NoScopeStatement               shift and go to state 696
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 697
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    ScopeBlockStatement            shift and go to state 475
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 605

    (319) ExpressionStatement -> Expression SEMICOLON .

    SEMICOLON       reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    CASE            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    DEFAULT         reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    LBRACE          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    IF              reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    WHILE           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    DO              reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    FOR             reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    SWITCH          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    FINAL           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    CONTINUE        reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    BREAK           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    RETURN          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    GOTO            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    WITH            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    MIXIN           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    IMPORT          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    STATIC          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    LPAREN          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    ALIAS           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    ENUM            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    EXTERN          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    AUTO            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    CONST           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    IMMUTABLE       reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    FOREACH         reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    CLASS           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    UNION           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    AMPERSAND       reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    TIMES           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    MINUS           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    PLUS            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    EXCLAMATION     reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    TILDE           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    CAST            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    DOT             reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    THIS            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    NULL            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    TRUE            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    FALSE           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    DOLLAR          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    INUMBER         reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    DNUMBER         reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    LIT_CHAR        reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    LIT_STR         reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    LBRACKET        reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    FUNCTION        reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    NEW             reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    BOOL            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    SHORT           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    USHORT          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    INT             reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    UINT            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    LONG            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    ULONG           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    CHAR            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    FLOAT           reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    VOID            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    TYPEOF          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    TYPEID          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    BODY            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    RBRACE          reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)
    ELSE            reduce using rule 319 (ExpressionStatement -> Expression SEMICOLON .)


state 606

    (394) BreakStatement -> BREAK IDENTIFIER_opt . SEMICOLON

    SEMICOLON       shift and go to state 698


state 607

    (337) DoStatement -> DO Dowhile_M1 . ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    ScopeStatement                 shift and go to state 699
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 608

    (338) Dowhile_M1 -> empty .

    LBRACE          reduce using rule 338 (Dowhile_M1 -> empty .)
    CASE            reduce using rule 338 (Dowhile_M1 -> empty .)
    DEFAULT         reduce using rule 338 (Dowhile_M1 -> empty .)
    IDENTIFIER      reduce using rule 338 (Dowhile_M1 -> empty .)
    IF              reduce using rule 338 (Dowhile_M1 -> empty .)
    WHILE           reduce using rule 338 (Dowhile_M1 -> empty .)
    DO              reduce using rule 338 (Dowhile_M1 -> empty .)
    FOR             reduce using rule 338 (Dowhile_M1 -> empty .)
    SWITCH          reduce using rule 338 (Dowhile_M1 -> empty .)
    FINAL           reduce using rule 338 (Dowhile_M1 -> empty .)
    CONTINUE        reduce using rule 338 (Dowhile_M1 -> empty .)
    BREAK           reduce using rule 338 (Dowhile_M1 -> empty .)
    RETURN          reduce using rule 338 (Dowhile_M1 -> empty .)
    GOTO            reduce using rule 338 (Dowhile_M1 -> empty .)
    WITH            reduce using rule 338 (Dowhile_M1 -> empty .)
    MIXIN           reduce using rule 338 (Dowhile_M1 -> empty .)
    IMPORT          reduce using rule 338 (Dowhile_M1 -> empty .)
    STATIC          reduce using rule 338 (Dowhile_M1 -> empty .)
    LPAREN          reduce using rule 338 (Dowhile_M1 -> empty .)
    ALIAS           reduce using rule 338 (Dowhile_M1 -> empty .)
    ENUM            reduce using rule 338 (Dowhile_M1 -> empty .)
    EXTERN          reduce using rule 338 (Dowhile_M1 -> empty .)
    AUTO            reduce using rule 338 (Dowhile_M1 -> empty .)
    CONST           reduce using rule 338 (Dowhile_M1 -> empty .)
    IMMUTABLE       reduce using rule 338 (Dowhile_M1 -> empty .)
    FOREACH         reduce using rule 338 (Dowhile_M1 -> empty .)
    FOREACH_REVERSE reduce using rule 338 (Dowhile_M1 -> empty .)
    CLASS           reduce using rule 338 (Dowhile_M1 -> empty .)
    UNION           reduce using rule 338 (Dowhile_M1 -> empty .)
    AMPERSAND       reduce using rule 338 (Dowhile_M1 -> empty .)
    PLUS_PLUS       reduce using rule 338 (Dowhile_M1 -> empty .)
    MINUS_MINUS     reduce using rule 338 (Dowhile_M1 -> empty .)
    TIMES           reduce using rule 338 (Dowhile_M1 -> empty .)
    MINUS           reduce using rule 338 (Dowhile_M1 -> empty .)
    PLUS            reduce using rule 338 (Dowhile_M1 -> empty .)
    EXCLAMATION     reduce using rule 338 (Dowhile_M1 -> empty .)
    TILDE           reduce using rule 338 (Dowhile_M1 -> empty .)
    CAST            reduce using rule 338 (Dowhile_M1 -> empty .)
    DOT             reduce using rule 338 (Dowhile_M1 -> empty .)
    THIS            reduce using rule 338 (Dowhile_M1 -> empty .)
    NULL            reduce using rule 338 (Dowhile_M1 -> empty .)
    TRUE            reduce using rule 338 (Dowhile_M1 -> empty .)
    FALSE           reduce using rule 338 (Dowhile_M1 -> empty .)
    DOLLAR          reduce using rule 338 (Dowhile_M1 -> empty .)
    INUMBER         reduce using rule 338 (Dowhile_M1 -> empty .)
    DNUMBER         reduce using rule 338 (Dowhile_M1 -> empty .)
    LIT_CHAR        reduce using rule 338 (Dowhile_M1 -> empty .)
    LIT_STR         reduce using rule 338 (Dowhile_M1 -> empty .)
    LBRACKET        reduce using rule 338 (Dowhile_M1 -> empty .)
    FUNCTION        reduce using rule 338 (Dowhile_M1 -> empty .)
    NEW             reduce using rule 338 (Dowhile_M1 -> empty .)
    BOOL            reduce using rule 338 (Dowhile_M1 -> empty .)
    SHORT           reduce using rule 338 (Dowhile_M1 -> empty .)
    USHORT          reduce using rule 338 (Dowhile_M1 -> empty .)
    INT             reduce using rule 338 (Dowhile_M1 -> empty .)
    UINT            reduce using rule 338 (Dowhile_M1 -> empty .)
    LONG            reduce using rule 338 (Dowhile_M1 -> empty .)
    ULONG           reduce using rule 338 (Dowhile_M1 -> empty .)
    CHAR            reduce using rule 338 (Dowhile_M1 -> empty .)
    FLOAT           reduce using rule 338 (Dowhile_M1 -> empty .)
    VOID            reduce using rule 338 (Dowhile_M1 -> empty .)
    TYPEOF          reduce using rule 338 (Dowhile_M1 -> empty .)
    TYPEID          reduce using rule 338 (Dowhile_M1 -> empty .)
    BODY            reduce using rule 338 (Dowhile_M1 -> empty .)


state 609

    (279) NoScopeNonEmptyStatement -> BlockStatement .
    (267) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    DEFAULT         reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    LBRACE          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    IF              reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    WHILE           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    DO              reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    FOR             reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    SWITCH          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    FINAL           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    CONTINUE        reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    BREAK           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    RETURN          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    GOTO            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    WITH            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    MIXIN           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    IMPORT          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    STATIC          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    ALIAS           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    ENUM            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    EXTERN          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    AUTO            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    CONST           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    FOREACH         reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    CLASS           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    UNION           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    TILDE           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    CAST            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    THIS            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    NULL            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    TRUE            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    FALSE           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    DOLLAR          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    INUMBER         reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    DNUMBER         reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    LIT_STR         reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    LBRACKET        reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    FUNCTION        reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    NEW             reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    BOOL            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    SHORT           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    USHORT          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    INT             reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    UINT            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    LONG            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    ULONG           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    CHAR            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    FLOAT           reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    VOID            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    TYPEOF          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    TYPEID          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    BODY            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    RBRACE          reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    ELSE            reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .)
    POWER           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! AMPERSAND       [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! MINUS           [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! PLUS            [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 279 (NoScopeNonEmptyStatement -> BlockStatement .) ]


state 610

    (278) NoScopeNonEmptyStatement -> NonEmptyStatement .

    SEMICOLON       reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CASE            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LBRACE          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IF              reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    WHILE           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DO              reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FOR             reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    SWITCH          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FINAL           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    BREAK           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    RETURN          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    GOTO            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    WITH            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    MIXIN           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IMPORT          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    STATIC          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LPAREN          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ALIAS           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ENUM            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    EXTERN          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    AUTO            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CONST           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FOREACH         reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CLASS           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    UNION           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    AMPERSAND       reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TIMES           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    MINUS           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    PLUS            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TILDE           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CAST            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DOT             reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    THIS            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    NULL            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TRUE            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FALSE           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    INUMBER         reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    NEW             reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    BOOL            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    SHORT           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    USHORT          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    INT             reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    UINT            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    LONG            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ULONG           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    CHAR            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    FLOAT           reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    VOID            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    TYPEID          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    BODY            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    RBRACE          reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)
    ELSE            reduce using rule 278 (NoScopeNonEmptyStatement -> NonEmptyStatement .)


state 611

    (354) ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .

    SEMICOLON       reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CASE            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DEFAULT         reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LBRACE          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IDENTIFIER      reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IF              reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    WHILE           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DO              reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FOR             reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    SWITCH          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FINAL           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CONTINUE        reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    BREAK           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    RETURN          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    GOTO            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    WITH            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    MIXIN           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IMPORT          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    STATIC          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LPAREN          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ALIAS           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ENUM            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    EXTERN          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    AUTO            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CONST           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    IMMUTABLE       reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FOREACH         reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CLASS           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    UNION           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    AMPERSAND       reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    PLUS_PLUS       reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    MINUS_MINUS     reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TIMES           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    MINUS           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    PLUS            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    EXCLAMATION     reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TILDE           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CAST            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DOT             reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    THIS            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    NULL            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TRUE            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FALSE           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DOLLAR          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    INUMBER         reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    DNUMBER         reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LIT_CHAR        reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LIT_STR         reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LBRACKET        reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FUNCTION        reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    NEW             reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    BOOL            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    SHORT           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    USHORT          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    INT             reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    UINT            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    LONG            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ULONG           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    CHAR            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    FLOAT           reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    VOID            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TYPEOF          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    TYPEID          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    BODY            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    RBRACE          reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)
    ELSE            reduce using rule 354 (ForeachStatement -> AggregateForeach NoScopeNonEmptyStatement .)


state 612

    (313) BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .

    ALIAS           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    ENUM            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    IMPORT          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    STATIC          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    CLASS           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    UNION           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EXTERN          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    FINAL           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    AUTO            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    CONST           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    IMMUTABLE       reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DOT             reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    BOOL            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    SHORT           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    USHORT          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    INT             reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    UINT            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LONG            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    ULONG           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    CHAR            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    FLOAT           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    VOID            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    IDENTIFIER      reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    TYPEOF          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    $end            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    SEMICOLON       reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    NEW             reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DELETE          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    MIXIN           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    PRIVATE         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    PROTECTED       reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    PUBLIC          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    RBRACE          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    CASE            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DEFAULT         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LBRACE          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    IF              reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    WHILE           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DO              reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    FOR             reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    SWITCH          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    CONTINUE        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    BREAK           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    RETURN          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    GOTO            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    WITH            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LPAREN          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    FOREACH         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    FOREACH_REVERSE reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    AMPERSAND       reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    PLUS_PLUS       reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    MINUS_MINUS     reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    TIMES           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    MINUS           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    PLUS            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EXCLAMATION     reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    TILDE           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    CAST            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    THIS            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    NULL            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    TRUE            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    FALSE           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DOLLAR          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    INUMBER         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DNUMBER         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LIT_CHAR        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LIT_STR         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LBRACKET        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    FUNCTION        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    TYPEID          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    BODY            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    ELSE            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    POWER           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DIV             reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    MODULO          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LEFT_SHIFT      reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    RIGHT_SHIFT     reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    CARET           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    PIPE            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DOUBLE_AMPERSAND reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    QUESTION        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    DOUBLE_PIPE     reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    ASSIGN          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_PLUS         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_MINUS        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_TIMES        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_DIV          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_MODULO       reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_AND_BIT      reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_OR_BIT       reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_XOR_BIT      reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_LEFT         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    EQ_RIGHT        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    RBRACKET        reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    RANGE           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    COMMA           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    RPAREN          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    COLON           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    IS_EQ           reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    NOT_EQ          reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LESS            reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    GREATER_EQ      reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    GREATER         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)
    LESS_EQ         reduce using rule 313 (BlockStatement -> LBRACE M_block_begin RBRACE M_block_end .)


state 613

    (364) ForeachTypeAttributes -> ForeachTypeAttribute .
    (365) ForeachTypeAttributes -> ForeachTypeAttribute . ForeachTypeAttributes_opt
    (362) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (363) ForeachTypeAttributes_opt -> . empty
    (364) ForeachTypeAttributes -> . ForeachTypeAttribute
    (365) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (496) empty -> .
    (366) ForeachTypeAttribute -> . ENUM

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for ALIAS resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for DOT resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for BOOL resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for SHORT resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for USHORT resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for INT resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for UINT resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for LONG resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for ULONG resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for CHAR resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for FLOAT resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for VOID resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    IDENTIFIER      reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    ALIAS           reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    DOT             reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    BOOL            reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    SHORT           reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    USHORT          reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    INT             reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    UINT            reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    LONG            reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    ULONG           reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    CHAR            reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    FLOAT           reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    VOID            reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    TYPEOF          reduce using rule 364 (ForeachTypeAttributes -> ForeachTypeAttribute .)
    ENUM            shift and go to state 614

  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! ALIAS           [ reduce using rule 496 (empty -> .) ]
  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ reduce using rule 496 (empty -> .) ]
  ! SHORT           [ reduce using rule 496 (empty -> .) ]
  ! USHORT          [ reduce using rule 496 (empty -> .) ]
  ! INT             [ reduce using rule 496 (empty -> .) ]
  ! UINT            [ reduce using rule 496 (empty -> .) ]
  ! LONG            [ reduce using rule 496 (empty -> .) ]
  ! ULONG           [ reduce using rule 496 (empty -> .) ]
  ! CHAR            [ reduce using rule 496 (empty -> .) ]
  ! FLOAT           [ reduce using rule 496 (empty -> .) ]
  ! VOID            [ reduce using rule 496 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 496 (empty -> .) ]

    ForeachTypeAttribute           shift and go to state 613
    ForeachTypeAttributes          shift and go to state 618
    empty                          shift and go to state 675
    ForeachTypeAttributes_opt      shift and go to state 700

state 614

    (366) ForeachTypeAttribute -> ENUM .

    ENUM            reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    IDENTIFIER      reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    ALIAS           reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    DOT             reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    BOOL            reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    SHORT           reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    USHORT          reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    INT             reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    UINT            reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    LONG            reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    ULONG           reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    CHAR            reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    FLOAT           reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    VOID            reduce using rule 366 (ForeachTypeAttribute -> ENUM .)
    TYPEOF          reduce using rule 366 (ForeachTypeAttribute -> ENUM .)


state 615

    (368) RangeForeach -> LPAREN ForeachType . SEMICOLON LwrExpression RANGE UprExpression RPAREN

    SEMICOLON       shift and go to state 701


state 616

    (469) ParameterList_opt -> empty .
    (363) ForeachTypeAttributes_opt -> empty .
    (481) InOut_opt -> empty .

  ! reduce/reduce conflict for DOT resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for VOID resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 363 (ForeachTypeAttributes_opt -> empty .)
    RPAREN          reduce using rule 469 (ParameterList_opt -> empty .)
    IDENTIFIER      reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    ALIAS           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    DOT             reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    BOOL            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    SHORT           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    USHORT          reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    INT             reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    UINT            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    LONG            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    ULONG           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    CHAR            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    FLOAT           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    VOID            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    TYPEOF          reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)

  ! DOT             [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! BOOL            [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! SHORT           [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! USHORT          [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! INT             [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! UINT            [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! LONG            [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! ULONG           [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! CHAR            [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! FLOAT           [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! VOID            [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 481 (InOut_opt -> empty .) ]
  ! TYPEOF          [ reduce using rule 481 (InOut_opt -> empty .) ]


state 617

    (359) ForeachType -> ForeachTypeAttributes_opt . BasicType Declarator
    (360) ForeachType -> ForeachTypeAttributes_opt . IDENTIFIER
    (361) ForeachType -> ForeachTypeAttributes_opt . ALIAS IDENTIFIER
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    IDENTIFIER      shift and go to state 703
    ALIAS           shift and go to state 704
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 702
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34

state 618

    (362) ForeachTypeAttributes_opt -> ForeachTypeAttributes .

    IDENTIFIER      reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    ALIAS           reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    DOT             reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    BOOL            reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    SHORT           reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    USHORT          reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    INT             reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    UINT            reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    LONG            reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    ULONG           reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    CHAR            reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    FLOAT           reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    VOID            reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)
    TYPEOF          reduce using rule 362 (ForeachTypeAttributes_opt -> ForeachTypeAttributes .)


state 619

    (322) IfStatement -> IF LPAREN . IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> IF LPAREN . IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (328) IfCondition -> . Expression
    (329) IfCondition -> . AUTO IDENTIFIER ASSIGN Expression
    (330) IfCondition -> . BasicType Declarator ASSIGN Expression
    (152) Expression -> . CommaExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AUTO            shift and go to state 708
    DOT             shift and go to state 203
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 214
    TYPEOF          shift and go to state 47
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 189
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 706
    BasicTypeX                     shift and go to state 222
    BlockStatement                 shift and go to state 175
    IfCondition                    shift and go to state 705
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 196
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 707
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    EqualExpression                shift and go to state 179
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 620

    (60) VarDeclarator -> BasicType2_opt IDENTIFIER .
    (61) AltDeclarator -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (69) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (72) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    SEMICOLON       reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    COMMA           reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    ASSIGN          reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    ELLIPSIS        reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    RPAREN          reduce using rule 60 (VarDeclarator -> BasicType2_opt IDENTIFIER .)
    LBRACKET        shift and go to state 389

    AltDeclaratorSuffix            shift and go to state 390
    AltDeclaratorSuffixes          shift and go to state 391

state 621

    (472) Parameter -> InOut_opt BasicType Declarator ASSIGN . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 709

state 622

    (471) Parameter -> InOut_opt BasicType Declarator ELLIPSIS .

    COMMA           reduce using rule 471 (Parameter -> InOut_opt BasicType Declarator ELLIPSIS .)
    RPAREN          reduce using rule 471 (Parameter -> InOut_opt BasicType Declarator ELLIPSIS .)


state 623

    (122) ArrayMemberInitializations -> ArrayMemberInitialization COMMA .
    (123) ArrayMemberInitializations -> ArrayMemberInitialization COMMA . ArrayMemberInitializations
    (121) ArrayMemberInitializations -> . ArrayMemberInitialization
    (122) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA
    (123) ArrayMemberInitializations -> . ArrayMemberInitialization COMMA ArrayMemberInitializations
    (126) ArrayMemberInitialization -> . NonVoidInitializer
    (127) ArrayMemberInitialization -> . AssignExpression COLON NonVoidInitializer
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RBRACKET        reduce using rule 122 (ArrayMemberInitializations -> ArrayMemberInitialization COMMA .)
    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    ArrayMemberInitialization      shift and go to state 489
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    ArrayMemberInitializations     shift and go to state 710
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    NonVoidInitializer             shift and go to state 488
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    ArrayInitializer               shift and go to state 309
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 711

state 624

    (120) ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .

    COMMA           reduce using rule 120 (ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .)
    SEMICOLON       reduce using rule 120 (ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .)
    RBRACKET        reduce using rule 120 (ArrayInitializer -> LBRACKET ArrayMemberInitializations_opt RBRACKET .)


state 625

    (127) ArrayMemberInitialization -> AssignExpression COLON . NonVoidInitializer
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    NonVoidInitializer             shift and go to state 712
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    ArrayInitializer               shift and go to state 309
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 313

state 626

    (222) ArgumentList -> AssignExpression COMMA ArgumentList .

    RPAREN          reduce using rule 222 (ArgumentList -> AssignExpression COMMA ArgumentList .)
    COLON           reduce using rule 222 (ArgumentList -> AssignExpression COMMA ArgumentList .)
    RBRACKET        reduce using rule 222 (ArgumentList -> AssignExpression COMMA ArgumentList .)


state 627

    (168) ConditionalExpression -> OrOrExpression QUESTION Expression COLON . ConditionalExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 713
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185

state 628

    (272) ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .

    POWER           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DOT             reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LPAREN          reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    TIMES           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DIV             reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    MODULO          reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    PLUS            reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    MINUS           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    IS_EQ           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    NOT_EQ          reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LESS            reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    GREATER_EQ      reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    GREATER         reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    LESS_EQ         reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    AMPERSAND       reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    CARET           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    PIPE            reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    QUESTION        reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    ASSIGN          reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_PLUS         reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_MINUS        reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_TIMES        reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_DIV          reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_MODULO       reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_LEFT         reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RBRACKET        reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RANGE           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    COMMA           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RPAREN          reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    SEMICOLON       reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    RBRACE          reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)
    COLON           reduce using rule 272 (ImportExpression -> IMPORT LPAREN AssignExpression RPAREN .)


state 629

    (260) FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .

    POWER           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DOT             reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    PLUS_PLUS       reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    MINUS_MINUS     reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LPAREN          reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    TIMES           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DIV             reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    MODULO          reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    PLUS            reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    MINUS           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LEFT_SHIFT      reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RIGHT_SHIFT     reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    IS_EQ           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    NOT_EQ          reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LESS            reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    GREATER_EQ      reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    GREATER         reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    LESS_EQ         reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    AMPERSAND       reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    CARET           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    PIPE            reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DOUBLE_AMPERSAND reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    QUESTION        reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    DOUBLE_PIPE     reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    ASSIGN          reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_PLUS         reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_MINUS        reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_TIMES        reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_DIV          reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_MODULO       reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_AND_BIT      reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_OR_BIT       reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_XOR_BIT      reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_LEFT         reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    EQ_RIGHT        reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    COMMA           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    SEMICOLON       reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    COLON           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RBRACKET        reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RANGE           reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RPAREN          reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)
    RBRACE          reduce using rule 260 (FunctionLiteral -> FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody .)


state 630

    (273) TypeidExpression -> TYPEID LPAREN Type RPAREN .

    POWER           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DOT             reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    PLUS_PLUS       reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    MINUS_MINUS     reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LPAREN          reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    TIMES           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DIV             reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    MODULO          reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    PLUS            reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    MINUS           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LEFT_SHIFT      reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RIGHT_SHIFT     reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    IS_EQ           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    NOT_EQ          reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LESS            reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    GREATER_EQ      reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    GREATER         reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    LESS_EQ         reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    AMPERSAND       reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    CARET           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    PIPE            reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    QUESTION        reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    DOUBLE_PIPE     reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    ASSIGN          reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_PLUS         reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_MINUS        reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_TIMES        reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_DIV          reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_MODULO       reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_AND_BIT      reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_OR_BIT       reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_XOR_BIT      reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_LEFT         reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    EQ_RIGHT        reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RBRACKET        reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RANGE           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    COMMA           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RPAREN          reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    SEMICOLON       reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    RBRACE          reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)
    COLON           reduce using rule 273 (TypeidExpression -> TYPEID LPAREN Type RPAREN .)


state 631

    (274) TypeidExpression -> TYPEID LPAREN Expression RPAREN .

    POWER           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DOT             reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    PLUS_PLUS       reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    MINUS_MINUS     reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LPAREN          reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    TIMES           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DIV             reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    MODULO          reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    PLUS            reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    MINUS           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LEFT_SHIFT      reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    IS_EQ           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    NOT_EQ          reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LESS            reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    GREATER_EQ      reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    GREATER         reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    LESS_EQ         reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    AMPERSAND       reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    CARET           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    PIPE            reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    QUESTION        reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    ASSIGN          reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_PLUS         reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_MINUS        reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_TIMES        reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_DIV          reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_MODULO       reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_AND_BIT      reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_OR_BIT       reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_LEFT         reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    EQ_RIGHT        reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RBRACKET        reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RANGE           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    COMMA           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RPAREN          reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    SEMICOLON       reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    RBRACE          reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)
    COLON           reduce using rule 274 (TypeidExpression -> TYPEID LPAREN Expression RPAREN .)


state 632

    (232) PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .

    POWER           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DOT             reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    PLUS_PLUS       reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    MINUS_MINUS     reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LPAREN          reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    TIMES           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DIV             reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    MODULO          reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    PLUS            reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    MINUS           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LEFT_SHIFT      reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RIGHT_SHIFT     reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    IS_EQ           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    NOT_EQ          reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LESS            reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    GREATER_EQ      reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    GREATER         reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    LESS_EQ         reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    AMPERSAND       reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    CARET           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    PIPE            reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    QUESTION        reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    DOUBLE_PIPE     reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    ASSIGN          reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_PLUS         reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_MINUS        reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_TIMES        reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_DIV          reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_MODULO       reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_AND_BIT      reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_OR_BIT       reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_XOR_BIT      reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_LEFT         reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    EQ_RIGHT        reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    COMMA           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RPAREN          reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    SEMICOLON       reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RBRACKET        reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    COLON           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RANGE           reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)
    RBRACE          reduce using rule 232 (PostfixExpression -> PostfixExpression LPAREN ArgumentList RPAREN .)


state 633

    (210) NewExpression -> NEW AllocatorArguments_opt . Type
    (212) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> NEW AllocatorArguments_opt . Type LPAREN ArgumentList_opt RPAREN
    (428) NewAnonClassExpression -> NEW AllocatorArguments_opt . CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (76) Type -> . BasicType BasicType2_opt
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    CLASS           shift and go to state 534
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    BasicType                      shift and go to state 102
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    Type                           shift and go to state 714

state 634

    (212) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET . AssignExpression RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    Parameters                     shift and go to state 186
    CastExpression                 shift and go to state 218
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 715

state 635

    (213) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN . ArgumentList_opt RPAREN
    (218) ArgumentList_opt -> . ArgumentList
    (219) ArgumentList_opt -> . empty
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (496) empty -> .
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RPAREN          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    CastExpression                 shift and go to state 218
    ArgumentList                   shift and go to state 314
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 316
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    PrimaryExpression              shift and go to state 204
    MulExpression                  shift and go to state 184
    ArgumentList_opt               shift and go to state 716
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 636

    (430) ClassArguments_opt -> ClassArguments .

    DOT             reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    BOOL            reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    SHORT           reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    USHORT          reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    INT             reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    UINT            reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    LONG            reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    ULONG           reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    CHAR            reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    FLOAT           reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    VOID            reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    IDENTIFIER      reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    TYPEOF          reduce using rule 430 (ClassArguments_opt -> ClassArguments .)
    LBRACE          reduce using rule 430 (ClassArguments_opt -> ClassArguments .)


state 637

    (428) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt . SuperClass_opt Interfaces_opt AggregateBody
    (432) SuperClass_opt -> . SuperClass
    (433) SuperClass_opt -> . empty
    (419) SuperClass -> . BasicType
    (496) empty -> .
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    DOT             shift and go to state 35

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! IDENTIFIER      [ shift and go to state 40 ]
  ! TYPEOF          [ shift and go to state 47 ]

    BasicType                      shift and go to state 718
    BasicTypeX                     shift and go to state 39
    SuperClass                     shift and go to state 717
    IdentifierList                 shift and go to state 34
    SuperClass_opt                 shift and go to state 720
    empty                          shift and go to state 719
    Typeof                         shift and go to state 43

state 638

    (429) ClassArguments -> LPAREN . ArgumentList_opt RPAREN
    (218) ArgumentList_opt -> . ArgumentList
    (219) ArgumentList_opt -> . empty
    (220) ArgumentList -> . AssignExpression
    (221) ArgumentList -> . AssignExpression COMMA
    (222) ArgumentList -> . AssignExpression COMMA ArgumentList
    (496) empty -> .
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RPAREN          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ArgumentList                   shift and go to state 314
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 316
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ArgumentList_opt               shift and go to state 721
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 317

state 639

    (431) ClassArguments_opt -> empty .

    DOT             reduce using rule 431 (ClassArguments_opt -> empty .)
    BOOL            reduce using rule 431 (ClassArguments_opt -> empty .)
    SHORT           reduce using rule 431 (ClassArguments_opt -> empty .)
    USHORT          reduce using rule 431 (ClassArguments_opt -> empty .)
    INT             reduce using rule 431 (ClassArguments_opt -> empty .)
    UINT            reduce using rule 431 (ClassArguments_opt -> empty .)
    LONG            reduce using rule 431 (ClassArguments_opt -> empty .)
    ULONG           reduce using rule 431 (ClassArguments_opt -> empty .)
    CHAR            reduce using rule 431 (ClassArguments_opt -> empty .)
    FLOAT           reduce using rule 431 (ClassArguments_opt -> empty .)
    VOID            reduce using rule 431 (ClassArguments_opt -> empty .)
    IDENTIFIER      reduce using rule 431 (ClassArguments_opt -> empty .)
    TYPEOF          reduce using rule 431 (ClassArguments_opt -> empty .)
    LBRACE          reduce using rule 431 (ClassArguments_opt -> empty .)


state 640

    (215) AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .

    CLASS           reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    BOOL            reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    SHORT           reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    USHORT          reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    INT             reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    UINT            reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    LONG            reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    ULONG           reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    CHAR            reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    FLOAT           reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    VOID            reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    IDENTIFIER      reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)
    TYPEOF          reduce using rule 215 (AllocatorArguments -> LPAREN ArgumentList_opt RPAREN .)


state 641

    (233) PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN . JmpMark
    (234) JmpMark -> . empty
    (496) empty -> .

    POWER           reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    DIV             reduce using rule 496 (empty -> .)
    MODULO          reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    LEFT_SHIFT      reduce using rule 496 (empty -> .)
    RIGHT_SHIFT     reduce using rule 496 (empty -> .)
    IS_EQ           reduce using rule 496 (empty -> .)
    NOT_EQ          reduce using rule 496 (empty -> .)
    LESS            reduce using rule 496 (empty -> .)
    GREATER_EQ      reduce using rule 496 (empty -> .)
    GREATER         reduce using rule 496 (empty -> .)
    LESS_EQ         reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    CARET           reduce using rule 496 (empty -> .)
    PIPE            reduce using rule 496 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 496 (empty -> .)
    QUESTION        reduce using rule 496 (empty -> .)
    DOUBLE_PIPE     reduce using rule 496 (empty -> .)
    ASSIGN          reduce using rule 496 (empty -> .)
    EQ_PLUS         reduce using rule 496 (empty -> .)
    EQ_MINUS        reduce using rule 496 (empty -> .)
    EQ_TIMES        reduce using rule 496 (empty -> .)
    EQ_DIV          reduce using rule 496 (empty -> .)
    EQ_MODULO       reduce using rule 496 (empty -> .)
    EQ_AND_BIT      reduce using rule 496 (empty -> .)
    EQ_OR_BIT       reduce using rule 496 (empty -> .)
    EQ_XOR_BIT      reduce using rule 496 (empty -> .)
    EQ_LEFT         reduce using rule 496 (empty -> .)
    EQ_RIGHT        reduce using rule 496 (empty -> .)
    RBRACKET        reduce using rule 496 (empty -> .)
    RANGE           reduce using rule 496 (empty -> .)
    COMMA           reduce using rule 496 (empty -> .)
    RPAREN          reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    COLON           reduce using rule 496 (empty -> .)

    JmpMark                        shift and go to state 722
    empty                          shift and go to state 723

state 642

    (224) CastExpression -> CAST LPAREN RPAREN UnaryExpression .

    TIMES           reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    DIV             reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    MODULO          reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    PLUS            reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    MINUS           reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    LEFT_SHIFT      reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    IS_EQ           reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    NOT_EQ          reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    LESS            reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    GREATER_EQ      reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    GREATER         reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    LESS_EQ         reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    AMPERSAND       reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    CARET           reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    PIPE            reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    QUESTION        reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    ASSIGN          reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_PLUS         reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_MINUS        reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_TIMES        reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_DIV          reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_MODULO       reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_AND_BIT      reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_OR_BIT       reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_LEFT         reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    EQ_RIGHT        reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    COMMA           reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    SEMICOLON       reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    RBRACKET        reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    RANGE           reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    RPAREN          reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    RBRACE          reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)
    COLON           reduce using rule 224 (CastExpression -> CAST LPAREN RPAREN UnaryExpression .)


state 643

    (223) CastExpression -> CAST LPAREN Type RPAREN . UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 724
    NewExpressionWithArgs          shift and go to state 216
    ParameterMemberAttributes      shift and go to state 187
    NewAnonClassExpression         shift and go to state 185

state 644

    (258) ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .

    POWER           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    DOT             reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    PLUS_PLUS       reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    MINUS_MINUS     reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    LPAREN          reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    TIMES           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    DIV             reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    MODULO          reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    PLUS            reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    MINUS           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    LEFT_SHIFT      reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    RIGHT_SHIFT     reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    IS_EQ           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    NOT_EQ          reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    LESS            reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    GREATER_EQ      reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    GREATER         reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    LESS_EQ         reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    AMPERSAND       reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    CARET           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    PIPE            reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    QUESTION        reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    DOUBLE_PIPE     reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    ASSIGN          reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_PLUS         reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_MINUS        reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_TIMES        reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_DIV          reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_MODULO       reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_AND_BIT      reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_OR_BIT       reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_XOR_BIT      reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_LEFT         reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    EQ_RIGHT        reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    RBRACKET        reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    RPAREN          reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    RANGE           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    COMMA           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    SEMICOLON       reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    RBRACE          reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)
    COLON           reduce using rule 258 (ArrayLiteral -> IDENTIFIER LBRACKET INUMBER RBRACKET .)


state 645

    (105) IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET . DOT IdentifierList
    (259) ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .

    DOT             shift and go to state 564
    POWER           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    LPAREN          reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    TIMES           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    DIV             reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    MODULO          reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    PLUS            reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    MINUS           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    IS_EQ           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    NOT_EQ          reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    LESS            reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    GREATER         reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    LESS_EQ         reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    AMPERSAND       reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    CARET           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    PIPE            reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    QUESTION        reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_DIV          reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    RBRACKET        reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    RPAREN          reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    RANGE           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    COMMA           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    RBRACE          reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)
    COLON           reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .)

  ! DOT             [ reduce using rule 259 (ArrayLiteral -> IDENTIFIER LBRACKET AssignExpression RBRACKET .) ]


state 646

    (253) PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .

    POWER           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LPAREN          reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    TIMES           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DIV             reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    MODULO          reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    PLUS            reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    MINUS           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    IS_EQ           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    NOT_EQ          reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LESS            reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    GREATER_EQ      reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    GREATER         reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    LESS_EQ         reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    AMPERSAND       reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    CARET           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    PIPE            reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    QUESTION        reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    ASSIGN          reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_PLUS         reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_MINUS        reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_TIMES        reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_DIV          reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_MODULO       reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_LEFT         reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RBRACKET        reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RANGE           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    COMMA           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RPAREN          reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    SEMICOLON       reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    RBRACE          reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)
    COLON           reduce using rule 253 (PrimaryExpression -> BasicTypeX LPAREN ArgumentList_opt RPAREN .)


state 647

    (271) MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .

    POWER           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOT             reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LPAREN          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    TIMES           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DIV             reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MODULO          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS            reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    IS_EQ           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    NOT_EQ          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS            reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER_EQ      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS_EQ         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    AMPERSAND       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    CARET           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PIPE            reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    QUESTION        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    ASSIGN          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_PLUS         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MINUS        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_TIMES        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_DIV          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MODULO       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_LEFT         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RBRACKET        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RANGE           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    COMMA           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RPAREN          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    SEMICOLON       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RBRACE          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    COLON           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)


state 648

    (206) UnaryExpression -> LPAREN Type RPAREN DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 725


state 649

    (100) BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .

    TIMES           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LBRACKET        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    FUNCTION        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LPAREN          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    COMMA           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RPAREN          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LBRACE          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    BODY            reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    POWER           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DOT             reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DIV             reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    MODULO          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    PLUS            reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    MINUS           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    IS_EQ           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    NOT_EQ          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LESS            reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    GREATER         reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    LESS_EQ         reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    AMPERSAND       reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    CARET           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    PIPE            reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    QUESTION        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_DIV          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RBRACKET        reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RANGE           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    RBRACE          reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)
    COLON           reduce using rule 100 (BasicType2X -> LBRACKET AssignExpression RANGE AssignExpression RBRACKET .)


state 650

    (75) AltFuncDeclaratorSuffix -> Parameters . MemberFunctionAttributes_opt
    (484) MemberFunctionAttributes_opt -> . MemberFunctionAttributes
    (485) MemberFunctionAttributes_opt -> . empty
    (482) MemberFunctionAttributes -> . MemberFunctionAttribute
    (483) MemberFunctionAttributes -> . MemberFunctionAttribute MemberFunctionAttributes
    (496) empty -> .
    (486) MemberFunctionAttribute -> . CONST
    (487) MemberFunctionAttribute -> . IMMUTABLE
    (488) MemberFunctionAttribute -> . RETURN

    ASSIGN          reduce using rule 496 (empty -> .)
    COMMA           reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)
    RPAREN          reduce using rule 496 (empty -> .)
    ELLIPSIS        reduce using rule 496 (empty -> .)
    CONST           shift and go to state 150
    IMMUTABLE       shift and go to state 154
    RETURN          shift and go to state 149

    MemberFunctionAttributes       shift and go to state 153
    MemberFunctionAttributes_opt   shift and go to state 726
    empty                          shift and go to state 155
    MemberFunctionAttribute        shift and go to state 152

state 651

    (64) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .

    ASSIGN          reduce using rule 64 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    COMMA           reduce using rule 64 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 64 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    RPAREN          reduce using rule 64 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)
    ELLIPSIS        reduce using rule 64 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes .)


state 652

    (63) AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .

    ASSIGN          reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    COMMA           reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    SEMICOLON       reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    RPAREN          reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)
    ELLIPSIS        reduce using rule 63 (AltDeclarator -> BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix .)


state 653

    (66) AltDeclaratorX -> BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix .

    RPAREN          reduce using rule 66 (AltDeclaratorX -> BasicType2_opt IDENTIFIER AltFuncDeclaratorSuffix .)


state 654

    (74) AltDeclaratorSuffix -> LBRACKET Type RBRACKET .

    LBRACKET        reduce using rule 74 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    ELLIPSIS        reduce using rule 74 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    ASSIGN          reduce using rule 74 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    COMMA           reduce using rule 74 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    RPAREN          reduce using rule 74 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)
    SEMICOLON       reduce using rule 74 (AltDeclaratorSuffix -> LBRACKET Type RBRACKET .)


state 655

    (73) AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .

    LBRACKET        reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    COMMA           reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    RPAREN          reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 73 (AltDeclaratorSuffix -> LBRACKET AssignExpression RBRACKET .)


state 656

    (48) DeclaratorIdentifierList -> mark1 DeclaratorIdentifier COMMA . DeclaratorIdentifierList
    (47) DeclaratorIdentifierList -> . mark1 DeclaratorIdentifier
    (48) DeclaratorIdentifierList -> . mark1 DeclaratorIdentifier COMMA DeclaratorIdentifierList
    (49) mark1 -> . empty
    (496) empty -> .

    IDENTIFIER      reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)

    DeclaratorIdentifierList       shift and go to state 727
    mark1                          shift and go to state 394
    empty                          shift and go to state 395

state 657

    (56) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes
    (57) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER . AltDeclaratorSuffixes ASSIGN Initializer
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (69) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (72) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    LBRACKET        shift and go to state 389

    AltDeclaratorSuffix            shift and go to state 390
    AltDeclaratorSuffixes          shift and go to state 728

state 658

    (53) VarDeclaratorIdentifier -> IDENTIFIER ASSIGN . Initializer
    (115) Initializer -> . VoidInitializer
    (116) Initializer -> . NonVoidInitializer
    (143) VoidInitializer -> . VOID
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    VOID            shift and go to state 306
    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    Initializer                    shift and go to state 729
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    ArrayLiteral                   shift and go to state 225
    NonVoidInitializer             shift and go to state 308
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    ArrayInitializer               shift and go to state 309
    RelExpression                  shift and go to state 177
    AssignExpression               shift and go to state 313
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    VoidInitializer                shift and go to state 310

state 659

    (54) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER . AltDeclaratorSuffixes_opt
    (55) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER . AltDeclaratorSuffixes_opt ASSIGN Initializer
    (70) AltDeclaratorSuffixes_opt -> . AltDeclaratorSuffixes
    (71) AltDeclaratorSuffixes_opt -> . empty
    (68) AltDeclaratorSuffixes -> . AltDeclaratorSuffix
    (69) AltDeclaratorSuffixes -> . AltDeclaratorSuffix AltDeclaratorSuffixes
    (496) empty -> .
    (72) AltDeclaratorSuffix -> . LBRACKET RBRACKET
    (73) AltDeclaratorSuffix -> . LBRACKET AssignExpression RBRACKET
    (74) AltDeclaratorSuffix -> . LBRACKET Type RBRACKET

    ASSIGN          reduce using rule 496 (empty -> .)
    COMMA           reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)
    LBRACKET        shift and go to state 389

    AltDeclaratorSuffixes_opt      shift and go to state 730
    AltDeclaratorSuffix            shift and go to state 390
    AltDeclaratorSuffixes          shift and go to state 732
    empty                          shift and go to state 731

state 660

    (105) IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .

    POWER           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DOT             reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    PLUS_PLUS       reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    MINUS_MINUS     reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LPAREN          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    TIMES           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DIV             reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    MODULO          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    PLUS            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    MINUS           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LEFT_SHIFT      reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RIGHT_SHIFT     reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    IS_EQ           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    NOT_EQ          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LESS            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    GREATER_EQ      reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    GREATER         reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LESS_EQ         reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    AMPERSAND       reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    CARET           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    PIPE            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DOUBLE_AMPERSAND reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    QUESTION        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    DOUBLE_PIPE     reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    ASSIGN          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_PLUS         reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_MINUS        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_TIMES        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_DIV          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_MODULO       reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_AND_BIT      reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_OR_BIT       reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_XOR_BIT      reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_LEFT         reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    EQ_RIGHT        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RBRACKET        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RANGE           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    COMMA           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RPAREN          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    SEMICOLON       reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    RBRACE          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    COLON           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LBRACKET        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    FUNCTION        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    IDENTIFIER      reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LBRACE          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    BODY            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    ELLIPSIS        reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    BOOL            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    SHORT           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    USHORT          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    INT             reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    UINT            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    LONG            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    ULONG           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    CHAR            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    FLOAT           reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    VOID            reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)
    TYPEOF          reduce using rule 105 (IdentifierList -> IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList .)


state 661

    (33) MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    NEW             reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DELETE          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ALIAS           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    MIXIN           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ENUM            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    STATIC          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PRIVATE         reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CLASS           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UNION           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FINAL           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    AUTO            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CONST           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMMUTABLE       reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DOT             reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BOOL            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    SHORT           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    USHORT          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    INT             reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UINT            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LONG            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ULONG           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CHAR            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    VOID            reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 33 (MixinDeclaration -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)


state 662

    (492) Symbol -> SymbolTail .

    RPAREN          reduce using rule 492 (Symbol -> SymbolTail .)


state 663

    (493) Symbol -> DOT . SymbolTail
    (237) PrimaryExpression -> DOT . IDENTIFIER
    (80) BasicType -> DOT . IdentifierList
    (494) SymbolTail -> . IDENTIFIER
    (495) SymbolTail -> . IDENTIFIER DOT SymbolTail
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 734

    SymbolTail                     shift and go to state 733
    IdentifierList                 shift and go to state 78

state 664

    (401) WithStatement -> WITH LPAREN Symbol . RPAREN ScopeStatement

    RPAREN          shift and go to state 735


state 665

    (400) WithStatement -> WITH LPAREN Expression . RPAREN ScopeStatement

    RPAREN          shift and go to state 736


state 666

    (494) SymbolTail -> IDENTIFIER .
    (495) SymbolTail -> IDENTIFIER . DOT SymbolTail
    (235) PrimaryExpression -> IDENTIFIER .
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (258) ArrayLiteral -> IDENTIFIER . LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> IDENTIFIER . LBRACKET AssignExpression RBRACKET

  ! reduce/reduce conflict for RPAREN resolved using rule 235 (PrimaryExpression -> IDENTIFIER .)
  ! reduce/reduce conflict for POWER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for CARET resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESTION resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (IdentifierList -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 737
    POWER           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DIV             reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MODULO          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IS_EQ           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    NOT_EQ          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS_EQ         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    AMPERSAND       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    CARET           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PIPE            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    QUESTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_DIV          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COMMA           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LBRACKET        shift and go to state 371

  ! RPAREN          [ reduce using rule 494 (SymbolTail -> IDENTIFIER .) ]
  ! POWER           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS_MINUS     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DIV             [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MODULO          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LEFT_SHIFT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RIGHT_SHIFT     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! IS_EQ           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! NOT_EQ          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER_EQ      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! GREATER         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! LESS_EQ         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! AMPERSAND       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! CARET           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! PIPE            [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! QUESTION        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOUBLE_PIPE     [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! ASSIGN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_PLUS         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MINUS        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_TIMES        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_DIV          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_MODULO       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_AND_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_OR_BIT       [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_XOR_BIT      [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_LEFT         [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! EQ_RIGHT        [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! COMMA           [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 235 (PrimaryExpression -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 667

    (398) GotoStatement -> GOTO CASE SEMICOLON .

    SEMICOLON       reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    CASE            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    DEFAULT         reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    LBRACE          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    IDENTIFIER      reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    IF              reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    WHILE           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    DO              reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    FOR             reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    SWITCH          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    FINAL           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    CONTINUE        reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    BREAK           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    RETURN          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    GOTO            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    WITH            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    MIXIN           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    IMPORT          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    STATIC          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    LPAREN          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    ALIAS           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    ENUM            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    EXTERN          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    AUTO            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    CONST           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    IMMUTABLE       reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    FOREACH         reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    FOREACH_REVERSE reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    CLASS           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    UNION           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    AMPERSAND       reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    PLUS_PLUS       reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    MINUS_MINUS     reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    TIMES           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    MINUS           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    PLUS            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    EXCLAMATION     reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    TILDE           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    CAST            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    DOT             reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    THIS            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    NULL            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    TRUE            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    FALSE           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    DOLLAR          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    INUMBER         reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    DNUMBER         reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    LIT_CHAR        reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    LIT_STR         reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    LBRACKET        reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    FUNCTION        reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    NEW             reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    BOOL            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    SHORT           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    USHORT          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    INT             reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    UINT            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    LONG            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    ULONG           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    CHAR            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    FLOAT           reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    VOID            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    TYPEOF          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    TYPEID          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    BODY            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    RBRACE          reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)
    ELSE            reduce using rule 398 (GotoStatement -> GOTO CASE SEMICOLON .)


state 668

    (399) GotoStatement -> GOTO CASE Expression . SEMICOLON

    SEMICOLON       shift and go to state 738


state 669

    (397) GotoStatement -> GOTO DEFAULT SEMICOLON .

    SEMICOLON       reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CASE            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DEFAULT         reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACE          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IDENTIFIER      reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IF              reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    WHILE           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DO              reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOR             reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    SWITCH          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FINAL           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONTINUE        reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    BREAK           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    RETURN          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    GOTO            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    WITH            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    MIXIN           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMPORT          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    STATIC          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LPAREN          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ALIAS           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ENUM            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXTERN          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    AUTO            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONST           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMMUTABLE       reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH         reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH_REVERSE reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CLASS           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    UNION           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    AMPERSAND       reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    PLUS_PLUS       reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    MINUS_MINUS     reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TIMES           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    MINUS           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    PLUS            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXCLAMATION     reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TILDE           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CAST            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOT             reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    THIS            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    NULL            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TRUE            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FALSE           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOLLAR          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    INUMBER         reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    DNUMBER         reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_CHAR        reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_STR         reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACKET        reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FUNCTION        reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    NEW             reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    BOOL            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    SHORT           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    USHORT          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    INT             reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    UINT            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    LONG            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ULONG           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    CHAR            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    FLOAT           reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    VOID            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TYPEOF          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    TYPEID          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    BODY            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    RBRACE          reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)
    ELSE            reduce using rule 397 (GotoStatement -> GOTO DEFAULT SEMICOLON .)


state 670

    (396) GotoStatement -> GOTO IDENTIFIER SEMICOLON .

    SEMICOLON       reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    AMPERSAND       reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    VOID            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEID          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BODY            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 396 (GotoStatement -> GOTO IDENTIFIER SEMICOLON .)


state 671

    (314) BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .

    ALIAS           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    ENUM            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    IMPORT          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    STATIC          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    CLASS           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    UNION           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EXTERN          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    FINAL           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    AUTO            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    CONST           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    IMMUTABLE       reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DOT             reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    BOOL            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    SHORT           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    USHORT          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    INT             reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    UINT            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LONG            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    ULONG           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    CHAR            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    FLOAT           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    VOID            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    IDENTIFIER      reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    TYPEOF          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    $end            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    SEMICOLON       reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    NEW             reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DELETE          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    MIXIN           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    PRIVATE         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    PROTECTED       reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    PUBLIC          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    RBRACE          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    CASE            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DEFAULT         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LBRACE          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    IF              reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    WHILE           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DO              reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    FOR             reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    SWITCH          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    CONTINUE        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    BREAK           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    RETURN          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    GOTO            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    WITH            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LPAREN          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    FOREACH         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    FOREACH_REVERSE reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    AMPERSAND       reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    PLUS_PLUS       reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    MINUS_MINUS     reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    TIMES           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    MINUS           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    PLUS            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EXCLAMATION     reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    TILDE           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    CAST            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    THIS            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    NULL            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    TRUE            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    FALSE           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DOLLAR          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    INUMBER         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DNUMBER         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LIT_CHAR        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LIT_STR         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LBRACKET        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    FUNCTION        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    TYPEID          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    BODY            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    ELSE            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    POWER           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DIV             reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    MODULO          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LEFT_SHIFT      reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    RIGHT_SHIFT     reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    CARET           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    PIPE            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DOUBLE_AMPERSAND reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    QUESTION        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    DOUBLE_PIPE     reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    ASSIGN          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_PLUS         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_MINUS        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_TIMES        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_DIV          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_MODULO       reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_AND_BIT      reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_OR_BIT       reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_XOR_BIT      reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_LEFT         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    EQ_RIGHT        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    RBRACKET        reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    RANGE           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    COMMA           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    RPAREN          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    COLON           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    IS_EQ           reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    NOT_EQ          reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LESS            reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    GREATER_EQ      reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    GREATER         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)
    LESS_EQ         reduce using rule 314 (BlockStatement -> LBRACE M_block_begin StatementList RBRACE M_block_end .)


state 672

    (395) ReturnStatement -> RETURN Expression_opt SEMICOLON .

    SEMICOLON       reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CASE            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DEFAULT         reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LBRACE          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IDENTIFIER      reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IF              reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    WHILE           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DO              reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FOR             reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    SWITCH          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FINAL           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CONTINUE        reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    BREAK           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    RETURN          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    GOTO            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    WITH            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    MIXIN           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IMPORT          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    STATIC          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LPAREN          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ALIAS           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ENUM            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    EXTERN          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    AUTO            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CONST           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    IMMUTABLE       reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FOREACH         reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FOREACH_REVERSE reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CLASS           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    UNION           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    AMPERSAND       reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    PLUS_PLUS       reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    MINUS_MINUS     reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TIMES           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    MINUS           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    PLUS            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    EXCLAMATION     reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TILDE           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CAST            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DOT             reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    THIS            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    NULL            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TRUE            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FALSE           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DOLLAR          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    INUMBER         reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    DNUMBER         reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LIT_CHAR        reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LIT_STR         reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LBRACKET        reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FUNCTION        reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    NEW             reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    BOOL            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    SHORT           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    USHORT          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    INT             reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    UINT            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    LONG            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ULONG           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    CHAR            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    FLOAT           reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    VOID            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TYPEOF          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    TYPEID          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    BODY            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    RBRACE          reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)
    ELSE            reduce using rule 395 (ReturnStatement -> RETURN Expression_opt SEMICOLON .)


state 673

    (357) ForeachTypeList -> ForeachType .
    (358) ForeachTypeList -> ForeachType . COMMA ForeachTypeList

    SEMICOLON       reduce using rule 357 (ForeachTypeList -> ForeachType .)
    COMMA           shift and go to state 739


state 674

    (353) AggregateForeach -> Foreach LPAREN ForeachTypeList . SEMICOLON ForeachAggregate RPAREN

    SEMICOLON       shift and go to state 740


state 675

    (363) ForeachTypeAttributes_opt -> empty .

    IDENTIFIER      reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    ALIAS           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    DOT             reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    BOOL            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    SHORT           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    USHORT          reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    INT             reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    UINT            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    LONG            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    ULONG           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    CHAR            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    FLOAT           reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    VOID            reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)
    TYPEOF          reduce using rule 363 (ForeachTypeAttributes_opt -> empty .)


state 676

    (388) FinalSwitchStatement -> FINAL SWITCH LPAREN . Expression RPAREN ScopeStatement
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 741
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 677

    (345) Initialize -> SEMICOLON .

    AMPERSAND       reduce using rule 345 (Initialize -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 345 (Initialize -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 345 (Initialize -> SEMICOLON .)
    TIMES           reduce using rule 345 (Initialize -> SEMICOLON .)
    MINUS           reduce using rule 345 (Initialize -> SEMICOLON .)
    PLUS            reduce using rule 345 (Initialize -> SEMICOLON .)
    EXCLAMATION     reduce using rule 345 (Initialize -> SEMICOLON .)
    LPAREN          reduce using rule 345 (Initialize -> SEMICOLON .)
    TILDE           reduce using rule 345 (Initialize -> SEMICOLON .)
    CAST            reduce using rule 345 (Initialize -> SEMICOLON .)
    IDENTIFIER      reduce using rule 345 (Initialize -> SEMICOLON .)
    DOT             reduce using rule 345 (Initialize -> SEMICOLON .)
    THIS            reduce using rule 345 (Initialize -> SEMICOLON .)
    NULL            reduce using rule 345 (Initialize -> SEMICOLON .)
    TRUE            reduce using rule 345 (Initialize -> SEMICOLON .)
    FALSE           reduce using rule 345 (Initialize -> SEMICOLON .)
    DOLLAR          reduce using rule 345 (Initialize -> SEMICOLON .)
    INUMBER         reduce using rule 345 (Initialize -> SEMICOLON .)
    DNUMBER         reduce using rule 345 (Initialize -> SEMICOLON .)
    LIT_CHAR        reduce using rule 345 (Initialize -> SEMICOLON .)
    LIT_STR         reduce using rule 345 (Initialize -> SEMICOLON .)
    LBRACKET        reduce using rule 345 (Initialize -> SEMICOLON .)
    FUNCTION        reduce using rule 345 (Initialize -> SEMICOLON .)
    MIXIN           reduce using rule 345 (Initialize -> SEMICOLON .)
    IMPORT          reduce using rule 345 (Initialize -> SEMICOLON .)
    NEW             reduce using rule 345 (Initialize -> SEMICOLON .)
    BOOL            reduce using rule 345 (Initialize -> SEMICOLON .)
    SHORT           reduce using rule 345 (Initialize -> SEMICOLON .)
    USHORT          reduce using rule 345 (Initialize -> SEMICOLON .)
    INT             reduce using rule 345 (Initialize -> SEMICOLON .)
    UINT            reduce using rule 345 (Initialize -> SEMICOLON .)
    LONG            reduce using rule 345 (Initialize -> SEMICOLON .)
    ULONG           reduce using rule 345 (Initialize -> SEMICOLON .)
    CHAR            reduce using rule 345 (Initialize -> SEMICOLON .)
    FLOAT           reduce using rule 345 (Initialize -> SEMICOLON .)
    VOID            reduce using rule 345 (Initialize -> SEMICOLON .)
    TYPEOF          reduce using rule 345 (Initialize -> SEMICOLON .)
    TYPEID          reduce using rule 345 (Initialize -> SEMICOLON .)
    LBRACE          reduce using rule 345 (Initialize -> SEMICOLON .)
    BODY            reduce using rule 345 (Initialize -> SEMICOLON .)
    SEMICOLON       reduce using rule 345 (Initialize -> SEMICOLON .)


state 678

    (340) ForStatement -> FOR LPAREN Initialize . for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (341) for_test_mark -> . empty
    (496) empty -> .

    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    SEMICOLON       reduce using rule 496 (empty -> .)

    for_test_mark                  shift and go to state 742
    empty                          shift and go to state 743

state 679

    (346) Initialize -> NoScopeNonEmptyStatement .

    AMPERSAND       reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    PLUS_PLUS       reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    MINUS_MINUS     reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    TIMES           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    MINUS           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    PLUS            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    EXCLAMATION     reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    LPAREN          reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    TILDE           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    CAST            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    IDENTIFIER      reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    DOT             reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    THIS            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    NULL            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    TRUE            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    FALSE           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    DOLLAR          reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    INUMBER         reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    DNUMBER         reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    LIT_CHAR        reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    LIT_STR         reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    LBRACKET        reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    FUNCTION        reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    MIXIN           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    IMPORT          reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    NEW             reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    BOOL            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    SHORT           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    USHORT          reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    INT             reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    UINT            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    LONG            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    ULONG           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    CHAR            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    FLOAT           reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    VOID            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    TYPEOF          reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    TYPEID          reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    LBRACE          reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    BODY            reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)
    SEMICOLON       reduce using rule 346 (Initialize -> NoScopeNonEmptyStatement .)


state 680

    (393) ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .

    SEMICOLON       reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CASE            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DEFAULT         reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LBRACE          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IDENTIFIER      reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IF              reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    WHILE           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DO              reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FOR             reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    SWITCH          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FINAL           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CONTINUE        reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    BREAK           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    RETURN          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    GOTO            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    WITH            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    MIXIN           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IMPORT          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    STATIC          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LPAREN          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ALIAS           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ENUM            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    EXTERN          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    AUTO            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CONST           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    IMMUTABLE       reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FOREACH         reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FOREACH_REVERSE reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CLASS           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    UNION           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    AMPERSAND       reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    PLUS_PLUS       reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    MINUS_MINUS     reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TIMES           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    MINUS           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    PLUS            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    EXCLAMATION     reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TILDE           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CAST            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DOT             reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    THIS            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    NULL            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TRUE            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FALSE           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DOLLAR          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    INUMBER         reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    DNUMBER         reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LIT_CHAR        reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LIT_STR         reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LBRACKET        reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FUNCTION        reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    NEW             reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    BOOL            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    SHORT           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    USHORT          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    INT             reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    UINT            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    LONG            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ULONG           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    CHAR            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    FLOAT           reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    VOID            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TYPEOF          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    TYPEID          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    BODY            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    RBRACE          reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)
    ELSE            reduce using rule 393 (ContinueStatement -> CONTINUE IDENTIFIER_opt SEMICOLON .)


state 681

    (402) MixinStatement -> MIXIN LPAREN AssignExpression . RPAREN SEMICOLON
    (271) MixinExpression -> MIXIN LPAREN AssignExpression . RPAREN

    RPAREN          shift and go to state 744


state 682

    (381) DefaultStatement -> DEFAULT COLON ScopeStatementList .

    SEMICOLON       reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CASE            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DEFAULT         reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LBRACE          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IDENTIFIER      reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IF              reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    WHILE           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DO              reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FOR             reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    SWITCH          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FINAL           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CONTINUE        reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    BREAK           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    RETURN          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    GOTO            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    WITH            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    MIXIN           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IMPORT          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    STATIC          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LPAREN          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ALIAS           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ENUM            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    EXTERN          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    AUTO            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CONST           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    IMMUTABLE       reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FOREACH         reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FOREACH_REVERSE reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CLASS           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    UNION           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    AMPERSAND       reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    PLUS_PLUS       reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    MINUS_MINUS     reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TIMES           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    MINUS           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    PLUS            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    EXCLAMATION     reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TILDE           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CAST            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DOT             reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    THIS            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    NULL            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TRUE            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FALSE           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DOLLAR          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    INUMBER         reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    DNUMBER         reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LIT_CHAR        reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LIT_STR         reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LBRACKET        reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FUNCTION        reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    NEW             reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    BOOL            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    SHORT           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    USHORT          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    INT             reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    UINT            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    LONG            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ULONG           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    CHAR            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    FLOAT           reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    VOID            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TYPEOF          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    TYPEID          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    BODY            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    RBRACE          reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)
    ELSE            reduce using rule 381 (DefaultStatement -> DEFAULT COLON ScopeStatementList .)


state 683

    (383) StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .
    (384) StatementListNoCaseNoDefault -> StatementNoCaseNoDefault . StatementListNoCaseNoDefault
    (383) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (384) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (385) StatementNoCaseNoDefault -> . SEMICOLON
    (386) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (387) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (309) ScopeBlockStatement -> . BlockStatement
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ALIAS resolved as shift
  ! shift/reduce conflict for ENUM resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for UNION resolved as shift
  ! reduce/reduce conflict for DOT resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for BOOL resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for SHORT resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for USHORT resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for INT resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for UINT resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for LONG resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for ULONG resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for CHAR resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for FLOAT resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! reduce/reduce conflict for VOID resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! reduce/reduce conflict for TYPEOF resolved using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for USHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ULONG resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for TYPEOF resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
  ! shift/reduce conflict for BODY resolved as shift
    CASE            reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    DEFAULT         reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    RBRACE          reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    ELSE            reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .)
    SEMICOLON       shift and go to state 684
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 145
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! SEMICOLON       [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LBRACE          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IDENTIFIER      [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IF              [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! WHILE           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DO              [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FOR             [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! SWITCH          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FINAL           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CONTINUE        [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! BREAK           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! RETURN          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! GOTO            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! WITH            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! MIXIN           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IMPORT          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! STATIC          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LPAREN          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! ALIAS           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! ENUM            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! EXTERN          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! AUTO            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CONST           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! IMMUTABLE       [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FOREACH         [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FOREACH_REVERSE [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CLASS           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! UNION           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! AMPERSAND       [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! PLUS_PLUS       [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! MINUS_MINUS     [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TIMES           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! MINUS           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! PLUS            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! EXCLAMATION     [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TILDE           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CAST            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DOT             [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! THIS            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! NULL            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TRUE            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FALSE           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DOLLAR          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! INUMBER         [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DNUMBER         [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LIT_CHAR        [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LIT_STR         [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LBRACKET        [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FUNCTION        [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! NEW             [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! BOOL            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! SHORT           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! USHORT          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! INT             [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! UINT            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! LONG            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! ULONG           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! CHAR            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! FLOAT           [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! VOID            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TYPEOF          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! TYPEID          [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! BODY            [ reduce using rule 383 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault .) ]
  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ reduce using rule 496 (empty -> .) ]
  ! SHORT           [ reduce using rule 496 (empty -> .) ]
  ! USHORT          [ reduce using rule 496 (empty -> .) ]
  ! INT             [ reduce using rule 496 (empty -> .) ]
  ! UINT            [ reduce using rule 496 (empty -> .) ]
  ! LONG            [ reduce using rule 496 (empty -> .) ]
  ! ULONG           [ reduce using rule 496 (empty -> .) ]
  ! CHAR            [ reduce using rule 496 (empty -> .) ]
  ! FLOAT           [ reduce using rule 496 (empty -> .) ]
  ! VOID            [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 496 (empty -> .) ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 430
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StatementNoCaseNoDefault       shift and go to state 683
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    StatementListNoCaseNoDefault   shift and go to state 745
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    Declaration                    shift and go to state 465
    LIT_STRPlus                    shift and go to state 210
    empty                          shift and go to state 62
    NonEmptyStatementNoCaseNoDefault shift and go to state 686
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    ScopeBlockStatement            shift and go to state 687
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 684

    (385) StatementNoCaseNoDefault -> SEMICOLON .

    SEMICOLON       reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    CASE            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    DEFAULT         reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    LBRACE          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    IDENTIFIER      reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    IF              reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    WHILE           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    DO              reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    FOR             reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    SWITCH          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    FINAL           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    CONTINUE        reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    BREAK           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    RETURN          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    GOTO            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    WITH            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    MIXIN           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    IMPORT          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    STATIC          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    LPAREN          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    ALIAS           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    ENUM            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    EXTERN          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    AUTO            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    CONST           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    IMMUTABLE       reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    FOREACH         reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    CLASS           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    UNION           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    AMPERSAND       reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    TIMES           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    MINUS           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    PLUS            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    EXCLAMATION     reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    TILDE           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    CAST            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    DOT             reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    THIS            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    NULL            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    TRUE            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    FALSE           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    DOLLAR          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    INUMBER         reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    DNUMBER         reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    LIT_CHAR        reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    LIT_STR         reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    LBRACKET        reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    FUNCTION        reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    NEW             reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    BOOL            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    SHORT           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    USHORT          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    INT             reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    UINT            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    LONG            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    ULONG           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    CHAR            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    FLOAT           reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    VOID            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    TYPEOF          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    TYPEID          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    BODY            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    RBRACE          reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)
    ELSE            reduce using rule 385 (StatementNoCaseNoDefault -> SEMICOLON .)


state 685

    (382) ScopeStatementList -> StatementListNoCaseNoDefault .

    SEMICOLON       reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CASE            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DEFAULT         reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LBRACE          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IF              reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    WHILE           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DO              reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FOR             reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    SWITCH          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FINAL           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CONTINUE        reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    BREAK           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    RETURN          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    GOTO            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    WITH            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    MIXIN           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IMPORT          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    STATIC          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LPAREN          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ALIAS           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ENUM            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    EXTERN          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    AUTO            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CONST           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FOREACH         reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CLASS           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    UNION           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    AMPERSAND       reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TIMES           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    MINUS           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    PLUS            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TILDE           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CAST            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DOT             reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    THIS            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    NULL            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TRUE            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FALSE           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DOLLAR          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    INUMBER         reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    DNUMBER         reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LIT_STR         reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LBRACKET        reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FUNCTION        reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    NEW             reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    BOOL            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    SHORT           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    USHORT          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    INT             reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    UINT            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    LONG            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ULONG           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    CHAR            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    FLOAT           reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    VOID            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TYPEOF          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    TYPEID          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    BODY            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    RBRACE          reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)
    ELSE            reduce using rule 382 (ScopeStatementList -> StatementListNoCaseNoDefault .)


state 686

    (386) StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .

    SEMICOLON       reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CASE            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DEFAULT         reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LBRACE          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IF              reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    WHILE           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DO              reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FOR             reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    SWITCH          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FINAL           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CONTINUE        reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    BREAK           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    RETURN          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    GOTO            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    WITH            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    MIXIN           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IMPORT          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    STATIC          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LPAREN          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ALIAS           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ENUM            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    EXTERN          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    AUTO            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CONST           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH         reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CLASS           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    UNION           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    AMPERSAND       reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TIMES           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    MINUS           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    PLUS            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TILDE           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CAST            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DOT             reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    THIS            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    NULL            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TRUE            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FALSE           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DOLLAR          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    INUMBER         reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    DNUMBER         reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LIT_STR         reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LBRACKET        reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FUNCTION        reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    NEW             reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    BOOL            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    SHORT           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    USHORT          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    INT             reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    UINT            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    LONG            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ULONG           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    CHAR            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    FLOAT           reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    VOID            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TYPEOF          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    TYPEID          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    BODY            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    RBRACE          reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)
    ELSE            reduce using rule 386 (StatementNoCaseNoDefault -> NonEmptyStatementNoCaseNoDefault .)


state 687

    (387) StatementNoCaseNoDefault -> ScopeBlockStatement .

    SEMICOLON       reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CASE            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DEFAULT         reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LBRACE          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IDENTIFIER      reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IF              reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    WHILE           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DO              reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FOR             reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    SWITCH          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FINAL           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CONTINUE        reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    BREAK           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    RETURN          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    GOTO            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    WITH            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    MIXIN           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IMPORT          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    STATIC          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LPAREN          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ALIAS           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ENUM            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    EXTERN          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    AUTO            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CONST           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    IMMUTABLE       reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FOREACH         reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FOREACH_REVERSE reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CLASS           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    UNION           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    AMPERSAND       reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    PLUS_PLUS       reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    MINUS_MINUS     reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TIMES           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    MINUS           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    PLUS            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    EXCLAMATION     reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TILDE           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CAST            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DOT             reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    THIS            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    NULL            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TRUE            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FALSE           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DOLLAR          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    INUMBER         reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    DNUMBER         reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LIT_CHAR        reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LIT_STR         reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LBRACKET        reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FUNCTION        reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    NEW             reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    BOOL            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    SHORT           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    USHORT          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    INT             reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    UINT            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    LONG            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ULONG           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    CHAR            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    FLOAT           reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    VOID            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TYPEOF          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    TYPEID          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    BODY            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    RBRACE          reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)
    ELSE            reduce using rule 387 (StatementNoCaseNoDefault -> ScopeBlockStatement .)


state 688

    (333) WhileStatement -> WHILE LPAREN while_M0 . Expression RPAREN while_M1 ScopeStatement while_M2
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 746
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ImportExpression               shift and go to state 188
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 689

    (334) while_M0 -> empty .

    AMPERSAND       reduce using rule 334 (while_M0 -> empty .)
    PLUS_PLUS       reduce using rule 334 (while_M0 -> empty .)
    MINUS_MINUS     reduce using rule 334 (while_M0 -> empty .)
    TIMES           reduce using rule 334 (while_M0 -> empty .)
    MINUS           reduce using rule 334 (while_M0 -> empty .)
    PLUS            reduce using rule 334 (while_M0 -> empty .)
    EXCLAMATION     reduce using rule 334 (while_M0 -> empty .)
    LPAREN          reduce using rule 334 (while_M0 -> empty .)
    TILDE           reduce using rule 334 (while_M0 -> empty .)
    CAST            reduce using rule 334 (while_M0 -> empty .)
    IDENTIFIER      reduce using rule 334 (while_M0 -> empty .)
    DOT             reduce using rule 334 (while_M0 -> empty .)
    THIS            reduce using rule 334 (while_M0 -> empty .)
    NULL            reduce using rule 334 (while_M0 -> empty .)
    TRUE            reduce using rule 334 (while_M0 -> empty .)
    FALSE           reduce using rule 334 (while_M0 -> empty .)
    DOLLAR          reduce using rule 334 (while_M0 -> empty .)
    INUMBER         reduce using rule 334 (while_M0 -> empty .)
    DNUMBER         reduce using rule 334 (while_M0 -> empty .)
    LIT_CHAR        reduce using rule 334 (while_M0 -> empty .)
    LIT_STR         reduce using rule 334 (while_M0 -> empty .)
    LBRACKET        reduce using rule 334 (while_M0 -> empty .)
    FUNCTION        reduce using rule 334 (while_M0 -> empty .)
    MIXIN           reduce using rule 334 (while_M0 -> empty .)
    IMPORT          reduce using rule 334 (while_M0 -> empty .)
    NEW             reduce using rule 334 (while_M0 -> empty .)
    BOOL            reduce using rule 334 (while_M0 -> empty .)
    SHORT           reduce using rule 334 (while_M0 -> empty .)
    USHORT          reduce using rule 334 (while_M0 -> empty .)
    INT             reduce using rule 334 (while_M0 -> empty .)
    UINT            reduce using rule 334 (while_M0 -> empty .)
    LONG            reduce using rule 334 (while_M0 -> empty .)
    ULONG           reduce using rule 334 (while_M0 -> empty .)
    CHAR            reduce using rule 334 (while_M0 -> empty .)
    FLOAT           reduce using rule 334 (while_M0 -> empty .)
    VOID            reduce using rule 334 (while_M0 -> empty .)
    TYPEOF          reduce using rule 334 (while_M0 -> empty .)
    TYPEID          reduce using rule 334 (while_M0 -> empty .)
    LBRACE          reduce using rule 334 (while_M0 -> empty .)
    BODY            reduce using rule 334 (while_M0 -> empty .)


state 690

    (375) CaseStatement -> CASE ArgumentList COLON . c_m1 ScopeStatementList c_m2
    (376) c_m1 -> . empty
    (496) empty -> .

    SEMICOLON       reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)

    c_m1                           shift and go to state 747
    empty                          shift and go to state 748

state 691

    (378) CaseRangeStatement -> CASE FirstExp COLON . RANGE LastExp COLON ScopeStatementList

    RANGE           shift and go to state 749


state 692

    (372) SwitchStatement -> SWITCH LPAREN Expression . RPAREN switch_M1 ScopeStatement switch_M2

    RPAREN          shift and go to state 750


state 693

    (312) LabeledStatement -> IDENTIFIER COLON Statement .

    SEMICOLON       reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CASE            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DEFAULT         reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LBRACE          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IDENTIFIER      reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IF              reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    WHILE           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DO              reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOR             reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SWITCH          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FINAL           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CONTINUE        reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BREAK           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    RETURN          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    GOTO            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    WITH            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    MIXIN           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IMPORT          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    STATIC          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LPAREN          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ALIAS           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ENUM            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    EXTERN          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    AUTO            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CONST           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    IMMUTABLE       reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOREACH         reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FOREACH_REVERSE reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CLASS           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    UNION           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    AMPERSAND       reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    PLUS_PLUS       reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    MINUS_MINUS     reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TIMES           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    MINUS           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    PLUS            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    EXCLAMATION     reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TILDE           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CAST            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DOT             reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    THIS            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NULL            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TRUE            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FALSE           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DOLLAR          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INUMBER         reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    DNUMBER         reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LIT_CHAR        reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LIT_STR         reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LBRACKET        reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FUNCTION        reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    NEW             reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BOOL            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    SHORT           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    USHORT          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    INT             reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    UINT            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    LONG            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ULONG           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    CHAR            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    FLOAT           reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    VOID            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TYPEOF          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    TYPEID          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    BODY            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    RBRACE          reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)
    ELSE            reduce using rule 312 (LabeledStatement -> IDENTIFIER COLON Statement .)


state 694

    (282) NoScopeStatement -> BlockStatement .
    (309) ScopeBlockStatement -> BlockStatement .
    (267) FunctionLiteralBody -> BlockStatement .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CASE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IF resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for WHILE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DO resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FOR resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FINAL resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for BREAK resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for RETURN resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for GOTO resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for WITH resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for MIXIN resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IMPORT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for STATIC resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ALIAS resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ENUM resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for EXTERN resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for AUTO resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CONST resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FOREACH resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FOREACH_REVERSE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CLASS resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for UNION resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for MINUS resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for PLUS resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TILDE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CAST resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DOT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for THIS resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for NULL resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TRUE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FALSE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for INUMBER resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DNUMBER resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LIT_CHAR resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LIT_STR resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for NEW resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for BOOL resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for SHORT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for USHORT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for INT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for UINT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for LONG resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ULONG resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for CHAR resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for VOID resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for TYPEID resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for BODY resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for ELSE resolved using rule 282 (NoScopeStatement -> BlockStatement .)
  ! reduce/reduce conflict for DOT resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for PLUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for MINUS resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CASE            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    DEFAULT         reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    LBRACE          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    IDENTIFIER      reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    IF              reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    WHILE           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    DO              reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    FOR             reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    SWITCH          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    FINAL           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    CONTINUE        reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    BREAK           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    RETURN          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    GOTO            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    WITH            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    MIXIN           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    IMPORT          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    STATIC          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    ALIAS           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    ENUM            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    EXTERN          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    AUTO            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    CONST           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    IMMUTABLE       reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    FOREACH         reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    FOREACH_REVERSE reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    CLASS           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    UNION           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    EXCLAMATION     reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    TILDE           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    CAST            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    THIS            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    NULL            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    TRUE            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    FALSE           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    DOLLAR          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    INUMBER         reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    DNUMBER         reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    LIT_CHAR        reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    LIT_STR         reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    LBRACKET        reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    FUNCTION        reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    NEW             reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    BOOL            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    SHORT           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    USHORT          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    INT             reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    UINT            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    LONG            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    ULONG           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    CHAR            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    FLOAT           reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    VOID            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    TYPEOF          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    TYPEID          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    BODY            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    RBRACE          reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    ELSE            reduce using rule 282 (NoScopeStatement -> BlockStatement .)
    POWER           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOT             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS_PLUS       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS_MINUS     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LPAREN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    TIMES           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DIV             reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MODULO          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PLUS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    MINUS           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LEFT_SHIFT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    RIGHT_SHIFT     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    IS_EQ           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    NOT_EQ          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER_EQ      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    GREATER         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    LESS_EQ         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    AMPERSAND       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    CARET           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    PIPE            reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_AMPERSAND reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    QUESTION        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    DOUBLE_PIPE     reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    ASSIGN          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_PLUS         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MINUS        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_TIMES        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_DIV          reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_MODULO       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_AND_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_OR_BIT       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_XOR_BIT      reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_LEFT         reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    EQ_RIGHT        reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    COMMA           reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)
    SEMICOLON       reduce using rule 267 (FunctionLiteralBody -> BlockStatement .)

  ! SEMICOLON       [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! AMPERSAND       [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! MINUS           [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! PLUS            [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 282 (NoScopeStatement -> BlockStatement .) ]
  ! SEMICOLON       [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! CASE            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! DEFAULT         [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! LBRACE          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! IDENTIFIER      [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! IF              [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! WHILE           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! DO              [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! FOR             [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! SWITCH          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! FINAL           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! CONTINUE        [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! BREAK           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! RETURN          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! GOTO            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! WITH            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! MIXIN           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! IMPORT          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! STATIC          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! LPAREN          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! ALIAS           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! ENUM            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! EXTERN          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! AUTO            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! CONST           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! IMMUTABLE       [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! FOREACH         [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! FOREACH_REVERSE [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! CLASS           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! UNION           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! AMPERSAND       [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! TIMES           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! MINUS           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! PLUS            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! EXCLAMATION     [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! TILDE           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! CAST            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! DOT             [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! THIS            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! NULL            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! TRUE            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! FALSE           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! DOLLAR          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! INUMBER         [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! DNUMBER         [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! LIT_CHAR        [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! LIT_STR         [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! LBRACKET        [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! FUNCTION        [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! NEW             [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! BOOL            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! SHORT           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! USHORT          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! INT             [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! UINT            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! LONG            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! ULONG           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! CHAR            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! FLOAT           [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! VOID            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! TYPEOF          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! TYPEID          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! BODY            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! RBRACE          [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]
  ! ELSE            [ reduce using rule 309 (ScopeBlockStatement -> BlockStatement .) ]


state 695

    (280) NoScopeStatement -> SEMICOLON .
    (275) Statement -> SEMICOLON .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CASE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LBRACE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FINAL resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for GOTO resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for WITH resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for MIXIN resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IMPORT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for STATIC resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ALIAS resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ENUM resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for EXTERN resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for AUTO resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONST resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH_REVERSE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CLASS resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for UNION resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TIMES resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for MINUS resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for PLUS resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TILDE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CAST resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DOT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for THIS resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for NULL resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TRUE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FALSE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for INUMBER resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for DNUMBER resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LIT_CHAR resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LIT_STR resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for NEW resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for BOOL resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for SHORT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for USHORT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for INT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for UINT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for LONG resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ULONG resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for CHAR resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for VOID resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for TYPEID resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for BODY resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for RBRACE resolved using rule 275 (Statement -> SEMICOLON .)
  ! reduce/reduce conflict for ELSE resolved using rule 275 (Statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 275 (Statement -> SEMICOLON .)
    CASE            reduce using rule 275 (Statement -> SEMICOLON .)
    DEFAULT         reduce using rule 275 (Statement -> SEMICOLON .)
    LBRACE          reduce using rule 275 (Statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 275 (Statement -> SEMICOLON .)
    IF              reduce using rule 275 (Statement -> SEMICOLON .)
    WHILE           reduce using rule 275 (Statement -> SEMICOLON .)
    DO              reduce using rule 275 (Statement -> SEMICOLON .)
    FOR             reduce using rule 275 (Statement -> SEMICOLON .)
    SWITCH          reduce using rule 275 (Statement -> SEMICOLON .)
    FINAL           reduce using rule 275 (Statement -> SEMICOLON .)
    CONTINUE        reduce using rule 275 (Statement -> SEMICOLON .)
    BREAK           reduce using rule 275 (Statement -> SEMICOLON .)
    RETURN          reduce using rule 275 (Statement -> SEMICOLON .)
    GOTO            reduce using rule 275 (Statement -> SEMICOLON .)
    WITH            reduce using rule 275 (Statement -> SEMICOLON .)
    MIXIN           reduce using rule 275 (Statement -> SEMICOLON .)
    IMPORT          reduce using rule 275 (Statement -> SEMICOLON .)
    STATIC          reduce using rule 275 (Statement -> SEMICOLON .)
    LPAREN          reduce using rule 275 (Statement -> SEMICOLON .)
    ALIAS           reduce using rule 275 (Statement -> SEMICOLON .)
    ENUM            reduce using rule 275 (Statement -> SEMICOLON .)
    EXTERN          reduce using rule 275 (Statement -> SEMICOLON .)
    AUTO            reduce using rule 275 (Statement -> SEMICOLON .)
    CONST           reduce using rule 275 (Statement -> SEMICOLON .)
    IMMUTABLE       reduce using rule 275 (Statement -> SEMICOLON .)
    FOREACH         reduce using rule 275 (Statement -> SEMICOLON .)
    FOREACH_REVERSE reduce using rule 275 (Statement -> SEMICOLON .)
    CLASS           reduce using rule 275 (Statement -> SEMICOLON .)
    UNION           reduce using rule 275 (Statement -> SEMICOLON .)
    AMPERSAND       reduce using rule 275 (Statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 275 (Statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 275 (Statement -> SEMICOLON .)
    TIMES           reduce using rule 275 (Statement -> SEMICOLON .)
    MINUS           reduce using rule 275 (Statement -> SEMICOLON .)
    PLUS            reduce using rule 275 (Statement -> SEMICOLON .)
    EXCLAMATION     reduce using rule 275 (Statement -> SEMICOLON .)
    TILDE           reduce using rule 275 (Statement -> SEMICOLON .)
    CAST            reduce using rule 275 (Statement -> SEMICOLON .)
    DOT             reduce using rule 275 (Statement -> SEMICOLON .)
    THIS            reduce using rule 275 (Statement -> SEMICOLON .)
    NULL            reduce using rule 275 (Statement -> SEMICOLON .)
    TRUE            reduce using rule 275 (Statement -> SEMICOLON .)
    FALSE           reduce using rule 275 (Statement -> SEMICOLON .)
    DOLLAR          reduce using rule 275 (Statement -> SEMICOLON .)
    INUMBER         reduce using rule 275 (Statement -> SEMICOLON .)
    DNUMBER         reduce using rule 275 (Statement -> SEMICOLON .)
    LIT_CHAR        reduce using rule 275 (Statement -> SEMICOLON .)
    LIT_STR         reduce using rule 275 (Statement -> SEMICOLON .)
    LBRACKET        reduce using rule 275 (Statement -> SEMICOLON .)
    FUNCTION        reduce using rule 275 (Statement -> SEMICOLON .)
    NEW             reduce using rule 275 (Statement -> SEMICOLON .)
    BOOL            reduce using rule 275 (Statement -> SEMICOLON .)
    SHORT           reduce using rule 275 (Statement -> SEMICOLON .)
    USHORT          reduce using rule 275 (Statement -> SEMICOLON .)
    INT             reduce using rule 275 (Statement -> SEMICOLON .)
    UINT            reduce using rule 275 (Statement -> SEMICOLON .)
    LONG            reduce using rule 275 (Statement -> SEMICOLON .)
    ULONG           reduce using rule 275 (Statement -> SEMICOLON .)
    CHAR            reduce using rule 275 (Statement -> SEMICOLON .)
    FLOAT           reduce using rule 275 (Statement -> SEMICOLON .)
    VOID            reduce using rule 275 (Statement -> SEMICOLON .)
    TYPEOF          reduce using rule 275 (Statement -> SEMICOLON .)
    TYPEID          reduce using rule 275 (Statement -> SEMICOLON .)
    BODY            reduce using rule 275 (Statement -> SEMICOLON .)
    RBRACE          reduce using rule 275 (Statement -> SEMICOLON .)
    ELSE            reduce using rule 275 (Statement -> SEMICOLON .)

  ! SEMICOLON       [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! CASE            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! DEFAULT         [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! LBRACE          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! IDENTIFIER      [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! IF              [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! WHILE           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! DO              [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! FOR             [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! FINAL           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! BREAK           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! RETURN          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! GOTO            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! WITH            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! MIXIN           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! IMPORT          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! STATIC          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! ALIAS           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! ENUM            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! EXTERN          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! AUTO            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! CONST           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! IMMUTABLE       [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! FOREACH_REVERSE [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! CLASS           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! UNION           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! AMPERSAND       [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! PLUS_PLUS       [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! MINUS_MINUS     [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! TIMES           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! MINUS           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! PLUS            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! EXCLAMATION     [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! TILDE           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! CAST            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! DOT             [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! THIS            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! NULL            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! TRUE            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! FALSE           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! DOLLAR          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! INUMBER         [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! DNUMBER         [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! LIT_CHAR        [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! LIT_STR         [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! LBRACKET        [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! FUNCTION        [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! NEW             [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! BOOL            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! SHORT           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! USHORT          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! INT             [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! UINT            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! LONG            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! ULONG           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! CHAR            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! VOID            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! TYPEOF          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! TYPEID          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! BODY            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! RBRACE          [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]
  ! ELSE            [ reduce using rule 280 (NoScopeStatement -> SEMICOLON .) ]


state 696

    (311) LabeledStatement -> IDENTIFIER COLON NoScopeStatement .

    SEMICOLON       reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CASE            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DEFAULT         reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LBRACE          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IDENTIFIER      reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IF              reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    WHILE           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DO              reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FOR             reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    SWITCH          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FINAL           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CONTINUE        reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    BREAK           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    RETURN          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    GOTO            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    WITH            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    MIXIN           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IMPORT          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    STATIC          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LPAREN          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ALIAS           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ENUM            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    EXTERN          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    AUTO            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CONST           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    IMMUTABLE       reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FOREACH         reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FOREACH_REVERSE reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CLASS           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    UNION           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    AMPERSAND       reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    PLUS_PLUS       reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    MINUS_MINUS     reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TIMES           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    MINUS           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    PLUS            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    EXCLAMATION     reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TILDE           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CAST            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DOT             reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    THIS            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    NULL            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TRUE            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FALSE           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DOLLAR          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    INUMBER         reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    DNUMBER         reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LIT_CHAR        reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LIT_STR         reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LBRACKET        reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FUNCTION        reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    NEW             reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    BOOL            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    SHORT           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    USHORT          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    INT             reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    UINT            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    LONG            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ULONG           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    CHAR            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    FLOAT           reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    VOID            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TYPEOF          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    TYPEID          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    BODY            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    RBRACE          reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)
    ELSE            reduce using rule 311 (LabeledStatement -> IDENTIFIER COLON NoScopeStatement .)


state 697

    (281) NoScopeStatement -> NonEmptyStatement .
    (276) Statement -> NonEmptyStatement .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CASE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LBRACE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IF resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for WHILE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DO resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FOR resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for SWITCH resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FINAL resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for BREAK resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for RETURN resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for GOTO resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for WITH resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for MIXIN resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IMPORT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for STATIC resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ALIAS resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ENUM resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for EXTERN resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for AUTO resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CONST resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FOREACH resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FOREACH_REVERSE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CLASS resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for UNION resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TIMES resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for MINUS resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for PLUS resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for EXCLAMATION resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TILDE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CAST resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DOT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for THIS resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for NULL resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TRUE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FALSE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DOLLAR resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for INUMBER resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for DNUMBER resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LIT_CHAR resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LIT_STR resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for NEW resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for BOOL resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for SHORT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for USHORT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for INT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for UINT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for LONG resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ULONG resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for CHAR resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for VOID resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for TYPEID resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for BODY resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 276 (Statement -> NonEmptyStatement .)
  ! reduce/reduce conflict for ELSE resolved using rule 276 (Statement -> NonEmptyStatement .)
    SEMICOLON       reduce using rule 276 (Statement -> NonEmptyStatement .)
    CASE            reduce using rule 276 (Statement -> NonEmptyStatement .)
    DEFAULT         reduce using rule 276 (Statement -> NonEmptyStatement .)
    LBRACE          reduce using rule 276 (Statement -> NonEmptyStatement .)
    IDENTIFIER      reduce using rule 276 (Statement -> NonEmptyStatement .)
    IF              reduce using rule 276 (Statement -> NonEmptyStatement .)
    WHILE           reduce using rule 276 (Statement -> NonEmptyStatement .)
    DO              reduce using rule 276 (Statement -> NonEmptyStatement .)
    FOR             reduce using rule 276 (Statement -> NonEmptyStatement .)
    SWITCH          reduce using rule 276 (Statement -> NonEmptyStatement .)
    FINAL           reduce using rule 276 (Statement -> NonEmptyStatement .)
    CONTINUE        reduce using rule 276 (Statement -> NonEmptyStatement .)
    BREAK           reduce using rule 276 (Statement -> NonEmptyStatement .)
    RETURN          reduce using rule 276 (Statement -> NonEmptyStatement .)
    GOTO            reduce using rule 276 (Statement -> NonEmptyStatement .)
    WITH            reduce using rule 276 (Statement -> NonEmptyStatement .)
    MIXIN           reduce using rule 276 (Statement -> NonEmptyStatement .)
    IMPORT          reduce using rule 276 (Statement -> NonEmptyStatement .)
    STATIC          reduce using rule 276 (Statement -> NonEmptyStatement .)
    LPAREN          reduce using rule 276 (Statement -> NonEmptyStatement .)
    ALIAS           reduce using rule 276 (Statement -> NonEmptyStatement .)
    ENUM            reduce using rule 276 (Statement -> NonEmptyStatement .)
    EXTERN          reduce using rule 276 (Statement -> NonEmptyStatement .)
    AUTO            reduce using rule 276 (Statement -> NonEmptyStatement .)
    CONST           reduce using rule 276 (Statement -> NonEmptyStatement .)
    IMMUTABLE       reduce using rule 276 (Statement -> NonEmptyStatement .)
    FOREACH         reduce using rule 276 (Statement -> NonEmptyStatement .)
    FOREACH_REVERSE reduce using rule 276 (Statement -> NonEmptyStatement .)
    CLASS           reduce using rule 276 (Statement -> NonEmptyStatement .)
    UNION           reduce using rule 276 (Statement -> NonEmptyStatement .)
    AMPERSAND       reduce using rule 276 (Statement -> NonEmptyStatement .)
    PLUS_PLUS       reduce using rule 276 (Statement -> NonEmptyStatement .)
    MINUS_MINUS     reduce using rule 276 (Statement -> NonEmptyStatement .)
    TIMES           reduce using rule 276 (Statement -> NonEmptyStatement .)
    MINUS           reduce using rule 276 (Statement -> NonEmptyStatement .)
    PLUS            reduce using rule 276 (Statement -> NonEmptyStatement .)
    EXCLAMATION     reduce using rule 276 (Statement -> NonEmptyStatement .)
    TILDE           reduce using rule 276 (Statement -> NonEmptyStatement .)
    CAST            reduce using rule 276 (Statement -> NonEmptyStatement .)
    DOT             reduce using rule 276 (Statement -> NonEmptyStatement .)
    THIS            reduce using rule 276 (Statement -> NonEmptyStatement .)
    NULL            reduce using rule 276 (Statement -> NonEmptyStatement .)
    TRUE            reduce using rule 276 (Statement -> NonEmptyStatement .)
    FALSE           reduce using rule 276 (Statement -> NonEmptyStatement .)
    DOLLAR          reduce using rule 276 (Statement -> NonEmptyStatement .)
    INUMBER         reduce using rule 276 (Statement -> NonEmptyStatement .)
    DNUMBER         reduce using rule 276 (Statement -> NonEmptyStatement .)
    LIT_CHAR        reduce using rule 276 (Statement -> NonEmptyStatement .)
    LIT_STR         reduce using rule 276 (Statement -> NonEmptyStatement .)
    LBRACKET        reduce using rule 276 (Statement -> NonEmptyStatement .)
    FUNCTION        reduce using rule 276 (Statement -> NonEmptyStatement .)
    NEW             reduce using rule 276 (Statement -> NonEmptyStatement .)
    BOOL            reduce using rule 276 (Statement -> NonEmptyStatement .)
    SHORT           reduce using rule 276 (Statement -> NonEmptyStatement .)
    USHORT          reduce using rule 276 (Statement -> NonEmptyStatement .)
    INT             reduce using rule 276 (Statement -> NonEmptyStatement .)
    UINT            reduce using rule 276 (Statement -> NonEmptyStatement .)
    LONG            reduce using rule 276 (Statement -> NonEmptyStatement .)
    ULONG           reduce using rule 276 (Statement -> NonEmptyStatement .)
    CHAR            reduce using rule 276 (Statement -> NonEmptyStatement .)
    FLOAT           reduce using rule 276 (Statement -> NonEmptyStatement .)
    VOID            reduce using rule 276 (Statement -> NonEmptyStatement .)
    TYPEOF          reduce using rule 276 (Statement -> NonEmptyStatement .)
    TYPEID          reduce using rule 276 (Statement -> NonEmptyStatement .)
    BODY            reduce using rule 276 (Statement -> NonEmptyStatement .)
    RBRACE          reduce using rule 276 (Statement -> NonEmptyStatement .)
    ELSE            reduce using rule 276 (Statement -> NonEmptyStatement .)

  ! SEMICOLON       [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CASE            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DEFAULT         [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LBRACE          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IDENTIFIER      [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IF              [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! WHILE           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DO              [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FOR             [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! SWITCH          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FINAL           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CONTINUE        [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! BREAK           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! RETURN          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! GOTO            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! WITH            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! MIXIN           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IMPORT          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! STATIC          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LPAREN          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ALIAS           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ENUM            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! EXTERN          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! AUTO            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CONST           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! IMMUTABLE       [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FOREACH         [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FOREACH_REVERSE [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CLASS           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! UNION           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! AMPERSAND       [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TIMES           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! MINUS           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! PLUS            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! EXCLAMATION     [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TILDE           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CAST            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DOT             [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! THIS            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! NULL            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TRUE            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FALSE           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DOLLAR          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! INUMBER         [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! DNUMBER         [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LIT_CHAR        [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LIT_STR         [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LBRACKET        [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FUNCTION        [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! NEW             [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! BOOL            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! SHORT           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! USHORT          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! INT             [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! UINT            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! LONG            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ULONG           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! CHAR            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! FLOAT           [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! VOID            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TYPEOF          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! TYPEID          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! BODY            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! RBRACE          [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]
  ! ELSE            [ reduce using rule 281 (NoScopeStatement -> NonEmptyStatement .) ]


state 698

    (394) BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .

    SEMICOLON       reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CASE            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DEFAULT         reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LBRACE          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IDENTIFIER      reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IF              reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    WHILE           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DO              reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FOR             reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    SWITCH          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FINAL           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CONTINUE        reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    BREAK           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    RETURN          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    GOTO            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    WITH            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    MIXIN           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IMPORT          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    STATIC          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LPAREN          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ALIAS           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ENUM            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    EXTERN          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    AUTO            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CONST           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    IMMUTABLE       reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FOREACH         reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FOREACH_REVERSE reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CLASS           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    UNION           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    AMPERSAND       reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    PLUS_PLUS       reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    MINUS_MINUS     reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TIMES           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    MINUS           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    PLUS            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    EXCLAMATION     reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TILDE           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CAST            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DOT             reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    THIS            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    NULL            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TRUE            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FALSE           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DOLLAR          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    INUMBER         reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    DNUMBER         reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LIT_CHAR        reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LIT_STR         reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LBRACKET        reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FUNCTION        reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    NEW             reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    BOOL            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    SHORT           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    USHORT          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    INT             reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    UINT            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    LONG            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ULONG           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    CHAR            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    FLOAT           reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    VOID            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TYPEOF          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    TYPEID          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    BODY            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    RBRACE          reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)
    ELSE            reduce using rule 394 (BreakStatement -> BREAK IDENTIFIER_opt SEMICOLON .)


state 699

    (337) DoStatement -> DO Dowhile_M1 ScopeStatement . WHILE LPAREN Expression RPAREN Dowhile_M2

    WHILE           shift and go to state 751


state 700

    (365) ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .

    IDENTIFIER      reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    ALIAS           reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    DOT             reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    BOOL            reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    SHORT           reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    USHORT          reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    INT             reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    UINT            reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    LONG            reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    ULONG           reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    CHAR            reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    FLOAT           reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    VOID            reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)
    TYPEOF          reduce using rule 365 (ForeachTypeAttributes -> ForeachTypeAttribute ForeachTypeAttributes_opt .)


state 701

    (368) RangeForeach -> LPAREN ForeachType SEMICOLON . LwrExpression RANGE UprExpression RPAREN
    (369) LwrExpression -> . Expression
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    LwrExpression                  shift and go to state 752
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 753
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 702

    (359) ForeachType -> ForeachTypeAttributes_opt BasicType . Declarator
    (58) Declarator -> . VarDeclarator
    (59) Declarator -> . AltDeclarator
    (60) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (61) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

    VarDeclarator                  shift and go to state 482
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 484
    empty                          shift and go to state 86
    Declarator                     shift and go to state 755
    BasicType2_opt                 shift and go to state 754
    BasicType2                     shift and go to state 90

state 703

    (360) ForeachType -> ForeachTypeAttributes_opt IDENTIFIER .
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! shift/reduce conflict for LBRACKET resolved as shift
    COMMA           reduce using rule 360 (ForeachType -> ForeachTypeAttributes_opt IDENTIFIER .)
    SEMICOLON       reduce using rule 360 (ForeachType -> ForeachTypeAttributes_opt IDENTIFIER .)
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    FUNCTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 92
    LBRACKET        shift and go to state 91

  ! LBRACKET        [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 704

    (361) ForeachType -> ForeachTypeAttributes_opt ALIAS . IDENTIFIER

    IDENTIFIER      shift and go to state 756


state 705

    (322) IfStatement -> IF LPAREN IfCondition . RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> IF LPAREN IfCondition . RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4

    RPAREN          shift and go to state 757


state 706

    (330) IfCondition -> BasicType . Declarator ASSIGN Expression
    (233) PostfixExpression -> BasicType . LPAREN ArgumentList_opt RPAREN JmpMark
    (58) Declarator -> . VarDeclarator
    (59) Declarator -> . AltDeclarator
    (60) VarDeclarator -> . BasicType2_opt IDENTIFIER
    (61) AltDeclarator -> . BasicType2_opt IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> . BasicType2_opt LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes
    (95) BasicType2_opt -> . BasicType2
    (96) BasicType2_opt -> . empty
    (94) BasicType2 -> . BasicType2X BasicType2_opt
    (496) empty -> .
    (97) BasicType2X -> . TIMES
    (98) BasicType2X -> . LBRACKET RBRACKET
    (99) BasicType2X -> . LBRACKET AssignExpression RBRACKET
    (100) BasicType2X -> . LBRACKET AssignExpression RANGE AssignExpression RBRACKET
    (101) BasicType2X -> . LBRACKET Type RBRACKET
    (102) BasicType2X -> . FUNCTION Parameters

    IDENTIFIER      reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    TIMES           shift and go to state 88
    LBRACKET        shift and go to state 80
    FUNCTION        shift and go to state 87

  ! LPAREN          [ shift and go to state 368 ]

    BasicType2_opt                 shift and go to state 754
    BasicType2X                    shift and go to state 84
    AltDeclarator                  shift and go to state 484
    VarDeclarator                  shift and go to state 482
    empty                          shift and go to state 86
    Declarator                     shift and go to state 758
    BasicType2                     shift and go to state 90

state 707

    (328) IfCondition -> Expression .

    RPAREN          reduce using rule 328 (IfCondition -> Expression .)


state 708

    (329) IfCondition -> AUTO . IDENTIFIER ASSIGN Expression

    IDENTIFIER      shift and go to state 759


state 709

    (472) Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression .

    COMMA           reduce using rule 472 (Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression .)
    RPAREN          reduce using rule 472 (Parameter -> InOut_opt BasicType Declarator ASSIGN AssignExpression .)


state 710

    (123) ArrayMemberInitializations -> ArrayMemberInitialization COMMA ArrayMemberInitializations .

    RBRACKET        reduce using rule 123 (ArrayMemberInitializations -> ArrayMemberInitialization COMMA ArrayMemberInitializations .)


state 711

    (127) ArrayMemberInitialization -> AssignExpression . COLON NonVoidInitializer
    (119) ExpInitializer -> AssignExpression .

    COLON           shift and go to state 625
    COMMA           reduce using rule 119 (ExpInitializer -> AssignExpression .)
    RBRACKET        reduce using rule 119 (ExpInitializer -> AssignExpression .)


state 712

    (127) ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer .

    COMMA           reduce using rule 127 (ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer .)
    RBRACKET        reduce using rule 127 (ArrayMemberInitialization -> AssignExpression COLON NonVoidInitializer .)


state 713

    (168) ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .

    ASSIGN          reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_PLUS         reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_MINUS        reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_TIMES        reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_DIV          reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_MODULO       reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_AND_BIT      reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_OR_BIT       reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_XOR_BIT      reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_LEFT         reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    EQ_RIGHT        reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    COMMA           reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    SEMICOLON       reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RBRACKET        reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RANGE           reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RPAREN          reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    RBRACE          reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)
    COLON           reduce using rule 168 (ConditionalExpression -> OrOrExpression QUESTION Expression COLON ConditionalExpression .)


state 714

    (210) NewExpression -> NEW AllocatorArguments_opt Type .
    (212) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type . LPAREN ArgumentList_opt RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    POWER           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DOT             reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    PLUS_PLUS       reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    MINUS_MINUS     reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    TIMES           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DIV             reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    MODULO          reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    PLUS            reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    MINUS           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LEFT_SHIFT      reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RIGHT_SHIFT     reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    IS_EQ           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    NOT_EQ          reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LESS            reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    GREATER_EQ      reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    GREATER         reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LESS_EQ         reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    AMPERSAND       reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    CARET           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    PIPE            reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DOUBLE_AMPERSAND reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    QUESTION        reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    DOUBLE_PIPE     reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    ASSIGN          reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_PLUS         reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_MINUS        reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_TIMES        reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_DIV          reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_MODULO       reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_AND_BIT      reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_OR_BIT       reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_XOR_BIT      reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_LEFT         reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    EQ_RIGHT        reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RBRACKET        reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RANGE           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    COMMA           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RPAREN          reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    SEMICOLON       reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    RBRACE          reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    COLON           reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .)
    LBRACKET        shift and go to state 634
    LPAREN          shift and go to state 635

  ! LPAREN          [ reduce using rule 210 (NewExpression -> NEW AllocatorArguments_opt Type .) ]


state 715

    (212) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression . RBRACKET

    RBRACKET        shift and go to state 760


state 716

    (213) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 761


state 717

    (432) SuperClass_opt -> SuperClass .

    DOT             reduce using rule 432 (SuperClass_opt -> SuperClass .)
    BOOL            reduce using rule 432 (SuperClass_opt -> SuperClass .)
    SHORT           reduce using rule 432 (SuperClass_opt -> SuperClass .)
    USHORT          reduce using rule 432 (SuperClass_opt -> SuperClass .)
    INT             reduce using rule 432 (SuperClass_opt -> SuperClass .)
    UINT            reduce using rule 432 (SuperClass_opt -> SuperClass .)
    LONG            reduce using rule 432 (SuperClass_opt -> SuperClass .)
    ULONG           reduce using rule 432 (SuperClass_opt -> SuperClass .)
    CHAR            reduce using rule 432 (SuperClass_opt -> SuperClass .)
    FLOAT           reduce using rule 432 (SuperClass_opt -> SuperClass .)
    VOID            reduce using rule 432 (SuperClass_opt -> SuperClass .)
    IDENTIFIER      reduce using rule 432 (SuperClass_opt -> SuperClass .)
    TYPEOF          reduce using rule 432 (SuperClass_opt -> SuperClass .)
    LBRACE          reduce using rule 432 (SuperClass_opt -> SuperClass .)


state 718

    (419) SuperClass -> BasicType .

    DOT             reduce using rule 419 (SuperClass -> BasicType .)
    BOOL            reduce using rule 419 (SuperClass -> BasicType .)
    SHORT           reduce using rule 419 (SuperClass -> BasicType .)
    USHORT          reduce using rule 419 (SuperClass -> BasicType .)
    INT             reduce using rule 419 (SuperClass -> BasicType .)
    UINT            reduce using rule 419 (SuperClass -> BasicType .)
    LONG            reduce using rule 419 (SuperClass -> BasicType .)
    ULONG           reduce using rule 419 (SuperClass -> BasicType .)
    CHAR            reduce using rule 419 (SuperClass -> BasicType .)
    FLOAT           reduce using rule 419 (SuperClass -> BasicType .)
    VOID            reduce using rule 419 (SuperClass -> BasicType .)
    IDENTIFIER      reduce using rule 419 (SuperClass -> BasicType .)
    TYPEOF          reduce using rule 419 (SuperClass -> BasicType .)
    LBRACE          reduce using rule 419 (SuperClass -> BasicType .)


state 719

    (433) SuperClass_opt -> empty .

    DOT             reduce using rule 433 (SuperClass_opt -> empty .)
    BOOL            reduce using rule 433 (SuperClass_opt -> empty .)
    SHORT           reduce using rule 433 (SuperClass_opt -> empty .)
    USHORT          reduce using rule 433 (SuperClass_opt -> empty .)
    INT             reduce using rule 433 (SuperClass_opt -> empty .)
    UINT            reduce using rule 433 (SuperClass_opt -> empty .)
    LONG            reduce using rule 433 (SuperClass_opt -> empty .)
    ULONG           reduce using rule 433 (SuperClass_opt -> empty .)
    CHAR            reduce using rule 433 (SuperClass_opt -> empty .)
    FLOAT           reduce using rule 433 (SuperClass_opt -> empty .)
    VOID            reduce using rule 433 (SuperClass_opt -> empty .)
    IDENTIFIER      reduce using rule 433 (SuperClass_opt -> empty .)
    TYPEOF          reduce using rule 433 (SuperClass_opt -> empty .)
    LBRACE          reduce using rule 433 (SuperClass_opt -> empty .)


state 720

    (428) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt . Interfaces_opt AggregateBody
    (434) Interfaces_opt -> . Interfaces
    (435) Interfaces_opt -> . empty
    (420) Interfaces -> . Interface
    (421) Interfaces -> . Interface COMMA Interfaces
    (496) empty -> .
    (422) Interface -> . BasicType
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN

    LBRACE          reduce using rule 496 (empty -> .)
    DOT             shift and go to state 35
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    IDENTIFIER      shift and go to state 40
    TYPEOF          shift and go to state 47

    Interfaces_opt                 shift and go to state 762
    Interfaces                     shift and go to state 763
    BasicType                      shift and go to state 567
    BasicTypeX                     shift and go to state 39
    Typeof                         shift and go to state 43
    IdentifierList                 shift and go to state 34
    Interface                      shift and go to state 260
    empty                          shift and go to state 764

state 721

    (429) ClassArguments -> LPAREN ArgumentList_opt . RPAREN

    RPAREN          shift and go to state 765


state 722

    (233) PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .

    POWER           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    DOT             reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    PLUS_PLUS       reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    MINUS_MINUS     reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    LPAREN          reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    TIMES           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    DIV             reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    MODULO          reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    PLUS            reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    MINUS           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    LEFT_SHIFT      reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    RIGHT_SHIFT     reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    IS_EQ           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    NOT_EQ          reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    LESS            reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    GREATER_EQ      reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    GREATER         reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    LESS_EQ         reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    AMPERSAND       reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    CARET           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    PIPE            reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    DOUBLE_AMPERSAND reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    QUESTION        reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    DOUBLE_PIPE     reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    ASSIGN          reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_PLUS         reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_MINUS        reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_TIMES        reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_DIV          reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_MODULO       reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_AND_BIT      reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_OR_BIT       reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_XOR_BIT      reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_LEFT         reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    EQ_RIGHT        reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    COMMA           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    RPAREN          reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    SEMICOLON       reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    RBRACKET        reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    COLON           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    RANGE           reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)
    RBRACE          reduce using rule 233 (PostfixExpression -> BasicType LPAREN ArgumentList_opt RPAREN JmpMark .)


state 723

    (234) JmpMark -> empty .

    POWER           reduce using rule 234 (JmpMark -> empty .)
    DOT             reduce using rule 234 (JmpMark -> empty .)
    PLUS_PLUS       reduce using rule 234 (JmpMark -> empty .)
    MINUS_MINUS     reduce using rule 234 (JmpMark -> empty .)
    LPAREN          reduce using rule 234 (JmpMark -> empty .)
    TIMES           reduce using rule 234 (JmpMark -> empty .)
    DIV             reduce using rule 234 (JmpMark -> empty .)
    MODULO          reduce using rule 234 (JmpMark -> empty .)
    PLUS            reduce using rule 234 (JmpMark -> empty .)
    MINUS           reduce using rule 234 (JmpMark -> empty .)
    LEFT_SHIFT      reduce using rule 234 (JmpMark -> empty .)
    RIGHT_SHIFT     reduce using rule 234 (JmpMark -> empty .)
    IS_EQ           reduce using rule 234 (JmpMark -> empty .)
    NOT_EQ          reduce using rule 234 (JmpMark -> empty .)
    LESS            reduce using rule 234 (JmpMark -> empty .)
    GREATER_EQ      reduce using rule 234 (JmpMark -> empty .)
    GREATER         reduce using rule 234 (JmpMark -> empty .)
    LESS_EQ         reduce using rule 234 (JmpMark -> empty .)
    AMPERSAND       reduce using rule 234 (JmpMark -> empty .)
    CARET           reduce using rule 234 (JmpMark -> empty .)
    PIPE            reduce using rule 234 (JmpMark -> empty .)
    DOUBLE_AMPERSAND reduce using rule 234 (JmpMark -> empty .)
    QUESTION        reduce using rule 234 (JmpMark -> empty .)
    DOUBLE_PIPE     reduce using rule 234 (JmpMark -> empty .)
    ASSIGN          reduce using rule 234 (JmpMark -> empty .)
    EQ_PLUS         reduce using rule 234 (JmpMark -> empty .)
    EQ_MINUS        reduce using rule 234 (JmpMark -> empty .)
    EQ_TIMES        reduce using rule 234 (JmpMark -> empty .)
    EQ_DIV          reduce using rule 234 (JmpMark -> empty .)
    EQ_MODULO       reduce using rule 234 (JmpMark -> empty .)
    EQ_AND_BIT      reduce using rule 234 (JmpMark -> empty .)
    EQ_OR_BIT       reduce using rule 234 (JmpMark -> empty .)
    EQ_XOR_BIT      reduce using rule 234 (JmpMark -> empty .)
    EQ_LEFT         reduce using rule 234 (JmpMark -> empty .)
    EQ_RIGHT        reduce using rule 234 (JmpMark -> empty .)
    RBRACKET        reduce using rule 234 (JmpMark -> empty .)
    RANGE           reduce using rule 234 (JmpMark -> empty .)
    COMMA           reduce using rule 234 (JmpMark -> empty .)
    RPAREN          reduce using rule 234 (JmpMark -> empty .)
    SEMICOLON       reduce using rule 234 (JmpMark -> empty .)
    RBRACE          reduce using rule 234 (JmpMark -> empty .)
    COLON           reduce using rule 234 (JmpMark -> empty .)


state 724

    (223) CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .

    TIMES           reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    DIV             reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    MODULO          reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    PLUS            reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    MINUS           reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    LEFT_SHIFT      reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RIGHT_SHIFT     reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    IS_EQ           reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    NOT_EQ          reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    LESS            reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    GREATER_EQ      reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    GREATER         reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    LESS_EQ         reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    AMPERSAND       reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    CARET           reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    PIPE            reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    QUESTION        reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    DOUBLE_PIPE     reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    ASSIGN          reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_PLUS         reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_MINUS        reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_TIMES        reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_DIV          reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_MODULO       reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_AND_BIT      reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_OR_BIT       reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_XOR_BIT      reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_LEFT         reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    EQ_RIGHT        reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    COMMA           reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    SEMICOLON       reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RBRACKET        reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RANGE           reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RPAREN          reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    RBRACE          reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)
    COLON           reduce using rule 223 (CastExpression -> CAST LPAREN Type RPAREN UnaryExpression .)


state 725

    (206) UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .

    TIMES           reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    DIV             reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    MODULO          reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    PLUS            reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    MINUS           reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    IS_EQ           reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    LESS            reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    GREATER         reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    CARET           reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    PIPE            reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    QUESTION        reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    ASSIGN          reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    COMMA           reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RBRACKET        reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RANGE           reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RPAREN          reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    RBRACE          reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)
    COLON           reduce using rule 206 (UnaryExpression -> LPAREN Type RPAREN DOT IDENTIFIER .)


state 726

    (75) AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .

    RPAREN          reduce using rule 75 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    ASSIGN          reduce using rule 75 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    COMMA           reduce using rule 75 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    SEMICOLON       reduce using rule 75 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)
    ELLIPSIS        reduce using rule 75 (AltFuncDeclaratorSuffix -> Parameters MemberFunctionAttributes_opt .)


state 727

    (48) DeclaratorIdentifierList -> mark1 DeclaratorIdentifier COMMA DeclaratorIdentifierList .

    SEMICOLON       reduce using rule 48 (DeclaratorIdentifierList -> mark1 DeclaratorIdentifier COMMA DeclaratorIdentifierList .)


state 728

    (56) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .
    (57) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes . ASSIGN Initializer

    COMMA           reduce using rule 56 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 56 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes .)
    ASSIGN          shift and go to state 766


state 729

    (53) VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer .

    COMMA           reduce using rule 53 (VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer .)
    SEMICOLON       reduce using rule 53 (VarDeclaratorIdentifier -> IDENTIFIER ASSIGN Initializer .)


state 730

    (54) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt .
    (55) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt . ASSIGN Initializer

    COMMA           reduce using rule 54 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt .)
    SEMICOLON       reduce using rule 54 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt .)
    ASSIGN          shift and go to state 767


state 731

    (71) AltDeclaratorSuffixes_opt -> empty .

    ASSIGN          reduce using rule 71 (AltDeclaratorSuffixes_opt -> empty .)
    COMMA           reduce using rule 71 (AltDeclaratorSuffixes_opt -> empty .)
    SEMICOLON       reduce using rule 71 (AltDeclaratorSuffixes_opt -> empty .)


state 732

    (70) AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .

    ASSIGN          reduce using rule 70 (AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .)
    COMMA           reduce using rule 70 (AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .)
    SEMICOLON       reduce using rule 70 (AltDeclaratorSuffixes_opt -> AltDeclaratorSuffixes .)


state 733

    (493) Symbol -> DOT SymbolTail .

    RPAREN          reduce using rule 493 (Symbol -> DOT SymbolTail .)


state 734

    (237) PrimaryExpression -> DOT IDENTIFIER .
    (494) SymbolTail -> IDENTIFIER .
    (495) SymbolTail -> IDENTIFIER . DOT SymbolTail
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! reduce/reduce conflict for RPAREN resolved using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
    POWER           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    TIMES           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    DIV             reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    MODULO          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    PLUS            reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    MINUS           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    IS_EQ           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS            reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    GREATER         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    CARET           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    PIPE            reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    QUESTION        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    ASSIGN          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    COMMA           reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    RPAREN          reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .)
    DOT             shift and go to state 737
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LBRACKET        shift and go to state 91

  ! DOT             [ reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 237 (PrimaryExpression -> DOT IDENTIFIER .) ]
  ! RPAREN          [ reduce using rule 494 (SymbolTail -> IDENTIFIER .) ]


state 735

    (401) WithStatement -> WITH LPAREN Symbol RPAREN . ScopeStatement
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 768
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    Declaration                    shift and go to state 465
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    StorageClasses                 shift and go to state 437
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 736

    (400) WithStatement -> WITH LPAREN Expression RPAREN . ScopeStatement
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 769
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 737

    (495) SymbolTail -> IDENTIFIER DOT . SymbolTail
    (104) IdentifierList -> IDENTIFIER DOT . IdentifierList
    (494) SymbolTail -> . IDENTIFIER
    (495) SymbolTail -> . IDENTIFIER DOT SymbolTail
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList

    IDENTIFIER      shift and go to state 771

    SymbolTail                     shift and go to state 770
    IdentifierList                 shift and go to state 251

state 738

    (399) GotoStatement -> GOTO CASE Expression SEMICOLON .

    SEMICOLON       reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CASE            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DEFAULT         reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LBRACE          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IF              reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    WHILE           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DO              reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FOR             reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    SWITCH          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FINAL           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CONTINUE        reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    BREAK           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    RETURN          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    GOTO            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    WITH            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    MIXIN           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IMPORT          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    STATIC          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LPAREN          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ALIAS           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ENUM            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    EXTERN          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    AUTO            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CONST           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    IMMUTABLE       reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FOREACH         reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CLASS           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    UNION           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    AMPERSAND       reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TIMES           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    MINUS           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    PLUS            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    EXCLAMATION     reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TILDE           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CAST            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DOT             reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    THIS            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    NULL            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TRUE            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FALSE           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DOLLAR          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    INUMBER         reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    DNUMBER         reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LIT_CHAR        reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LIT_STR         reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LBRACKET        reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FUNCTION        reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    NEW             reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    BOOL            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    SHORT           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    USHORT          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    INT             reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    UINT            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    LONG            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ULONG           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    CHAR            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    FLOAT           reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    VOID            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TYPEOF          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    TYPEID          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    BODY            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    RBRACE          reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)
    ELSE            reduce using rule 399 (GotoStatement -> GOTO CASE Expression SEMICOLON .)


state 739

    (358) ForeachTypeList -> ForeachType COMMA . ForeachTypeList
    (357) ForeachTypeList -> . ForeachType
    (358) ForeachTypeList -> . ForeachType COMMA ForeachTypeList
    (359) ForeachType -> . ForeachTypeAttributes_opt BasicType Declarator
    (360) ForeachType -> . ForeachTypeAttributes_opt IDENTIFIER
    (361) ForeachType -> . ForeachTypeAttributes_opt ALIAS IDENTIFIER
    (362) ForeachTypeAttributes_opt -> . ForeachTypeAttributes
    (363) ForeachTypeAttributes_opt -> . empty
    (364) ForeachTypeAttributes -> . ForeachTypeAttribute
    (365) ForeachTypeAttributes -> . ForeachTypeAttribute ForeachTypeAttributes_opt
    (496) empty -> .
    (366) ForeachTypeAttribute -> . ENUM

    IDENTIFIER      reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    ENUM            shift and go to state 614

    ForeachType                    shift and go to state 673
    ForeachTypeAttributes_opt      shift and go to state 617
    ForeachTypeAttribute           shift and go to state 613
    ForeachTypeAttributes          shift and go to state 618
    ForeachTypeList                shift and go to state 772
    empty                          shift and go to state 675

state 740

    (353) AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON . ForeachAggregate RPAREN
    (367) ForeachAggregate -> . Expression
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    FunctionLiteralBody            shift and go to state 219
    CmpExpression                  shift and go to state 230
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 773
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    ForeachAggregate               shift and go to state 774
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 741

    (388) FinalSwitchStatement -> FINAL SWITCH LPAREN Expression . RPAREN ScopeStatement

    RPAREN          shift and go to state 775


state 742

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark . Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (348) Test_opt -> . Test
    (349) Test_opt -> . empty
    (347) Test -> . Expression
    (496) empty -> .
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    SEMICOLON       reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    Test                           shift and go to state 776
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    ComplementExpression           shift and go to state 205
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 777
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BlockStatement                 shift and go to state 175
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 778
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    ImportExpression               shift and go to state 188
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    Test_opt                       shift and go to state 779
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 743

    (341) for_test_mark -> empty .

    AMPERSAND       reduce using rule 341 (for_test_mark -> empty .)
    PLUS_PLUS       reduce using rule 341 (for_test_mark -> empty .)
    MINUS_MINUS     reduce using rule 341 (for_test_mark -> empty .)
    TIMES           reduce using rule 341 (for_test_mark -> empty .)
    MINUS           reduce using rule 341 (for_test_mark -> empty .)
    PLUS            reduce using rule 341 (for_test_mark -> empty .)
    EXCLAMATION     reduce using rule 341 (for_test_mark -> empty .)
    LPAREN          reduce using rule 341 (for_test_mark -> empty .)
    TILDE           reduce using rule 341 (for_test_mark -> empty .)
    CAST            reduce using rule 341 (for_test_mark -> empty .)
    IDENTIFIER      reduce using rule 341 (for_test_mark -> empty .)
    DOT             reduce using rule 341 (for_test_mark -> empty .)
    THIS            reduce using rule 341 (for_test_mark -> empty .)
    NULL            reduce using rule 341 (for_test_mark -> empty .)
    TRUE            reduce using rule 341 (for_test_mark -> empty .)
    FALSE           reduce using rule 341 (for_test_mark -> empty .)
    DOLLAR          reduce using rule 341 (for_test_mark -> empty .)
    INUMBER         reduce using rule 341 (for_test_mark -> empty .)
    DNUMBER         reduce using rule 341 (for_test_mark -> empty .)
    LIT_CHAR        reduce using rule 341 (for_test_mark -> empty .)
    LIT_STR         reduce using rule 341 (for_test_mark -> empty .)
    LBRACKET        reduce using rule 341 (for_test_mark -> empty .)
    FUNCTION        reduce using rule 341 (for_test_mark -> empty .)
    MIXIN           reduce using rule 341 (for_test_mark -> empty .)
    IMPORT          reduce using rule 341 (for_test_mark -> empty .)
    NEW             reduce using rule 341 (for_test_mark -> empty .)
    BOOL            reduce using rule 341 (for_test_mark -> empty .)
    SHORT           reduce using rule 341 (for_test_mark -> empty .)
    USHORT          reduce using rule 341 (for_test_mark -> empty .)
    INT             reduce using rule 341 (for_test_mark -> empty .)
    UINT            reduce using rule 341 (for_test_mark -> empty .)
    LONG            reduce using rule 341 (for_test_mark -> empty .)
    ULONG           reduce using rule 341 (for_test_mark -> empty .)
    CHAR            reduce using rule 341 (for_test_mark -> empty .)
    FLOAT           reduce using rule 341 (for_test_mark -> empty .)
    VOID            reduce using rule 341 (for_test_mark -> empty .)
    TYPEOF          reduce using rule 341 (for_test_mark -> empty .)
    TYPEID          reduce using rule 341 (for_test_mark -> empty .)
    LBRACE          reduce using rule 341 (for_test_mark -> empty .)
    BODY            reduce using rule 341 (for_test_mark -> empty .)
    SEMICOLON       reduce using rule 341 (for_test_mark -> empty .)


state 744

    (402) MixinStatement -> MIXIN LPAREN AssignExpression RPAREN . SEMICOLON
    (271) MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 780
    POWER           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOT             reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LPAREN          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    TIMES           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DIV             reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MODULO          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PLUS            reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    MINUS           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    IS_EQ           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    NOT_EQ          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS            reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER_EQ      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    GREATER         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    LESS_EQ         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    AMPERSAND       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    CARET           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    PIPE            reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    QUESTION        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    ASSIGN          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_PLUS         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MINUS        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_TIMES        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_DIV          reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_MODULO       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_LEFT         reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)
    COMMA           reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .)

  ! SEMICOLON       [ reduce using rule 271 (MixinExpression -> MIXIN LPAREN AssignExpression RPAREN .) ]


state 745

    (384) StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .

    SEMICOLON       reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CASE            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DEFAULT         reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LBRACE          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IF              reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    WHILE           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DO              reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FOR             reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    SWITCH          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FINAL           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CONTINUE        reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    BREAK           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    RETURN          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    GOTO            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    WITH            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    MIXIN           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IMPORT          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    STATIC          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LPAREN          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ALIAS           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ENUM            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    EXTERN          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    AUTO            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CONST           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FOREACH         reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CLASS           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    UNION           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    AMPERSAND       reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TIMES           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    MINUS           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    PLUS            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TILDE           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CAST            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DOT             reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    THIS            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    NULL            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TRUE            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FALSE           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DOLLAR          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    INUMBER         reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    DNUMBER         reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LIT_STR         reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LBRACKET        reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FUNCTION        reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    NEW             reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    BOOL            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    SHORT           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    USHORT          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    INT             reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    UINT            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    LONG            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ULONG           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    CHAR            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    FLOAT           reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    VOID            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TYPEOF          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    TYPEID          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    BODY            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    RBRACE          reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)
    ELSE            reduce using rule 384 (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault StatementListNoCaseNoDefault .)


state 746

    (333) WhileStatement -> WHILE LPAREN while_M0 Expression . RPAREN while_M1 ScopeStatement while_M2

    RPAREN          shift and go to state 781


state 747

    (375) CaseStatement -> CASE ArgumentList COLON c_m1 . ScopeStatementList c_m2
    (382) ScopeStatementList -> . StatementListNoCaseNoDefault
    (383) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (384) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (385) StatementNoCaseNoDefault -> . SEMICOLON
    (386) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (387) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (309) ScopeBlockStatement -> . BlockStatement
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    SEMICOLON       shift and go to state 684
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 145
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 430
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    ScopeStatementList             shift and go to state 782
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StatementNoCaseNoDefault       shift and go to state 683
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    StatementListNoCaseNoDefault   shift and go to state 685
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    Declaration                    shift and go to state 465
    LIT_STRPlus                    shift and go to state 210
    empty                          shift and go to state 62
    NonEmptyStatementNoCaseNoDefault shift and go to state 686
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    ScopeBlockStatement            shift and go to state 687
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 748

    (376) c_m1 -> empty .

    SEMICOLON       reduce using rule 376 (c_m1 -> empty .)
    IDENTIFIER      reduce using rule 376 (c_m1 -> empty .)
    IF              reduce using rule 376 (c_m1 -> empty .)
    WHILE           reduce using rule 376 (c_m1 -> empty .)
    DO              reduce using rule 376 (c_m1 -> empty .)
    FOR             reduce using rule 376 (c_m1 -> empty .)
    SWITCH          reduce using rule 376 (c_m1 -> empty .)
    FINAL           reduce using rule 376 (c_m1 -> empty .)
    CONTINUE        reduce using rule 376 (c_m1 -> empty .)
    BREAK           reduce using rule 376 (c_m1 -> empty .)
    RETURN          reduce using rule 376 (c_m1 -> empty .)
    GOTO            reduce using rule 376 (c_m1 -> empty .)
    WITH            reduce using rule 376 (c_m1 -> empty .)
    MIXIN           reduce using rule 376 (c_m1 -> empty .)
    IMPORT          reduce using rule 376 (c_m1 -> empty .)
    STATIC          reduce using rule 376 (c_m1 -> empty .)
    LBRACE          reduce using rule 376 (c_m1 -> empty .)
    LPAREN          reduce using rule 376 (c_m1 -> empty .)
    ALIAS           reduce using rule 376 (c_m1 -> empty .)
    ENUM            reduce using rule 376 (c_m1 -> empty .)
    EXTERN          reduce using rule 376 (c_m1 -> empty .)
    AUTO            reduce using rule 376 (c_m1 -> empty .)
    CONST           reduce using rule 376 (c_m1 -> empty .)
    IMMUTABLE       reduce using rule 376 (c_m1 -> empty .)
    FOREACH         reduce using rule 376 (c_m1 -> empty .)
    FOREACH_REVERSE reduce using rule 376 (c_m1 -> empty .)
    CLASS           reduce using rule 376 (c_m1 -> empty .)
    UNION           reduce using rule 376 (c_m1 -> empty .)
    AMPERSAND       reduce using rule 376 (c_m1 -> empty .)
    PLUS_PLUS       reduce using rule 376 (c_m1 -> empty .)
    MINUS_MINUS     reduce using rule 376 (c_m1 -> empty .)
    TIMES           reduce using rule 376 (c_m1 -> empty .)
    MINUS           reduce using rule 376 (c_m1 -> empty .)
    PLUS            reduce using rule 376 (c_m1 -> empty .)
    EXCLAMATION     reduce using rule 376 (c_m1 -> empty .)
    TILDE           reduce using rule 376 (c_m1 -> empty .)
    CAST            reduce using rule 376 (c_m1 -> empty .)
    DOT             reduce using rule 376 (c_m1 -> empty .)
    THIS            reduce using rule 376 (c_m1 -> empty .)
    NULL            reduce using rule 376 (c_m1 -> empty .)
    TRUE            reduce using rule 376 (c_m1 -> empty .)
    FALSE           reduce using rule 376 (c_m1 -> empty .)
    DOLLAR          reduce using rule 376 (c_m1 -> empty .)
    INUMBER         reduce using rule 376 (c_m1 -> empty .)
    DNUMBER         reduce using rule 376 (c_m1 -> empty .)
    LIT_CHAR        reduce using rule 376 (c_m1 -> empty .)
    LIT_STR         reduce using rule 376 (c_m1 -> empty .)
    LBRACKET        reduce using rule 376 (c_m1 -> empty .)
    FUNCTION        reduce using rule 376 (c_m1 -> empty .)
    NEW             reduce using rule 376 (c_m1 -> empty .)
    BOOL            reduce using rule 376 (c_m1 -> empty .)
    SHORT           reduce using rule 376 (c_m1 -> empty .)
    USHORT          reduce using rule 376 (c_m1 -> empty .)
    INT             reduce using rule 376 (c_m1 -> empty .)
    UINT            reduce using rule 376 (c_m1 -> empty .)
    LONG            reduce using rule 376 (c_m1 -> empty .)
    ULONG           reduce using rule 376 (c_m1 -> empty .)
    CHAR            reduce using rule 376 (c_m1 -> empty .)
    FLOAT           reduce using rule 376 (c_m1 -> empty .)
    VOID            reduce using rule 376 (c_m1 -> empty .)
    TYPEOF          reduce using rule 376 (c_m1 -> empty .)
    TYPEID          reduce using rule 376 (c_m1 -> empty .)
    BODY            reduce using rule 376 (c_m1 -> empty .)


state 749

    (378) CaseRangeStatement -> CASE FirstExp COLON RANGE . LastExp COLON ScopeStatementList
    (380) LastExp -> . AssignExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    LastExp                        shift and go to state 783
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 784

state 750

    (372) SwitchStatement -> SWITCH LPAREN Expression RPAREN . switch_M1 ScopeStatement switch_M2
    (373) switch_M1 -> . empty
    (496) empty -> .

    LBRACE          reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)

    switch_M1                      shift and go to state 785
    empty                          shift and go to state 786

state 751

    (337) DoStatement -> DO Dowhile_M1 ScopeStatement WHILE . LPAREN Expression RPAREN Dowhile_M2

    LPAREN          shift and go to state 787


state 752

    (368) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression . RANGE UprExpression RPAREN

    RANGE           shift and go to state 788


state 753

    (369) LwrExpression -> Expression .

    RANGE           reduce using rule 369 (LwrExpression -> Expression .)


state 754

    (60) VarDeclarator -> BasicType2_opt . IDENTIFIER
    (61) AltDeclarator -> BasicType2_opt . IDENTIFIER AltDeclaratorSuffixes
    (62) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN
    (63) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltFuncDeclaratorSuffix
    (64) AltDeclarator -> BasicType2_opt . LPAREN AltDeclaratorX RPAREN AltDeclaratorSuffixes

    IDENTIFIER      shift and go to state 620
    LPAREN          shift and go to state 235


state 755

    (359) ForeachType -> ForeachTypeAttributes_opt BasicType Declarator .

    COMMA           reduce using rule 359 (ForeachType -> ForeachTypeAttributes_opt BasicType Declarator .)
    SEMICOLON       reduce using rule 359 (ForeachType -> ForeachTypeAttributes_opt BasicType Declarator .)


state 756

    (361) ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER .

    COMMA           reduce using rule 361 (ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER .)
    SEMICOLON       reduce using rule 361 (ForeachType -> ForeachTypeAttributes_opt ALIAS IDENTIFIER .)


state 757

    (322) IfStatement -> IF LPAREN IfCondition RPAREN . ifmark1 ThenStatement ifmark2
    (323) IfStatement -> IF LPAREN IfCondition RPAREN . ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (327) ifmark1 -> . empty
    (496) empty -> .

    LBRACE          reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)

    ifmark1                        shift and go to state 789
    empty                          shift and go to state 790

state 758

    (330) IfCondition -> BasicType Declarator . ASSIGN Expression

    ASSIGN          shift and go to state 791


state 759

    (329) IfCondition -> AUTO IDENTIFIER . ASSIGN Expression

    ASSIGN          shift and go to state 792


state 760

    (212) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .

    POWER           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DOT             reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LPAREN          reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    TIMES           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DIV             reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    MODULO          reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    PLUS            reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    MINUS           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    IS_EQ           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    NOT_EQ          reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LESS            reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    GREATER         reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    LESS_EQ         reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    AMPERSAND       reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    CARET           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    PIPE            reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    QUESTION        reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    ASSIGN          reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_DIV          reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    COMMA           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RPAREN          reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RBRACKET        reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RANGE           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    SEMICOLON       reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    RBRACE          reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)
    COLON           reduce using rule 212 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET .)


state 761

    (213) NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .

    POWER           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DOT             reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    PLUS_PLUS       reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    MINUS_MINUS     reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LPAREN          reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    TIMES           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DIV             reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    MODULO          reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    PLUS            reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    MINUS           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LEFT_SHIFT      reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RIGHT_SHIFT     reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    IS_EQ           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    NOT_EQ          reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LESS            reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    GREATER_EQ      reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    GREATER         reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    LESS_EQ         reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    AMPERSAND       reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    CARET           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    PIPE            reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    QUESTION        reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    DOUBLE_PIPE     reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    ASSIGN          reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_PLUS         reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_MINUS        reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_TIMES        reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_DIV          reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_MODULO       reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_AND_BIT      reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_OR_BIT       reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_XOR_BIT      reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_LEFT         reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    EQ_RIGHT        reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    COMMA           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RPAREN          reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RBRACKET        reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RANGE           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    SEMICOLON       reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    RBRACE          reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)
    COLON           reduce using rule 213 (NewExpressionWithArgs -> NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN .)


state 762

    (428) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt . AggregateBody
    (409) AggregateBody -> . LBRACE DeclDefs_opt RBRACE

    LBRACE          shift and go to state 52

    AggregateBody                  shift and go to state 793

state 763

    (434) Interfaces_opt -> Interfaces .

    LBRACE          reduce using rule 434 (Interfaces_opt -> Interfaces .)


state 764

    (435) Interfaces_opt -> empty .

    LBRACE          reduce using rule 435 (Interfaces_opt -> empty .)


state 765

    (429) ClassArguments -> LPAREN ArgumentList_opt RPAREN .

    DOT             reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    BOOL            reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    SHORT           reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    USHORT          reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    INT             reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    UINT            reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    LONG            reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    ULONG           reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    CHAR            reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    FLOAT           reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    VOID            reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    IDENTIFIER      reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    TYPEOF          reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)
    LBRACE          reduce using rule 429 (ClassArguments -> LPAREN ArgumentList_opt RPAREN .)


state 766

    (57) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN . Initializer
    (115) Initializer -> . VoidInitializer
    (116) Initializer -> . NonVoidInitializer
    (143) VoidInitializer -> . VOID
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    VOID            shift and go to state 306
    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    Initializer                    shift and go to state 794
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    NonVoidInitializer             shift and go to state 308
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    ArrayInitializer               shift and go to state 309
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    VoidInitializer                shift and go to state 310
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 313

state 767

    (55) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN . Initializer
    (115) Initializer -> . VoidInitializer
    (116) Initializer -> . NonVoidInitializer
    (143) VoidInitializer -> . VOID
    (117) NonVoidInitializer -> . ExpInitializer
    (118) NonVoidInitializer -> . ArrayInitializer
    (119) ExpInitializer -> . AssignExpression
    (120) ArrayInitializer -> . LBRACKET ArrayMemberInitializations_opt RBRACKET
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    VOID            shift and go to state 306
    LBRACKET        shift and go to state 307
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    IdentifierList                 shift and go to state 244
    ImportExpression               shift and go to state 188
    PowExpression                  shift and go to state 190
    AndExpression                  shift and go to state 170
    XorExpression                  shift and go to state 223
    FunctionLiteralBody            shift and go to state 219
    Initializer                    shift and go to state 795
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    BasicType                      shift and go to state 247
    NonVoidInitializer             shift and go to state 308
    BasicTypeX                     shift and go to state 249
    BodyStatement                  shift and go to state 213
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    ArrayInitializer               shift and go to state 309
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    VoidInitializer                shift and go to state 310
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    TypeidExpression               shift and go to state 220
    ExpInitializer                 shift and go to state 312
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 313

state 768

    (401) WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .

    SEMICOLON       reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CASE            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LBRACE          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IF              reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    WHILE           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DO              reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FOR             reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    SWITCH          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FINAL           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    BREAK           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    RETURN          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    GOTO            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    WITH            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    MIXIN           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IMPORT          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    STATIC          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LPAREN          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ALIAS           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ENUM            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    EXTERN          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    AUTO            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CONST           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FOREACH         reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CLASS           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    UNION           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    AMPERSAND       reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TIMES           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    MINUS           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    PLUS            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TILDE           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CAST            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DOT             reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    THIS            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    NULL            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TRUE            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FALSE           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    INUMBER         reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    NEW             reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    BOOL            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    SHORT           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    USHORT          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    INT             reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    UINT            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    LONG            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ULONG           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    CHAR            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    FLOAT           reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    VOID            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    TYPEID          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    BODY            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    RBRACE          reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)
    ELSE            reduce using rule 401 (WithStatement -> WITH LPAREN Symbol RPAREN ScopeStatement .)


state 769

    (400) WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .

    SEMICOLON       reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CASE            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LBRACE          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IF              reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    WHILE           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DO              reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FOR             reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    SWITCH          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FINAL           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    BREAK           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    RETURN          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    GOTO            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    WITH            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    MIXIN           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IMPORT          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    STATIC          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LPAREN          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ALIAS           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ENUM            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    EXTERN          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    AUTO            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CONST           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH         reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CLASS           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    UNION           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    AMPERSAND       reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TIMES           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    MINUS           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    PLUS            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TILDE           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CAST            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DOT             reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    THIS            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    NULL            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TRUE            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FALSE           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    INUMBER         reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    NEW             reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    BOOL            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    SHORT           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    USHORT          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    INT             reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    UINT            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    LONG            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ULONG           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    CHAR            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    FLOAT           reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    VOID            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    TYPEID          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    BODY            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    RBRACE          reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)
    ELSE            reduce using rule 400 (WithStatement -> WITH LPAREN Expression RPAREN ScopeStatement .)


state 770

    (495) SymbolTail -> IDENTIFIER DOT SymbolTail .

    RPAREN          reduce using rule 495 (SymbolTail -> IDENTIFIER DOT SymbolTail .)


state 771

    (494) SymbolTail -> IDENTIFIER .
    (495) SymbolTail -> IDENTIFIER . DOT SymbolTail
    (103) IdentifierList -> IDENTIFIER .
    (104) IdentifierList -> IDENTIFIER . DOT IdentifierList
    (105) IdentifierList -> IDENTIFIER . LBRACKET AssignExpression RBRACKET DOT IdentifierList

  ! reduce/reduce conflict for RPAREN resolved using rule 103 (IdentifierList -> IDENTIFIER .)
    DOT             shift and go to state 737
    POWER           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    TIMES           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DIV             reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MODULO          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PLUS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    MINUS           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    IS_EQ           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    NOT_EQ          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    GREATER         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LESS_EQ         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    AMPERSAND       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    CARET           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    PIPE            reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    QUESTION        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_DIV          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    COMMA           reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    RPAREN          reduce using rule 103 (IdentifierList -> IDENTIFIER .)
    LBRACKET        shift and go to state 91

  ! RPAREN          [ reduce using rule 494 (SymbolTail -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 103 (IdentifierList -> IDENTIFIER .) ]


state 772

    (358) ForeachTypeList -> ForeachType COMMA ForeachTypeList .

    SEMICOLON       reduce using rule 358 (ForeachTypeList -> ForeachType COMMA ForeachTypeList .)


state 773

    (367) ForeachAggregate -> Expression .

    RPAREN          reduce using rule 367 (ForeachAggregate -> Expression .)


state 774

    (353) AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate . RPAREN

    RPAREN          shift and go to state 796


state 775

    (388) FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN . ScopeStatement
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 797
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 776

    (348) Test_opt -> Test .

    SEMICOLON       reduce using rule 348 (Test_opt -> Test .)


state 777

    (349) Test_opt -> empty .

    SEMICOLON       reduce using rule 349 (Test_opt -> empty .)


state 778

    (347) Test -> Expression .

    SEMICOLON       reduce using rule 347 (Test -> Expression .)


state 779

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt . SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3

    SEMICOLON       shift and go to state 798


state 780

    (402) MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CASE            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IF              reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    WHILE           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DO              reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FOR             reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FINAL           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BREAK           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    RETURN          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    GOTO            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    WITH            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    MIXIN           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    STATIC          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ALIAS           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ENUM            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    AUTO            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CONST           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    IMMUTABLE       reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FOREACH         reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FOREACH_REVERSE reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CLASS           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UNION           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    AMPERSAND       reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PLUS_PLUS       reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    MINUS_MINUS     reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TIMES           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    MINUS           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    PLUS            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TILDE           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CAST            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DOT             reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    THIS            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    NULL            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TRUE            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FALSE           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DOLLAR          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    INUMBER         reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    DNUMBER         reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LIT_CHAR        reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LIT_STR         reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    NEW             reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BOOL            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    SHORT           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    USHORT          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    INT             reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    UINT            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    LONG            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ULONG           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    CHAR            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    VOID            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    TYPEID          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    BODY            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)
    ELSE            reduce using rule 402 (MixinStatement -> MIXIN LPAREN AssignExpression RPAREN SEMICOLON .)


state 781

    (333) WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN . while_M1 ScopeStatement while_M2
    (335) while_M1 -> .

    LBRACE          reduce using rule 335 (while_M1 -> .)
    CASE            reduce using rule 335 (while_M1 -> .)
    DEFAULT         reduce using rule 335 (while_M1 -> .)
    IDENTIFIER      reduce using rule 335 (while_M1 -> .)
    IF              reduce using rule 335 (while_M1 -> .)
    WHILE           reduce using rule 335 (while_M1 -> .)
    DO              reduce using rule 335 (while_M1 -> .)
    FOR             reduce using rule 335 (while_M1 -> .)
    SWITCH          reduce using rule 335 (while_M1 -> .)
    FINAL           reduce using rule 335 (while_M1 -> .)
    CONTINUE        reduce using rule 335 (while_M1 -> .)
    BREAK           reduce using rule 335 (while_M1 -> .)
    RETURN          reduce using rule 335 (while_M1 -> .)
    GOTO            reduce using rule 335 (while_M1 -> .)
    WITH            reduce using rule 335 (while_M1 -> .)
    MIXIN           reduce using rule 335 (while_M1 -> .)
    IMPORT          reduce using rule 335 (while_M1 -> .)
    STATIC          reduce using rule 335 (while_M1 -> .)
    LPAREN          reduce using rule 335 (while_M1 -> .)
    ALIAS           reduce using rule 335 (while_M1 -> .)
    ENUM            reduce using rule 335 (while_M1 -> .)
    EXTERN          reduce using rule 335 (while_M1 -> .)
    AUTO            reduce using rule 335 (while_M1 -> .)
    CONST           reduce using rule 335 (while_M1 -> .)
    IMMUTABLE       reduce using rule 335 (while_M1 -> .)
    FOREACH         reduce using rule 335 (while_M1 -> .)
    FOREACH_REVERSE reduce using rule 335 (while_M1 -> .)
    CLASS           reduce using rule 335 (while_M1 -> .)
    UNION           reduce using rule 335 (while_M1 -> .)
    AMPERSAND       reduce using rule 335 (while_M1 -> .)
    PLUS_PLUS       reduce using rule 335 (while_M1 -> .)
    MINUS_MINUS     reduce using rule 335 (while_M1 -> .)
    TIMES           reduce using rule 335 (while_M1 -> .)
    MINUS           reduce using rule 335 (while_M1 -> .)
    PLUS            reduce using rule 335 (while_M1 -> .)
    EXCLAMATION     reduce using rule 335 (while_M1 -> .)
    TILDE           reduce using rule 335 (while_M1 -> .)
    CAST            reduce using rule 335 (while_M1 -> .)
    DOT             reduce using rule 335 (while_M1 -> .)
    THIS            reduce using rule 335 (while_M1 -> .)
    NULL            reduce using rule 335 (while_M1 -> .)
    TRUE            reduce using rule 335 (while_M1 -> .)
    FALSE           reduce using rule 335 (while_M1 -> .)
    DOLLAR          reduce using rule 335 (while_M1 -> .)
    INUMBER         reduce using rule 335 (while_M1 -> .)
    DNUMBER         reduce using rule 335 (while_M1 -> .)
    LIT_CHAR        reduce using rule 335 (while_M1 -> .)
    LIT_STR         reduce using rule 335 (while_M1 -> .)
    LBRACKET        reduce using rule 335 (while_M1 -> .)
    FUNCTION        reduce using rule 335 (while_M1 -> .)
    NEW             reduce using rule 335 (while_M1 -> .)
    BOOL            reduce using rule 335 (while_M1 -> .)
    SHORT           reduce using rule 335 (while_M1 -> .)
    USHORT          reduce using rule 335 (while_M1 -> .)
    INT             reduce using rule 335 (while_M1 -> .)
    UINT            reduce using rule 335 (while_M1 -> .)
    LONG            reduce using rule 335 (while_M1 -> .)
    ULONG           reduce using rule 335 (while_M1 -> .)
    CHAR            reduce using rule 335 (while_M1 -> .)
    FLOAT           reduce using rule 335 (while_M1 -> .)
    VOID            reduce using rule 335 (while_M1 -> .)
    TYPEOF          reduce using rule 335 (while_M1 -> .)
    TYPEID          reduce using rule 335 (while_M1 -> .)
    BODY            reduce using rule 335 (while_M1 -> .)

    while_M1                       shift and go to state 799

state 782

    (375) CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList . c_m2
    (377) c_m2 -> . empty
    (496) empty -> .

    SEMICOLON       reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    ELSE            reduce using rule 496 (empty -> .)

    c_m2                           shift and go to state 800
    empty                          shift and go to state 801

state 783

    (378) CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp . COLON ScopeStatementList

    COLON           shift and go to state 802


state 784

    (380) LastExp -> AssignExpression .

    COLON           reduce using rule 380 (LastExp -> AssignExpression .)


state 785

    (372) SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 . ScopeStatement switch_M2
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 803
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    StorageClasses                 shift and go to state 437
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    Declaration                    shift and go to state 465
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 786

    (373) switch_M1 -> empty .

    LBRACE          reduce using rule 373 (switch_M1 -> empty .)
    CASE            reduce using rule 373 (switch_M1 -> empty .)
    DEFAULT         reduce using rule 373 (switch_M1 -> empty .)
    IDENTIFIER      reduce using rule 373 (switch_M1 -> empty .)
    IF              reduce using rule 373 (switch_M1 -> empty .)
    WHILE           reduce using rule 373 (switch_M1 -> empty .)
    DO              reduce using rule 373 (switch_M1 -> empty .)
    FOR             reduce using rule 373 (switch_M1 -> empty .)
    SWITCH          reduce using rule 373 (switch_M1 -> empty .)
    FINAL           reduce using rule 373 (switch_M1 -> empty .)
    CONTINUE        reduce using rule 373 (switch_M1 -> empty .)
    BREAK           reduce using rule 373 (switch_M1 -> empty .)
    RETURN          reduce using rule 373 (switch_M1 -> empty .)
    GOTO            reduce using rule 373 (switch_M1 -> empty .)
    WITH            reduce using rule 373 (switch_M1 -> empty .)
    MIXIN           reduce using rule 373 (switch_M1 -> empty .)
    IMPORT          reduce using rule 373 (switch_M1 -> empty .)
    STATIC          reduce using rule 373 (switch_M1 -> empty .)
    LPAREN          reduce using rule 373 (switch_M1 -> empty .)
    ALIAS           reduce using rule 373 (switch_M1 -> empty .)
    ENUM            reduce using rule 373 (switch_M1 -> empty .)
    EXTERN          reduce using rule 373 (switch_M1 -> empty .)
    AUTO            reduce using rule 373 (switch_M1 -> empty .)
    CONST           reduce using rule 373 (switch_M1 -> empty .)
    IMMUTABLE       reduce using rule 373 (switch_M1 -> empty .)
    FOREACH         reduce using rule 373 (switch_M1 -> empty .)
    FOREACH_REVERSE reduce using rule 373 (switch_M1 -> empty .)
    CLASS           reduce using rule 373 (switch_M1 -> empty .)
    UNION           reduce using rule 373 (switch_M1 -> empty .)
    AMPERSAND       reduce using rule 373 (switch_M1 -> empty .)
    PLUS_PLUS       reduce using rule 373 (switch_M1 -> empty .)
    MINUS_MINUS     reduce using rule 373 (switch_M1 -> empty .)
    TIMES           reduce using rule 373 (switch_M1 -> empty .)
    MINUS           reduce using rule 373 (switch_M1 -> empty .)
    PLUS            reduce using rule 373 (switch_M1 -> empty .)
    EXCLAMATION     reduce using rule 373 (switch_M1 -> empty .)
    TILDE           reduce using rule 373 (switch_M1 -> empty .)
    CAST            reduce using rule 373 (switch_M1 -> empty .)
    DOT             reduce using rule 373 (switch_M1 -> empty .)
    THIS            reduce using rule 373 (switch_M1 -> empty .)
    NULL            reduce using rule 373 (switch_M1 -> empty .)
    TRUE            reduce using rule 373 (switch_M1 -> empty .)
    FALSE           reduce using rule 373 (switch_M1 -> empty .)
    DOLLAR          reduce using rule 373 (switch_M1 -> empty .)
    INUMBER         reduce using rule 373 (switch_M1 -> empty .)
    DNUMBER         reduce using rule 373 (switch_M1 -> empty .)
    LIT_CHAR        reduce using rule 373 (switch_M1 -> empty .)
    LIT_STR         reduce using rule 373 (switch_M1 -> empty .)
    LBRACKET        reduce using rule 373 (switch_M1 -> empty .)
    FUNCTION        reduce using rule 373 (switch_M1 -> empty .)
    NEW             reduce using rule 373 (switch_M1 -> empty .)
    BOOL            reduce using rule 373 (switch_M1 -> empty .)
    SHORT           reduce using rule 373 (switch_M1 -> empty .)
    USHORT          reduce using rule 373 (switch_M1 -> empty .)
    INT             reduce using rule 373 (switch_M1 -> empty .)
    UINT            reduce using rule 373 (switch_M1 -> empty .)
    LONG            reduce using rule 373 (switch_M1 -> empty .)
    ULONG           reduce using rule 373 (switch_M1 -> empty .)
    CHAR            reduce using rule 373 (switch_M1 -> empty .)
    FLOAT           reduce using rule 373 (switch_M1 -> empty .)
    VOID            reduce using rule 373 (switch_M1 -> empty .)
    TYPEOF          reduce using rule 373 (switch_M1 -> empty .)
    TYPEID          reduce using rule 373 (switch_M1 -> empty .)
    BODY            reduce using rule 373 (switch_M1 -> empty .)


state 787

    (337) DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN . Expression RPAREN Dowhile_M2
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 804
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 788

    (368) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE . UprExpression RPAREN
    (370) UprExpression -> . Expression
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    UprExpression                  shift and go to state 805
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 806
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 789

    (322) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 . ThenStatement ifmark2
    (323) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 . ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (331) ThenStatement -> . ScopeStatement
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 807
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    ThenStatement                  shift and go to state 808
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 790

    (327) ifmark1 -> empty .

    LBRACE          reduce using rule 327 (ifmark1 -> empty .)
    CASE            reduce using rule 327 (ifmark1 -> empty .)
    DEFAULT         reduce using rule 327 (ifmark1 -> empty .)
    IDENTIFIER      reduce using rule 327 (ifmark1 -> empty .)
    IF              reduce using rule 327 (ifmark1 -> empty .)
    WHILE           reduce using rule 327 (ifmark1 -> empty .)
    DO              reduce using rule 327 (ifmark1 -> empty .)
    FOR             reduce using rule 327 (ifmark1 -> empty .)
    SWITCH          reduce using rule 327 (ifmark1 -> empty .)
    FINAL           reduce using rule 327 (ifmark1 -> empty .)
    CONTINUE        reduce using rule 327 (ifmark1 -> empty .)
    BREAK           reduce using rule 327 (ifmark1 -> empty .)
    RETURN          reduce using rule 327 (ifmark1 -> empty .)
    GOTO            reduce using rule 327 (ifmark1 -> empty .)
    WITH            reduce using rule 327 (ifmark1 -> empty .)
    MIXIN           reduce using rule 327 (ifmark1 -> empty .)
    IMPORT          reduce using rule 327 (ifmark1 -> empty .)
    STATIC          reduce using rule 327 (ifmark1 -> empty .)
    LPAREN          reduce using rule 327 (ifmark1 -> empty .)
    ALIAS           reduce using rule 327 (ifmark1 -> empty .)
    ENUM            reduce using rule 327 (ifmark1 -> empty .)
    EXTERN          reduce using rule 327 (ifmark1 -> empty .)
    AUTO            reduce using rule 327 (ifmark1 -> empty .)
    CONST           reduce using rule 327 (ifmark1 -> empty .)
    IMMUTABLE       reduce using rule 327 (ifmark1 -> empty .)
    FOREACH         reduce using rule 327 (ifmark1 -> empty .)
    FOREACH_REVERSE reduce using rule 327 (ifmark1 -> empty .)
    CLASS           reduce using rule 327 (ifmark1 -> empty .)
    UNION           reduce using rule 327 (ifmark1 -> empty .)
    AMPERSAND       reduce using rule 327 (ifmark1 -> empty .)
    PLUS_PLUS       reduce using rule 327 (ifmark1 -> empty .)
    MINUS_MINUS     reduce using rule 327 (ifmark1 -> empty .)
    TIMES           reduce using rule 327 (ifmark1 -> empty .)
    MINUS           reduce using rule 327 (ifmark1 -> empty .)
    PLUS            reduce using rule 327 (ifmark1 -> empty .)
    EXCLAMATION     reduce using rule 327 (ifmark1 -> empty .)
    TILDE           reduce using rule 327 (ifmark1 -> empty .)
    CAST            reduce using rule 327 (ifmark1 -> empty .)
    DOT             reduce using rule 327 (ifmark1 -> empty .)
    THIS            reduce using rule 327 (ifmark1 -> empty .)
    NULL            reduce using rule 327 (ifmark1 -> empty .)
    TRUE            reduce using rule 327 (ifmark1 -> empty .)
    FALSE           reduce using rule 327 (ifmark1 -> empty .)
    DOLLAR          reduce using rule 327 (ifmark1 -> empty .)
    INUMBER         reduce using rule 327 (ifmark1 -> empty .)
    DNUMBER         reduce using rule 327 (ifmark1 -> empty .)
    LIT_CHAR        reduce using rule 327 (ifmark1 -> empty .)
    LIT_STR         reduce using rule 327 (ifmark1 -> empty .)
    LBRACKET        reduce using rule 327 (ifmark1 -> empty .)
    FUNCTION        reduce using rule 327 (ifmark1 -> empty .)
    NEW             reduce using rule 327 (ifmark1 -> empty .)
    BOOL            reduce using rule 327 (ifmark1 -> empty .)
    SHORT           reduce using rule 327 (ifmark1 -> empty .)
    USHORT          reduce using rule 327 (ifmark1 -> empty .)
    INT             reduce using rule 327 (ifmark1 -> empty .)
    UINT            reduce using rule 327 (ifmark1 -> empty .)
    LONG            reduce using rule 327 (ifmark1 -> empty .)
    ULONG           reduce using rule 327 (ifmark1 -> empty .)
    CHAR            reduce using rule 327 (ifmark1 -> empty .)
    FLOAT           reduce using rule 327 (ifmark1 -> empty .)
    VOID            reduce using rule 327 (ifmark1 -> empty .)
    TYPEOF          reduce using rule 327 (ifmark1 -> empty .)
    TYPEID          reduce using rule 327 (ifmark1 -> empty .)
    BODY            reduce using rule 327 (ifmark1 -> empty .)


state 791

    (330) IfCondition -> BasicType Declarator ASSIGN . Expression
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 809
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 792

    (329) IfCondition -> AUTO IDENTIFIER ASSIGN . Expression
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    PrimaryExpression              shift and go to state 204
    ComplementExpression           shift and go to state 205
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    BlockStatement                 shift and go to state 175
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 810
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 793

    (428) NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .

    POWER           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DOT             reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    PLUS_PLUS       reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    MINUS_MINUS     reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LPAREN          reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    TIMES           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DIV             reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    MODULO          reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    PLUS            reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    MINUS           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LEFT_SHIFT      reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RIGHT_SHIFT     reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    AMPERSAND       reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    CARET           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    PIPE            reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DOUBLE_AMPERSAND reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    QUESTION        reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    DOUBLE_PIPE     reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    ASSIGN          reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_PLUS         reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_MINUS        reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_TIMES        reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_DIV          reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_MODULO       reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_AND_BIT      reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_OR_BIT       reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_XOR_BIT      reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_LEFT         reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    EQ_RIGHT        reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RBRACKET        reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RANGE           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    COMMA           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RPAREN          reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    SEMICOLON       reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    RBRACE          reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    COLON           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    IS_EQ           reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    NOT_EQ          reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LESS            reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    GREATER_EQ      reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    GREATER         reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)
    LESS_EQ         reduce using rule 428 (NewAnonClassExpression -> NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody .)


state 794

    (57) AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer .

    COMMA           reduce using rule 57 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer .)
    SEMICOLON       reduce using rule 57 (AltDeclaratorIdentifier -> BasicType2_opt IDENTIFIER AltDeclaratorSuffixes ASSIGN Initializer .)


state 795

    (55) AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer .

    COMMA           reduce using rule 55 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer .)
    SEMICOLON       reduce using rule 55 (AltDeclaratorIdentifier -> BasicType2 IDENTIFIER AltDeclaratorSuffixes_opt ASSIGN Initializer .)


state 796

    (353) AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .

    LBRACE          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CASE            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DEFAULT         reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IDENTIFIER      reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IF              reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    WHILE           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DO              reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FOR             reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    SWITCH          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FINAL           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CONTINUE        reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    BREAK           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    RETURN          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    GOTO            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    WITH            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    MIXIN           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IMPORT          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    STATIC          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LPAREN          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    ALIAS           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    ENUM            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    EXTERN          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    AUTO            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CONST           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    IMMUTABLE       reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FOREACH         reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FOREACH_REVERSE reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CLASS           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    UNION           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    AMPERSAND       reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    PLUS_PLUS       reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    MINUS_MINUS     reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TIMES           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    MINUS           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    PLUS            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    EXCLAMATION     reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TILDE           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CAST            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DOT             reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    THIS            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    NULL            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TRUE            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FALSE           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DOLLAR          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    INUMBER         reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    DNUMBER         reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LIT_CHAR        reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LIT_STR         reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LBRACKET        reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FUNCTION        reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    NEW             reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    BOOL            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    SHORT           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    USHORT          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    INT             reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    UINT            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    LONG            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    ULONG           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    CHAR            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    FLOAT           reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    VOID            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TYPEOF          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    TYPEID          reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)
    BODY            reduce using rule 353 (AggregateForeach -> Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN .)


state 797

    (388) FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .

    SEMICOLON       reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CASE            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DEFAULT         reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LBRACE          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IDENTIFIER      reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IF              reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    WHILE           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DO              reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOR             reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    SWITCH          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FINAL           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CONTINUE        reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BREAK           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    RETURN          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    GOTO            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    WITH            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    MIXIN           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IMPORT          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    STATIC          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LPAREN          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ALIAS           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ENUM            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    EXTERN          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    AUTO            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CONST           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    IMMUTABLE       reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH         reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FOREACH_REVERSE reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CLASS           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UNION           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    AMPERSAND       reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    PLUS_PLUS       reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    MINUS_MINUS     reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TIMES           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    MINUS           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    PLUS            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    EXCLAMATION     reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TILDE           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CAST            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DOT             reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    THIS            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    NULL            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TRUE            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FALSE           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DOLLAR          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    INUMBER         reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    DNUMBER         reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LIT_CHAR        reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LIT_STR         reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LBRACKET        reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FUNCTION        reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    NEW             reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BOOL            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    SHORT           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    USHORT          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    INT             reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    UINT            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    LONG            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ULONG           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    CHAR            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    FLOAT           reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    VOID            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TYPEOF          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    TYPEID          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    BODY            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    RBRACE          reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)
    ELSE            reduce using rule 388 (FinalSwitchStatement -> FINAL SWITCH LPAREN Expression RPAREN ScopeStatement .)


state 798

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON . for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (342) for_M1 -> .

    AMPERSAND       reduce using rule 342 (for_M1 -> .)
    PLUS_PLUS       reduce using rule 342 (for_M1 -> .)
    MINUS_MINUS     reduce using rule 342 (for_M1 -> .)
    TIMES           reduce using rule 342 (for_M1 -> .)
    MINUS           reduce using rule 342 (for_M1 -> .)
    PLUS            reduce using rule 342 (for_M1 -> .)
    EXCLAMATION     reduce using rule 342 (for_M1 -> .)
    LPAREN          reduce using rule 342 (for_M1 -> .)
    TILDE           reduce using rule 342 (for_M1 -> .)
    CAST            reduce using rule 342 (for_M1 -> .)
    IDENTIFIER      reduce using rule 342 (for_M1 -> .)
    DOT             reduce using rule 342 (for_M1 -> .)
    THIS            reduce using rule 342 (for_M1 -> .)
    NULL            reduce using rule 342 (for_M1 -> .)
    TRUE            reduce using rule 342 (for_M1 -> .)
    FALSE           reduce using rule 342 (for_M1 -> .)
    DOLLAR          reduce using rule 342 (for_M1 -> .)
    INUMBER         reduce using rule 342 (for_M1 -> .)
    DNUMBER         reduce using rule 342 (for_M1 -> .)
    LIT_CHAR        reduce using rule 342 (for_M1 -> .)
    LIT_STR         reduce using rule 342 (for_M1 -> .)
    LBRACKET        reduce using rule 342 (for_M1 -> .)
    FUNCTION        reduce using rule 342 (for_M1 -> .)
    MIXIN           reduce using rule 342 (for_M1 -> .)
    IMPORT          reduce using rule 342 (for_M1 -> .)
    NEW             reduce using rule 342 (for_M1 -> .)
    BOOL            reduce using rule 342 (for_M1 -> .)
    SHORT           reduce using rule 342 (for_M1 -> .)
    USHORT          reduce using rule 342 (for_M1 -> .)
    INT             reduce using rule 342 (for_M1 -> .)
    UINT            reduce using rule 342 (for_M1 -> .)
    LONG            reduce using rule 342 (for_M1 -> .)
    ULONG           reduce using rule 342 (for_M1 -> .)
    CHAR            reduce using rule 342 (for_M1 -> .)
    FLOAT           reduce using rule 342 (for_M1 -> .)
    VOID            reduce using rule 342 (for_M1 -> .)
    TYPEOF          reduce using rule 342 (for_M1 -> .)
    TYPEID          reduce using rule 342 (for_M1 -> .)
    LBRACE          reduce using rule 342 (for_M1 -> .)
    BODY            reduce using rule 342 (for_M1 -> .)
    RPAREN          reduce using rule 342 (for_M1 -> .)

    for_M1                         shift and go to state 811

state 799

    (333) WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 . ScopeStatement while_M2
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 812
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 800

    (375) CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .

    SEMICOLON       reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    CASE            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    DEFAULT         reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    LBRACE          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    IDENTIFIER      reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    IF              reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    WHILE           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    DO              reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    FOR             reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    SWITCH          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    FINAL           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    CONTINUE        reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    BREAK           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    RETURN          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    GOTO            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    WITH            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    MIXIN           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    IMPORT          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    STATIC          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    LPAREN          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    ALIAS           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    ENUM            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    EXTERN          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    AUTO            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    CONST           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    IMMUTABLE       reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    FOREACH         reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    FOREACH_REVERSE reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    CLASS           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    UNION           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    AMPERSAND       reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    PLUS_PLUS       reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    MINUS_MINUS     reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    TIMES           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    MINUS           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    PLUS            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    EXCLAMATION     reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    TILDE           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    CAST            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    DOT             reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    THIS            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    NULL            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    TRUE            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    FALSE           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    DOLLAR          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    INUMBER         reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    DNUMBER         reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    LIT_CHAR        reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    LIT_STR         reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    LBRACKET        reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    FUNCTION        reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    NEW             reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    BOOL            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    SHORT           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    USHORT          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    INT             reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    UINT            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    LONG            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    ULONG           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    CHAR            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    FLOAT           reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    VOID            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    TYPEOF          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    TYPEID          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    BODY            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    RBRACE          reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)
    ELSE            reduce using rule 375 (CaseStatement -> CASE ArgumentList COLON c_m1 ScopeStatementList c_m2 .)


state 801

    (377) c_m2 -> empty .

    SEMICOLON       reduce using rule 377 (c_m2 -> empty .)
    CASE            reduce using rule 377 (c_m2 -> empty .)
    DEFAULT         reduce using rule 377 (c_m2 -> empty .)
    LBRACE          reduce using rule 377 (c_m2 -> empty .)
    IDENTIFIER      reduce using rule 377 (c_m2 -> empty .)
    IF              reduce using rule 377 (c_m2 -> empty .)
    WHILE           reduce using rule 377 (c_m2 -> empty .)
    DO              reduce using rule 377 (c_m2 -> empty .)
    FOR             reduce using rule 377 (c_m2 -> empty .)
    SWITCH          reduce using rule 377 (c_m2 -> empty .)
    FINAL           reduce using rule 377 (c_m2 -> empty .)
    CONTINUE        reduce using rule 377 (c_m2 -> empty .)
    BREAK           reduce using rule 377 (c_m2 -> empty .)
    RETURN          reduce using rule 377 (c_m2 -> empty .)
    GOTO            reduce using rule 377 (c_m2 -> empty .)
    WITH            reduce using rule 377 (c_m2 -> empty .)
    MIXIN           reduce using rule 377 (c_m2 -> empty .)
    IMPORT          reduce using rule 377 (c_m2 -> empty .)
    STATIC          reduce using rule 377 (c_m2 -> empty .)
    LPAREN          reduce using rule 377 (c_m2 -> empty .)
    ALIAS           reduce using rule 377 (c_m2 -> empty .)
    ENUM            reduce using rule 377 (c_m2 -> empty .)
    EXTERN          reduce using rule 377 (c_m2 -> empty .)
    AUTO            reduce using rule 377 (c_m2 -> empty .)
    CONST           reduce using rule 377 (c_m2 -> empty .)
    IMMUTABLE       reduce using rule 377 (c_m2 -> empty .)
    FOREACH         reduce using rule 377 (c_m2 -> empty .)
    FOREACH_REVERSE reduce using rule 377 (c_m2 -> empty .)
    CLASS           reduce using rule 377 (c_m2 -> empty .)
    UNION           reduce using rule 377 (c_m2 -> empty .)
    AMPERSAND       reduce using rule 377 (c_m2 -> empty .)
    PLUS_PLUS       reduce using rule 377 (c_m2 -> empty .)
    MINUS_MINUS     reduce using rule 377 (c_m2 -> empty .)
    TIMES           reduce using rule 377 (c_m2 -> empty .)
    MINUS           reduce using rule 377 (c_m2 -> empty .)
    PLUS            reduce using rule 377 (c_m2 -> empty .)
    EXCLAMATION     reduce using rule 377 (c_m2 -> empty .)
    TILDE           reduce using rule 377 (c_m2 -> empty .)
    CAST            reduce using rule 377 (c_m2 -> empty .)
    DOT             reduce using rule 377 (c_m2 -> empty .)
    THIS            reduce using rule 377 (c_m2 -> empty .)
    NULL            reduce using rule 377 (c_m2 -> empty .)
    TRUE            reduce using rule 377 (c_m2 -> empty .)
    FALSE           reduce using rule 377 (c_m2 -> empty .)
    DOLLAR          reduce using rule 377 (c_m2 -> empty .)
    INUMBER         reduce using rule 377 (c_m2 -> empty .)
    DNUMBER         reduce using rule 377 (c_m2 -> empty .)
    LIT_CHAR        reduce using rule 377 (c_m2 -> empty .)
    LIT_STR         reduce using rule 377 (c_m2 -> empty .)
    LBRACKET        reduce using rule 377 (c_m2 -> empty .)
    FUNCTION        reduce using rule 377 (c_m2 -> empty .)
    NEW             reduce using rule 377 (c_m2 -> empty .)
    BOOL            reduce using rule 377 (c_m2 -> empty .)
    SHORT           reduce using rule 377 (c_m2 -> empty .)
    USHORT          reduce using rule 377 (c_m2 -> empty .)
    INT             reduce using rule 377 (c_m2 -> empty .)
    UINT            reduce using rule 377 (c_m2 -> empty .)
    LONG            reduce using rule 377 (c_m2 -> empty .)
    ULONG           reduce using rule 377 (c_m2 -> empty .)
    CHAR            reduce using rule 377 (c_m2 -> empty .)
    FLOAT           reduce using rule 377 (c_m2 -> empty .)
    VOID            reduce using rule 377 (c_m2 -> empty .)
    TYPEOF          reduce using rule 377 (c_m2 -> empty .)
    TYPEID          reduce using rule 377 (c_m2 -> empty .)
    BODY            reduce using rule 377 (c_m2 -> empty .)
    RBRACE          reduce using rule 377 (c_m2 -> empty .)
    ELSE            reduce using rule 377 (c_m2 -> empty .)


state 802

    (378) CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON . ScopeStatementList
    (382) ScopeStatementList -> . StatementListNoCaseNoDefault
    (383) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault
    (384) StatementListNoCaseNoDefault -> . StatementNoCaseNoDefault StatementListNoCaseNoDefault
    (385) StatementNoCaseNoDefault -> . SEMICOLON
    (386) StatementNoCaseNoDefault -> . NonEmptyStatementNoCaseNoDefault
    (387) StatementNoCaseNoDefault -> . ScopeBlockStatement
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (309) ScopeBlockStatement -> . BlockStatement
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    SEMICOLON       shift and go to state 684
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LBRACE          shift and go to state 145
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 430
    StorageClasses_opt             shift and go to state 9
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    ConditionalExpression          shift and go to state 180
    ScopeStatementList             shift and go to state 813
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StatementNoCaseNoDefault       shift and go to state 683
    BreakStatement                 shift and go to state 442
    GotoStatement                  shift and go to state 443
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    StatementListNoCaseNoDefault   shift and go to state 685
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    Declaration                    shift and go to state 465
    LIT_STRPlus                    shift and go to state 210
    empty                          shift and go to state 62
    NonEmptyStatementNoCaseNoDefault shift and go to state 686
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    ScopeBlockStatement            shift and go to state 687
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 803

    (372) SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement . switch_M2
    (374) switch_M2 -> . empty
    (496) empty -> .

    SEMICOLON       reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    ELSE            reduce using rule 496 (empty -> .)

    empty                          shift and go to state 815
    switch_M2                      shift and go to state 814

state 804

    (337) DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression . RPAREN Dowhile_M2

    RPAREN          shift and go to state 816


state 805

    (368) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression . RPAREN

    RPAREN          shift and go to state 817


state 806

    (370) UprExpression -> Expression .

    RPAREN          reduce using rule 370 (UprExpression -> Expression .)


state 807

    (331) ThenStatement -> ScopeStatement .

    SEMICOLON       reduce using rule 331 (ThenStatement -> ScopeStatement .)
    CASE            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    DEFAULT         reduce using rule 331 (ThenStatement -> ScopeStatement .)
    LBRACE          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    IDENTIFIER      reduce using rule 331 (ThenStatement -> ScopeStatement .)
    IF              reduce using rule 331 (ThenStatement -> ScopeStatement .)
    WHILE           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    DO              reduce using rule 331 (ThenStatement -> ScopeStatement .)
    FOR             reduce using rule 331 (ThenStatement -> ScopeStatement .)
    SWITCH          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    FINAL           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    CONTINUE        reduce using rule 331 (ThenStatement -> ScopeStatement .)
    BREAK           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    RETURN          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    GOTO            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    WITH            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    MIXIN           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    IMPORT          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    STATIC          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    LPAREN          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    ALIAS           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    ENUM            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    EXTERN          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    AUTO            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    CONST           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    IMMUTABLE       reduce using rule 331 (ThenStatement -> ScopeStatement .)
    FOREACH         reduce using rule 331 (ThenStatement -> ScopeStatement .)
    FOREACH_REVERSE reduce using rule 331 (ThenStatement -> ScopeStatement .)
    CLASS           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    UNION           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    AMPERSAND       reduce using rule 331 (ThenStatement -> ScopeStatement .)
    PLUS_PLUS       reduce using rule 331 (ThenStatement -> ScopeStatement .)
    MINUS_MINUS     reduce using rule 331 (ThenStatement -> ScopeStatement .)
    TIMES           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    MINUS           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    PLUS            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    EXCLAMATION     reduce using rule 331 (ThenStatement -> ScopeStatement .)
    TILDE           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    CAST            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    DOT             reduce using rule 331 (ThenStatement -> ScopeStatement .)
    THIS            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    NULL            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    TRUE            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    FALSE           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    DOLLAR          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    INUMBER         reduce using rule 331 (ThenStatement -> ScopeStatement .)
    DNUMBER         reduce using rule 331 (ThenStatement -> ScopeStatement .)
    LIT_CHAR        reduce using rule 331 (ThenStatement -> ScopeStatement .)
    LIT_STR         reduce using rule 331 (ThenStatement -> ScopeStatement .)
    LBRACKET        reduce using rule 331 (ThenStatement -> ScopeStatement .)
    FUNCTION        reduce using rule 331 (ThenStatement -> ScopeStatement .)
    NEW             reduce using rule 331 (ThenStatement -> ScopeStatement .)
    BOOL            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    SHORT           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    USHORT          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    INT             reduce using rule 331 (ThenStatement -> ScopeStatement .)
    UINT            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    LONG            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    ULONG           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    CHAR            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    FLOAT           reduce using rule 331 (ThenStatement -> ScopeStatement .)
    VOID            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    TYPEOF          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    TYPEID          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    BODY            reduce using rule 331 (ThenStatement -> ScopeStatement .)
    RBRACE          reduce using rule 331 (ThenStatement -> ScopeStatement .)
    ELSE            reduce using rule 331 (ThenStatement -> ScopeStatement .)


state 808

    (322) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement . ifmark2
    (323) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement . ifmark3 ELSE ElseStatement ifmark4
    (326) ifmark2 -> . empty
    (325) ifmark3 -> . empty
    (496) empty -> .

    SEMICOLON       reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    ELSE            reduce using rule 496 (empty -> .)

    ifmark3                        shift and go to state 818
    ifmark2                        shift and go to state 819
    empty                          shift and go to state 820

state 809

    (330) IfCondition -> BasicType Declarator ASSIGN Expression .

    RPAREN          reduce using rule 330 (IfCondition -> BasicType Declarator ASSIGN Expression .)


state 810

    (329) IfCondition -> AUTO IDENTIFIER ASSIGN Expression .

    RPAREN          reduce using rule 329 (IfCondition -> AUTO IDENTIFIER ASSIGN Expression .)


state 811

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 . Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (351) Increment_opt -> . Increment
    (352) Increment_opt -> . empty
    (350) Increment -> . Expression
    (496) empty -> .
    (152) Expression -> . CommaExpression
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (491) BodyStatement -> . BODY BlockStatement

    RPAREN          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    LPAREN          shift and go to state 228
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    IDENTIFIER      shift and go to state 248
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    MIXIN           shift and go to state 224
    IMPORT          shift and go to state 176
    NEW             shift and go to state 202
    BOOL            shift and go to state 46
    SHORT           shift and go to state 31
    USHORT          shift and go to state 41
    INT             shift and go to state 44
    UINT            shift and go to state 42
    LONG            shift and go to state 38
    ULONG           shift and go to state 36
    CHAR            shift and go to state 33
    FLOAT           shift and go to state 45
    VOID            shift and go to state 32
    TYPEOF          shift and go to state 47
    TYPEID          shift and go to state 197
    LBRACE          shift and go to state 145
    BODY            shift and go to state 146

    PostfixExpression              shift and go to state 201
    CastExpression                 shift and go to state 218
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    IdentifierList                 shift and go to state 244
    AndExpression                  shift and go to state 170
    PowExpression                  shift and go to state 190
    FunctionLiteralBody            shift and go to state 219
    Increment_opt                  shift and go to state 821
    PrimaryExpression              shift and go to state 204
    OrOrExpression                 shift and go to state 173
    TypeidExpression               shift and go to state 220
    BasicType                      shift and go to state 247
    BasicTypeX                     shift and go to state 249
    ComplementExpression           shift and go to state 205
    LIT_STRPlus                    shift and go to state 210
    ShiftExpression                shift and go to state 183
    empty                          shift and go to state 822
    XorExpression                  shift and go to state 223
    RelExpression                  shift and go to state 177
    ArrayLiteral                   shift and go to state 225
    MixinExpression                shift and go to state 211
    OrExpression                   shift and go to state 194
    EqualExpression                shift and go to state 179
    FunctionLiteral                shift and go to state 212
    Typeof                         shift and go to state 245
    BlockStatement                 shift and go to state 175
    AddExpression                  shift and go to state 229
    Expression                     shift and go to state 823
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    ParameterMemberAttributes      shift and go to state 187
    CmpExpression                  shift and go to state 230
    AndAndExpression               shift and go to state 217
    Increment                      shift and go to state 824
    CommaExpression                shift and go to state 255
    NewAnonClassExpression         shift and go to state 185
    AssignExpression               shift and go to state 256

state 812

    (333) WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement . while_M2
    (336) while_M2 -> .

    SEMICOLON       reduce using rule 336 (while_M2 -> .)
    CASE            reduce using rule 336 (while_M2 -> .)
    DEFAULT         reduce using rule 336 (while_M2 -> .)
    LBRACE          reduce using rule 336 (while_M2 -> .)
    IDENTIFIER      reduce using rule 336 (while_M2 -> .)
    IF              reduce using rule 336 (while_M2 -> .)
    WHILE           reduce using rule 336 (while_M2 -> .)
    DO              reduce using rule 336 (while_M2 -> .)
    FOR             reduce using rule 336 (while_M2 -> .)
    SWITCH          reduce using rule 336 (while_M2 -> .)
    FINAL           reduce using rule 336 (while_M2 -> .)
    CONTINUE        reduce using rule 336 (while_M2 -> .)
    BREAK           reduce using rule 336 (while_M2 -> .)
    RETURN          reduce using rule 336 (while_M2 -> .)
    GOTO            reduce using rule 336 (while_M2 -> .)
    WITH            reduce using rule 336 (while_M2 -> .)
    MIXIN           reduce using rule 336 (while_M2 -> .)
    IMPORT          reduce using rule 336 (while_M2 -> .)
    STATIC          reduce using rule 336 (while_M2 -> .)
    LPAREN          reduce using rule 336 (while_M2 -> .)
    ALIAS           reduce using rule 336 (while_M2 -> .)
    ENUM            reduce using rule 336 (while_M2 -> .)
    EXTERN          reduce using rule 336 (while_M2 -> .)
    AUTO            reduce using rule 336 (while_M2 -> .)
    CONST           reduce using rule 336 (while_M2 -> .)
    IMMUTABLE       reduce using rule 336 (while_M2 -> .)
    FOREACH         reduce using rule 336 (while_M2 -> .)
    FOREACH_REVERSE reduce using rule 336 (while_M2 -> .)
    CLASS           reduce using rule 336 (while_M2 -> .)
    UNION           reduce using rule 336 (while_M2 -> .)
    AMPERSAND       reduce using rule 336 (while_M2 -> .)
    PLUS_PLUS       reduce using rule 336 (while_M2 -> .)
    MINUS_MINUS     reduce using rule 336 (while_M2 -> .)
    TIMES           reduce using rule 336 (while_M2 -> .)
    MINUS           reduce using rule 336 (while_M2 -> .)
    PLUS            reduce using rule 336 (while_M2 -> .)
    EXCLAMATION     reduce using rule 336 (while_M2 -> .)
    TILDE           reduce using rule 336 (while_M2 -> .)
    CAST            reduce using rule 336 (while_M2 -> .)
    DOT             reduce using rule 336 (while_M2 -> .)
    THIS            reduce using rule 336 (while_M2 -> .)
    NULL            reduce using rule 336 (while_M2 -> .)
    TRUE            reduce using rule 336 (while_M2 -> .)
    FALSE           reduce using rule 336 (while_M2 -> .)
    DOLLAR          reduce using rule 336 (while_M2 -> .)
    INUMBER         reduce using rule 336 (while_M2 -> .)
    DNUMBER         reduce using rule 336 (while_M2 -> .)
    LIT_CHAR        reduce using rule 336 (while_M2 -> .)
    LIT_STR         reduce using rule 336 (while_M2 -> .)
    LBRACKET        reduce using rule 336 (while_M2 -> .)
    FUNCTION        reduce using rule 336 (while_M2 -> .)
    NEW             reduce using rule 336 (while_M2 -> .)
    BOOL            reduce using rule 336 (while_M2 -> .)
    SHORT           reduce using rule 336 (while_M2 -> .)
    USHORT          reduce using rule 336 (while_M2 -> .)
    INT             reduce using rule 336 (while_M2 -> .)
    UINT            reduce using rule 336 (while_M2 -> .)
    LONG            reduce using rule 336 (while_M2 -> .)
    ULONG           reduce using rule 336 (while_M2 -> .)
    CHAR            reduce using rule 336 (while_M2 -> .)
    FLOAT           reduce using rule 336 (while_M2 -> .)
    VOID            reduce using rule 336 (while_M2 -> .)
    TYPEOF          reduce using rule 336 (while_M2 -> .)
    TYPEID          reduce using rule 336 (while_M2 -> .)
    BODY            reduce using rule 336 (while_M2 -> .)
    RBRACE          reduce using rule 336 (while_M2 -> .)
    ELSE            reduce using rule 336 (while_M2 -> .)

    while_M2                       shift and go to state 825

state 813

    (378) CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .

    SEMICOLON       reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CASE            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DEFAULT         reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LBRACE          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IDENTIFIER      reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IF              reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    WHILE           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DO              reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FOR             reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    SWITCH          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FINAL           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CONTINUE        reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    BREAK           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    RETURN          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    GOTO            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    WITH            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    MIXIN           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IMPORT          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    STATIC          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LPAREN          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ALIAS           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ENUM            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    EXTERN          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    AUTO            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CONST           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    IMMUTABLE       reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FOREACH         reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FOREACH_REVERSE reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CLASS           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    UNION           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    AMPERSAND       reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    PLUS_PLUS       reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    MINUS_MINUS     reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TIMES           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    MINUS           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    PLUS            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    EXCLAMATION     reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TILDE           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CAST            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DOT             reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    THIS            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    NULL            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TRUE            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FALSE           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DOLLAR          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    INUMBER         reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    DNUMBER         reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LIT_CHAR        reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LIT_STR         reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LBRACKET        reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FUNCTION        reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    NEW             reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    BOOL            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    SHORT           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    USHORT          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    INT             reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    UINT            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    LONG            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ULONG           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    CHAR            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    FLOAT           reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    VOID            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TYPEOF          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    TYPEID          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    BODY            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    RBRACE          reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)
    ELSE            reduce using rule 378 (CaseRangeStatement -> CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList .)


state 814

    (372) SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .

    SEMICOLON       reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    CASE            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    DEFAULT         reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    LBRACE          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    IDENTIFIER      reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    IF              reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    WHILE           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    DO              reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    FOR             reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    SWITCH          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    FINAL           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    CONTINUE        reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    BREAK           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    RETURN          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    GOTO            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    WITH            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    MIXIN           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    IMPORT          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    STATIC          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    LPAREN          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    ALIAS           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    ENUM            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    EXTERN          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    AUTO            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    CONST           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    IMMUTABLE       reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    FOREACH         reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    FOREACH_REVERSE reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    CLASS           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    UNION           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    AMPERSAND       reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    PLUS_PLUS       reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    MINUS_MINUS     reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    TIMES           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    MINUS           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    PLUS            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    EXCLAMATION     reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    TILDE           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    CAST            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    DOT             reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    THIS            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    NULL            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    TRUE            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    FALSE           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    DOLLAR          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    INUMBER         reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    DNUMBER         reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    LIT_CHAR        reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    LIT_STR         reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    LBRACKET        reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    FUNCTION        reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    NEW             reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    BOOL            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    SHORT           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    USHORT          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    INT             reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    UINT            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    LONG            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    ULONG           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    CHAR            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    FLOAT           reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    VOID            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    TYPEOF          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    TYPEID          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    BODY            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    RBRACE          reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)
    ELSE            reduce using rule 372 (SwitchStatement -> SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2 .)


state 815

    (374) switch_M2 -> empty .

    SEMICOLON       reduce using rule 374 (switch_M2 -> empty .)
    CASE            reduce using rule 374 (switch_M2 -> empty .)
    DEFAULT         reduce using rule 374 (switch_M2 -> empty .)
    LBRACE          reduce using rule 374 (switch_M2 -> empty .)
    IDENTIFIER      reduce using rule 374 (switch_M2 -> empty .)
    IF              reduce using rule 374 (switch_M2 -> empty .)
    WHILE           reduce using rule 374 (switch_M2 -> empty .)
    DO              reduce using rule 374 (switch_M2 -> empty .)
    FOR             reduce using rule 374 (switch_M2 -> empty .)
    SWITCH          reduce using rule 374 (switch_M2 -> empty .)
    FINAL           reduce using rule 374 (switch_M2 -> empty .)
    CONTINUE        reduce using rule 374 (switch_M2 -> empty .)
    BREAK           reduce using rule 374 (switch_M2 -> empty .)
    RETURN          reduce using rule 374 (switch_M2 -> empty .)
    GOTO            reduce using rule 374 (switch_M2 -> empty .)
    WITH            reduce using rule 374 (switch_M2 -> empty .)
    MIXIN           reduce using rule 374 (switch_M2 -> empty .)
    IMPORT          reduce using rule 374 (switch_M2 -> empty .)
    STATIC          reduce using rule 374 (switch_M2 -> empty .)
    LPAREN          reduce using rule 374 (switch_M2 -> empty .)
    ALIAS           reduce using rule 374 (switch_M2 -> empty .)
    ENUM            reduce using rule 374 (switch_M2 -> empty .)
    EXTERN          reduce using rule 374 (switch_M2 -> empty .)
    AUTO            reduce using rule 374 (switch_M2 -> empty .)
    CONST           reduce using rule 374 (switch_M2 -> empty .)
    IMMUTABLE       reduce using rule 374 (switch_M2 -> empty .)
    FOREACH         reduce using rule 374 (switch_M2 -> empty .)
    FOREACH_REVERSE reduce using rule 374 (switch_M2 -> empty .)
    CLASS           reduce using rule 374 (switch_M2 -> empty .)
    UNION           reduce using rule 374 (switch_M2 -> empty .)
    AMPERSAND       reduce using rule 374 (switch_M2 -> empty .)
    PLUS_PLUS       reduce using rule 374 (switch_M2 -> empty .)
    MINUS_MINUS     reduce using rule 374 (switch_M2 -> empty .)
    TIMES           reduce using rule 374 (switch_M2 -> empty .)
    MINUS           reduce using rule 374 (switch_M2 -> empty .)
    PLUS            reduce using rule 374 (switch_M2 -> empty .)
    EXCLAMATION     reduce using rule 374 (switch_M2 -> empty .)
    TILDE           reduce using rule 374 (switch_M2 -> empty .)
    CAST            reduce using rule 374 (switch_M2 -> empty .)
    DOT             reduce using rule 374 (switch_M2 -> empty .)
    THIS            reduce using rule 374 (switch_M2 -> empty .)
    NULL            reduce using rule 374 (switch_M2 -> empty .)
    TRUE            reduce using rule 374 (switch_M2 -> empty .)
    FALSE           reduce using rule 374 (switch_M2 -> empty .)
    DOLLAR          reduce using rule 374 (switch_M2 -> empty .)
    INUMBER         reduce using rule 374 (switch_M2 -> empty .)
    DNUMBER         reduce using rule 374 (switch_M2 -> empty .)
    LIT_CHAR        reduce using rule 374 (switch_M2 -> empty .)
    LIT_STR         reduce using rule 374 (switch_M2 -> empty .)
    LBRACKET        reduce using rule 374 (switch_M2 -> empty .)
    FUNCTION        reduce using rule 374 (switch_M2 -> empty .)
    NEW             reduce using rule 374 (switch_M2 -> empty .)
    BOOL            reduce using rule 374 (switch_M2 -> empty .)
    SHORT           reduce using rule 374 (switch_M2 -> empty .)
    USHORT          reduce using rule 374 (switch_M2 -> empty .)
    INT             reduce using rule 374 (switch_M2 -> empty .)
    UINT            reduce using rule 374 (switch_M2 -> empty .)
    LONG            reduce using rule 374 (switch_M2 -> empty .)
    ULONG           reduce using rule 374 (switch_M2 -> empty .)
    CHAR            reduce using rule 374 (switch_M2 -> empty .)
    FLOAT           reduce using rule 374 (switch_M2 -> empty .)
    VOID            reduce using rule 374 (switch_M2 -> empty .)
    TYPEOF          reduce using rule 374 (switch_M2 -> empty .)
    TYPEID          reduce using rule 374 (switch_M2 -> empty .)
    BODY            reduce using rule 374 (switch_M2 -> empty .)
    RBRACE          reduce using rule 374 (switch_M2 -> empty .)
    ELSE            reduce using rule 374 (switch_M2 -> empty .)


state 816

    (337) DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN . Dowhile_M2
    (339) Dowhile_M2 -> . empty
    (496) empty -> .

    SEMICOLON       reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    ELSE            reduce using rule 496 (empty -> .)

    empty                          shift and go to state 827
    Dowhile_M2                     shift and go to state 826

state 817

    (368) RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .

    LBRACE          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CASE            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DEFAULT         reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IDENTIFIER      reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IF              reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    WHILE           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DO              reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FOR             reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    SWITCH          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FINAL           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CONTINUE        reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    BREAK           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    RETURN          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    GOTO            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    WITH            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    MIXIN           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IMPORT          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    STATIC          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LPAREN          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    ALIAS           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    ENUM            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    EXTERN          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    AUTO            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CONST           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    IMMUTABLE       reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FOREACH         reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FOREACH_REVERSE reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CLASS           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    UNION           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    AMPERSAND       reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    PLUS_PLUS       reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    MINUS_MINUS     reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TIMES           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    MINUS           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    PLUS            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    EXCLAMATION     reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TILDE           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CAST            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DOT             reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    THIS            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    NULL            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TRUE            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FALSE           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DOLLAR          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    INUMBER         reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    DNUMBER         reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LIT_CHAR        reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LIT_STR         reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LBRACKET        reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FUNCTION        reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    NEW             reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    BOOL            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    SHORT           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    USHORT          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    INT             reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    UINT            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    LONG            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    ULONG           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    CHAR            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    FLOAT           reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    VOID            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TYPEOF          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    TYPEID          reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)
    BODY            reduce using rule 368 (RangeForeach -> LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN .)


state 818

    (323) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 . ELSE ElseStatement ifmark4

    ELSE            shift and go to state 828


state 819

    (322) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .

    SEMICOLON       reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    CASE            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    DEFAULT         reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    LBRACE          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    IDENTIFIER      reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    IF              reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    WHILE           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    DO              reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    FOR             reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    SWITCH          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    FINAL           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    CONTINUE        reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    BREAK           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    RETURN          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    GOTO            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    WITH            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    MIXIN           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    IMPORT          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    STATIC          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    LPAREN          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    ALIAS           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    ENUM            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    EXTERN          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    AUTO            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    CONST           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    IMMUTABLE       reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    FOREACH         reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    FOREACH_REVERSE reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    CLASS           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    UNION           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    AMPERSAND       reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    PLUS_PLUS       reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    MINUS_MINUS     reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    TIMES           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    MINUS           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    PLUS            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    EXCLAMATION     reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    TILDE           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    CAST            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    DOT             reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    THIS            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    NULL            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    TRUE            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    FALSE           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    DOLLAR          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    INUMBER         reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    DNUMBER         reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    LIT_CHAR        reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    LIT_STR         reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    LBRACKET        reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    FUNCTION        reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    NEW             reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    BOOL            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    SHORT           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    USHORT          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    INT             reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    UINT            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    LONG            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    ULONG           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    CHAR            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    FLOAT           reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    VOID            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    TYPEOF          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    TYPEID          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    BODY            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    RBRACE          reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)
    ELSE            reduce using rule 322 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2 .)


state 820

    (326) ifmark2 -> empty .
    (325) ifmark3 -> empty .

  ! reduce/reduce conflict for ELSE resolved using rule 325 (ifmark3 -> empty .)
    SEMICOLON       reduce using rule 326 (ifmark2 -> empty .)
    CASE            reduce using rule 326 (ifmark2 -> empty .)
    DEFAULT         reduce using rule 326 (ifmark2 -> empty .)
    LBRACE          reduce using rule 326 (ifmark2 -> empty .)
    IDENTIFIER      reduce using rule 326 (ifmark2 -> empty .)
    IF              reduce using rule 326 (ifmark2 -> empty .)
    WHILE           reduce using rule 326 (ifmark2 -> empty .)
    DO              reduce using rule 326 (ifmark2 -> empty .)
    FOR             reduce using rule 326 (ifmark2 -> empty .)
    SWITCH          reduce using rule 326 (ifmark2 -> empty .)
    FINAL           reduce using rule 326 (ifmark2 -> empty .)
    CONTINUE        reduce using rule 326 (ifmark2 -> empty .)
    BREAK           reduce using rule 326 (ifmark2 -> empty .)
    RETURN          reduce using rule 326 (ifmark2 -> empty .)
    GOTO            reduce using rule 326 (ifmark2 -> empty .)
    WITH            reduce using rule 326 (ifmark2 -> empty .)
    MIXIN           reduce using rule 326 (ifmark2 -> empty .)
    IMPORT          reduce using rule 326 (ifmark2 -> empty .)
    STATIC          reduce using rule 326 (ifmark2 -> empty .)
    LPAREN          reduce using rule 326 (ifmark2 -> empty .)
    ALIAS           reduce using rule 326 (ifmark2 -> empty .)
    ENUM            reduce using rule 326 (ifmark2 -> empty .)
    EXTERN          reduce using rule 326 (ifmark2 -> empty .)
    AUTO            reduce using rule 326 (ifmark2 -> empty .)
    CONST           reduce using rule 326 (ifmark2 -> empty .)
    IMMUTABLE       reduce using rule 326 (ifmark2 -> empty .)
    FOREACH         reduce using rule 326 (ifmark2 -> empty .)
    FOREACH_REVERSE reduce using rule 326 (ifmark2 -> empty .)
    CLASS           reduce using rule 326 (ifmark2 -> empty .)
    UNION           reduce using rule 326 (ifmark2 -> empty .)
    AMPERSAND       reduce using rule 326 (ifmark2 -> empty .)
    PLUS_PLUS       reduce using rule 326 (ifmark2 -> empty .)
    MINUS_MINUS     reduce using rule 326 (ifmark2 -> empty .)
    TIMES           reduce using rule 326 (ifmark2 -> empty .)
    MINUS           reduce using rule 326 (ifmark2 -> empty .)
    PLUS            reduce using rule 326 (ifmark2 -> empty .)
    EXCLAMATION     reduce using rule 326 (ifmark2 -> empty .)
    TILDE           reduce using rule 326 (ifmark2 -> empty .)
    CAST            reduce using rule 326 (ifmark2 -> empty .)
    DOT             reduce using rule 326 (ifmark2 -> empty .)
    THIS            reduce using rule 326 (ifmark2 -> empty .)
    NULL            reduce using rule 326 (ifmark2 -> empty .)
    TRUE            reduce using rule 326 (ifmark2 -> empty .)
    FALSE           reduce using rule 326 (ifmark2 -> empty .)
    DOLLAR          reduce using rule 326 (ifmark2 -> empty .)
    INUMBER         reduce using rule 326 (ifmark2 -> empty .)
    DNUMBER         reduce using rule 326 (ifmark2 -> empty .)
    LIT_CHAR        reduce using rule 326 (ifmark2 -> empty .)
    LIT_STR         reduce using rule 326 (ifmark2 -> empty .)
    LBRACKET        reduce using rule 326 (ifmark2 -> empty .)
    FUNCTION        reduce using rule 326 (ifmark2 -> empty .)
    NEW             reduce using rule 326 (ifmark2 -> empty .)
    BOOL            reduce using rule 326 (ifmark2 -> empty .)
    SHORT           reduce using rule 326 (ifmark2 -> empty .)
    USHORT          reduce using rule 326 (ifmark2 -> empty .)
    INT             reduce using rule 326 (ifmark2 -> empty .)
    UINT            reduce using rule 326 (ifmark2 -> empty .)
    LONG            reduce using rule 326 (ifmark2 -> empty .)
    ULONG           reduce using rule 326 (ifmark2 -> empty .)
    CHAR            reduce using rule 326 (ifmark2 -> empty .)
    FLOAT           reduce using rule 326 (ifmark2 -> empty .)
    VOID            reduce using rule 326 (ifmark2 -> empty .)
    TYPEOF          reduce using rule 326 (ifmark2 -> empty .)
    TYPEID          reduce using rule 326 (ifmark2 -> empty .)
    BODY            reduce using rule 326 (ifmark2 -> empty .)
    RBRACE          reduce using rule 326 (ifmark2 -> empty .)
    ELSE            reduce using rule 325 (ifmark3 -> empty .)

  ! ELSE            [ reduce using rule 326 (ifmark2 -> empty .) ]


state 821

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt . RPAREN for_M2 ScopeStatement for_M3

    RPAREN          shift and go to state 829


state 822

    (352) Increment_opt -> empty .

    RPAREN          reduce using rule 352 (Increment_opt -> empty .)


state 823

    (350) Increment -> Expression .

    RPAREN          reduce using rule 350 (Increment -> Expression .)


state 824

    (351) Increment_opt -> Increment .

    RPAREN          reduce using rule 351 (Increment_opt -> Increment .)


state 825

    (333) WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .

    SEMICOLON       reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    CASE            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    DEFAULT         reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    LBRACE          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    IDENTIFIER      reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    IF              reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    WHILE           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    DO              reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    FOR             reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    SWITCH          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    FINAL           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    CONTINUE        reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    BREAK           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    RETURN          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    GOTO            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    WITH            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    MIXIN           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    IMPORT          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    STATIC          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    LPAREN          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    ALIAS           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    ENUM            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    EXTERN          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    AUTO            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    CONST           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    IMMUTABLE       reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    FOREACH         reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    FOREACH_REVERSE reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    CLASS           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    UNION           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    AMPERSAND       reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    PLUS_PLUS       reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    MINUS_MINUS     reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    TIMES           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    MINUS           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    PLUS            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    EXCLAMATION     reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    TILDE           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    CAST            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    DOT             reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    THIS            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    NULL            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    TRUE            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    FALSE           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    DOLLAR          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    INUMBER         reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    DNUMBER         reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    LIT_CHAR        reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    LIT_STR         reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    LBRACKET        reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    FUNCTION        reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    NEW             reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    BOOL            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    SHORT           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    USHORT          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    INT             reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    UINT            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    LONG            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    ULONG           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    CHAR            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    FLOAT           reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    VOID            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    TYPEOF          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    TYPEID          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    BODY            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    RBRACE          reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)
    ELSE            reduce using rule 333 (WhileStatement -> WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2 .)


state 826

    (337) DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .

    SEMICOLON       reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    CASE            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    DEFAULT         reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    LBRACE          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    IDENTIFIER      reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    IF              reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    WHILE           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    DO              reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    FOR             reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    SWITCH          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    FINAL           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    CONTINUE        reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    BREAK           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    RETURN          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    GOTO            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    WITH            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    MIXIN           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    IMPORT          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    STATIC          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    LPAREN          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    ALIAS           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    ENUM            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    EXTERN          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    AUTO            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    CONST           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    IMMUTABLE       reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    FOREACH         reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    FOREACH_REVERSE reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    CLASS           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    UNION           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    AMPERSAND       reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    PLUS_PLUS       reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    MINUS_MINUS     reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    TIMES           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    MINUS           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    PLUS            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    EXCLAMATION     reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    TILDE           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    CAST            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    DOT             reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    THIS            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    NULL            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    TRUE            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    FALSE           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    DOLLAR          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    INUMBER         reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    DNUMBER         reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    LIT_CHAR        reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    LIT_STR         reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    LBRACKET        reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    FUNCTION        reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    NEW             reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    BOOL            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    SHORT           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    USHORT          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    INT             reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    UINT            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    LONG            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    ULONG           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    CHAR            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    FLOAT           reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    VOID            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    TYPEOF          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    TYPEID          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    BODY            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    RBRACE          reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)
    ELSE            reduce using rule 337 (DoStatement -> DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2 .)


state 827

    (339) Dowhile_M2 -> empty .

    SEMICOLON       reduce using rule 339 (Dowhile_M2 -> empty .)
    CASE            reduce using rule 339 (Dowhile_M2 -> empty .)
    DEFAULT         reduce using rule 339 (Dowhile_M2 -> empty .)
    LBRACE          reduce using rule 339 (Dowhile_M2 -> empty .)
    IDENTIFIER      reduce using rule 339 (Dowhile_M2 -> empty .)
    IF              reduce using rule 339 (Dowhile_M2 -> empty .)
    WHILE           reduce using rule 339 (Dowhile_M2 -> empty .)
    DO              reduce using rule 339 (Dowhile_M2 -> empty .)
    FOR             reduce using rule 339 (Dowhile_M2 -> empty .)
    SWITCH          reduce using rule 339 (Dowhile_M2 -> empty .)
    FINAL           reduce using rule 339 (Dowhile_M2 -> empty .)
    CONTINUE        reduce using rule 339 (Dowhile_M2 -> empty .)
    BREAK           reduce using rule 339 (Dowhile_M2 -> empty .)
    RETURN          reduce using rule 339 (Dowhile_M2 -> empty .)
    GOTO            reduce using rule 339 (Dowhile_M2 -> empty .)
    WITH            reduce using rule 339 (Dowhile_M2 -> empty .)
    MIXIN           reduce using rule 339 (Dowhile_M2 -> empty .)
    IMPORT          reduce using rule 339 (Dowhile_M2 -> empty .)
    STATIC          reduce using rule 339 (Dowhile_M2 -> empty .)
    LPAREN          reduce using rule 339 (Dowhile_M2 -> empty .)
    ALIAS           reduce using rule 339 (Dowhile_M2 -> empty .)
    ENUM            reduce using rule 339 (Dowhile_M2 -> empty .)
    EXTERN          reduce using rule 339 (Dowhile_M2 -> empty .)
    AUTO            reduce using rule 339 (Dowhile_M2 -> empty .)
    CONST           reduce using rule 339 (Dowhile_M2 -> empty .)
    IMMUTABLE       reduce using rule 339 (Dowhile_M2 -> empty .)
    FOREACH         reduce using rule 339 (Dowhile_M2 -> empty .)
    FOREACH_REVERSE reduce using rule 339 (Dowhile_M2 -> empty .)
    CLASS           reduce using rule 339 (Dowhile_M2 -> empty .)
    UNION           reduce using rule 339 (Dowhile_M2 -> empty .)
    AMPERSAND       reduce using rule 339 (Dowhile_M2 -> empty .)
    PLUS_PLUS       reduce using rule 339 (Dowhile_M2 -> empty .)
    MINUS_MINUS     reduce using rule 339 (Dowhile_M2 -> empty .)
    TIMES           reduce using rule 339 (Dowhile_M2 -> empty .)
    MINUS           reduce using rule 339 (Dowhile_M2 -> empty .)
    PLUS            reduce using rule 339 (Dowhile_M2 -> empty .)
    EXCLAMATION     reduce using rule 339 (Dowhile_M2 -> empty .)
    TILDE           reduce using rule 339 (Dowhile_M2 -> empty .)
    CAST            reduce using rule 339 (Dowhile_M2 -> empty .)
    DOT             reduce using rule 339 (Dowhile_M2 -> empty .)
    THIS            reduce using rule 339 (Dowhile_M2 -> empty .)
    NULL            reduce using rule 339 (Dowhile_M2 -> empty .)
    TRUE            reduce using rule 339 (Dowhile_M2 -> empty .)
    FALSE           reduce using rule 339 (Dowhile_M2 -> empty .)
    DOLLAR          reduce using rule 339 (Dowhile_M2 -> empty .)
    INUMBER         reduce using rule 339 (Dowhile_M2 -> empty .)
    DNUMBER         reduce using rule 339 (Dowhile_M2 -> empty .)
    LIT_CHAR        reduce using rule 339 (Dowhile_M2 -> empty .)
    LIT_STR         reduce using rule 339 (Dowhile_M2 -> empty .)
    LBRACKET        reduce using rule 339 (Dowhile_M2 -> empty .)
    FUNCTION        reduce using rule 339 (Dowhile_M2 -> empty .)
    NEW             reduce using rule 339 (Dowhile_M2 -> empty .)
    BOOL            reduce using rule 339 (Dowhile_M2 -> empty .)
    SHORT           reduce using rule 339 (Dowhile_M2 -> empty .)
    USHORT          reduce using rule 339 (Dowhile_M2 -> empty .)
    INT             reduce using rule 339 (Dowhile_M2 -> empty .)
    UINT            reduce using rule 339 (Dowhile_M2 -> empty .)
    LONG            reduce using rule 339 (Dowhile_M2 -> empty .)
    ULONG           reduce using rule 339 (Dowhile_M2 -> empty .)
    CHAR            reduce using rule 339 (Dowhile_M2 -> empty .)
    FLOAT           reduce using rule 339 (Dowhile_M2 -> empty .)
    VOID            reduce using rule 339 (Dowhile_M2 -> empty .)
    TYPEOF          reduce using rule 339 (Dowhile_M2 -> empty .)
    TYPEID          reduce using rule 339 (Dowhile_M2 -> empty .)
    BODY            reduce using rule 339 (Dowhile_M2 -> empty .)
    RBRACE          reduce using rule 339 (Dowhile_M2 -> empty .)
    ELSE            reduce using rule 339 (Dowhile_M2 -> empty .)


state 828

    (323) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE . ElseStatement ifmark4
    (332) ElseStatement -> . ScopeStatement
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    ElseStatement                  shift and go to state 830
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 831
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 829

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN . for_M2 ScopeStatement for_M3
    (343) for_M2 -> .

    LBRACE          reduce using rule 343 (for_M2 -> .)
    CASE            reduce using rule 343 (for_M2 -> .)
    DEFAULT         reduce using rule 343 (for_M2 -> .)
    IDENTIFIER      reduce using rule 343 (for_M2 -> .)
    IF              reduce using rule 343 (for_M2 -> .)
    WHILE           reduce using rule 343 (for_M2 -> .)
    DO              reduce using rule 343 (for_M2 -> .)
    FOR             reduce using rule 343 (for_M2 -> .)
    SWITCH          reduce using rule 343 (for_M2 -> .)
    FINAL           reduce using rule 343 (for_M2 -> .)
    CONTINUE        reduce using rule 343 (for_M2 -> .)
    BREAK           reduce using rule 343 (for_M2 -> .)
    RETURN          reduce using rule 343 (for_M2 -> .)
    GOTO            reduce using rule 343 (for_M2 -> .)
    WITH            reduce using rule 343 (for_M2 -> .)
    MIXIN           reduce using rule 343 (for_M2 -> .)
    IMPORT          reduce using rule 343 (for_M2 -> .)
    STATIC          reduce using rule 343 (for_M2 -> .)
    LPAREN          reduce using rule 343 (for_M2 -> .)
    ALIAS           reduce using rule 343 (for_M2 -> .)
    ENUM            reduce using rule 343 (for_M2 -> .)
    EXTERN          reduce using rule 343 (for_M2 -> .)
    AUTO            reduce using rule 343 (for_M2 -> .)
    CONST           reduce using rule 343 (for_M2 -> .)
    IMMUTABLE       reduce using rule 343 (for_M2 -> .)
    FOREACH         reduce using rule 343 (for_M2 -> .)
    FOREACH_REVERSE reduce using rule 343 (for_M2 -> .)
    CLASS           reduce using rule 343 (for_M2 -> .)
    UNION           reduce using rule 343 (for_M2 -> .)
    AMPERSAND       reduce using rule 343 (for_M2 -> .)
    PLUS_PLUS       reduce using rule 343 (for_M2 -> .)
    MINUS_MINUS     reduce using rule 343 (for_M2 -> .)
    TIMES           reduce using rule 343 (for_M2 -> .)
    MINUS           reduce using rule 343 (for_M2 -> .)
    PLUS            reduce using rule 343 (for_M2 -> .)
    EXCLAMATION     reduce using rule 343 (for_M2 -> .)
    TILDE           reduce using rule 343 (for_M2 -> .)
    CAST            reduce using rule 343 (for_M2 -> .)
    DOT             reduce using rule 343 (for_M2 -> .)
    THIS            reduce using rule 343 (for_M2 -> .)
    NULL            reduce using rule 343 (for_M2 -> .)
    TRUE            reduce using rule 343 (for_M2 -> .)
    FALSE           reduce using rule 343 (for_M2 -> .)
    DOLLAR          reduce using rule 343 (for_M2 -> .)
    INUMBER         reduce using rule 343 (for_M2 -> .)
    DNUMBER         reduce using rule 343 (for_M2 -> .)
    LIT_CHAR        reduce using rule 343 (for_M2 -> .)
    LIT_STR         reduce using rule 343 (for_M2 -> .)
    LBRACKET        reduce using rule 343 (for_M2 -> .)
    FUNCTION        reduce using rule 343 (for_M2 -> .)
    NEW             reduce using rule 343 (for_M2 -> .)
    BOOL            reduce using rule 343 (for_M2 -> .)
    SHORT           reduce using rule 343 (for_M2 -> .)
    USHORT          reduce using rule 343 (for_M2 -> .)
    INT             reduce using rule 343 (for_M2 -> .)
    UINT            reduce using rule 343 (for_M2 -> .)
    LONG            reduce using rule 343 (for_M2 -> .)
    ULONG           reduce using rule 343 (for_M2 -> .)
    CHAR            reduce using rule 343 (for_M2 -> .)
    FLOAT           reduce using rule 343 (for_M2 -> .)
    VOID            reduce using rule 343 (for_M2 -> .)
    TYPEOF          reduce using rule 343 (for_M2 -> .)
    TYPEID          reduce using rule 343 (for_M2 -> .)
    BODY            reduce using rule 343 (for_M2 -> .)

    for_M2                         shift and go to state 832

state 830

    (323) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement . ifmark4
    (324) ifmark4 -> . empty
    (496) empty -> .

    SEMICOLON       reduce using rule 496 (empty -> .)
    CASE            reduce using rule 496 (empty -> .)
    DEFAULT         reduce using rule 496 (empty -> .)
    LBRACE          reduce using rule 496 (empty -> .)
    IDENTIFIER      reduce using rule 496 (empty -> .)
    IF              reduce using rule 496 (empty -> .)
    WHILE           reduce using rule 496 (empty -> .)
    DO              reduce using rule 496 (empty -> .)
    FOR             reduce using rule 496 (empty -> .)
    SWITCH          reduce using rule 496 (empty -> .)
    FINAL           reduce using rule 496 (empty -> .)
    CONTINUE        reduce using rule 496 (empty -> .)
    BREAK           reduce using rule 496 (empty -> .)
    RETURN          reduce using rule 496 (empty -> .)
    GOTO            reduce using rule 496 (empty -> .)
    WITH            reduce using rule 496 (empty -> .)
    MIXIN           reduce using rule 496 (empty -> .)
    IMPORT          reduce using rule 496 (empty -> .)
    STATIC          reduce using rule 496 (empty -> .)
    LPAREN          reduce using rule 496 (empty -> .)
    ALIAS           reduce using rule 496 (empty -> .)
    ENUM            reduce using rule 496 (empty -> .)
    EXTERN          reduce using rule 496 (empty -> .)
    AUTO            reduce using rule 496 (empty -> .)
    CONST           reduce using rule 496 (empty -> .)
    IMMUTABLE       reduce using rule 496 (empty -> .)
    FOREACH         reduce using rule 496 (empty -> .)
    FOREACH_REVERSE reduce using rule 496 (empty -> .)
    CLASS           reduce using rule 496 (empty -> .)
    UNION           reduce using rule 496 (empty -> .)
    AMPERSAND       reduce using rule 496 (empty -> .)
    PLUS_PLUS       reduce using rule 496 (empty -> .)
    MINUS_MINUS     reduce using rule 496 (empty -> .)
    TIMES           reduce using rule 496 (empty -> .)
    MINUS           reduce using rule 496 (empty -> .)
    PLUS            reduce using rule 496 (empty -> .)
    EXCLAMATION     reduce using rule 496 (empty -> .)
    TILDE           reduce using rule 496 (empty -> .)
    CAST            reduce using rule 496 (empty -> .)
    DOT             reduce using rule 496 (empty -> .)
    THIS            reduce using rule 496 (empty -> .)
    NULL            reduce using rule 496 (empty -> .)
    TRUE            reduce using rule 496 (empty -> .)
    FALSE           reduce using rule 496 (empty -> .)
    DOLLAR          reduce using rule 496 (empty -> .)
    INUMBER         reduce using rule 496 (empty -> .)
    DNUMBER         reduce using rule 496 (empty -> .)
    LIT_CHAR        reduce using rule 496 (empty -> .)
    LIT_STR         reduce using rule 496 (empty -> .)
    LBRACKET        reduce using rule 496 (empty -> .)
    FUNCTION        reduce using rule 496 (empty -> .)
    NEW             reduce using rule 496 (empty -> .)
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    TYPEID          reduce using rule 496 (empty -> .)
    BODY            reduce using rule 496 (empty -> .)
    RBRACE          reduce using rule 496 (empty -> .)
    ELSE            reduce using rule 496 (empty -> .)

    ifmark4                        shift and go to state 833
    empty                          shift and go to state 834

state 831

    (332) ElseStatement -> ScopeStatement .

    SEMICOLON       reduce using rule 332 (ElseStatement -> ScopeStatement .)
    CASE            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    DEFAULT         reduce using rule 332 (ElseStatement -> ScopeStatement .)
    LBRACE          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    IDENTIFIER      reduce using rule 332 (ElseStatement -> ScopeStatement .)
    IF              reduce using rule 332 (ElseStatement -> ScopeStatement .)
    WHILE           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    DO              reduce using rule 332 (ElseStatement -> ScopeStatement .)
    FOR             reduce using rule 332 (ElseStatement -> ScopeStatement .)
    SWITCH          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    FINAL           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    CONTINUE        reduce using rule 332 (ElseStatement -> ScopeStatement .)
    BREAK           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    RETURN          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    GOTO            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    WITH            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    MIXIN           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    IMPORT          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    STATIC          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    LPAREN          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    ALIAS           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    ENUM            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    EXTERN          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    AUTO            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    CONST           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    IMMUTABLE       reduce using rule 332 (ElseStatement -> ScopeStatement .)
    FOREACH         reduce using rule 332 (ElseStatement -> ScopeStatement .)
    FOREACH_REVERSE reduce using rule 332 (ElseStatement -> ScopeStatement .)
    CLASS           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    UNION           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    AMPERSAND       reduce using rule 332 (ElseStatement -> ScopeStatement .)
    PLUS_PLUS       reduce using rule 332 (ElseStatement -> ScopeStatement .)
    MINUS_MINUS     reduce using rule 332 (ElseStatement -> ScopeStatement .)
    TIMES           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    MINUS           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    PLUS            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    EXCLAMATION     reduce using rule 332 (ElseStatement -> ScopeStatement .)
    TILDE           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    CAST            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    DOT             reduce using rule 332 (ElseStatement -> ScopeStatement .)
    THIS            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    NULL            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    TRUE            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    FALSE           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    DOLLAR          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    INUMBER         reduce using rule 332 (ElseStatement -> ScopeStatement .)
    DNUMBER         reduce using rule 332 (ElseStatement -> ScopeStatement .)
    LIT_CHAR        reduce using rule 332 (ElseStatement -> ScopeStatement .)
    LIT_STR         reduce using rule 332 (ElseStatement -> ScopeStatement .)
    LBRACKET        reduce using rule 332 (ElseStatement -> ScopeStatement .)
    FUNCTION        reduce using rule 332 (ElseStatement -> ScopeStatement .)
    NEW             reduce using rule 332 (ElseStatement -> ScopeStatement .)
    BOOL            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    SHORT           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    USHORT          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    INT             reduce using rule 332 (ElseStatement -> ScopeStatement .)
    UINT            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    LONG            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    ULONG           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    CHAR            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    FLOAT           reduce using rule 332 (ElseStatement -> ScopeStatement .)
    VOID            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    TYPEOF          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    TYPEID          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    BODY            reduce using rule 332 (ElseStatement -> ScopeStatement .)
    RBRACE          reduce using rule 332 (ElseStatement -> ScopeStatement .)
    ELSE            reduce using rule 332 (ElseStatement -> ScopeStatement .)


state 832

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 . ScopeStatement for_M3
    (307) ScopeStatement -> . NonEmptyStatement
    (308) ScopeStatement -> . BlockStatement
    (285) NonEmptyStatement -> . NonEmptyStatementNoCaseNoDefault
    (286) NonEmptyStatement -> . CaseStatement
    (287) NonEmptyStatement -> . CaseRangeStatement
    (288) NonEmptyStatement -> . DefaultStatement
    (313) BlockStatement -> . LBRACE M_block_begin RBRACE M_block_end
    (314) BlockStatement -> . LBRACE M_block_begin StatementList RBRACE M_block_end
    (289) NonEmptyStatementNoCaseNoDefault -> . LabeledStatement
    (290) NonEmptyStatementNoCaseNoDefault -> . ExpressionStatement
    (291) NonEmptyStatementNoCaseNoDefault -> . DeclarationStatement
    (292) NonEmptyStatementNoCaseNoDefault -> . IfStatement
    (293) NonEmptyStatementNoCaseNoDefault -> . WhileStatement
    (294) NonEmptyStatementNoCaseNoDefault -> . DoStatement
    (295) NonEmptyStatementNoCaseNoDefault -> . ForStatement
    (296) NonEmptyStatementNoCaseNoDefault -> . ForeachStatement
    (297) NonEmptyStatementNoCaseNoDefault -> . SwitchStatement
    (298) NonEmptyStatementNoCaseNoDefault -> . FinalSwitchStatement
    (299) NonEmptyStatementNoCaseNoDefault -> . ContinueStatement
    (300) NonEmptyStatementNoCaseNoDefault -> . BreakStatement
    (301) NonEmptyStatementNoCaseNoDefault -> . ReturnStatement
    (302) NonEmptyStatementNoCaseNoDefault -> . GotoStatement
    (303) NonEmptyStatementNoCaseNoDefault -> . WithStatement
    (304) NonEmptyStatementNoCaseNoDefault -> . MixinStatement
    (305) NonEmptyStatementNoCaseNoDefault -> . ForeachRangeStatement
    (306) NonEmptyStatementNoCaseNoDefault -> . ImportDeclaration
    (375) CaseStatement -> . CASE ArgumentList COLON c_m1 ScopeStatementList c_m2
    (378) CaseRangeStatement -> . CASE FirstExp COLON RANGE LastExp COLON ScopeStatementList
    (381) DefaultStatement -> . DEFAULT COLON ScopeStatementList
    (310) LabeledStatement -> . IDENTIFIER COLON
    (311) LabeledStatement -> . IDENTIFIER COLON NoScopeStatement
    (312) LabeledStatement -> . IDENTIFIER COLON Statement
    (319) ExpressionStatement -> . Expression SEMICOLON
    (320) DeclarationStatement -> . Declaration
    (321) DeclarationStatement -> . StorageClasses Declaration
    (322) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark2
    (323) IfStatement -> . IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4
    (333) WhileStatement -> . WHILE LPAREN while_M0 Expression RPAREN while_M1 ScopeStatement while_M2
    (337) DoStatement -> . DO Dowhile_M1 ScopeStatement WHILE LPAREN Expression RPAREN Dowhile_M2
    (340) ForStatement -> . FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3
    (354) ForeachStatement -> . AggregateForeach NoScopeNonEmptyStatement
    (372) SwitchStatement -> . SWITCH LPAREN Expression RPAREN switch_M1 ScopeStatement switch_M2
    (388) FinalSwitchStatement -> . FINAL SWITCH LPAREN Expression RPAREN ScopeStatement
    (393) ContinueStatement -> . CONTINUE IDENTIFIER_opt SEMICOLON
    (394) BreakStatement -> . BREAK IDENTIFIER_opt SEMICOLON
    (395) ReturnStatement -> . RETURN Expression_opt SEMICOLON
    (396) GotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (397) GotoStatement -> . GOTO DEFAULT SEMICOLON
    (398) GotoStatement -> . GOTO CASE SEMICOLON
    (399) GotoStatement -> . GOTO CASE Expression SEMICOLON
    (400) WithStatement -> . WITH LPAREN Expression RPAREN ScopeStatement
    (401) WithStatement -> . WITH LPAREN Symbol RPAREN ScopeStatement
    (402) MixinStatement -> . MIXIN LPAREN AssignExpression RPAREN SEMICOLON
    (371) ForeachRangeStatement -> . RangeForeach ScopeStatement
    (20) ImportDeclaration -> . IMPORT ImportList SEMICOLON
    (21) ImportDeclaration -> . STATIC IMPORT ImportList SEMICOLON
    (152) Expression -> . CommaExpression
    (34) Declaration -> . FuncDeclaration
    (35) Declaration -> . VarDeclarations
    (36) Declaration -> . AliasDeclaration
    (37) Declaration -> . AggregateDeclaration
    (38) Declaration -> . EnumDeclaration
    (39) Declaration -> . ImportDeclaration
    (106) StorageClasses -> . StorageClass
    (107) StorageClasses -> . StorageClass StorageClasses
    (353) AggregateForeach -> . Foreach LPAREN ForeachTypeList SEMICOLON ForeachAggregate RPAREN
    (368) RangeForeach -> . LPAREN ForeachType SEMICOLON LwrExpression RANGE UprExpression RPAREN
    (153) CommaExpression -> . AssignExpression
    (154) CommaExpression -> . AssignExpression COMMA CommaExpression
    (455) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m1 FunctionBody
    (456) FuncDeclaration -> . StorageClasses_opt BasicType FuncDeclarator func_m2 SEMICOLON
    (457) FuncDeclaration -> . AutoFuncDeclaration
    (40) VarDeclarations -> . StorageClasses_opt BasicType Declarators SEMICOLON
    (134) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType Declarators SEMICOLON
    (135) AliasDeclaration -> . ALIAS StorageClasses_opt BasicType FuncDeclarator SEMICOLON
    (136) AliasDeclaration -> . ALIAS AliasDeclarationX SEMICOLON
    (403) AggregateDeclaration -> . ClassDeclaration
    (404) AggregateDeclaration -> . UnionDeclaration
    (436) EnumDeclaration -> . ENUM IDENTIFIER EnumBody
    (437) EnumDeclaration -> . ENUM IDENTIFIER COLON EnumBaseType EnumBody
    (438) EnumDeclaration -> . AnonymousEnumDeclaration
    (108) StorageClass -> . ENUM
    (109) StorageClass -> . STATIC
    (110) StorageClass -> . EXTERN
    (111) StorageClass -> . FINAL
    (112) StorageClass -> . AUTO
    (113) StorageClass -> . CONST
    (114) StorageClass -> . IMMUTABLE
    (355) Foreach -> . FOREACH
    (356) Foreach -> . FOREACH_REVERSE
    (155) AssignExpression -> . ConditionalExpression
    (156) AssignExpression -> . ConditionalExpression ASSIGN AssignExpression
    (157) AssignExpression -> . ConditionalExpression EQ_PLUS AssignExpression
    (158) AssignExpression -> . ConditionalExpression EQ_MINUS AssignExpression
    (159) AssignExpression -> . ConditionalExpression EQ_TIMES AssignExpression
    (160) AssignExpression -> . ConditionalExpression EQ_DIV AssignExpression
    (161) AssignExpression -> . ConditionalExpression EQ_MODULO AssignExpression
    (162) AssignExpression -> . ConditionalExpression EQ_AND_BIT AssignExpression
    (163) AssignExpression -> . ConditionalExpression EQ_OR_BIT AssignExpression
    (164) AssignExpression -> . ConditionalExpression EQ_XOR_BIT AssignExpression
    (165) AssignExpression -> . ConditionalExpression EQ_LEFT AssignExpression
    (166) AssignExpression -> . ConditionalExpression EQ_RIGHT AssignExpression
    (132) StorageClasses_opt -> . StorageClasses
    (133) StorageClasses_opt -> . empty
    (460) AutoFuncDeclaration -> . StorageClasses IDENTIFIER FuncDeclaratorSuffix FunctionBody
    (410) ClassDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (411) ClassDeclaration -> . CLASS IDENTIFIER BaseClassList_opt class_m1 AggregateBody class_m2
    (405) UnionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (406) UnionDeclaration -> . UNION IDENTIFIER AggregateBody
    (407) UnionDeclaration -> . AnonUnionDeclaration
    (447) AnonymousEnumDeclaration -> . ENUM COLON EnumBaseType LBRACE EnumMembers RBRACE
    (448) AnonymousEnumDeclaration -> . ENUM LBRACE EnumMembers RBRACE
    (449) AnonymousEnumDeclaration -> . ENUM LBRACE AnonymousEnumMembers RBRACE
    (167) ConditionalExpression -> . OrOrExpression
    (168) ConditionalExpression -> . OrOrExpression QUESTION Expression COLON ConditionalExpression
    (496) empty -> .
    (408) AnonUnionDeclaration -> . UNION AggregateBody
    (169) OrOrExpression -> . AndAndExpression
    (170) OrOrExpression -> . OrOrExpression DOUBLE_PIPE AndAndExpression
    (171) AndAndExpression -> . OrExpression
    (172) AndAndExpression -> . AndAndExpression DOUBLE_AMPERSAND OrExpression
    (173) OrExpression -> . XorExpression
    (174) OrExpression -> . OrExpression PIPE XorExpression
    (175) XorExpression -> . AndExpression
    (176) XorExpression -> . XorExpression CARET AndExpression
    (177) AndExpression -> . CmpExpression
    (178) AndExpression -> . AndExpression AMPERSAND CmpExpression
    (179) CmpExpression -> . ShiftExpression
    (180) CmpExpression -> . EqualExpression
    (181) CmpExpression -> . RelExpression
    (188) ShiftExpression -> . AddExpression
    (189) ShiftExpression -> . ShiftExpression LEFT_SHIFT AddExpression
    (190) ShiftExpression -> . ShiftExpression RIGHT_SHIFT AddExpression
    (182) EqualExpression -> . ShiftExpression IS_EQ ShiftExpression
    (183) EqualExpression -> . ShiftExpression NOT_EQ ShiftExpression
    (184) RelExpression -> . ShiftExpression LESS ShiftExpression
    (185) RelExpression -> . ShiftExpression GREATER_EQ ShiftExpression
    (186) RelExpression -> . ShiftExpression GREATER ShiftExpression
    (187) RelExpression -> . ShiftExpression LESS_EQ ShiftExpression
    (191) AddExpression -> . MulExpression
    (192) AddExpression -> . AddExpression PLUS MulExpression
    (193) AddExpression -> . AddExpression MINUS MulExpression
    (194) MulExpression -> . UnaryExpression
    (195) MulExpression -> . MulExpression TIMES UnaryExpression
    (196) MulExpression -> . MulExpression DIV UnaryExpression
    (197) MulExpression -> . MulExpression MODULO UnaryExpression
    (198) UnaryExpression -> . AMPERSAND UnaryExpression
    (199) UnaryExpression -> . PLUS_PLUS UnaryExpression
    (200) UnaryExpression -> . MINUS_MINUS UnaryExpression
    (201) UnaryExpression -> . TIMES UnaryExpression
    (202) UnaryExpression -> . MINUS UnaryExpression
    (203) UnaryExpression -> . PLUS UnaryExpression
    (204) UnaryExpression -> . EXCLAMATION UnaryExpression
    (205) UnaryExpression -> . ComplementExpression
    (206) UnaryExpression -> . LPAREN Type RPAREN DOT IDENTIFIER
    (207) UnaryExpression -> . CastExpression
    (208) UnaryExpression -> . PowExpression
    (209) ComplementExpression -> . TILDE UnaryExpression
    (223) CastExpression -> . CAST LPAREN Type RPAREN UnaryExpression
    (224) CastExpression -> . CAST LPAREN RPAREN UnaryExpression
    (225) PowExpression -> . PostfixExpression
    (226) PowExpression -> . PostfixExpression POWER UnaryExpression
    (227) PostfixExpression -> . PrimaryExpression
    (228) PostfixExpression -> . PostfixExpression DOT IDENTIFIER
    (229) PostfixExpression -> . PostfixExpression DOT NewExpression
    (230) PostfixExpression -> . PostfixExpression PLUS_PLUS
    (231) PostfixExpression -> . PostfixExpression MINUS_MINUS
    (232) PostfixExpression -> . PostfixExpression LPAREN ArgumentList RPAREN
    (233) PostfixExpression -> . BasicType LPAREN ArgumentList_opt RPAREN JmpMark
    (235) PrimaryExpression -> . IDENTIFIER
    (236) PrimaryExpression -> . IdentifierList
    (237) PrimaryExpression -> . DOT IDENTIFIER
    (238) PrimaryExpression -> . THIS
    (239) PrimaryExpression -> . NULL
    (240) PrimaryExpression -> . TRUE
    (241) PrimaryExpression -> . FALSE
    (242) PrimaryExpression -> . DOLLAR
    (243) PrimaryExpression -> . INUMBER
    (244) PrimaryExpression -> . DNUMBER
    (245) PrimaryExpression -> . LIT_CHAR
    (246) PrimaryExpression -> . LIT_STRPlus
    (247) PrimaryExpression -> . ArrayLiteral
    (248) PrimaryExpression -> . FunctionLiteral
    (249) PrimaryExpression -> . MixinExpression
    (250) PrimaryExpression -> . ImportExpression
    (251) PrimaryExpression -> . NewExpressionWithArgs
    (252) PrimaryExpression -> . BasicTypeX DOT IDENTIFIER
    (253) PrimaryExpression -> . BasicTypeX LPAREN ArgumentList_opt RPAREN
    (254) PrimaryExpression -> . Typeof
    (255) PrimaryExpression -> . LPAREN Expression RPAREN
    (256) PrimaryExpression -> . TypeidExpression
    (79) BasicType -> . BasicTypeX
    (80) BasicType -> . DOT IdentifierList
    (81) BasicType -> . IdentifierList
    (82) BasicType -> . Typeof
    (83) BasicType -> . Typeof DOT IdentifierList
    (103) IdentifierList -> . IDENTIFIER
    (104) IdentifierList -> . IDENTIFIER DOT IdentifierList
    (105) IdentifierList -> . IDENTIFIER LBRACKET AssignExpression RBRACKET DOT IdentifierList
    (269) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (270) LIT_STRPlus -> . LIT_STR
    (257) ArrayLiteral -> . LBRACKET ArgumentList_opt RBRACKET
    (258) ArrayLiteral -> . IDENTIFIER LBRACKET INUMBER RBRACKET
    (259) ArrayLiteral -> . IDENTIFIER LBRACKET AssignExpression RBRACKET
    (260) FunctionLiteral -> . FUNCTION Type_opt ParameterAttributes_opt FunctionLiteralBody
    (261) FunctionLiteral -> . ParameterMemberAttributes FunctionLiteralBody
    (262) FunctionLiteral -> . FunctionLiteralBody
    (271) MixinExpression -> . MIXIN LPAREN AssignExpression RPAREN
    (272) ImportExpression -> . IMPORT LPAREN AssignExpression RPAREN
    (212) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LBRACKET AssignExpression RBRACKET
    (213) NewExpressionWithArgs -> . NEW AllocatorArguments_opt Type LPAREN ArgumentList_opt RPAREN
    (214) NewExpressionWithArgs -> . NewAnonClassExpression
    (84) BasicTypeX -> . BOOL
    (85) BasicTypeX -> . SHORT
    (86) BasicTypeX -> . USHORT
    (87) BasicTypeX -> . INT
    (88) BasicTypeX -> . UINT
    (89) BasicTypeX -> . LONG
    (90) BasicTypeX -> . ULONG
    (91) BasicTypeX -> . CHAR
    (92) BasicTypeX -> . FLOAT
    (93) BasicTypeX -> . VOID
    (141) Typeof -> . TYPEOF LPAREN Expression RPAREN
    (142) Typeof -> . TYPEOF LPAREN RETURN RPAREN
    (273) TypeidExpression -> . TYPEID LPAREN Type RPAREN
    (274) TypeidExpression -> . TYPEID LPAREN Expression RPAREN
    (266) ParameterMemberAttributes -> . Parameters MemberFunctionAttributes_opt
    (267) FunctionLiteralBody -> . BlockStatement
    (268) FunctionLiteralBody -> . BodyStatement
    (428) NewAnonClassExpression -> . NEW AllocatorArguments_opt CLASS ClassArguments_opt SuperClass_opt Interfaces_opt AggregateBody
    (464) Parameters -> . LPAREN ParameterList_opt RPAREN
    (491) BodyStatement -> . BODY BlockStatement

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACE          shift and go to state 145
    CASE            shift and go to state 454
    DEFAULT         shift and go to state 451
    IDENTIFIER      shift and go to state 461
    IF              shift and go to state 478
    WHILE           shift and go to state 452
    DO              shift and go to state 470
    FOR             shift and go to state 445
    SWITCH          shift and go to state 459
    FINAL           shift and go to state 440
    CONTINUE        shift and go to state 448
    BREAK           shift and go to state 469
    RETURN          shift and go to state 438
    GOTO            shift and go to state 432
    WITH            shift and go to state 428
    MIXIN           shift and go to state 449
    IMPORT          shift and go to state 431
    STATIC          shift and go to state 5
    LPAREN          shift and go to state 477
    ALIAS           shift and go to state 20
    ENUM            shift and go to state 433
    EXTERN          shift and go to state 7
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 22
    FOREACH         shift and go to state 435
    FOREACH_REVERSE shift and go to state 441
    CLASS           shift and go to state 13
    UNION           shift and go to state 18
    BOOL            reduce using rule 496 (empty -> .)
    SHORT           reduce using rule 496 (empty -> .)
    USHORT          reduce using rule 496 (empty -> .)
    INT             reduce using rule 496 (empty -> .)
    UINT            reduce using rule 496 (empty -> .)
    LONG            reduce using rule 496 (empty -> .)
    ULONG           reduce using rule 496 (empty -> .)
    CHAR            reduce using rule 496 (empty -> .)
    FLOAT           reduce using rule 496 (empty -> .)
    VOID            reduce using rule 496 (empty -> .)
    TYPEOF          reduce using rule 496 (empty -> .)
    AMPERSAND       shift and go to state 195
    PLUS_PLUS       shift and go to state 199
    MINUS_MINUS     shift and go to state 192
    TIMES           shift and go to state 227
    MINUS           shift and go to state 172
    PLUS            shift and go to state 174
    EXCLAMATION     shift and go to state 200
    TILDE           shift and go to state 209
    CAST            shift and go to state 208
    DOT             shift and go to state 246
    THIS            shift and go to state 182
    NULL            shift and go to state 221
    TRUE            shift and go to state 171
    FALSE           shift and go to state 181
    DOLLAR          shift and go to state 226
    INUMBER         shift and go to state 198
    DNUMBER         shift and go to state 178
    LIT_CHAR        shift and go to state 206
    LIT_STR         shift and go to state 231
    LBRACKET        shift and go to state 169
    FUNCTION        shift and go to state 193
    NEW             shift and go to state 202
    TYPEID          shift and go to state 197
    BODY            shift and go to state 146

  ! DOT             [ reduce using rule 496 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 496 (empty -> .) ]
  ! BOOL            [ shift and go to state 46 ]
  ! SHORT           [ shift and go to state 31 ]
  ! USHORT          [ shift and go to state 41 ]
  ! INT             [ shift and go to state 44 ]
  ! UINT            [ shift and go to state 42 ]
  ! LONG            [ shift and go to state 38 ]
  ! ULONG           [ shift and go to state 36 ]
  ! CHAR            [ shift and go to state 33 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! VOID            [ shift and go to state 32 ]
  ! TYPEOF          [ shift and go to state 47 ]

    ExpressionStatement            shift and go to state 426
    AggregateDeclaration           shift and go to state 4
    AndExpression                  shift and go to state 170
    FinalSwitchStatement           shift and go to state 429
    OrOrExpression                 shift and go to state 173
    BlockStatement                 shift and go to state 595
    GotoStatement                  shift and go to state 443
    RelExpression                  shift and go to state 177
    EqualExpression                shift and go to state 179
    AnonUnionDeclaration           shift and go to state 23
    UnionDeclaration               shift and go to state 25
    ReturnStatement                shift and go to state 436
    NewAnonClassExpression         shift and go to state 185
    StorageClasses                 shift and go to state 437
    Typeof                         shift and go to state 245
    Parameters                     shift and go to state 186
    ImportExpression               shift and go to state 188
    Foreach                        shift and go to state 439
    IdentifierList                 shift and go to state 244
    PowExpression                  shift and go to state 190
    StorageClasses_opt             shift and go to state 9
    BreakStatement                 shift and go to state 442
    ScopeStatement                 shift and go to state 835
    OrExpression                   shift and go to state 194
    ForeachStatement               shift and go to state 446
    EnumDeclaration                shift and go to state 24
    PostfixExpression              shift and go to state 201
    MixinStatement                 shift and go to state 447
    RangeForeach                   shift and go to state 450
    StorageClass                   shift and go to state 28
    ForeachRangeStatement          shift and go to state 453
    PrimaryExpression              shift and go to state 204
    ForStatement                   shift and go to state 444
    ComplementExpression           shift and go to state 205
    ContinueStatement              shift and go to state 456
    ImportDeclaration              shift and go to state 457
    BasicType                      shift and go to state 247
    SwitchStatement                shift and go to state 458
    DefaultStatement               shift and go to state 460
    LIT_STRPlus                    shift and go to state 210
    CaseStatement                  shift and go to state 462
    NonEmptyStatementNoCaseNoDefault shift and go to state 463
    DoStatement                    shift and go to state 464
    MixinExpression                shift and go to state 211
    Declaration                    shift and go to state 465
    FunctionLiteral                shift and go to state 212
    Expression                     shift and go to state 466
    BodyStatement                  shift and go to state 213
    ConditionalExpression          shift and go to state 180
    UnaryExpression                shift and go to state 215
    NewExpressionWithArgs          shift and go to state 216
    MulExpression                  shift and go to state 184
    WhileStatement                 shift and go to state 467
    ParameterMemberAttributes      shift and go to state 187
    NonEmptyStatement              shift and go to state 597
    AndAndExpression               shift and go to state 217
    ClassDeclaration               shift and go to state 26
    empty                          shift and go to state 62
    CommaExpression                shift and go to state 255
    CastExpression                 shift and go to state 218
    AggregateForeach               shift and go to state 471
    LabeledStatement               shift and go to state 472
    DeclarationStatement           shift and go to state 473
    FuncDeclaration                shift and go to state 6
    FunctionLiteralBody            shift and go to state 219
    TypeidExpression               shift and go to state 220
    BasicTypeX                     shift and go to state 249
    AliasDeclaration               shift and go to state 11
    VarDeclarations                shift and go to state 12
    ShiftExpression                shift and go to state 183
    AutoFuncDeclaration            shift and go to state 16
    XorExpression                  shift and go to state 223
    ArrayLiteral                   shift and go to state 225
    CaseRangeStatement             shift and go to state 476
    AddExpression                  shift and go to state 229
    AnonymousEnumDeclaration       shift and go to state 21
    WithStatement                  shift and go to state 479
    CmpExpression                  shift and go to state 230
    AssignExpression               shift and go to state 256
    IfStatement                    shift and go to state 480

state 833

    (323) IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .

    SEMICOLON       reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    CASE            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    DEFAULT         reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    LBRACE          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    IDENTIFIER      reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    IF              reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    WHILE           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    DO              reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    FOR             reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    SWITCH          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    FINAL           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    CONTINUE        reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    BREAK           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    RETURN          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    GOTO            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    WITH            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    MIXIN           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    IMPORT          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    STATIC          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    LPAREN          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    ALIAS           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    ENUM            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    EXTERN          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    AUTO            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    CONST           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    IMMUTABLE       reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    FOREACH         reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    FOREACH_REVERSE reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    CLASS           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    UNION           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    AMPERSAND       reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    PLUS_PLUS       reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    MINUS_MINUS     reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    TIMES           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    MINUS           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    PLUS            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    EXCLAMATION     reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    TILDE           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    CAST            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    DOT             reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    THIS            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    NULL            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    TRUE            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    FALSE           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    DOLLAR          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    INUMBER         reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    DNUMBER         reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    LIT_CHAR        reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    LIT_STR         reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    LBRACKET        reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    FUNCTION        reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    NEW             reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    BOOL            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    SHORT           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    USHORT          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    INT             reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    UINT            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    LONG            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    ULONG           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    CHAR            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    FLOAT           reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    VOID            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    TYPEOF          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    TYPEID          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    BODY            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    RBRACE          reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)
    ELSE            reduce using rule 323 (IfStatement -> IF LPAREN IfCondition RPAREN ifmark1 ThenStatement ifmark3 ELSE ElseStatement ifmark4 .)


state 834

    (324) ifmark4 -> empty .

    SEMICOLON       reduce using rule 324 (ifmark4 -> empty .)
    CASE            reduce using rule 324 (ifmark4 -> empty .)
    DEFAULT         reduce using rule 324 (ifmark4 -> empty .)
    LBRACE          reduce using rule 324 (ifmark4 -> empty .)
    IDENTIFIER      reduce using rule 324 (ifmark4 -> empty .)
    IF              reduce using rule 324 (ifmark4 -> empty .)
    WHILE           reduce using rule 324 (ifmark4 -> empty .)
    DO              reduce using rule 324 (ifmark4 -> empty .)
    FOR             reduce using rule 324 (ifmark4 -> empty .)
    SWITCH          reduce using rule 324 (ifmark4 -> empty .)
    FINAL           reduce using rule 324 (ifmark4 -> empty .)
    CONTINUE        reduce using rule 324 (ifmark4 -> empty .)
    BREAK           reduce using rule 324 (ifmark4 -> empty .)
    RETURN          reduce using rule 324 (ifmark4 -> empty .)
    GOTO            reduce using rule 324 (ifmark4 -> empty .)
    WITH            reduce using rule 324 (ifmark4 -> empty .)
    MIXIN           reduce using rule 324 (ifmark4 -> empty .)
    IMPORT          reduce using rule 324 (ifmark4 -> empty .)
    STATIC          reduce using rule 324 (ifmark4 -> empty .)
    LPAREN          reduce using rule 324 (ifmark4 -> empty .)
    ALIAS           reduce using rule 324 (ifmark4 -> empty .)
    ENUM            reduce using rule 324 (ifmark4 -> empty .)
    EXTERN          reduce using rule 324 (ifmark4 -> empty .)
    AUTO            reduce using rule 324 (ifmark4 -> empty .)
    CONST           reduce using rule 324 (ifmark4 -> empty .)
    IMMUTABLE       reduce using rule 324 (ifmark4 -> empty .)
    FOREACH         reduce using rule 324 (ifmark4 -> empty .)
    FOREACH_REVERSE reduce using rule 324 (ifmark4 -> empty .)
    CLASS           reduce using rule 324 (ifmark4 -> empty .)
    UNION           reduce using rule 324 (ifmark4 -> empty .)
    AMPERSAND       reduce using rule 324 (ifmark4 -> empty .)
    PLUS_PLUS       reduce using rule 324 (ifmark4 -> empty .)
    MINUS_MINUS     reduce using rule 324 (ifmark4 -> empty .)
    TIMES           reduce using rule 324 (ifmark4 -> empty .)
    MINUS           reduce using rule 324 (ifmark4 -> empty .)
    PLUS            reduce using rule 324 (ifmark4 -> empty .)
    EXCLAMATION     reduce using rule 324 (ifmark4 -> empty .)
    TILDE           reduce using rule 324 (ifmark4 -> empty .)
    CAST            reduce using rule 324 (ifmark4 -> empty .)
    DOT             reduce using rule 324 (ifmark4 -> empty .)
    THIS            reduce using rule 324 (ifmark4 -> empty .)
    NULL            reduce using rule 324 (ifmark4 -> empty .)
    TRUE            reduce using rule 324 (ifmark4 -> empty .)
    FALSE           reduce using rule 324 (ifmark4 -> empty .)
    DOLLAR          reduce using rule 324 (ifmark4 -> empty .)
    INUMBER         reduce using rule 324 (ifmark4 -> empty .)
    DNUMBER         reduce using rule 324 (ifmark4 -> empty .)
    LIT_CHAR        reduce using rule 324 (ifmark4 -> empty .)
    LIT_STR         reduce using rule 324 (ifmark4 -> empty .)
    LBRACKET        reduce using rule 324 (ifmark4 -> empty .)
    FUNCTION        reduce using rule 324 (ifmark4 -> empty .)
    NEW             reduce using rule 324 (ifmark4 -> empty .)
    BOOL            reduce using rule 324 (ifmark4 -> empty .)
    SHORT           reduce using rule 324 (ifmark4 -> empty .)
    USHORT          reduce using rule 324 (ifmark4 -> empty .)
    INT             reduce using rule 324 (ifmark4 -> empty .)
    UINT            reduce using rule 324 (ifmark4 -> empty .)
    LONG            reduce using rule 324 (ifmark4 -> empty .)
    ULONG           reduce using rule 324 (ifmark4 -> empty .)
    CHAR            reduce using rule 324 (ifmark4 -> empty .)
    FLOAT           reduce using rule 324 (ifmark4 -> empty .)
    VOID            reduce using rule 324 (ifmark4 -> empty .)
    TYPEOF          reduce using rule 324 (ifmark4 -> empty .)
    TYPEID          reduce using rule 324 (ifmark4 -> empty .)
    BODY            reduce using rule 324 (ifmark4 -> empty .)
    RBRACE          reduce using rule 324 (ifmark4 -> empty .)
    ELSE            reduce using rule 324 (ifmark4 -> empty .)


state 835

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement . for_M3
    (344) for_M3 -> .

    SEMICOLON       reduce using rule 344 (for_M3 -> .)
    CASE            reduce using rule 344 (for_M3 -> .)
    DEFAULT         reduce using rule 344 (for_M3 -> .)
    LBRACE          reduce using rule 344 (for_M3 -> .)
    IDENTIFIER      reduce using rule 344 (for_M3 -> .)
    IF              reduce using rule 344 (for_M3 -> .)
    WHILE           reduce using rule 344 (for_M3 -> .)
    DO              reduce using rule 344 (for_M3 -> .)
    FOR             reduce using rule 344 (for_M3 -> .)
    SWITCH          reduce using rule 344 (for_M3 -> .)
    FINAL           reduce using rule 344 (for_M3 -> .)
    CONTINUE        reduce using rule 344 (for_M3 -> .)
    BREAK           reduce using rule 344 (for_M3 -> .)
    RETURN          reduce using rule 344 (for_M3 -> .)
    GOTO            reduce using rule 344 (for_M3 -> .)
    WITH            reduce using rule 344 (for_M3 -> .)
    MIXIN           reduce using rule 344 (for_M3 -> .)
    IMPORT          reduce using rule 344 (for_M3 -> .)
    STATIC          reduce using rule 344 (for_M3 -> .)
    LPAREN          reduce using rule 344 (for_M3 -> .)
    ALIAS           reduce using rule 344 (for_M3 -> .)
    ENUM            reduce using rule 344 (for_M3 -> .)
    EXTERN          reduce using rule 344 (for_M3 -> .)
    AUTO            reduce using rule 344 (for_M3 -> .)
    CONST           reduce using rule 344 (for_M3 -> .)
    IMMUTABLE       reduce using rule 344 (for_M3 -> .)
    FOREACH         reduce using rule 344 (for_M3 -> .)
    FOREACH_REVERSE reduce using rule 344 (for_M3 -> .)
    CLASS           reduce using rule 344 (for_M3 -> .)
    UNION           reduce using rule 344 (for_M3 -> .)
    AMPERSAND       reduce using rule 344 (for_M3 -> .)
    PLUS_PLUS       reduce using rule 344 (for_M3 -> .)
    MINUS_MINUS     reduce using rule 344 (for_M3 -> .)
    TIMES           reduce using rule 344 (for_M3 -> .)
    MINUS           reduce using rule 344 (for_M3 -> .)
    PLUS            reduce using rule 344 (for_M3 -> .)
    EXCLAMATION     reduce using rule 344 (for_M3 -> .)
    TILDE           reduce using rule 344 (for_M3 -> .)
    CAST            reduce using rule 344 (for_M3 -> .)
    DOT             reduce using rule 344 (for_M3 -> .)
    THIS            reduce using rule 344 (for_M3 -> .)
    NULL            reduce using rule 344 (for_M3 -> .)
    TRUE            reduce using rule 344 (for_M3 -> .)
    FALSE           reduce using rule 344 (for_M3 -> .)
    DOLLAR          reduce using rule 344 (for_M3 -> .)
    INUMBER         reduce using rule 344 (for_M3 -> .)
    DNUMBER         reduce using rule 344 (for_M3 -> .)
    LIT_CHAR        reduce using rule 344 (for_M3 -> .)
    LIT_STR         reduce using rule 344 (for_M3 -> .)
    LBRACKET        reduce using rule 344 (for_M3 -> .)
    FUNCTION        reduce using rule 344 (for_M3 -> .)
    NEW             reduce using rule 344 (for_M3 -> .)
    BOOL            reduce using rule 344 (for_M3 -> .)
    SHORT           reduce using rule 344 (for_M3 -> .)
    USHORT          reduce using rule 344 (for_M3 -> .)
    INT             reduce using rule 344 (for_M3 -> .)
    UINT            reduce using rule 344 (for_M3 -> .)
    LONG            reduce using rule 344 (for_M3 -> .)
    ULONG           reduce using rule 344 (for_M3 -> .)
    CHAR            reduce using rule 344 (for_M3 -> .)
    FLOAT           reduce using rule 344 (for_M3 -> .)
    VOID            reduce using rule 344 (for_M3 -> .)
    TYPEOF          reduce using rule 344 (for_M3 -> .)
    TYPEID          reduce using rule 344 (for_M3 -> .)
    BODY            reduce using rule 344 (for_M3 -> .)
    RBRACE          reduce using rule 344 (for_M3 -> .)
    ELSE            reduce using rule 344 (for_M3 -> .)

    for_M3                         shift and go to state 836

state 836

    (340) ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .

    SEMICOLON       reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    CASE            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    DEFAULT         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    LBRACE          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    IDENTIFIER      reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    IF              reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    WHILE           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    DO              reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    FOR             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    SWITCH          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    FINAL           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    CONTINUE        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    BREAK           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    RETURN          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    GOTO            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    WITH            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    MIXIN           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    IMPORT          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    STATIC          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    LPAREN          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    ALIAS           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    ENUM            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    EXTERN          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    AUTO            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    CONST           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    IMMUTABLE       reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    FOREACH         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    FOREACH_REVERSE reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    CLASS           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    UNION           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    AMPERSAND       reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    PLUS_PLUS       reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    MINUS_MINUS     reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    TIMES           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    MINUS           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    PLUS            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    EXCLAMATION     reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    TILDE           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    CAST            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    DOT             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    THIS            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    NULL            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    TRUE            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    FALSE           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    DOLLAR          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    INUMBER         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    DNUMBER         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    LIT_CHAR        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    LIT_STR         reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    LBRACKET        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    FUNCTION        reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    NEW             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    BOOL            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    SHORT           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    USHORT          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    INT             reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    UINT            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    LONG            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    ULONG           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    CHAR            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    FLOAT           reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    VOID            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    TYPEOF          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    TYPEID          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    BODY            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    RBRACE          reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)
    ELSE            reduce using rule 340 (ForStatement -> FOR LPAREN Initialize for_test_mark Test_opt SEMICOLON for_M1 Increment_opt RPAREN for_M2 ScopeStatement for_M3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 1 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 5 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 17 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 28 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 28 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 28 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 28 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 28 resolved as shift
WARNING: shift/reduce conflict for CONST in state 28 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 28 resolved as shift
WARNING: shift/reduce conflict for DOT in state 40 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 40 resolved as shift
WARNING: shift/reduce conflict for DOT in state 43 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 104 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 126 resolved as shift
WARNING: shift/reduce conflict for DOT in state 214 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 214 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 222 resolved as shift
WARNING: shift/reduce conflict for DOT in state 245 resolved as shift
WARNING: shift/reduce conflict for DOT in state 248 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 298 resolved as shift
WARNING: shift/reduce conflict for DOT in state 367 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 367 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 394 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 427 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 433 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 437 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 437 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 450 resolved as shift
WARNING: shift/reduce conflict for DOT in state 461 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 471 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 523 resolved as shift
WARNING: shift/reduce conflict for BODY in state 523 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 539 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 563 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 590 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 598 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 604 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 604 resolved as shift
WARNING: shift/reduce conflict for CASE in state 604 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 604 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 604 resolved as shift
WARNING: shift/reduce conflict for IF in state 604 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 604 resolved as shift
WARNING: shift/reduce conflict for DO in state 604 resolved as shift
WARNING: shift/reduce conflict for FOR in state 604 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 604 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 604 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 604 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 604 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 604 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 604 resolved as shift
WARNING: shift/reduce conflict for WITH in state 604 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 604 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 604 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 604 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 604 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 604 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 604 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 604 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 604 resolved as shift
WARNING: shift/reduce conflict for CONST in state 604 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 604 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 604 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 604 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 604 resolved as shift
WARNING: shift/reduce conflict for UNION in state 604 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 604 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 604 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 604 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 604 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 604 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 604 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 604 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 604 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 604 resolved as shift
WARNING: shift/reduce conflict for CAST in state 604 resolved as shift
WARNING: shift/reduce conflict for DOT in state 604 resolved as shift
WARNING: shift/reduce conflict for THIS in state 604 resolved as shift
WARNING: shift/reduce conflict for NULL in state 604 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 604 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 604 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 604 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 604 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 604 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 604 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 604 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 604 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 604 resolved as shift
WARNING: shift/reduce conflict for NEW in state 604 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 604 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 604 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 604 resolved as shift
WARNING: shift/reduce conflict for INT in state 604 resolved as shift
WARNING: shift/reduce conflict for UINT in state 604 resolved as shift
WARNING: shift/reduce conflict for LONG in state 604 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 604 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 604 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 604 resolved as shift
WARNING: shift/reduce conflict for VOID in state 604 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 604 resolved as shift
WARNING: shift/reduce conflict for TYPEID in state 604 resolved as shift
WARNING: shift/reduce conflict for BODY in state 604 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 607 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 683 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 683 resolved as shift
WARNING: shift/reduce conflict for IF in state 683 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 683 resolved as shift
WARNING: shift/reduce conflict for DO in state 683 resolved as shift
WARNING: shift/reduce conflict for FOR in state 683 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 683 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 683 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 683 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 683 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 683 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 683 resolved as shift
WARNING: shift/reduce conflict for WITH in state 683 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 683 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 683 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 683 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 683 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 683 resolved as shift
WARNING: shift/reduce conflict for ALIAS in state 683 resolved as shift
WARNING: shift/reduce conflict for ENUM in state 683 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 683 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 683 resolved as shift
WARNING: shift/reduce conflict for CONST in state 683 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 683 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 683 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 683 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 683 resolved as shift
WARNING: shift/reduce conflict for UNION in state 683 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 683 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 683 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 683 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 683 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 683 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 683 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 683 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 683 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 683 resolved as shift
WARNING: shift/reduce conflict for CAST in state 683 resolved as shift
WARNING: shift/reduce conflict for DOT in state 683 resolved as shift
WARNING: shift/reduce conflict for THIS in state 683 resolved as shift
WARNING: shift/reduce conflict for NULL in state 683 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 683 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 683 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 683 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 683 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 683 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 683 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 683 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 683 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 683 resolved as shift
WARNING: shift/reduce conflict for NEW in state 683 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 683 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 683 resolved as shift
WARNING: shift/reduce conflict for USHORT in state 683 resolved as shift
WARNING: shift/reduce conflict for INT in state 683 resolved as shift
WARNING: shift/reduce conflict for UINT in state 683 resolved as shift
WARNING: shift/reduce conflict for LONG in state 683 resolved as shift
WARNING: shift/reduce conflict for ULONG in state 683 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 683 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 683 resolved as shift
WARNING: shift/reduce conflict for VOID in state 683 resolved as shift
WARNING: shift/reduce conflict for TYPEOF in state 683 resolved as shift
WARNING: shift/reduce conflict for TYPEID in state 683 resolved as shift
WARNING: shift/reduce conflict for BODY in state 683 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 703 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 714 resolved as shift
WARNING: shift/reduce conflict for DOT in state 734 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 735 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 736 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 744 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 747 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 775 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 785 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 789 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 799 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 802 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 828 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 832 resolved as shift
WARNING: reduce/reduce conflict in state 105 resolved using rule (EnumMembers -> EnumMember)
WARNING: rejected rule (AnonymousEnumMember -> EnumMember) in state 105
WARNING: reduce/reduce conflict in state 189 resolved using rule (BasicType -> IdentifierList)
WARNING: rejected rule (PrimaryExpression -> IdentifierList) in state 189
WARNING: reduce/reduce conflict in state 196 resolved using rule (BasicType -> Typeof)
WARNING: rejected rule (PrimaryExpression -> Typeof) in state 196
WARNING: reduce/reduce conflict in state 214 resolved using rule (IdentifierList -> IDENTIFIER)
WARNING: rejected rule (PrimaryExpression -> IDENTIFIER) in state 214
WARNING: reduce/reduce conflict in state 244 resolved using rule (BasicType -> IdentifierList)
WARNING: rejected rule (PrimaryExpression -> IdentifierList) in state 244
WARNING: reduce/reduce conflict in state 245 resolved using rule (BasicType -> Typeof)
WARNING: rejected rule (PrimaryExpression -> Typeof) in state 245
WARNING: reduce/reduce conflict in state 248 resolved using rule (IdentifierList -> IDENTIFIER)
WARNING: rejected rule (PrimaryExpression -> IDENTIFIER) in state 248
WARNING: reduce/reduce conflict in state 259 resolved using rule (SuperClass -> BasicType)
WARNING: rejected rule (Interface -> BasicType) in state 259
WARNING: reduce/reduce conflict in state 367 resolved using rule (IdentifierList -> IDENTIFIER)
WARNING: rejected rule (PrimaryExpression -> DOT IDENTIFIER) in state 367
WARNING: reduce/reduce conflict in state 430 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (ScopeBlockStatement -> BlockStatement) in state 430
WARNING: reduce/reduce conflict in state 437 resolved using rule (StorageClasses_opt -> StorageClasses)
WARNING: rejected rule (empty -> <empty>) in state 437
WARNING: reduce/reduce conflict in state 457 resolved using rule (Declaration -> ImportDeclaration)
WARNING: rejected rule (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration) in state 457
WARNING: reduce/reduce conflict in state 461 resolved using rule (IdentifierList -> IDENTIFIER)
WARNING: rejected rule (PrimaryExpression -> IDENTIFIER) in state 461
WARNING: reduce/reduce conflict in state 492 resolved using rule (ArrayMemberInitializations_opt -> empty)
WARNING: rejected rule (ArgumentList_opt -> empty) in state 492
WARNING: reduce/reduce conflict in state 493 resolved using rule (ExpInitializer -> AssignExpression)
WARNING: rejected rule (ArgumentList -> AssignExpression) in state 493
WARNING: reduce/reduce conflict in state 595 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (ScopeStatement -> BlockStatement) in state 595
WARNING: reduce/reduce conflict in state 602 resolved using rule (ArgumentList -> AssignExpression)
WARNING: rejected rule (FirstExp -> AssignExpression) in state 602
WARNING: reduce/reduce conflict in state 604 resolved using rule (LabeledStatement -> IDENTIFIER COLON)
WARNING: rejected rule (empty -> <empty>) in state 604
WARNING: reduce/reduce conflict in state 609 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (NoScopeNonEmptyStatement -> BlockStatement) in state 609
WARNING: reduce/reduce conflict in state 613 resolved using rule (ForeachTypeAttributes -> ForeachTypeAttribute)
WARNING: rejected rule (empty -> <empty>) in state 613
WARNING: reduce/reduce conflict in state 616 resolved using rule (ForeachTypeAttributes_opt -> empty)
WARNING: rejected rule (InOut_opt -> empty) in state 616
WARNING: reduce/reduce conflict in state 666 resolved using rule (PrimaryExpression -> IDENTIFIER)
WARNING: rejected rule (SymbolTail -> IDENTIFIER) in state 666
WARNING: reduce/reduce conflict in state 666 resolved using rule (IdentifierList -> IDENTIFIER)
WARNING: rejected rule (PrimaryExpression -> IDENTIFIER) in state 666
WARNING: reduce/reduce conflict in state 683 resolved using rule (StatementListNoCaseNoDefault -> StatementNoCaseNoDefault)
WARNING: rejected rule (empty -> <empty>) in state 683
WARNING: reduce/reduce conflict in state 694 resolved using rule (NoScopeStatement -> BlockStatement)
WARNING: rejected rule (ScopeBlockStatement -> BlockStatement) in state 694
WARNING: reduce/reduce conflict in state 694 resolved using rule (FunctionLiteralBody -> BlockStatement)
WARNING: rejected rule (NoScopeStatement -> BlockStatement) in state 694
WARNING: reduce/reduce conflict in state 695 resolved using rule (Statement -> SEMICOLON)
WARNING: rejected rule (NoScopeStatement -> SEMICOLON) in state 695
WARNING: reduce/reduce conflict in state 697 resolved using rule (Statement -> NonEmptyStatement)
WARNING: rejected rule (NoScopeStatement -> NonEmptyStatement) in state 697
WARNING: reduce/reduce conflict in state 734 resolved using rule (PrimaryExpression -> DOT IDENTIFIER)
WARNING: rejected rule (SymbolTail -> IDENTIFIER) in state 734
WARNING: reduce/reduce conflict in state 734 resolved using rule (IdentifierList -> IDENTIFIER)
WARNING: rejected rule (PrimaryExpression -> DOT IDENTIFIER) in state 734
WARNING: reduce/reduce conflict in state 771 resolved using rule (IdentifierList -> IDENTIFIER)
WARNING: rejected rule (SymbolTail -> IDENTIFIER) in state 771
WARNING: reduce/reduce conflict in state 820 resolved using rule (ifmark3 -> empty)
WARNING: rejected rule (ifmark2 -> empty) in state 820
WARNING: Rule (PrimaryExpression -> IDENTIFIER) is never reduced
WARNING: Rule (NonEmptyStatementNoCaseNoDefault -> ImportDeclaration) is never reduced
WARNING: Rule (FirstExp -> AssignExpression) is never reduced
WARNING: Rule (SymbolTail -> IDENTIFIER) is never reduced
WARNING: Rule (NoScopeStatement -> SEMICOLON) is never reduced
WARNING: Rule (NoScopeStatement -> NonEmptyStatement) is never reduced
