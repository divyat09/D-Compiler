[PackageName, LexToken(IDENTIFIER,'std',1,7)]
[Packages, PackageName]
[ModuleName, LexToken(IDENTIFIER,'stdio',1,11)]
[ModuleFullyQualifiedName, Packages, LexToken(DOT,'.',1,10), ModuleName]
[Import, ModuleFullyQualifiedName]
[ImportList, Import]
[ImportDeclaration, LexToken(IMPORT,'import',1,0), ImportList, LexToken(SEMICOLON,';',1,16)]
[Declaration, ImportDeclaration]
[StorageClass, LexToken(CONST,'const',2,18)]
[StorageClasses, StorageClass]
[StorageClasses_opt, StorageClasses]
[BasicTypeX, LexToken(INT,'int',2,24)]
[BasicType, BasicTypeX]
[BasicType2_opt, empty]
[VarDeclarator, BasicType2_opt, LexToken(IDENTIFIER,'a',2,28)]
[PrimaryExpression, LexToken(INUMBER,'10',2,30)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[ExpInitializer, AssignExpression]
[NonVoidInitializer, ExpInitializer]
[Initializer, NonVoidInitializer]
[DeclaratorInitializer, VarDeclarator, LexToken(ASSIGN,'=',2,29), Initializer]
[Declarators, DeclaratorInitializer]
[VarDeclarations, StorageClasses_opt, BasicType, Declarators, LexToken(SEMICOLON,';',2,32)]
[Declaration, VarDeclarations]
[StorageClasses_opt, empty]
[BasicTypeX, LexToken(VOID,'void',3,34)]
[BasicType, BasicTypeX]
[BasicType2_opt, empty]
[ParameterList_opt, empty]
[Parameters, LexToken(LPAREN,'(',3,42), ParameterList_opt, LexToken(RPAREN,')',3,43)]
[MemberFunctionAttributes_opt, empty]
[FuncDeclaratorSuffix, Parameters, MemberFunctionAttributes_opt]
[FuncDeclarator, BasicType2_opt, LexToken(IDENTIFIER,'foo',3,39), FuncDeclaratorSuffix]
[BasicTypeX, LexToken(INT,'int',5,48)]
[PrimaryExpression, BasicTypeX, LexToken(IDENTIFIER,'a',5,52)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[ExpressionStatement, Expression, LexToken(SEMICOLON,';',5,53)]
[NonEmptyStatementNoCaseNoDefault, ExpressionStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[Statement, NonEmptyStatement]
[PrimaryExpression, LexToken(IDENTIFIER,'a',6,60)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[IfCondition, Expression]
[PrimaryExpression, LexToken(IDENTIFIER,'x',6,63)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[PrimaryExpression, LexToken(IDENTIFIER,'y',6,65)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[AssignExpression, ConditionalExpression, LexToken(ASSIGN,'=',6,64), AssignExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[ExpressionStatement, Expression, LexToken(SEMICOLON,';',6,66)]
[NonEmptyStatementNoCaseNoDefault, ExpressionStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[ScopeStatement, NonEmptyStatement]
[ThenStatement, ScopeStatement]
[IfStatement, LexToken(IF,'if',6,56), LexToken(LPAREN,'(',6,59), IfCondition, LexToken(RPAREN,')',6,61), ThenStatement]
[NonEmptyStatementNoCaseNoDefault, IfStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[Statement, NonEmptyStatement]
[PrimaryExpression, LexToken(IDENTIFIER,'a',7,73)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[IfCondition, Expression]
[PrimaryExpression, LexToken(IDENTIFIER,'x',7,76)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[PrimaryExpression, LexToken(IDENTIFIER,'y',7,78)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[AssignExpression, ConditionalExpression, LexToken(ASSIGN,'=',7,77), AssignExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[ExpressionStatement, Expression, LexToken(SEMICOLON,';',7,79)]
[NonEmptyStatementNoCaseNoDefault, ExpressionStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[ScopeStatement, NonEmptyStatement]
[ThenStatement, ScopeStatement]
[PrimaryExpression, LexToken(IDENTIFIER,'y',8,88)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[PrimaryExpression, LexToken(IDENTIFIER,'x',8,90)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[AssignExpression, ConditionalExpression, LexToken(ASSIGN,'=',8,89), AssignExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[ExpressionStatement, Expression, LexToken(SEMICOLON,';',8,91)]
[NonEmptyStatementNoCaseNoDefault, ExpressionStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[ScopeStatement, NonEmptyStatement]
[ElseStatement, ScopeStatement]
[IfStatement, LexToken(IF,'if',7,69), LexToken(LPAREN,'(',7,72), IfCondition, LexToken(RPAREN,')',7,74), ThenStatement, LexToken(ELSE,'else',8,83), ElseStatement]
[NonEmptyStatementNoCaseNoDefault, IfStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[Statement, NonEmptyStatement]
[BasicTypeX, LexToken(INT,'int',9,102)]
[PrimaryExpression, BasicTypeX, LexToken(IDENTIFIER,'i',9,106)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[PrimaryExpression, LexToken(INUMBER,'0',9,110)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[AssignExpression, ConditionalExpression, LexToken(ASSIGN,'=',9,108), AssignExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[ExpressionStatement, Expression, LexToken(SEMICOLON,';',9,111)]
[NonEmptyStatementNoCaseNoDefault, ExpressionStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[NoScopeNonEmptyStatement, NonEmptyStatement]
[Initialize, NoScopeNonEmptyStatement]
[PrimaryExpression, LexToken(IDENTIFIER,'i',9,113)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[PrimaryExpression, LexToken(INUMBER,'100',9,117)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[RelExpression, ShiftExpression, LexToken(LESS,'<',9,115), ShiftExpression]
[CmpExpression, RelExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[Test, Expression]
[Test_opt, Test]
[PrimaryExpression, LexToken(IDENTIFIER,'i',9,122)]
[PostfixExpression, PrimaryExpression]
[PostfixExpression, PostfixExpression, LexToken(PLUS_PLUS,'++',9,123)]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[Increment, Expression]
[Increment_opt, Increment]
[PrimaryExpression, LexToken(IDENTIFIER,'x',10,130)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[PrimaryExpression, LexToken(IDENTIFIER,'x',10,134)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, MulExpression]
[PrimaryExpression, LexToken(INUMBER,'1',10,138)]
[PostfixExpression, PrimaryExpression]
[PowExpression, PostfixExpression]
[UnaryExpression, PowExpression]
[MulExpression, UnaryExpression]
[AddExpression, AddExpression, LexToken(PLUS,'+',10,136), MulExpression]
[ShiftExpression, AddExpression]
[CmpExpression, ShiftExpression]
[AndExpression, CmpExpression]
[XorExpression, AndExpression]
[OrExpression, XorExpression]
[AndAndExpression, OrExpression]
[OrOrExpression, AndAndExpression]
[ConditionalExpression, OrOrExpression]
[AssignExpression, ConditionalExpression]
[AssignExpression, ConditionalExpression, LexToken(ASSIGN,'=',10,132), AssignExpression]
[CommaExpression, AssignExpression]
[Expression, CommaExpression]
[ExpressionStatement, Expression, LexToken(SEMICOLON,';',10,139)]
[NonEmptyStatementNoCaseNoDefault, ExpressionStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[Statement, NonEmptyStatement]
[StatementList, Statement]
[BlockStatement, LexToken(LBRACE,'{',9,126), StatementList, LexToken(RBRACE,'}',11,144)]
[ScopeStatement, BlockStatement]
[ForStatement, LexToken(FOR,'for',9,97), LexToken(LPAREN,'(',9,101), Initialize, Test_opt, LexToken(SEMICOLON,';',9,120), Increment_opt, LexToken(RPAREN,')',9,125), ScopeStatement]
[NonEmptyStatementNoCaseNoDefault, ForStatement]
[NonEmptyStatement, NonEmptyStatementNoCaseNoDefault]
[Statement, NonEmptyStatement]
[StatementList, Statement]
[StatementList, Statement, StatementList]
[StatementList, Statement, StatementList]
[StatementList, Statement, StatementList]
[BlockStatement, LexToken(LBRACE,'{',4,45), StatementList, LexToken(RBRACE,'}',12,146)]
[FunctionBody, BlockStatement]
[FuncDeclaration, StorageClasses_opt, BasicType, FuncDeclarator, FunctionBody]
[Declaration, FuncDeclaration]
[Declaration_mult, empty]
[Declaration_mult, Declaration, Declaration_mult]
[Declaration_mult, Declaration, Declaration_mult]
[Declaration_mult, Declaration, Declaration_mult]
