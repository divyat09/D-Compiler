Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    POST_PLUS_PLUS
    COMMENT
    BODY
    ARROW
    SCOPE
    SIZEOF
    EMPTY
    POST_MINUS_MINUS
    IdentifierOrTemplateInstance
    SINGLE_QUOTE
    DOUBLE_QUOTE
    TYPEDEF
    BACK_SLASH

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     ProgramFile -> multiple_declaration
Rule 3     multiple_declaration -> declaration multiple_declaration
Rule 4     multiple_declaration -> empty
Rule 5     addExpression -> mulExpression
Rule 6     addExpression -> addExpression PLUS mulExpression
Rule 7     addExpression -> addExpression MINUS mulExpression
Rule 8     addExpression -> addExpression TILDE mulExpression
Rule 9     mulExpression -> powExpression
Rule 10    mulExpression -> mulExpression TIMES powExpression
Rule 11    mulExpression -> mulExpression DIV powExpression
Rule 12    mulExpression -> mulExpression MODULO powExpression
Rule 13    powExpression -> unaryExpression
Rule 14    powExpression -> powExpression POWER unaryExpression
Rule 15    unaryExpression -> primaryExpression
Rule 16    unaryExpression -> UAMPERSAND unaryExpression
Rule 17    unaryExpression -> EXCLAMATION unaryExpression
Rule 18    unaryExpression -> UTIMES unaryExpression
Rule 19    unaryExpression -> UPLUS unaryExpression
Rule 20    unaryExpression -> UMINUS unaryExpression
Rule 21    unaryExpression -> PLUS_PLUS unaryExpression
Rule 22    unaryExpression -> MINUS_MINUS unaryExpression
Rule 23    unaryExpression -> newExpression
Rule 24    unaryExpression -> deleteExpression
Rule 25    unaryExpression -> castExpression
Rule 26    unaryExpression -> functionCallExpression
Rule 27    unaryExpression -> indexExpression
Rule 28    unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance
Rule 29    unaryExpression -> unaryExpression DOT newExpression
Rule 30    unaryExpression -> unaryExpression DOT identifierOrTemplateInstance
Rule 31    unaryExpression -> unaryExpression PLUS_PLUS
Rule 32    unaryExpression -> unaryExpression MINUS_MINUS
Rule 33    primaryExpression -> identifierOrTemplateInstance
Rule 34    primaryExpression -> DOT identifierOrTemplateInstance
Rule 35    primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER
Rule 36    primaryExpression -> type DOT IDENTIFIER
Rule 37    primaryExpression -> type arguments
Rule 38    primaryExpression -> arrayLiteral
Rule 39    primaryExpression -> LPAREN expression RPAREN
Rule 40    primaryExpression -> functionLiteralExpression
Rule 41    primaryExpression -> mixinExpression
Rule 42    primaryExpression -> importExpression
Rule 43    primaryExpression -> DOLLAR
Rule 44    primaryExpression -> THIS
Rule 45    primaryExpression -> NULL
Rule 46    primaryExpression -> TRUE
Rule 47    primaryExpression -> FALSE
Rule 48    primaryExpression -> INUMBER
Rule 49    primaryExpression -> DNUMBER
Rule 50    primaryExpression -> LIT_STRPlus
Rule 51    primaryExpression -> LIT_CHAR
Rule 52    newExpression -> NEW type
Rule 53    newExpression -> NEW type LBRACKET assignExpression RBRACKET
Rule 54    newExpression -> NEW type arguments
Rule 55    newExpression -> newAnonClassExpression
Rule 56    newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody
Rule 57    arguments_question -> arguments
Rule 58    arguments_question -> empty
Rule 59    baseClassList_question -> baseClassList
Rule 60    baseClassList_question -> empty
Rule 61    structBody -> LBRACE multiple_declaration RBRACE
Rule 62    declaration -> multipleattributes declaration2
Rule 63    declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE
Rule 64    declaration2 -> aliasDeclaration
Rule 65    declaration2 -> aliasThisDeclaration
Rule 66    declaration2 -> anonymousEnumDeclaration
Rule 67    declaration2 -> attributeDeclaration
Rule 68    declaration2 -> classDeclaration
Rule 69    declaration2 -> constructor
Rule 70    declaration2 -> destructor
Rule 71    declaration2 -> enumDeclaration
Rule 72    declaration2 -> functionDeclaration
Rule 73    declaration2 -> importDeclaration
Rule 74    declaration2 -> mixinDeclaration
Rule 75    declaration2 -> unionDeclaration
Rule 76    declaration2 -> variableDeclaration
Rule 77    autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON
Rule 78    autoDeclarationPart -> IDENTIFIER ASSIGN initializer
Rule 79    comma_identifier_assign_initializer -> COMMA autoDeclarationPart comma_identifier_assign_initializer
Rule 80    comma_identifier_assign_initializer -> empty
Rule 81    variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON
Rule 82    variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON
Rule 83    variableDeclaration -> autoDeclaration
Rule 84    BasicTypeX -> CHAR
Rule 85    BasicTypeX -> INT
Rule 86    BasicTypeX -> UINT
Rule 87    BasicTypeX -> LONG
Rule 88    BasicTypeX -> FLOAT
Rule 89    BasicTypeX -> DOUBLE
Rule 90    CommaDeclarator -> COMMA declarator CommaDeclarator
Rule 91    CommaDeclarator -> empty
Rule 92    storageClass -> typeConstructor
Rule 93    storageClass -> AUTO
Rule 94    storageClass -> ENUM
Rule 95    storageClass -> EXTERN
Rule 96    storageClass -> FINAL
Rule 97    storageClass -> STATIC
Rule 98    declarator -> IDENTIFIER
Rule 99    declarator -> IDENTIFIER ASSIGN initializer
Rule 100   initializer -> VOID
Rule 101   initializer -> nonVoidInitializer
Rule 102   nonVoidInitializer -> assignExpression
Rule 103   nonVoidInitializer -> arrayInitializer
Rule 104   arrayInitializer -> LBRACKET RBRACKET
Rule 105   arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
Rule 106   comma_arrayMemberInitialization -> COMMA arrayMemberInitialization comma_arrayMemberInitialization
Rule 107   comma_arrayMemberInitialization -> empty
Rule 108   arrayLiteral -> LBRACKET argumentList_question RBRACKET
Rule 109   arrayMemberInitialization -> assignExpression COLON nonVoidInitializer
Rule 110   arrayMemberInitialization -> nonVoidInitializer
Rule 111   unionDeclaration -> UNION IDENTIFIER structBody
Rule 112   unionDeclaration -> UNION IDENTIFIER SEMICOLON
Rule 113   unionDeclaration -> UNION structBody
Rule 114   mixinDeclaration -> mixinExpression SEMICOLON
Rule 115   importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON
Rule 116   importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON
Rule 117   importDeclaration -> IMPORT importBindings SEMICOLON
Rule 118   comma_singleImport -> COMMA singleImport comma_singleImport
Rule 119   comma_singleImport -> empty
Rule 120   singleImport -> IDENTIFIER ASSIGN identifierChain
Rule 121   singleImport -> identifierChain
Rule 122   importBind -> IDENTIFIER
Rule 123   importBind -> IDENTIFIER ASSIGN IDENTIFIER
Rule 124   importBindings -> singleImport COLON importBind importBindstr
Rule 125   importBindstr -> COMMA importBind importBindstr
Rule 126   importBindstr -> empty
Rule 127   identifierChain -> IDENTIFIER multiple_dot_identifier
Rule 128   multiple_dot_identifier -> DOT IDENTIFIER multiple_dot_identifier
Rule 129   multiple_dot_identifier -> empty
Rule 130   CommaParameterStar -> COMMA parameter CommaParameterStar
Rule 131   CommaParameterStar -> empty
Rule 132   parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
Rule 133   parameters -> LPAREN parameter CommaParameterStar RPAREN
Rule 134   parameters -> LPAREN ELLIPSIS RPAREN
Rule 135   parameters -> LPAREN RPAREN
Rule 136   parameter -> parameterAttributeStar type Identifier_question ELLIPSIS
Rule 137   parameter -> parameterAttributeStar type Identifier_question
Rule 138   parameter -> parameterAttributeStar type Identifier_question ASSIGN assignExpression
Rule 139   Identifier_question -> IDENTIFIER
Rule 140   Identifier_question -> empty
Rule 141   parameterAttributeStar -> parameterAttribute parameterAttributeStar
Rule 142   parameterAttributeStar -> empty
Rule 143   parameterAttribute -> typeConstructor
Rule 144   parameterAttribute -> FINAL
Rule 145   parameterAttribute -> AUTO
Rule 146   parameterAttribute -> RETURN
Rule 147   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
Rule 148   functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
Rule 149   functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
Rule 150   functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
Rule 151   constructor -> THIS parameters multiple_memberFunctionAttribute functionBody
Rule 152   constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON
Rule 153   constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody
Rule 154   constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON
Rule 155   constraint -> IF LPAREN expression RPAREN
Rule 156   multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute
Rule 157   multiple_memberFunctionAttribute -> empty
Rule 158   memberFunctionAttribute -> IMMUTABLE
Rule 159   memberFunctionAttribute -> CONST
Rule 160   memberFunctionAttribute -> RETURN
Rule 161   destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody
Rule 162   destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON
Rule 163   enumBody -> LBRACE enumMember comma_enumMember RBRACE
Rule 164   comma_enumMember -> COMMA enumMember comma_enumMember
Rule 165   comma_enumMember -> empty
Rule 166   anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression
Rule 167   anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression
Rule 168   anonymousEnumMember -> IDENTIFIER
Rule 169   COMMA_TYPE_Question -> empty
Rule 170   COMMA_TYPE_Question -> COLON type
Rule 171   multipleanonymousEnumMember -> anonymousEnumMember multipleanonymousEnumMember
Rule 172   multipleanonymousEnumMember -> empty
Rule 173   anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
Rule 174   enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON
Rule 175   enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody
Rule 176   enumMember -> IDENTIFIER
Rule 177   enumMember -> IDENTIFIER ASSIGN assignExpression
Rule 178   attributeDeclaration -> attribute COLON
Rule 179   classDeclaration -> CLASS IDENTIFIER SEMICOLON
Rule 180   classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody
Rule 181   classDeclaration -> CLASS IDENTIFIER structBody
Rule 182   aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON
Rule 183   aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON
Rule 184   aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON
Rule 185   declaratorIdentifierList -> IDENTIFIER multiple_comma_identifer
Rule 186   multiple_comma_identifer -> COMMA IDENTIFIER multiple_comma_identifer
Rule 187   multiple_comma_identifer -> empty
Rule 188   typeIdentifierPart -> identifierOrTemplateInstance
Rule 189   typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart
Rule 190   typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
Rule 191   typeConstructors_quetsion -> typeConstructors
Rule 192   typeConstructors_quetsion -> empty
Rule 193   comma_aliasInitializer -> COMMA aliasInitializer comma_aliasInitializer
Rule 194   comma_aliasInitializer -> empty
Rule 195   multiplestorageClass -> storageClass multiplestorageClass
Rule 196   multiplestorageClass -> empty
Rule 197   aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type
Rule 198   aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON
Rule 199   aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON
Rule 200   multipleattributes -> attribute multipleattributes
Rule 201   multipleattributes -> empty
Rule 202   attribute -> PRIVATE
Rule 203   attribute -> PROTECTED
Rule 204   attribute -> PUBLIC
Rule 205   attribute -> STATIC
Rule 206   attribute -> EXTERN
Rule 207   attribute -> FINAL
Rule 208   attribute -> AUTO
Rule 209   attribute -> CONST
Rule 210   attribute -> IMMUTABLE
Rule 211   baseClass -> type2
Rule 212   baseClassList -> baseClass comma_baseclass_multiple
Rule 213   comma_baseclass_multiple -> COMMA baseClass comma_baseclass_multiple
Rule 214   comma_baseclass_multiple -> empty
Rule 215   type2 -> builtinType
Rule 216   type2 -> typeIdentifierPart
Rule 217   type2 -> THIS DOT typeIdentifierPart
Rule 218   type2 -> typeofExpression typeIdentifierPart_question
Rule 219   type2 -> typeConstructor LPAREN type RPAREN
Rule 220   typeIdentifierPart_question -> DOT typeIdentifierPart
Rule 221   typeIdentifierPart_question -> empty
Rule 222   typeConstructor -> CONST
Rule 223   typeConstructor -> IMMUTABLE
Rule 224   typeConstructors -> typeConstructor multiple_typeConstructors
Rule 225   multiple_typeConstructors -> typeConstructor multiple_typeConstructors
Rule 226   multiple_typeConstructors -> empty
Rule 227   typeSuffix -> TIMES
Rule 228   typeSuffix -> LBRACKET type_question RBRACKET
Rule 229   typeSuffix -> LBRACKET assignExpression RBRACKET
Rule 230   typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET
Rule 231   typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute
Rule 232   typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute
Rule 233   type_question -> type
Rule 234   type_question -> empty
Rule 235   typeidExpression -> TYPEID LPAREN type RPAREN
Rule 236   typeidExpression -> TYPEID LPAREN expression RPAREN
Rule 237   typeofExpression -> TYPEOF LPAREN expression RPAREN
Rule 238   typeofExpression -> TYPEOF LPAREN RETURN RPAREN
Rule 239   statementNoCaseNoDefault -> labeledStatement
Rule 240   statementNoCaseNoDefault -> blockStatement
Rule 241   statementNoCaseNoDefault -> ifStatement
Rule 242   statementNoCaseNoDefault -> whileStatement
Rule 243   statementNoCaseNoDefault -> doStatement
Rule 244   statementNoCaseNoDefault -> forStatement
Rule 245   statementNoCaseNoDefault -> foreachStatement
Rule 246   statementNoCaseNoDefault -> switchStatement
Rule 247   statementNoCaseNoDefault -> continueStatement
Rule 248   statementNoCaseNoDefault -> breakStatement
Rule 249   statementNoCaseNoDefault -> returnStatement
Rule 250   statementNoCaseNoDefault -> gotoStatement
Rule 251   statementNoCaseNoDefault -> withStatement
Rule 252   statementNoCaseNoDefault -> expressionStatement
Rule 253   labeledStatement -> IDENTIFIER COLON declarationOrStatement_question
Rule 254   blockStatement -> LBRACE RBRACE
Rule 255   blockStatement -> LBRACE declarationsAndStatements RBRACE
Rule 256   ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement
Rule 257   ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
Rule 258   whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement
Rule 259   doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
Rule 260   forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
Rule 261   forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
Rule 262   foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
Rule 263   foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
Rule 264   foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
Rule 265   foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
Rule 266   switchStatement -> SWITCH LPAREN expression RPAREN statement
Rule 267   continueStatement -> CONTINUE SEMICOLON
Rule 268   continueStatement -> CONTINUE IDENTIFIER SEMICOLON
Rule 269   declarationOrStatement_question -> declarationOrStatement
Rule 270   declarationOrStatement_question -> empty
Rule 271   breakStatement -> BREAK SEMICOLON
Rule 272   breakStatement -> BREAK IDENTIFIER SEMICOLON
Rule 273   returnStatement -> RETURN expression_question SEMICOLON
Rule 274   gotoStatement -> GOTO IDENTIFIER SEMICOLON
Rule 275   gotoStatement -> GOTO DEFAULT SEMICOLON
Rule 276   gotoStatement -> GOTO CASE expression_question SEMICOLON
Rule 277   withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault
Rule 278   expressionStatement -> expression SEMICOLON
Rule 279   declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple
Rule 280   declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple
Rule 281   declarationOrStatementmultiple -> empty
Rule 282   declarationOrStatement -> declaration
Rule 283   declarationOrStatement -> statement
Rule 284   ifCondition -> AUTO IDENTIFIER ASSIGN expression
Rule 285   ifCondition -> type IDENTIFIER ASSIGN expression
Rule 286   ifCondition -> expression
Rule 287   expression_question -> expression
Rule 288   expression_question -> empty
Rule 289   foreachTypeList -> foreachType foreachType_multiple
Rule 290   foreachType_multiple -> COMMA foreachType foreachType_multiple
Rule 291   foreachType_multiple -> empty
Rule 292   foreachType -> typeConstructorStar type_question IDENTIFIER
Rule 293   statement -> statementNoCaseNoDefault
Rule 294   statement -> caseStatement
Rule 295   statement -> caseRangeStatement
Rule 296   statement -> defaultStatement
Rule 297   defaultStatement -> DEFAULT COLON declarationsAndStatements
Rule 298   caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
Rule 299   typeConstructorStar -> typeConstructor typeConstructorStar
Rule 300   typeConstructorStar -> empty
Rule 301   caseStatement -> CASE argumentList COLON declarationsAndStatements
Rule 302   deleteExpression -> DELETE unaryExpression
Rule 303   castExpression -> CAST LPAREN RPAREN unaryExpression
Rule 304   castExpression -> CAST LPAREN type RPAREN unaryExpression
Rule 305   castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression
Rule 306   castQualifier -> CONST
Rule 307   castQualifier -> IMMUTABLE
Rule 308   functionCallExpression -> symbol arguments
Rule 309   functionCallExpression -> unaryExpression arguments
Rule 310   functionCallExpression -> type arguments
Rule 311   symbol -> DOT identifierOrTemplateChain
Rule 312   symbol -> identifierOrTemplateChain
Rule 313   identifierOrTemplateChain -> identifierOrTemplateInstance
Rule 314   identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance
Rule 315   identifierOrTemplateInstance -> IDENTIFIER
Rule 316   indexExpression -> unaryExpression LBRACKET RBRACKET
Rule 317   indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET
Rule 318   comma_index -> COMMA index comma_index
Rule 319   comma_index -> empty
Rule 320   index -> assignExpression
Rule 321   index -> assignExpression RANGE assignExpression
Rule 322   type -> typeConstructors_quetsion type2 typeSuffixStar
Rule 323   builtinType -> BOOL
Rule 324   builtinType -> SHORT
Rule 325   builtinType -> USHORT
Rule 326   builtinType -> INT
Rule 327   builtinType -> UINT
Rule 328   builtinType -> LONG
Rule 329   builtinType -> ULONG
Rule 330   builtinType -> CHAR
Rule 331   builtinType -> FLOAT
Rule 332   typeSuffixStar -> typeSuffix typeSuffixStar
Rule 333   typeSuffixStar -> empty
Rule 334   arguments -> LPAREN argumentList_question RPAREN
Rule 335   argumentList_question -> argumentList
Rule 336   argumentList_question -> empty
Rule 337   argumentList -> assignExpression
Rule 338   argumentList -> argumentList comma_assign
Rule 339   comma_assign -> COMMA assignExpression comma_assign
Rule 340   comma_assign -> empty
Rule 341   functionBody -> blockStatement
Rule 342   expression -> assignExpression
Rule 343   expression -> expression COMMA assignExpression
Rule 344   functionLiteralExpression -> FUNCTION functionBody
Rule 345   functionLiteralExpression -> FUNCTION type functionBody
Rule 346   functionLiteralExpression -> functionBody
Rule 347   functionLiteralExpression -> IDENTIFIER assignExpression
Rule 348   mixinExpression -> MIXIN LPAREN assignExpression RPAREN
Rule 349   importExpression -> IMPORT LBRACKET assignExpression RBRACKET
Rule 350   LIT_STRPlus -> LIT_STR LIT_STRPlus
Rule 351   LIT_STRPlus -> LIT_STR
Rule 352   assignExpression -> ternaryExpression
Rule 353   assignExpression -> ternaryExpression assignOperator expression
Rule 354   assignOperator -> ASSIGN
Rule 355   assignOperator -> EQ_LEFT
Rule 356   assignOperator -> EQ_RIGHT
Rule 357   assignOperator -> EQ_PLUS
Rule 358   assignOperator -> EQ_MINUS
Rule 359   assignOperator -> EQ_TIMES
Rule 360   assignOperator -> EQ_MODULO
Rule 361   assignOperator -> EQ_AND_BIT
Rule 362   assignOperator -> EQ_DIV
Rule 363   assignOperator -> EQ_OR_BIT
Rule 364   assignOperator -> EQ_XOR_BIT
Rule 365   ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression
Rule 366   ternaryExpression -> orOrExpression
Rule 367   orOrExpression -> andAndExpression
Rule 368   orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression
Rule 369   andAndExpression -> orExpression
Rule 370   andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression
Rule 371   orExpression -> xorExpression
Rule 372   orExpression -> orExpression PIPE xorExpression
Rule 373   xorExpression -> andExpression
Rule 374   xorExpression -> xorExpression CARET andExpression
Rule 375   andExpression -> cmpExpression
Rule 376   andExpression -> andExpression AMPERSAND cmpExpression
Rule 377   cmpExpression -> shiftExpression
Rule 378   cmpExpression -> equalExpression
Rule 379   cmpExpression -> relExpression
Rule 380   shiftExpression -> addExpression
Rule 381   shiftExpression -> shiftExpression RIGHT_SHIFT addExpression
Rule 382   shiftExpression -> shiftExpression LEFT_SHIFT addExpression
Rule 383   equalExpression -> shiftExpression IS_EQ shiftExpression
Rule 384   equalExpression -> shiftExpression NOT_EQ shiftExpression
Rule 385   relExpression -> shiftExpression
Rule 386   relExpression -> relExpression relOperator shiftExpression
Rule 387   relOperator -> LESS
Rule 388   relOperator -> LESS_EQ
Rule 389   relOperator -> GREATER
Rule 390   relOperator -> GREATER_EQ
Rule 391   relOperator -> IS_EQ_DIFF
Rule 392   relOperator -> NOT_EQ_DIFF
Rule 393   relOperator -> LESS_EQ_DIFF
Rule 394   relOperator -> LESS_DIFF
Rule 395   relOperator -> GREATER_EQ_DIFF
Rule 396   relOperator -> GREATER_DIFF
Rule 397   empty -> <empty>

Terminals, with rules where they appear

ALIAS                : 182 183 184 199
AMPERSAND            : 376
ARROW                : 
ASSIGN               : 78 82 99 120 123 138 166 167 177 197 198 284 285 354
AUTO                 : 93 145 208 284
BACK_SLASH           : 
BODY                 : 
BOOL                 : 323
BREAK                : 271 272
CARET                : 374
CASE                 : 276 298 298 301
CAST                 : 303 304 305
CHAR                 : 84 330
CLASS                : 56 179 180 181
COLON                : 109 124 170 178 180 253 297 298 298 301 365
COMMA                : 79 90 106 115 118 125 130 132 164 186 193 213 290 318 339 343
COMMENT              : 
CONST                : 159 209 222 306
CONTINUE             : 267 268
DEFAULT              : 275 297
DELEGATE             : 231
DELETE               : 302
DIV                  : 11
DNUMBER              : 49
DO                   : 259
DOLLAR               : 43
DOT                  : 28 29 30 34 35 36 128 189 190 217 220 311 314
DOUBLE               : 89
DOUBLE_AMPERSAND     : 370
DOUBLE_PIPE          : 368
DOUBLE_QUOTE         : 
ELLIPSIS             : 132 134 136 298
ELSE                 : 257
EMPTY                : 
ENUM                 : 94 173 174 175
EQ_AND_BIT           : 361
EQ_DIV               : 362
EQ_LEFT              : 355
EQ_MINUS             : 358
EQ_MODULO            : 360
EQ_OR_BIT            : 363
EQ_PLUS              : 357
EQ_RIGHT             : 356
EQ_TIMES             : 359
EQ_XOR_BIT           : 364
EXCLAMATION          : 17
EXTERN               : 95 206
FALSE                : 47
FINAL                : 96 144 207
FLOAT                : 88 331
FOR                  : 260 261
FOREACH              : 262 263
FOREACH_REVERSE      : 264 265
FUNCTION             : 232 344 345
GOTO                 : 274 275 276
GREATER              : 389
GREATER_DIFF         : 396
GREATER_EQ           : 390
GREATER_EQ_DIFF      : 395
IDENTIFIER           : 35 36 78 82 98 99 111 112 120 122 123 123 127 128 139 147 148 149 150 166 167 168 174 175 176 177 179 180 181 184 185 186 197 198 199 253 268 272 274 284 285 292 315 347
IF                   : 155 256 257
IMMUTABLE            : 158 210 223 307
IMPORT               : 115 116 117 349
INT                  : 85 326
INUMBER              : 48
IS_EQ                : 383
IS_EQ_DIFF           : 391
IdentifierOrTemplateInstance : 
LBRACE               : 61 63 163 173 254 255
LBRACKET             : 53 104 105 108 190 228 229 230 316 317 349
LEFT_SHIFT           : 382
LESS                 : 387
LESS_DIFF            : 394
LESS_EQ              : 388
LESS_EQ_DIFF         : 393
LIT_CHAR             : 51
LIT_STR              : 350 351
LONG                 : 87 328
LPAREN               : 28 35 39 132 133 134 135 155 161 162 184 219 235 236 237 238 256 257 258 259 260 261 262 263 264 265 266 277 303 304 305 334 348
MINUS                : 7
MINUS_MINUS          : 22 32
MIXIN                : 348
MODULO               : 12
NEW                  : 52 53 54 56
NOT_EQ               : 384
NOT_EQ_DIFF          : 392
NULL                 : 45
PIPE                 : 372
PLUS                 : 6
PLUS_PLUS            : 21 31
POST_MINUS_MINUS     : 
POST_PLUS_PLUS       : 
POWER                : 14
PRIVATE              : 202
PROTECTED            : 203
PUBLIC               : 204
QUESTION             : 365
RANGE                : 230 263 265 321
RBRACE               : 61 63 163 173 254 255
RBRACKET             : 53 104 105 108 190 228 229 230 263 316 317 349
RETURN               : 146 160 238 273
RIGHT_SHIFT          : 381
RPAREN               : 28 35 39 132 133 134 135 155 161 162 184 219 235 236 237 238 256 257 258 259 260 261 262 264 265 266 277 303 304 305 334 348
SCOPE                : 
SEMICOLON            : 77 81 82 112 114 115 116 117 147 149 152 154 162 174 179 182 183 184 198 199 259 260 261 262 263 264 265 267 268 271 272 273 274 275 276 278
SHORT                : 324
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 97 205
SWITCH               : 266
THIS                 : 44 151 152 153 154 161 162 199 217
TILDE                : 8 161 162
TIMES                : 10 227
TRUE                 : 46
TYPEDEF              : 
TYPEID               : 235 236
TYPEOF               : 237 238
UAMPERSAND           : 16
UINT                 : 86 327
ULONG                : 329
UMINUS               : 20
UNION                : 111 112 113
UPLUS                : 19
USHORT               : 325
UTIMES               : 18
VOID                 : 100
WHILE                : 258 259
WITH                 : 277
error                : 

Nonterminals, with rules where they appear

BasicTypeX           : 81 82
COMMA_TYPE_Question  : 173 174 175
CommaDeclarator      : 81 90
CommaParameterStar   : 130 132 133
CompilationUnit      : 0
Identifier_question  : 136 137 138
LIT_STRPlus          : 50 350
ProgramFile          : 1
addExpression        : 6 7 8 380 381 382
aliasDeclaration     : 64
aliasInitializer     : 182 193
aliasThisDeclaration : 65
andAndExpression     : 367 368 370
andExpression        : 373 374 376
anonymousEnumDeclaration : 66
anonymousEnumMember  : 171 173
argumentList         : 301 335 338
argumentList_question : 108 334
arguments            : 37 54 57 308 309 310
arguments_question   : 56 56
arrayInitializer     : 103
arrayLiteral         : 38
arrayMemberInitialization : 105 106
assignExpression     : 53 102 109 138 166 167 177 190 229 230 230 298 298 320 321 321 337 339 342 343 347 348 349
assignOperator       : 353
attribute            : 63 178 200
attributeDeclaration : 67
autoDeclaration      : 83
autoDeclarationPart  : 77 79
baseClass            : 212 213
baseClassList        : 59 180
baseClassList_question : 56
blockStatement       : 240 341
breakStatement       : 248
builtinType          : 215
caseRangeStatement   : 295
caseStatement        : 294
castExpression       : 25
castQualifier        : 305
classDeclaration     : 68
cmpExpression        : 375 376
comma_aliasInitializer : 182 193
comma_arrayMemberInitialization : 105 106
comma_assign         : 338 339
comma_baseclass_multiple : 212 213
comma_enumMember     : 163 164
comma_identifier_assign_initializer : 77 79
comma_index          : 317 318
comma_singleImport   : 115 116 118
constraint           : 153 154
constructor          : 69
continueStatement    : 247
declaration          : 3 260 282
declaration2         : 62
declarationOrStatement : 256 257 257 258 260 261 262 263 264 265 269 279 280
declarationOrStatement_question : 253
declarationOrStatementmultiple : 279 280
declarationsAndStatements : 255 297 298 301
declarator           : 81 90
declaratorIdentifierList : 183
defaultStatement     : 296
deleteExpression     : 24
destructor           : 70
doStatement          : 243
empty                : 4 58 60 80 91 107 119 126 129 131 140 142 157 165 169 172 187 192 194 196 201 214 221 226 234 270 281 288 291 300 319 333 336 340
enumBody             : 175
enumDeclaration      : 71
enumMember           : 163 164
equalExpression      : 378
expression           : 39 155 236 237 258 259 262 263 263 264 265 265 266 277 278 284 285 286 287 343 353 365
expressionStatement  : 252
expression_question  : 260 260 261 261 273 276
forStatement         : 244
foreachStatement     : 245
foreachType          : 263 265 289 290
foreachTypeList      : 262 264
foreachType_multiple : 289 290
functionBody         : 82 148 150 151 153 161 344 345 346
functionCallExpression : 26
functionDeclaration  : 72
functionLiteralExpression : 40 198
gotoStatement        : 250
identifierChain      : 120 121
identifierOrTemplateChain : 311 312 314
identifierOrTemplateInstance : 28 30 33 34 188 189 190 313 314
ifCondition          : 256 257
ifStatement          : 241
importBind           : 124 125
importBindings       : 115 117
importBindstr        : 124 125
importDeclaration    : 73
importExpression     : 42
index                : 317 318
indexExpression      : 27
initializer          : 78 99
labeledStatement     : 239
memberFunctionAttribute : 156
mixinDeclaration     : 74
mixinExpression      : 41 114
mulExpression        : 5 6 7 8 10 11 12
multiple_comma_identifer : 185 186
multiple_declaration : 2 3 61 63
multiple_dot_identifier : 127 128
multiple_memberFunctionAttribute : 147 148 149 150 151 152 153 154 156 161 162 184 231 232
multiple_typeConstructors : 224 225
multipleanonymousEnumMember : 171 173
multipleattributes   : 62 63 200
multiplestorageClass : 77 81 82 147 148 183 184 195 197
newAnonClassExpression : 55
newExpression        : 23 29
nonVoidInitializer   : 101 109 110
orExpression         : 369 370 372
orOrExpression       : 365 366 368
parameter            : 130 132 133
parameterAttribute   : 141
parameterAttributeStar : 136 137 138 141
parameters           : 147 148 149 150 151 152 153 154 184 231 232
powExpression        : 9 10 11 12 14
primaryExpression    : 15
relExpression        : 379 386
relOperator          : 386
returnStatement      : 249
shiftExpression      : 377 381 382 383 383 384 384 385 386
singleImport         : 115 116 118 124
statement            : 266 283
statementNoCaseNoDefault : 259 261 277 293
storageClass         : 77 147 148 195
structBody           : 56 111 113 180 181
switchStatement      : 246
symbol               : 308
ternaryExpression    : 352 353 365
type                 : 28 35 36 37 52 53 54 136 137 138 149 150 166 170 183 184 197 219 233 235 285 304 310 345
type2                : 211 322
typeConstructor      : 35 92 143 219 224 225 299
typeConstructorStar  : 292 299
typeConstructors     : 191
typeConstructors_quetsion : 322
typeIdentifierPart   : 189 190 216 217 220
typeIdentifierPart_question : 218
typeSuffix           : 332
typeSuffixStar       : 322 332
type_question        : 228 292
typeidExpression     : 
typeofExpression     : 218
unaryExpression      : 13 14 16 17 18 19 20 21 22 29 30 31 32 302 303 304 305 309 316 317
unionDeclaration     : 75
variableDeclaration  : 76
whileStatement       : 242
withStatement        : 251
xorExpression        : 371 372 374

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (2) ProgramFile -> . multiple_declaration
    (3) multiple_declaration -> . declaration multiple_declaration
    (4) multiple_declaration -> . empty
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (397) empty -> .
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    $end            reduce using rule 397 (empty -> .)
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    IMPORT          reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    MIXIN           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 1

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multipleattributes             shift and go to state 4
    attribute                      shift and go to state 5
    declaration                    shift and go to state 10
    multiple_declaration           shift and go to state 12
    CompilationUnit                shift and go to state 13
    empty                          shift and go to state 15
    ProgramFile                    shift and go to state 16

state 1

    (210) attribute -> IMMUTABLE .

    PRIVATE         reduce using rule 210 (attribute -> IMMUTABLE .)
    PROTECTED       reduce using rule 210 (attribute -> IMMUTABLE .)
    PUBLIC          reduce using rule 210 (attribute -> IMMUTABLE .)
    STATIC          reduce using rule 210 (attribute -> IMMUTABLE .)
    EXTERN          reduce using rule 210 (attribute -> IMMUTABLE .)
    FINAL           reduce using rule 210 (attribute -> IMMUTABLE .)
    AUTO            reduce using rule 210 (attribute -> IMMUTABLE .)
    CONST           reduce using rule 210 (attribute -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 210 (attribute -> IMMUTABLE .)
    LBRACE          reduce using rule 210 (attribute -> IMMUTABLE .)
    ALIAS           reduce using rule 210 (attribute -> IMMUTABLE .)
    ENUM            reduce using rule 210 (attribute -> IMMUTABLE .)
    CLASS           reduce using rule 210 (attribute -> IMMUTABLE .)
    THIS            reduce using rule 210 (attribute -> IMMUTABLE .)
    TILDE           reduce using rule 210 (attribute -> IMMUTABLE .)
    IMPORT          reduce using rule 210 (attribute -> IMMUTABLE .)
    UNION           reduce using rule 210 (attribute -> IMMUTABLE .)
    MIXIN           reduce using rule 210 (attribute -> IMMUTABLE .)
    CHAR            reduce using rule 210 (attribute -> IMMUTABLE .)
    INT             reduce using rule 210 (attribute -> IMMUTABLE .)
    UINT            reduce using rule 210 (attribute -> IMMUTABLE .)
    LONG            reduce using rule 210 (attribute -> IMMUTABLE .)
    FLOAT           reduce using rule 210 (attribute -> IMMUTABLE .)
    DOUBLE          reduce using rule 210 (attribute -> IMMUTABLE .)
    BOOL            reduce using rule 210 (attribute -> IMMUTABLE .)
    SHORT           reduce using rule 210 (attribute -> IMMUTABLE .)
    USHORT          reduce using rule 210 (attribute -> IMMUTABLE .)
    ULONG           reduce using rule 210 (attribute -> IMMUTABLE .)
    TYPEOF          reduce using rule 210 (attribute -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 210 (attribute -> IMMUTABLE .)


state 2

    (208) attribute -> AUTO .

    PRIVATE         reduce using rule 208 (attribute -> AUTO .)
    PROTECTED       reduce using rule 208 (attribute -> AUTO .)
    PUBLIC          reduce using rule 208 (attribute -> AUTO .)
    STATIC          reduce using rule 208 (attribute -> AUTO .)
    EXTERN          reduce using rule 208 (attribute -> AUTO .)
    FINAL           reduce using rule 208 (attribute -> AUTO .)
    AUTO            reduce using rule 208 (attribute -> AUTO .)
    CONST           reduce using rule 208 (attribute -> AUTO .)
    IMMUTABLE       reduce using rule 208 (attribute -> AUTO .)
    LBRACE          reduce using rule 208 (attribute -> AUTO .)
    ALIAS           reduce using rule 208 (attribute -> AUTO .)
    ENUM            reduce using rule 208 (attribute -> AUTO .)
    CLASS           reduce using rule 208 (attribute -> AUTO .)
    THIS            reduce using rule 208 (attribute -> AUTO .)
    TILDE           reduce using rule 208 (attribute -> AUTO .)
    IMPORT          reduce using rule 208 (attribute -> AUTO .)
    UNION           reduce using rule 208 (attribute -> AUTO .)
    MIXIN           reduce using rule 208 (attribute -> AUTO .)
    CHAR            reduce using rule 208 (attribute -> AUTO .)
    INT             reduce using rule 208 (attribute -> AUTO .)
    UINT            reduce using rule 208 (attribute -> AUTO .)
    LONG            reduce using rule 208 (attribute -> AUTO .)
    FLOAT           reduce using rule 208 (attribute -> AUTO .)
    DOUBLE          reduce using rule 208 (attribute -> AUTO .)
    BOOL            reduce using rule 208 (attribute -> AUTO .)
    SHORT           reduce using rule 208 (attribute -> AUTO .)
    USHORT          reduce using rule 208 (attribute -> AUTO .)
    ULONG           reduce using rule 208 (attribute -> AUTO .)
    TYPEOF          reduce using rule 208 (attribute -> AUTO .)
    IDENTIFIER      reduce using rule 208 (attribute -> AUTO .)


state 3

    (209) attribute -> CONST .

    PRIVATE         reduce using rule 209 (attribute -> CONST .)
    PROTECTED       reduce using rule 209 (attribute -> CONST .)
    PUBLIC          reduce using rule 209 (attribute -> CONST .)
    STATIC          reduce using rule 209 (attribute -> CONST .)
    EXTERN          reduce using rule 209 (attribute -> CONST .)
    FINAL           reduce using rule 209 (attribute -> CONST .)
    AUTO            reduce using rule 209 (attribute -> CONST .)
    CONST           reduce using rule 209 (attribute -> CONST .)
    IMMUTABLE       reduce using rule 209 (attribute -> CONST .)
    LBRACE          reduce using rule 209 (attribute -> CONST .)
    ALIAS           reduce using rule 209 (attribute -> CONST .)
    ENUM            reduce using rule 209 (attribute -> CONST .)
    CLASS           reduce using rule 209 (attribute -> CONST .)
    THIS            reduce using rule 209 (attribute -> CONST .)
    TILDE           reduce using rule 209 (attribute -> CONST .)
    IMPORT          reduce using rule 209 (attribute -> CONST .)
    UNION           reduce using rule 209 (attribute -> CONST .)
    MIXIN           reduce using rule 209 (attribute -> CONST .)
    CHAR            reduce using rule 209 (attribute -> CONST .)
    INT             reduce using rule 209 (attribute -> CONST .)
    UINT            reduce using rule 209 (attribute -> CONST .)
    LONG            reduce using rule 209 (attribute -> CONST .)
    FLOAT           reduce using rule 209 (attribute -> CONST .)
    DOUBLE          reduce using rule 209 (attribute -> CONST .)
    BOOL            reduce using rule 209 (attribute -> CONST .)
    SHORT           reduce using rule 209 (attribute -> CONST .)
    USHORT          reduce using rule 209 (attribute -> CONST .)
    ULONG           reduce using rule 209 (attribute -> CONST .)
    TYPEOF          reduce using rule 209 (attribute -> CONST .)
    IDENTIFIER      reduce using rule 209 (attribute -> CONST .)


state 4

    (62) declaration -> multipleattributes . declaration2
    (64) declaration2 -> . aliasDeclaration
    (65) declaration2 -> . aliasThisDeclaration
    (66) declaration2 -> . anonymousEnumDeclaration
    (67) declaration2 -> . attributeDeclaration
    (68) declaration2 -> . classDeclaration
    (69) declaration2 -> . constructor
    (70) declaration2 -> . destructor
    (71) declaration2 -> . enumDeclaration
    (72) declaration2 -> . functionDeclaration
    (73) declaration2 -> . importDeclaration
    (74) declaration2 -> . mixinDeclaration
    (75) declaration2 -> . unionDeclaration
    (76) declaration2 -> . variableDeclaration
    (182) aliasDeclaration -> . ALIAS aliasInitializer comma_aliasInitializer SEMICOLON
    (183) aliasDeclaration -> . ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON
    (184) aliasDeclaration -> . ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON
    (199) aliasThisDeclaration -> . ALIAS IDENTIFIER THIS SEMICOLON
    (173) anonymousEnumDeclaration -> . ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
    (178) attributeDeclaration -> . attribute COLON
    (179) classDeclaration -> . CLASS IDENTIFIER SEMICOLON
    (180) classDeclaration -> . CLASS IDENTIFIER COLON baseClassList structBody
    (181) classDeclaration -> . CLASS IDENTIFIER structBody
    (151) constructor -> . THIS parameters multiple_memberFunctionAttribute functionBody
    (152) constructor -> . THIS parameters multiple_memberFunctionAttribute SEMICOLON
    (153) constructor -> . THIS parameters multiple_memberFunctionAttribute constraint functionBody
    (154) constructor -> . THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON
    (161) destructor -> . TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody
    (162) destructor -> . TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON
    (174) enumDeclaration -> . ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON
    (175) enumDeclaration -> . ENUM IDENTIFIER COMMA_TYPE_Question enumBody
    (147) functionDeclaration -> . storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (148) functionDeclaration -> . storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (149) functionDeclaration -> . type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (150) functionDeclaration -> . type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (115) importDeclaration -> . IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON
    (116) importDeclaration -> . IMPORT singleImport comma_singleImport SEMICOLON
    (117) importDeclaration -> . IMPORT importBindings SEMICOLON
    (114) mixinDeclaration -> . mixinExpression SEMICOLON
    (111) unionDeclaration -> . UNION IDENTIFIER structBody
    (112) unionDeclaration -> . UNION IDENTIFIER SEMICOLON
    (113) unionDeclaration -> . UNION structBody
    (81) variableDeclaration -> . multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON
    (82) variableDeclaration -> . multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON
    (83) variableDeclaration -> . autoDeclaration
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (92) storageClass -> . typeConstructor
    (93) storageClass -> . AUTO
    (94) storageClass -> . ENUM
    (95) storageClass -> . EXTERN
    (96) storageClass -> . FINAL
    (97) storageClass -> . STATIC
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (195) multiplestorageClass -> . storageClass multiplestorageClass
    (196) multiplestorageClass -> . empty
    (77) autoDeclaration -> . storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (397) empty -> .
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    ALIAS           shift and go to state 43
    ENUM            shift and go to state 36
    CLASS           shift and go to state 32
    THIS            shift and go to state 48
    TILDE           shift and go to state 29
    IMPORT          shift and go to state 30
    UNION           shift and go to state 39
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 22
    EXTERN          shift and go to state 53
    FINAL           shift and go to state 35
    AUTO            shift and go to state 47
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    MIXIN           shift and go to state 50
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    importDeclaration              shift and go to state 18
    attribute                      shift and go to state 19
    aliasThisDeclaration           shift and go to state 20
    aliasDeclaration               shift and go to state 23
    mixinDeclaration               shift and go to state 25
    attributeDeclaration           shift and go to state 26
    declaration2                   shift and go to state 27
    destructor                     shift and go to state 28
    autoDeclaration                shift and go to state 21
    type                           shift and go to state 31
    empty                          shift and go to state 33
    typeConstructors               shift and go to state 34
    enumDeclaration                shift and go to state 37
    functionDeclaration            shift and go to state 38
    multiplestorageClass           shift and go to state 40
    unionDeclaration               shift and go to state 41
    typeConstructors_quetsion      shift and go to state 42
    classDeclaration               shift and go to state 44
    mixinExpression                shift and go to state 45
    storageClass                   shift and go to state 49
    constructor                    shift and go to state 51
    typeConstructor                shift and go to state 24
    anonymousEnumDeclaration       shift and go to state 52
    variableDeclaration            shift and go to state 54

state 5

    (63) declaration -> attribute . multipleattributes LBRACE multiple_declaration RBRACE
    (200) multipleattributes -> attribute . multipleattributes
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 1
    LBRACE          reduce using rule 397 (empty -> .)
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    IMPORT          reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    MIXIN           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    attribute                      shift and go to state 56
    multipleattributes             shift and go to state 55
    empty                          shift and go to state 57

state 6

    (207) attribute -> FINAL .

    PRIVATE         reduce using rule 207 (attribute -> FINAL .)
    PROTECTED       reduce using rule 207 (attribute -> FINAL .)
    PUBLIC          reduce using rule 207 (attribute -> FINAL .)
    STATIC          reduce using rule 207 (attribute -> FINAL .)
    EXTERN          reduce using rule 207 (attribute -> FINAL .)
    FINAL           reduce using rule 207 (attribute -> FINAL .)
    AUTO            reduce using rule 207 (attribute -> FINAL .)
    CONST           reduce using rule 207 (attribute -> FINAL .)
    IMMUTABLE       reduce using rule 207 (attribute -> FINAL .)
    LBRACE          reduce using rule 207 (attribute -> FINAL .)
    ALIAS           reduce using rule 207 (attribute -> FINAL .)
    ENUM            reduce using rule 207 (attribute -> FINAL .)
    CLASS           reduce using rule 207 (attribute -> FINAL .)
    THIS            reduce using rule 207 (attribute -> FINAL .)
    TILDE           reduce using rule 207 (attribute -> FINAL .)
    IMPORT          reduce using rule 207 (attribute -> FINAL .)
    UNION           reduce using rule 207 (attribute -> FINAL .)
    MIXIN           reduce using rule 207 (attribute -> FINAL .)
    CHAR            reduce using rule 207 (attribute -> FINAL .)
    INT             reduce using rule 207 (attribute -> FINAL .)
    UINT            reduce using rule 207 (attribute -> FINAL .)
    LONG            reduce using rule 207 (attribute -> FINAL .)
    FLOAT           reduce using rule 207 (attribute -> FINAL .)
    DOUBLE          reduce using rule 207 (attribute -> FINAL .)
    BOOL            reduce using rule 207 (attribute -> FINAL .)
    SHORT           reduce using rule 207 (attribute -> FINAL .)
    USHORT          reduce using rule 207 (attribute -> FINAL .)
    ULONG           reduce using rule 207 (attribute -> FINAL .)
    TYPEOF          reduce using rule 207 (attribute -> FINAL .)
    IDENTIFIER      reduce using rule 207 (attribute -> FINAL .)


state 7

    (203) attribute -> PROTECTED .

    PRIVATE         reduce using rule 203 (attribute -> PROTECTED .)
    PROTECTED       reduce using rule 203 (attribute -> PROTECTED .)
    PUBLIC          reduce using rule 203 (attribute -> PROTECTED .)
    STATIC          reduce using rule 203 (attribute -> PROTECTED .)
    EXTERN          reduce using rule 203 (attribute -> PROTECTED .)
    FINAL           reduce using rule 203 (attribute -> PROTECTED .)
    AUTO            reduce using rule 203 (attribute -> PROTECTED .)
    CONST           reduce using rule 203 (attribute -> PROTECTED .)
    IMMUTABLE       reduce using rule 203 (attribute -> PROTECTED .)
    LBRACE          reduce using rule 203 (attribute -> PROTECTED .)
    ALIAS           reduce using rule 203 (attribute -> PROTECTED .)
    ENUM            reduce using rule 203 (attribute -> PROTECTED .)
    CLASS           reduce using rule 203 (attribute -> PROTECTED .)
    THIS            reduce using rule 203 (attribute -> PROTECTED .)
    TILDE           reduce using rule 203 (attribute -> PROTECTED .)
    IMPORT          reduce using rule 203 (attribute -> PROTECTED .)
    UNION           reduce using rule 203 (attribute -> PROTECTED .)
    MIXIN           reduce using rule 203 (attribute -> PROTECTED .)
    CHAR            reduce using rule 203 (attribute -> PROTECTED .)
    INT             reduce using rule 203 (attribute -> PROTECTED .)
    UINT            reduce using rule 203 (attribute -> PROTECTED .)
    LONG            reduce using rule 203 (attribute -> PROTECTED .)
    FLOAT           reduce using rule 203 (attribute -> PROTECTED .)
    DOUBLE          reduce using rule 203 (attribute -> PROTECTED .)
    BOOL            reduce using rule 203 (attribute -> PROTECTED .)
    SHORT           reduce using rule 203 (attribute -> PROTECTED .)
    USHORT          reduce using rule 203 (attribute -> PROTECTED .)
    ULONG           reduce using rule 203 (attribute -> PROTECTED .)
    TYPEOF          reduce using rule 203 (attribute -> PROTECTED .)
    IDENTIFIER      reduce using rule 203 (attribute -> PROTECTED .)
    COLON           reduce using rule 203 (attribute -> PROTECTED .)


state 8

    (205) attribute -> STATIC .

    PRIVATE         reduce using rule 205 (attribute -> STATIC .)
    PROTECTED       reduce using rule 205 (attribute -> STATIC .)
    PUBLIC          reduce using rule 205 (attribute -> STATIC .)
    STATIC          reduce using rule 205 (attribute -> STATIC .)
    EXTERN          reduce using rule 205 (attribute -> STATIC .)
    FINAL           reduce using rule 205 (attribute -> STATIC .)
    AUTO            reduce using rule 205 (attribute -> STATIC .)
    CONST           reduce using rule 205 (attribute -> STATIC .)
    IMMUTABLE       reduce using rule 205 (attribute -> STATIC .)
    LBRACE          reduce using rule 205 (attribute -> STATIC .)
    ALIAS           reduce using rule 205 (attribute -> STATIC .)
    ENUM            reduce using rule 205 (attribute -> STATIC .)
    CLASS           reduce using rule 205 (attribute -> STATIC .)
    THIS            reduce using rule 205 (attribute -> STATIC .)
    TILDE           reduce using rule 205 (attribute -> STATIC .)
    IMPORT          reduce using rule 205 (attribute -> STATIC .)
    UNION           reduce using rule 205 (attribute -> STATIC .)
    MIXIN           reduce using rule 205 (attribute -> STATIC .)
    CHAR            reduce using rule 205 (attribute -> STATIC .)
    INT             reduce using rule 205 (attribute -> STATIC .)
    UINT            reduce using rule 205 (attribute -> STATIC .)
    LONG            reduce using rule 205 (attribute -> STATIC .)
    FLOAT           reduce using rule 205 (attribute -> STATIC .)
    DOUBLE          reduce using rule 205 (attribute -> STATIC .)
    BOOL            reduce using rule 205 (attribute -> STATIC .)
    SHORT           reduce using rule 205 (attribute -> STATIC .)
    USHORT          reduce using rule 205 (attribute -> STATIC .)
    ULONG           reduce using rule 205 (attribute -> STATIC .)
    TYPEOF          reduce using rule 205 (attribute -> STATIC .)
    IDENTIFIER      reduce using rule 205 (attribute -> STATIC .)


state 9

    (202) attribute -> PRIVATE .

    PRIVATE         reduce using rule 202 (attribute -> PRIVATE .)
    PROTECTED       reduce using rule 202 (attribute -> PRIVATE .)
    PUBLIC          reduce using rule 202 (attribute -> PRIVATE .)
    STATIC          reduce using rule 202 (attribute -> PRIVATE .)
    EXTERN          reduce using rule 202 (attribute -> PRIVATE .)
    FINAL           reduce using rule 202 (attribute -> PRIVATE .)
    AUTO            reduce using rule 202 (attribute -> PRIVATE .)
    CONST           reduce using rule 202 (attribute -> PRIVATE .)
    IMMUTABLE       reduce using rule 202 (attribute -> PRIVATE .)
    LBRACE          reduce using rule 202 (attribute -> PRIVATE .)
    ALIAS           reduce using rule 202 (attribute -> PRIVATE .)
    ENUM            reduce using rule 202 (attribute -> PRIVATE .)
    CLASS           reduce using rule 202 (attribute -> PRIVATE .)
    THIS            reduce using rule 202 (attribute -> PRIVATE .)
    TILDE           reduce using rule 202 (attribute -> PRIVATE .)
    IMPORT          reduce using rule 202 (attribute -> PRIVATE .)
    UNION           reduce using rule 202 (attribute -> PRIVATE .)
    MIXIN           reduce using rule 202 (attribute -> PRIVATE .)
    CHAR            reduce using rule 202 (attribute -> PRIVATE .)
    INT             reduce using rule 202 (attribute -> PRIVATE .)
    UINT            reduce using rule 202 (attribute -> PRIVATE .)
    LONG            reduce using rule 202 (attribute -> PRIVATE .)
    FLOAT           reduce using rule 202 (attribute -> PRIVATE .)
    DOUBLE          reduce using rule 202 (attribute -> PRIVATE .)
    BOOL            reduce using rule 202 (attribute -> PRIVATE .)
    SHORT           reduce using rule 202 (attribute -> PRIVATE .)
    USHORT          reduce using rule 202 (attribute -> PRIVATE .)
    ULONG           reduce using rule 202 (attribute -> PRIVATE .)
    TYPEOF          reduce using rule 202 (attribute -> PRIVATE .)
    IDENTIFIER      reduce using rule 202 (attribute -> PRIVATE .)
    COLON           reduce using rule 202 (attribute -> PRIVATE .)


state 10

    (3) multiple_declaration -> declaration . multiple_declaration
    (3) multiple_declaration -> . declaration multiple_declaration
    (4) multiple_declaration -> . empty
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (397) empty -> .
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    $end            reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    IMPORT          reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    MIXIN           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 1

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multipleattributes             shift and go to state 4
    attribute                      shift and go to state 5
    declaration                    shift and go to state 10
    multiple_declaration           shift and go to state 58
    empty                          shift and go to state 15

state 11

    (206) attribute -> EXTERN .

    PRIVATE         reduce using rule 206 (attribute -> EXTERN .)
    PROTECTED       reduce using rule 206 (attribute -> EXTERN .)
    PUBLIC          reduce using rule 206 (attribute -> EXTERN .)
    STATIC          reduce using rule 206 (attribute -> EXTERN .)
    EXTERN          reduce using rule 206 (attribute -> EXTERN .)
    FINAL           reduce using rule 206 (attribute -> EXTERN .)
    AUTO            reduce using rule 206 (attribute -> EXTERN .)
    CONST           reduce using rule 206 (attribute -> EXTERN .)
    IMMUTABLE       reduce using rule 206 (attribute -> EXTERN .)
    LBRACE          reduce using rule 206 (attribute -> EXTERN .)
    ALIAS           reduce using rule 206 (attribute -> EXTERN .)
    ENUM            reduce using rule 206 (attribute -> EXTERN .)
    CLASS           reduce using rule 206 (attribute -> EXTERN .)
    THIS            reduce using rule 206 (attribute -> EXTERN .)
    TILDE           reduce using rule 206 (attribute -> EXTERN .)
    IMPORT          reduce using rule 206 (attribute -> EXTERN .)
    UNION           reduce using rule 206 (attribute -> EXTERN .)
    MIXIN           reduce using rule 206 (attribute -> EXTERN .)
    CHAR            reduce using rule 206 (attribute -> EXTERN .)
    INT             reduce using rule 206 (attribute -> EXTERN .)
    UINT            reduce using rule 206 (attribute -> EXTERN .)
    LONG            reduce using rule 206 (attribute -> EXTERN .)
    FLOAT           reduce using rule 206 (attribute -> EXTERN .)
    DOUBLE          reduce using rule 206 (attribute -> EXTERN .)
    BOOL            reduce using rule 206 (attribute -> EXTERN .)
    SHORT           reduce using rule 206 (attribute -> EXTERN .)
    USHORT          reduce using rule 206 (attribute -> EXTERN .)
    ULONG           reduce using rule 206 (attribute -> EXTERN .)
    TYPEOF          reduce using rule 206 (attribute -> EXTERN .)
    IDENTIFIER      reduce using rule 206 (attribute -> EXTERN .)


state 12

    (2) ProgramFile -> multiple_declaration .

    $end            reduce using rule 2 (ProgramFile -> multiple_declaration .)


state 13

    (0) S' -> CompilationUnit .



state 14

    (204) attribute -> PUBLIC .

    PRIVATE         reduce using rule 204 (attribute -> PUBLIC .)
    PROTECTED       reduce using rule 204 (attribute -> PUBLIC .)
    PUBLIC          reduce using rule 204 (attribute -> PUBLIC .)
    STATIC          reduce using rule 204 (attribute -> PUBLIC .)
    EXTERN          reduce using rule 204 (attribute -> PUBLIC .)
    FINAL           reduce using rule 204 (attribute -> PUBLIC .)
    AUTO            reduce using rule 204 (attribute -> PUBLIC .)
    CONST           reduce using rule 204 (attribute -> PUBLIC .)
    IMMUTABLE       reduce using rule 204 (attribute -> PUBLIC .)
    LBRACE          reduce using rule 204 (attribute -> PUBLIC .)
    ALIAS           reduce using rule 204 (attribute -> PUBLIC .)
    ENUM            reduce using rule 204 (attribute -> PUBLIC .)
    CLASS           reduce using rule 204 (attribute -> PUBLIC .)
    THIS            reduce using rule 204 (attribute -> PUBLIC .)
    TILDE           reduce using rule 204 (attribute -> PUBLIC .)
    IMPORT          reduce using rule 204 (attribute -> PUBLIC .)
    UNION           reduce using rule 204 (attribute -> PUBLIC .)
    MIXIN           reduce using rule 204 (attribute -> PUBLIC .)
    CHAR            reduce using rule 204 (attribute -> PUBLIC .)
    INT             reduce using rule 204 (attribute -> PUBLIC .)
    UINT            reduce using rule 204 (attribute -> PUBLIC .)
    LONG            reduce using rule 204 (attribute -> PUBLIC .)
    FLOAT           reduce using rule 204 (attribute -> PUBLIC .)
    DOUBLE          reduce using rule 204 (attribute -> PUBLIC .)
    BOOL            reduce using rule 204 (attribute -> PUBLIC .)
    SHORT           reduce using rule 204 (attribute -> PUBLIC .)
    USHORT          reduce using rule 204 (attribute -> PUBLIC .)
    ULONG           reduce using rule 204 (attribute -> PUBLIC .)
    TYPEOF          reduce using rule 204 (attribute -> PUBLIC .)
    IDENTIFIER      reduce using rule 204 (attribute -> PUBLIC .)
    COLON           reduce using rule 204 (attribute -> PUBLIC .)


state 15

    (4) multiple_declaration -> empty .
    (201) multipleattributes -> empty .

    RBRACE          reduce using rule 4 (multiple_declaration -> empty .)
    $end            reduce using rule 4 (multiple_declaration -> empty .)
    ALIAS           reduce using rule 201 (multipleattributes -> empty .)
    ENUM            reduce using rule 201 (multipleattributes -> empty .)
    CLASS           reduce using rule 201 (multipleattributes -> empty .)
    THIS            reduce using rule 201 (multipleattributes -> empty .)
    TILDE           reduce using rule 201 (multipleattributes -> empty .)
    IMPORT          reduce using rule 201 (multipleattributes -> empty .)
    UNION           reduce using rule 201 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 201 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 201 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 201 (multipleattributes -> empty .)
    STATIC          reduce using rule 201 (multipleattributes -> empty .)
    EXTERN          reduce using rule 201 (multipleattributes -> empty .)
    FINAL           reduce using rule 201 (multipleattributes -> empty .)
    AUTO            reduce using rule 201 (multipleattributes -> empty .)
    CONST           reduce using rule 201 (multipleattributes -> empty .)
    IMMUTABLE       reduce using rule 201 (multipleattributes -> empty .)
    MIXIN           reduce using rule 201 (multipleattributes -> empty .)
    CHAR            reduce using rule 201 (multipleattributes -> empty .)
    INT             reduce using rule 201 (multipleattributes -> empty .)
    UINT            reduce using rule 201 (multipleattributes -> empty .)
    LONG            reduce using rule 201 (multipleattributes -> empty .)
    FLOAT           reduce using rule 201 (multipleattributes -> empty .)
    DOUBLE          reduce using rule 201 (multipleattributes -> empty .)
    BOOL            reduce using rule 201 (multipleattributes -> empty .)
    SHORT           reduce using rule 201 (multipleattributes -> empty .)
    USHORT          reduce using rule 201 (multipleattributes -> empty .)
    ULONG           reduce using rule 201 (multipleattributes -> empty .)
    TYPEOF          reduce using rule 201 (multipleattributes -> empty .)
    IDENTIFIER      reduce using rule 201 (multipleattributes -> empty .)


state 16

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 17

    (209) attribute -> CONST .
    (222) typeConstructor -> CONST .

  ! reduce/reduce conflict for CONST resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for THIS resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for BOOL resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for SHORT resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for USHORT resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for INT resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for UINT resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for LONG resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for ULONG resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for CHAR resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for FLOAT resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for AUTO resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for ENUM resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for EXTERN resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for FINAL resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for STATIC resolved using rule 209 (attribute -> CONST .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 209 (attribute -> CONST .)
    PRIVATE         reduce using rule 209 (attribute -> CONST .)
    PROTECTED       reduce using rule 209 (attribute -> CONST .)
    PUBLIC          reduce using rule 209 (attribute -> CONST .)
    STATIC          reduce using rule 209 (attribute -> CONST .)
    EXTERN          reduce using rule 209 (attribute -> CONST .)
    FINAL           reduce using rule 209 (attribute -> CONST .)
    AUTO            reduce using rule 209 (attribute -> CONST .)
    CONST           reduce using rule 209 (attribute -> CONST .)
    IMMUTABLE       reduce using rule 209 (attribute -> CONST .)
    LBRACE          reduce using rule 209 (attribute -> CONST .)
    ALIAS           reduce using rule 209 (attribute -> CONST .)
    ENUM            reduce using rule 209 (attribute -> CONST .)
    CLASS           reduce using rule 209 (attribute -> CONST .)
    THIS            reduce using rule 209 (attribute -> CONST .)
    TILDE           reduce using rule 209 (attribute -> CONST .)
    IMPORT          reduce using rule 209 (attribute -> CONST .)
    UNION           reduce using rule 209 (attribute -> CONST .)
    MIXIN           reduce using rule 209 (attribute -> CONST .)
    CHAR            reduce using rule 209 (attribute -> CONST .)
    INT             reduce using rule 209 (attribute -> CONST .)
    UINT            reduce using rule 209 (attribute -> CONST .)
    LONG            reduce using rule 209 (attribute -> CONST .)
    FLOAT           reduce using rule 209 (attribute -> CONST .)
    DOUBLE          reduce using rule 209 (attribute -> CONST .)
    BOOL            reduce using rule 209 (attribute -> CONST .)
    SHORT           reduce using rule 209 (attribute -> CONST .)
    USHORT          reduce using rule 209 (attribute -> CONST .)
    ULONG           reduce using rule 209 (attribute -> CONST .)
    TYPEOF          reduce using rule 209 (attribute -> CONST .)
    IDENTIFIER      reduce using rule 209 (attribute -> CONST .)
    COLON           reduce using rule 209 (attribute -> CONST .)
    LPAREN          reduce using rule 222 (typeConstructor -> CONST .)

  ! CONST           [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! IMMUTABLE       [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! THIS            [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! BOOL            [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! SHORT           [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! USHORT          [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! INT             [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! UINT            [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! LONG            [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! ULONG           [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! CHAR            [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! FLOAT           [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! TYPEOF          [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! IDENTIFIER      [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! AUTO            [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! ENUM            [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! EXTERN          [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! FINAL           [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! STATIC          [ reduce using rule 222 (typeConstructor -> CONST .) ]
  ! DOUBLE          [ reduce using rule 222 (typeConstructor -> CONST .) ]


state 18

    (73) declaration2 -> importDeclaration .

    PRIVATE         reduce using rule 73 (declaration2 -> importDeclaration .)
    PROTECTED       reduce using rule 73 (declaration2 -> importDeclaration .)
    PUBLIC          reduce using rule 73 (declaration2 -> importDeclaration .)
    STATIC          reduce using rule 73 (declaration2 -> importDeclaration .)
    EXTERN          reduce using rule 73 (declaration2 -> importDeclaration .)
    FINAL           reduce using rule 73 (declaration2 -> importDeclaration .)
    AUTO            reduce using rule 73 (declaration2 -> importDeclaration .)
    CONST           reduce using rule 73 (declaration2 -> importDeclaration .)
    IMMUTABLE       reduce using rule 73 (declaration2 -> importDeclaration .)
    ALIAS           reduce using rule 73 (declaration2 -> importDeclaration .)
    ENUM            reduce using rule 73 (declaration2 -> importDeclaration .)
    CLASS           reduce using rule 73 (declaration2 -> importDeclaration .)
    THIS            reduce using rule 73 (declaration2 -> importDeclaration .)
    TILDE           reduce using rule 73 (declaration2 -> importDeclaration .)
    IMPORT          reduce using rule 73 (declaration2 -> importDeclaration .)
    UNION           reduce using rule 73 (declaration2 -> importDeclaration .)
    MIXIN           reduce using rule 73 (declaration2 -> importDeclaration .)
    CHAR            reduce using rule 73 (declaration2 -> importDeclaration .)
    INT             reduce using rule 73 (declaration2 -> importDeclaration .)
    UINT            reduce using rule 73 (declaration2 -> importDeclaration .)
    LONG            reduce using rule 73 (declaration2 -> importDeclaration .)
    FLOAT           reduce using rule 73 (declaration2 -> importDeclaration .)
    DOUBLE          reduce using rule 73 (declaration2 -> importDeclaration .)
    BOOL            reduce using rule 73 (declaration2 -> importDeclaration .)
    SHORT           reduce using rule 73 (declaration2 -> importDeclaration .)
    USHORT          reduce using rule 73 (declaration2 -> importDeclaration .)
    ULONG           reduce using rule 73 (declaration2 -> importDeclaration .)
    TYPEOF          reduce using rule 73 (declaration2 -> importDeclaration .)
    IDENTIFIER      reduce using rule 73 (declaration2 -> importDeclaration .)
    $end            reduce using rule 73 (declaration2 -> importDeclaration .)
    RBRACE          reduce using rule 73 (declaration2 -> importDeclaration .)
    CASE            reduce using rule 73 (declaration2 -> importDeclaration .)
    DEFAULT         reduce using rule 73 (declaration2 -> importDeclaration .)
    LBRACE          reduce using rule 73 (declaration2 -> importDeclaration .)
    IF              reduce using rule 73 (declaration2 -> importDeclaration .)
    WHILE           reduce using rule 73 (declaration2 -> importDeclaration .)
    DO              reduce using rule 73 (declaration2 -> importDeclaration .)
    FOR             reduce using rule 73 (declaration2 -> importDeclaration .)
    FOREACH         reduce using rule 73 (declaration2 -> importDeclaration .)
    FOREACH_REVERSE reduce using rule 73 (declaration2 -> importDeclaration .)
    SWITCH          reduce using rule 73 (declaration2 -> importDeclaration .)
    CONTINUE        reduce using rule 73 (declaration2 -> importDeclaration .)
    BREAK           reduce using rule 73 (declaration2 -> importDeclaration .)
    RETURN          reduce using rule 73 (declaration2 -> importDeclaration .)
    GOTO            reduce using rule 73 (declaration2 -> importDeclaration .)
    WITH            reduce using rule 73 (declaration2 -> importDeclaration .)
    UAMPERSAND      reduce using rule 73 (declaration2 -> importDeclaration .)
    EXCLAMATION     reduce using rule 73 (declaration2 -> importDeclaration .)
    UTIMES          reduce using rule 73 (declaration2 -> importDeclaration .)
    UPLUS           reduce using rule 73 (declaration2 -> importDeclaration .)
    UMINUS          reduce using rule 73 (declaration2 -> importDeclaration .)
    PLUS_PLUS       reduce using rule 73 (declaration2 -> importDeclaration .)
    MINUS_MINUS     reduce using rule 73 (declaration2 -> importDeclaration .)
    LPAREN          reduce using rule 73 (declaration2 -> importDeclaration .)
    DOT             reduce using rule 73 (declaration2 -> importDeclaration .)
    DOLLAR          reduce using rule 73 (declaration2 -> importDeclaration .)
    NULL            reduce using rule 73 (declaration2 -> importDeclaration .)
    TRUE            reduce using rule 73 (declaration2 -> importDeclaration .)
    FALSE           reduce using rule 73 (declaration2 -> importDeclaration .)
    INUMBER         reduce using rule 73 (declaration2 -> importDeclaration .)
    DNUMBER         reduce using rule 73 (declaration2 -> importDeclaration .)
    LIT_CHAR        reduce using rule 73 (declaration2 -> importDeclaration .)
    NEW             reduce using rule 73 (declaration2 -> importDeclaration .)
    DELETE          reduce using rule 73 (declaration2 -> importDeclaration .)
    CAST            reduce using rule 73 (declaration2 -> importDeclaration .)
    LBRACKET        reduce using rule 73 (declaration2 -> importDeclaration .)
    FUNCTION        reduce using rule 73 (declaration2 -> importDeclaration .)
    LIT_STR         reduce using rule 73 (declaration2 -> importDeclaration .)
    SEMICOLON       reduce using rule 73 (declaration2 -> importDeclaration .)
    ELSE            reduce using rule 73 (declaration2 -> importDeclaration .)


state 19

    (178) attributeDeclaration -> attribute . COLON

    COLON           shift and go to state 59


state 20

    (65) declaration2 -> aliasThisDeclaration .

    PRIVATE         reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    PROTECTED       reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    PUBLIC          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    STATIC          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    EXTERN          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    FINAL           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    AUTO            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    CONST           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    IMMUTABLE       reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    ALIAS           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    ENUM            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    CLASS           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    THIS            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    TILDE           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    IMPORT          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    UNION           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    MIXIN           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    CHAR            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    INT             reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    UINT            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    LONG            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    FLOAT           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    DOUBLE          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    BOOL            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    SHORT           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    USHORT          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    ULONG           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    TYPEOF          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    IDENTIFIER      reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    $end            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    RBRACE          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    CASE            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    DEFAULT         reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    LBRACE          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    IF              reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    WHILE           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    DO              reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    FOR             reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    FOREACH         reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    FOREACH_REVERSE reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    SWITCH          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    CONTINUE        reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    BREAK           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    RETURN          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    GOTO            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    WITH            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    UAMPERSAND      reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    EXCLAMATION     reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    UTIMES          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    UPLUS           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    UMINUS          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    PLUS_PLUS       reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    MINUS_MINUS     reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    LPAREN          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    DOT             reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    DOLLAR          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    NULL            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    TRUE            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    FALSE           reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    INUMBER         reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    DNUMBER         reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    LIT_CHAR        reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    NEW             reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    DELETE          reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    CAST            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    LBRACKET        reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    FUNCTION        reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    LIT_STR         reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    SEMICOLON       reduce using rule 65 (declaration2 -> aliasThisDeclaration .)
    ELSE            reduce using rule 65 (declaration2 -> aliasThisDeclaration .)


state 21

    (83) variableDeclaration -> autoDeclaration .

    PRIVATE         reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    PROTECTED       reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    PUBLIC          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    STATIC          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    EXTERN          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    FINAL           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    AUTO            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    CONST           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    IMMUTABLE       reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    ALIAS           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    ENUM            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    CLASS           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    THIS            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    TILDE           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    IMPORT          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    UNION           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    MIXIN           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    CHAR            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    INT             reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    UINT            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    LONG            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    FLOAT           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    DOUBLE          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    BOOL            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    SHORT           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    USHORT          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    ULONG           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    TYPEOF          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    IDENTIFIER      reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    $end            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    RBRACE          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    CASE            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    DEFAULT         reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    LBRACE          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    IF              reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    WHILE           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    DO              reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    FOR             reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    FOREACH         reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    FOREACH_REVERSE reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    SWITCH          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    CONTINUE        reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    BREAK           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    RETURN          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    GOTO            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    WITH            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    UAMPERSAND      reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    EXCLAMATION     reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    UTIMES          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    UPLUS           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    UMINUS          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    PLUS_PLUS       reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    MINUS_MINUS     reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    LPAREN          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    DOT             reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    DOLLAR          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    NULL            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    TRUE            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    FALSE           reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    INUMBER         reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    DNUMBER         reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    LIT_CHAR        reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    NEW             reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    DELETE          reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    CAST            reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    LBRACKET        reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    FUNCTION        reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    LIT_STR         reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    SEMICOLON       reduce using rule 83 (variableDeclaration -> autoDeclaration .)
    ELSE            reduce using rule 83 (variableDeclaration -> autoDeclaration .)


state 22

    (205) attribute -> STATIC .
    (97) storageClass -> STATIC .

    COLON           reduce using rule 205 (attribute -> STATIC .)
    AUTO            reduce using rule 97 (storageClass -> STATIC .)
    ENUM            reduce using rule 97 (storageClass -> STATIC .)
    EXTERN          reduce using rule 97 (storageClass -> STATIC .)
    FINAL           reduce using rule 97 (storageClass -> STATIC .)
    STATIC          reduce using rule 97 (storageClass -> STATIC .)
    CONST           reduce using rule 97 (storageClass -> STATIC .)
    IMMUTABLE       reduce using rule 97 (storageClass -> STATIC .)
    IDENTIFIER      reduce using rule 97 (storageClass -> STATIC .)
    CHAR            reduce using rule 97 (storageClass -> STATIC .)
    INT             reduce using rule 97 (storageClass -> STATIC .)
    UINT            reduce using rule 97 (storageClass -> STATIC .)
    LONG            reduce using rule 97 (storageClass -> STATIC .)
    FLOAT           reduce using rule 97 (storageClass -> STATIC .)
    DOUBLE          reduce using rule 97 (storageClass -> STATIC .)


state 23

    (64) declaration2 -> aliasDeclaration .

    PRIVATE         reduce using rule 64 (declaration2 -> aliasDeclaration .)
    PROTECTED       reduce using rule 64 (declaration2 -> aliasDeclaration .)
    PUBLIC          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    STATIC          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    EXTERN          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    FINAL           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    AUTO            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    CONST           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    IMMUTABLE       reduce using rule 64 (declaration2 -> aliasDeclaration .)
    ALIAS           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    ENUM            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    CLASS           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    THIS            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    TILDE           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    IMPORT          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    UNION           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    MIXIN           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    CHAR            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    INT             reduce using rule 64 (declaration2 -> aliasDeclaration .)
    UINT            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    LONG            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    FLOAT           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    DOUBLE          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    BOOL            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    SHORT           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    USHORT          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    ULONG           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    TYPEOF          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    IDENTIFIER      reduce using rule 64 (declaration2 -> aliasDeclaration .)
    $end            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    RBRACE          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    CASE            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    DEFAULT         reduce using rule 64 (declaration2 -> aliasDeclaration .)
    LBRACE          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    IF              reduce using rule 64 (declaration2 -> aliasDeclaration .)
    WHILE           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    DO              reduce using rule 64 (declaration2 -> aliasDeclaration .)
    FOR             reduce using rule 64 (declaration2 -> aliasDeclaration .)
    FOREACH         reduce using rule 64 (declaration2 -> aliasDeclaration .)
    FOREACH_REVERSE reduce using rule 64 (declaration2 -> aliasDeclaration .)
    SWITCH          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    CONTINUE        reduce using rule 64 (declaration2 -> aliasDeclaration .)
    BREAK           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    RETURN          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    GOTO            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    WITH            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    UAMPERSAND      reduce using rule 64 (declaration2 -> aliasDeclaration .)
    EXCLAMATION     reduce using rule 64 (declaration2 -> aliasDeclaration .)
    UTIMES          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    UPLUS           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    UMINUS          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    PLUS_PLUS       reduce using rule 64 (declaration2 -> aliasDeclaration .)
    MINUS_MINUS     reduce using rule 64 (declaration2 -> aliasDeclaration .)
    LPAREN          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    DOT             reduce using rule 64 (declaration2 -> aliasDeclaration .)
    DOLLAR          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    NULL            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    TRUE            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    FALSE           reduce using rule 64 (declaration2 -> aliasDeclaration .)
    INUMBER         reduce using rule 64 (declaration2 -> aliasDeclaration .)
    DNUMBER         reduce using rule 64 (declaration2 -> aliasDeclaration .)
    LIT_CHAR        reduce using rule 64 (declaration2 -> aliasDeclaration .)
    NEW             reduce using rule 64 (declaration2 -> aliasDeclaration .)
    DELETE          reduce using rule 64 (declaration2 -> aliasDeclaration .)
    CAST            reduce using rule 64 (declaration2 -> aliasDeclaration .)
    LBRACKET        reduce using rule 64 (declaration2 -> aliasDeclaration .)
    FUNCTION        reduce using rule 64 (declaration2 -> aliasDeclaration .)
    LIT_STR         reduce using rule 64 (declaration2 -> aliasDeclaration .)
    SEMICOLON       reduce using rule 64 (declaration2 -> aliasDeclaration .)
    ELSE            reduce using rule 64 (declaration2 -> aliasDeclaration .)


state 24

    (92) storageClass -> typeConstructor .
    (224) typeConstructors -> typeConstructor . multiple_typeConstructors
    (225) multiple_typeConstructors -> . typeConstructor multiple_typeConstructors
    (226) multiple_typeConstructors -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! reduce/reduce conflict for INT resolved using rule 92 (storageClass -> typeConstructor .)
  ! reduce/reduce conflict for UINT resolved using rule 92 (storageClass -> typeConstructor .)
  ! reduce/reduce conflict for LONG resolved using rule 92 (storageClass -> typeConstructor .)
  ! reduce/reduce conflict for CHAR resolved using rule 92 (storageClass -> typeConstructor .)
  ! reduce/reduce conflict for FLOAT resolved using rule 92 (storageClass -> typeConstructor .)
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 92 (storageClass -> typeConstructor .)
    AUTO            reduce using rule 92 (storageClass -> typeConstructor .)
    ENUM            reduce using rule 92 (storageClass -> typeConstructor .)
    EXTERN          reduce using rule 92 (storageClass -> typeConstructor .)
    FINAL           reduce using rule 92 (storageClass -> typeConstructor .)
    STATIC          reduce using rule 92 (storageClass -> typeConstructor .)
    IDENTIFIER      reduce using rule 92 (storageClass -> typeConstructor .)
    CHAR            reduce using rule 92 (storageClass -> typeConstructor .)
    INT             reduce using rule 92 (storageClass -> typeConstructor .)
    UINT            reduce using rule 92 (storageClass -> typeConstructor .)
    LONG            reduce using rule 92 (storageClass -> typeConstructor .)
    FLOAT           reduce using rule 92 (storageClass -> typeConstructor .)
    DOUBLE          reduce using rule 92 (storageClass -> typeConstructor .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 92 (storageClass -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 92 (storageClass -> typeConstructor .) ]
  ! INT             [ reduce using rule 397 (empty -> .) ]
  ! UINT            [ reduce using rule 397 (empty -> .) ]
  ! LONG            [ reduce using rule 397 (empty -> .) ]
  ! CHAR            [ reduce using rule 397 (empty -> .) ]
  ! FLOAT           [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    multiple_typeConstructors      shift and go to state 60
    typeConstructor                shift and go to state 61
    empty                          shift and go to state 64

state 25

    (74) declaration2 -> mixinDeclaration .

    PRIVATE         reduce using rule 74 (declaration2 -> mixinDeclaration .)
    PROTECTED       reduce using rule 74 (declaration2 -> mixinDeclaration .)
    PUBLIC          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    STATIC          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    EXTERN          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    FINAL           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    AUTO            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    CONST           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    IMMUTABLE       reduce using rule 74 (declaration2 -> mixinDeclaration .)
    ALIAS           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    ENUM            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    CLASS           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    THIS            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    TILDE           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    IMPORT          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    UNION           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    MIXIN           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    CHAR            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    INT             reduce using rule 74 (declaration2 -> mixinDeclaration .)
    UINT            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    LONG            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    FLOAT           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    DOUBLE          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    BOOL            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    SHORT           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    USHORT          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    ULONG           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    TYPEOF          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    IDENTIFIER      reduce using rule 74 (declaration2 -> mixinDeclaration .)
    $end            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    RBRACE          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    CASE            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    DEFAULT         reduce using rule 74 (declaration2 -> mixinDeclaration .)
    LBRACE          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    IF              reduce using rule 74 (declaration2 -> mixinDeclaration .)
    WHILE           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    DO              reduce using rule 74 (declaration2 -> mixinDeclaration .)
    FOR             reduce using rule 74 (declaration2 -> mixinDeclaration .)
    FOREACH         reduce using rule 74 (declaration2 -> mixinDeclaration .)
    FOREACH_REVERSE reduce using rule 74 (declaration2 -> mixinDeclaration .)
    SWITCH          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    CONTINUE        reduce using rule 74 (declaration2 -> mixinDeclaration .)
    BREAK           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    RETURN          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    GOTO            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    WITH            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    UAMPERSAND      reduce using rule 74 (declaration2 -> mixinDeclaration .)
    EXCLAMATION     reduce using rule 74 (declaration2 -> mixinDeclaration .)
    UTIMES          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    UPLUS           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    UMINUS          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    PLUS_PLUS       reduce using rule 74 (declaration2 -> mixinDeclaration .)
    MINUS_MINUS     reduce using rule 74 (declaration2 -> mixinDeclaration .)
    LPAREN          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    DOT             reduce using rule 74 (declaration2 -> mixinDeclaration .)
    DOLLAR          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    NULL            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    TRUE            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    FALSE           reduce using rule 74 (declaration2 -> mixinDeclaration .)
    INUMBER         reduce using rule 74 (declaration2 -> mixinDeclaration .)
    DNUMBER         reduce using rule 74 (declaration2 -> mixinDeclaration .)
    LIT_CHAR        reduce using rule 74 (declaration2 -> mixinDeclaration .)
    NEW             reduce using rule 74 (declaration2 -> mixinDeclaration .)
    DELETE          reduce using rule 74 (declaration2 -> mixinDeclaration .)
    CAST            reduce using rule 74 (declaration2 -> mixinDeclaration .)
    LBRACKET        reduce using rule 74 (declaration2 -> mixinDeclaration .)
    FUNCTION        reduce using rule 74 (declaration2 -> mixinDeclaration .)
    LIT_STR         reduce using rule 74 (declaration2 -> mixinDeclaration .)
    SEMICOLON       reduce using rule 74 (declaration2 -> mixinDeclaration .)
    ELSE            reduce using rule 74 (declaration2 -> mixinDeclaration .)


state 26

    (67) declaration2 -> attributeDeclaration .

    PRIVATE         reduce using rule 67 (declaration2 -> attributeDeclaration .)
    PROTECTED       reduce using rule 67 (declaration2 -> attributeDeclaration .)
    PUBLIC          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    STATIC          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    EXTERN          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    FINAL           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    AUTO            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    CONST           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    IMMUTABLE       reduce using rule 67 (declaration2 -> attributeDeclaration .)
    ALIAS           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    ENUM            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    CLASS           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    THIS            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    TILDE           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    IMPORT          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    UNION           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    MIXIN           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    CHAR            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    INT             reduce using rule 67 (declaration2 -> attributeDeclaration .)
    UINT            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    LONG            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    FLOAT           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    DOUBLE          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    BOOL            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    SHORT           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    USHORT          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    ULONG           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    TYPEOF          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    IDENTIFIER      reduce using rule 67 (declaration2 -> attributeDeclaration .)
    $end            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    RBRACE          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    CASE            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    DEFAULT         reduce using rule 67 (declaration2 -> attributeDeclaration .)
    LBRACE          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    IF              reduce using rule 67 (declaration2 -> attributeDeclaration .)
    WHILE           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    DO              reduce using rule 67 (declaration2 -> attributeDeclaration .)
    FOR             reduce using rule 67 (declaration2 -> attributeDeclaration .)
    FOREACH         reduce using rule 67 (declaration2 -> attributeDeclaration .)
    FOREACH_REVERSE reduce using rule 67 (declaration2 -> attributeDeclaration .)
    SWITCH          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    CONTINUE        reduce using rule 67 (declaration2 -> attributeDeclaration .)
    BREAK           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    RETURN          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    GOTO            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    WITH            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    UAMPERSAND      reduce using rule 67 (declaration2 -> attributeDeclaration .)
    EXCLAMATION     reduce using rule 67 (declaration2 -> attributeDeclaration .)
    UTIMES          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    UPLUS           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    UMINUS          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    PLUS_PLUS       reduce using rule 67 (declaration2 -> attributeDeclaration .)
    MINUS_MINUS     reduce using rule 67 (declaration2 -> attributeDeclaration .)
    LPAREN          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    DOT             reduce using rule 67 (declaration2 -> attributeDeclaration .)
    DOLLAR          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    NULL            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    TRUE            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    FALSE           reduce using rule 67 (declaration2 -> attributeDeclaration .)
    INUMBER         reduce using rule 67 (declaration2 -> attributeDeclaration .)
    DNUMBER         reduce using rule 67 (declaration2 -> attributeDeclaration .)
    LIT_CHAR        reduce using rule 67 (declaration2 -> attributeDeclaration .)
    NEW             reduce using rule 67 (declaration2 -> attributeDeclaration .)
    DELETE          reduce using rule 67 (declaration2 -> attributeDeclaration .)
    CAST            reduce using rule 67 (declaration2 -> attributeDeclaration .)
    LBRACKET        reduce using rule 67 (declaration2 -> attributeDeclaration .)
    FUNCTION        reduce using rule 67 (declaration2 -> attributeDeclaration .)
    LIT_STR         reduce using rule 67 (declaration2 -> attributeDeclaration .)
    SEMICOLON       reduce using rule 67 (declaration2 -> attributeDeclaration .)
    ELSE            reduce using rule 67 (declaration2 -> attributeDeclaration .)


state 27

    (62) declaration -> multipleattributes declaration2 .

    PRIVATE         reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    PROTECTED       reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    PUBLIC          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    STATIC          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    EXTERN          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    FINAL           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    AUTO            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    CONST           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    IMMUTABLE       reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    CASE            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    DEFAULT         reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    IDENTIFIER      reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    LBRACE          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    IF              reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    WHILE           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    DO              reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    FOR             reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    FOREACH         reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    FOREACH_REVERSE reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    SWITCH          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    CONTINUE        reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    BREAK           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    RETURN          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    GOTO            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    WITH            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    UAMPERSAND      reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    EXCLAMATION     reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    UTIMES          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    UPLUS           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    UMINUS          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    PLUS_PLUS       reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    MINUS_MINUS     reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    LPAREN          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    DOT             reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    DOLLAR          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    THIS            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    NULL            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    TRUE            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    FALSE           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    INUMBER         reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    DNUMBER         reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    LIT_CHAR        reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    NEW             reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    DELETE          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    CAST            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    LBRACKET        reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    FUNCTION        reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    MIXIN           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    IMPORT          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    LIT_STR         reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    ALIAS           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    ENUM            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    CLASS           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    TILDE           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    UNION           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    CHAR            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    INT             reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    UINT            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    LONG            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    FLOAT           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    DOUBLE          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    BOOL            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    SHORT           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    USHORT          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    ULONG           reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    TYPEOF          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    RBRACE          reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    SEMICOLON       reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    ELSE            reduce using rule 62 (declaration -> multipleattributes declaration2 .)
    $end            reduce using rule 62 (declaration -> multipleattributes declaration2 .)


state 28

    (70) declaration2 -> destructor .

    PRIVATE         reduce using rule 70 (declaration2 -> destructor .)
    PROTECTED       reduce using rule 70 (declaration2 -> destructor .)
    PUBLIC          reduce using rule 70 (declaration2 -> destructor .)
    STATIC          reduce using rule 70 (declaration2 -> destructor .)
    EXTERN          reduce using rule 70 (declaration2 -> destructor .)
    FINAL           reduce using rule 70 (declaration2 -> destructor .)
    AUTO            reduce using rule 70 (declaration2 -> destructor .)
    CONST           reduce using rule 70 (declaration2 -> destructor .)
    IMMUTABLE       reduce using rule 70 (declaration2 -> destructor .)
    ALIAS           reduce using rule 70 (declaration2 -> destructor .)
    ENUM            reduce using rule 70 (declaration2 -> destructor .)
    CLASS           reduce using rule 70 (declaration2 -> destructor .)
    THIS            reduce using rule 70 (declaration2 -> destructor .)
    TILDE           reduce using rule 70 (declaration2 -> destructor .)
    IMPORT          reduce using rule 70 (declaration2 -> destructor .)
    UNION           reduce using rule 70 (declaration2 -> destructor .)
    MIXIN           reduce using rule 70 (declaration2 -> destructor .)
    CHAR            reduce using rule 70 (declaration2 -> destructor .)
    INT             reduce using rule 70 (declaration2 -> destructor .)
    UINT            reduce using rule 70 (declaration2 -> destructor .)
    LONG            reduce using rule 70 (declaration2 -> destructor .)
    FLOAT           reduce using rule 70 (declaration2 -> destructor .)
    DOUBLE          reduce using rule 70 (declaration2 -> destructor .)
    BOOL            reduce using rule 70 (declaration2 -> destructor .)
    SHORT           reduce using rule 70 (declaration2 -> destructor .)
    USHORT          reduce using rule 70 (declaration2 -> destructor .)
    ULONG           reduce using rule 70 (declaration2 -> destructor .)
    TYPEOF          reduce using rule 70 (declaration2 -> destructor .)
    IDENTIFIER      reduce using rule 70 (declaration2 -> destructor .)
    $end            reduce using rule 70 (declaration2 -> destructor .)
    RBRACE          reduce using rule 70 (declaration2 -> destructor .)
    CASE            reduce using rule 70 (declaration2 -> destructor .)
    DEFAULT         reduce using rule 70 (declaration2 -> destructor .)
    LBRACE          reduce using rule 70 (declaration2 -> destructor .)
    IF              reduce using rule 70 (declaration2 -> destructor .)
    WHILE           reduce using rule 70 (declaration2 -> destructor .)
    DO              reduce using rule 70 (declaration2 -> destructor .)
    FOR             reduce using rule 70 (declaration2 -> destructor .)
    FOREACH         reduce using rule 70 (declaration2 -> destructor .)
    FOREACH_REVERSE reduce using rule 70 (declaration2 -> destructor .)
    SWITCH          reduce using rule 70 (declaration2 -> destructor .)
    CONTINUE        reduce using rule 70 (declaration2 -> destructor .)
    BREAK           reduce using rule 70 (declaration2 -> destructor .)
    RETURN          reduce using rule 70 (declaration2 -> destructor .)
    GOTO            reduce using rule 70 (declaration2 -> destructor .)
    WITH            reduce using rule 70 (declaration2 -> destructor .)
    UAMPERSAND      reduce using rule 70 (declaration2 -> destructor .)
    EXCLAMATION     reduce using rule 70 (declaration2 -> destructor .)
    UTIMES          reduce using rule 70 (declaration2 -> destructor .)
    UPLUS           reduce using rule 70 (declaration2 -> destructor .)
    UMINUS          reduce using rule 70 (declaration2 -> destructor .)
    PLUS_PLUS       reduce using rule 70 (declaration2 -> destructor .)
    MINUS_MINUS     reduce using rule 70 (declaration2 -> destructor .)
    LPAREN          reduce using rule 70 (declaration2 -> destructor .)
    DOT             reduce using rule 70 (declaration2 -> destructor .)
    DOLLAR          reduce using rule 70 (declaration2 -> destructor .)
    NULL            reduce using rule 70 (declaration2 -> destructor .)
    TRUE            reduce using rule 70 (declaration2 -> destructor .)
    FALSE           reduce using rule 70 (declaration2 -> destructor .)
    INUMBER         reduce using rule 70 (declaration2 -> destructor .)
    DNUMBER         reduce using rule 70 (declaration2 -> destructor .)
    LIT_CHAR        reduce using rule 70 (declaration2 -> destructor .)
    NEW             reduce using rule 70 (declaration2 -> destructor .)
    DELETE          reduce using rule 70 (declaration2 -> destructor .)
    CAST            reduce using rule 70 (declaration2 -> destructor .)
    LBRACKET        reduce using rule 70 (declaration2 -> destructor .)
    FUNCTION        reduce using rule 70 (declaration2 -> destructor .)
    LIT_STR         reduce using rule 70 (declaration2 -> destructor .)
    SEMICOLON       reduce using rule 70 (declaration2 -> destructor .)
    ELSE            reduce using rule 70 (declaration2 -> destructor .)


state 29

    (161) destructor -> TILDE . THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody
    (162) destructor -> TILDE . THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON

    THIS            shift and go to state 65


state 30

    (115) importDeclaration -> IMPORT . singleImport comma_singleImport COMMA importBindings SEMICOLON
    (116) importDeclaration -> IMPORT . singleImport comma_singleImport SEMICOLON
    (117) importDeclaration -> IMPORT . importBindings SEMICOLON
    (120) singleImport -> . IDENTIFIER ASSIGN identifierChain
    (121) singleImport -> . identifierChain
    (124) importBindings -> . singleImport COLON importBind importBindstr
    (127) identifierChain -> . IDENTIFIER multiple_dot_identifier

    IDENTIFIER      shift and go to state 69

    importBindings                 shift and go to state 66
    singleImport                   shift and go to state 68
    identifierChain                shift and go to state 67

state 31

    (149) functionDeclaration -> type . IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (150) functionDeclaration -> type . IDENTIFIER parameters multiple_memberFunctionAttribute functionBody

    IDENTIFIER      shift and go to state 70


state 32

    (179) classDeclaration -> CLASS . IDENTIFIER SEMICOLON
    (180) classDeclaration -> CLASS . IDENTIFIER COLON baseClassList structBody
    (181) classDeclaration -> CLASS . IDENTIFIER structBody

    IDENTIFIER      shift and go to state 71


state 33

    (196) multiplestorageClass -> empty .
    (192) typeConstructors_quetsion -> empty .

  ! reduce/reduce conflict for INT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 192 (typeConstructors_quetsion -> empty .)
    DOUBLE          reduce using rule 196 (multiplestorageClass -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)

  ! CHAR            [ reduce using rule 196 (multiplestorageClass -> empty .) ]
  ! INT             [ reduce using rule 196 (multiplestorageClass -> empty .) ]
  ! UINT            [ reduce using rule 196 (multiplestorageClass -> empty .) ]
  ! LONG            [ reduce using rule 196 (multiplestorageClass -> empty .) ]
  ! FLOAT           [ reduce using rule 196 (multiplestorageClass -> empty .) ]


state 34

    (191) typeConstructors_quetsion -> typeConstructors .

    THIS            reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    BOOL            reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    SHORT           reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    USHORT          reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    INT             reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    UINT            reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    LONG            reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    ULONG           reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    CHAR            reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    FLOAT           reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    TYPEOF          reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    CONST           reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    IMMUTABLE       reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)
    IDENTIFIER      reduce using rule 191 (typeConstructors_quetsion -> typeConstructors .)


state 35

    (207) attribute -> FINAL .
    (96) storageClass -> FINAL .

    COLON           reduce using rule 207 (attribute -> FINAL .)
    AUTO            reduce using rule 96 (storageClass -> FINAL .)
    ENUM            reduce using rule 96 (storageClass -> FINAL .)
    EXTERN          reduce using rule 96 (storageClass -> FINAL .)
    FINAL           reduce using rule 96 (storageClass -> FINAL .)
    STATIC          reduce using rule 96 (storageClass -> FINAL .)
    CONST           reduce using rule 96 (storageClass -> FINAL .)
    IMMUTABLE       reduce using rule 96 (storageClass -> FINAL .)
    IDENTIFIER      reduce using rule 96 (storageClass -> FINAL .)
    CHAR            reduce using rule 96 (storageClass -> FINAL .)
    INT             reduce using rule 96 (storageClass -> FINAL .)
    UINT            reduce using rule 96 (storageClass -> FINAL .)
    LONG            reduce using rule 96 (storageClass -> FINAL .)
    FLOAT           reduce using rule 96 (storageClass -> FINAL .)
    DOUBLE          reduce using rule 96 (storageClass -> FINAL .)


state 36

    (173) anonymousEnumDeclaration -> ENUM . COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE
    (174) enumDeclaration -> ENUM . IDENTIFIER COMMA_TYPE_Question SEMICOLON
    (175) enumDeclaration -> ENUM . IDENTIFIER COMMA_TYPE_Question enumBody
    (94) storageClass -> ENUM .
    (169) COMMA_TYPE_Question -> . empty
    (170) COMMA_TYPE_Question -> . COLON type
    (397) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 74
    AUTO            reduce using rule 94 (storageClass -> ENUM .)
    ENUM            reduce using rule 94 (storageClass -> ENUM .)
    EXTERN          reduce using rule 94 (storageClass -> ENUM .)
    FINAL           reduce using rule 94 (storageClass -> ENUM .)
    STATIC          reduce using rule 94 (storageClass -> ENUM .)
    CONST           reduce using rule 94 (storageClass -> ENUM .)
    IMMUTABLE       reduce using rule 94 (storageClass -> ENUM .)
    CHAR            reduce using rule 94 (storageClass -> ENUM .)
    INT             reduce using rule 94 (storageClass -> ENUM .)
    UINT            reduce using rule 94 (storageClass -> ENUM .)
    LONG            reduce using rule 94 (storageClass -> ENUM .)
    FLOAT           reduce using rule 94 (storageClass -> ENUM .)
    DOUBLE          reduce using rule 94 (storageClass -> ENUM .)
    COLON           shift and go to state 72
    LBRACE          reduce using rule 397 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 94 (storageClass -> ENUM .) ]

    COMMA_TYPE_Question            shift and go to state 73
    empty                          shift and go to state 75

state 37

    (71) declaration2 -> enumDeclaration .

    PRIVATE         reduce using rule 71 (declaration2 -> enumDeclaration .)
    PROTECTED       reduce using rule 71 (declaration2 -> enumDeclaration .)
    PUBLIC          reduce using rule 71 (declaration2 -> enumDeclaration .)
    STATIC          reduce using rule 71 (declaration2 -> enumDeclaration .)
    EXTERN          reduce using rule 71 (declaration2 -> enumDeclaration .)
    FINAL           reduce using rule 71 (declaration2 -> enumDeclaration .)
    AUTO            reduce using rule 71 (declaration2 -> enumDeclaration .)
    CONST           reduce using rule 71 (declaration2 -> enumDeclaration .)
    IMMUTABLE       reduce using rule 71 (declaration2 -> enumDeclaration .)
    ALIAS           reduce using rule 71 (declaration2 -> enumDeclaration .)
    ENUM            reduce using rule 71 (declaration2 -> enumDeclaration .)
    CLASS           reduce using rule 71 (declaration2 -> enumDeclaration .)
    THIS            reduce using rule 71 (declaration2 -> enumDeclaration .)
    TILDE           reduce using rule 71 (declaration2 -> enumDeclaration .)
    IMPORT          reduce using rule 71 (declaration2 -> enumDeclaration .)
    UNION           reduce using rule 71 (declaration2 -> enumDeclaration .)
    MIXIN           reduce using rule 71 (declaration2 -> enumDeclaration .)
    CHAR            reduce using rule 71 (declaration2 -> enumDeclaration .)
    INT             reduce using rule 71 (declaration2 -> enumDeclaration .)
    UINT            reduce using rule 71 (declaration2 -> enumDeclaration .)
    LONG            reduce using rule 71 (declaration2 -> enumDeclaration .)
    FLOAT           reduce using rule 71 (declaration2 -> enumDeclaration .)
    DOUBLE          reduce using rule 71 (declaration2 -> enumDeclaration .)
    BOOL            reduce using rule 71 (declaration2 -> enumDeclaration .)
    SHORT           reduce using rule 71 (declaration2 -> enumDeclaration .)
    USHORT          reduce using rule 71 (declaration2 -> enumDeclaration .)
    ULONG           reduce using rule 71 (declaration2 -> enumDeclaration .)
    TYPEOF          reduce using rule 71 (declaration2 -> enumDeclaration .)
    IDENTIFIER      reduce using rule 71 (declaration2 -> enumDeclaration .)
    $end            reduce using rule 71 (declaration2 -> enumDeclaration .)
    RBRACE          reduce using rule 71 (declaration2 -> enumDeclaration .)
    CASE            reduce using rule 71 (declaration2 -> enumDeclaration .)
    DEFAULT         reduce using rule 71 (declaration2 -> enumDeclaration .)
    LBRACE          reduce using rule 71 (declaration2 -> enumDeclaration .)
    IF              reduce using rule 71 (declaration2 -> enumDeclaration .)
    WHILE           reduce using rule 71 (declaration2 -> enumDeclaration .)
    DO              reduce using rule 71 (declaration2 -> enumDeclaration .)
    FOR             reduce using rule 71 (declaration2 -> enumDeclaration .)
    FOREACH         reduce using rule 71 (declaration2 -> enumDeclaration .)
    FOREACH_REVERSE reduce using rule 71 (declaration2 -> enumDeclaration .)
    SWITCH          reduce using rule 71 (declaration2 -> enumDeclaration .)
    CONTINUE        reduce using rule 71 (declaration2 -> enumDeclaration .)
    BREAK           reduce using rule 71 (declaration2 -> enumDeclaration .)
    RETURN          reduce using rule 71 (declaration2 -> enumDeclaration .)
    GOTO            reduce using rule 71 (declaration2 -> enumDeclaration .)
    WITH            reduce using rule 71 (declaration2 -> enumDeclaration .)
    UAMPERSAND      reduce using rule 71 (declaration2 -> enumDeclaration .)
    EXCLAMATION     reduce using rule 71 (declaration2 -> enumDeclaration .)
    UTIMES          reduce using rule 71 (declaration2 -> enumDeclaration .)
    UPLUS           reduce using rule 71 (declaration2 -> enumDeclaration .)
    UMINUS          reduce using rule 71 (declaration2 -> enumDeclaration .)
    PLUS_PLUS       reduce using rule 71 (declaration2 -> enumDeclaration .)
    MINUS_MINUS     reduce using rule 71 (declaration2 -> enumDeclaration .)
    LPAREN          reduce using rule 71 (declaration2 -> enumDeclaration .)
    DOT             reduce using rule 71 (declaration2 -> enumDeclaration .)
    DOLLAR          reduce using rule 71 (declaration2 -> enumDeclaration .)
    NULL            reduce using rule 71 (declaration2 -> enumDeclaration .)
    TRUE            reduce using rule 71 (declaration2 -> enumDeclaration .)
    FALSE           reduce using rule 71 (declaration2 -> enumDeclaration .)
    INUMBER         reduce using rule 71 (declaration2 -> enumDeclaration .)
    DNUMBER         reduce using rule 71 (declaration2 -> enumDeclaration .)
    LIT_CHAR        reduce using rule 71 (declaration2 -> enumDeclaration .)
    NEW             reduce using rule 71 (declaration2 -> enumDeclaration .)
    DELETE          reduce using rule 71 (declaration2 -> enumDeclaration .)
    CAST            reduce using rule 71 (declaration2 -> enumDeclaration .)
    LBRACKET        reduce using rule 71 (declaration2 -> enumDeclaration .)
    FUNCTION        reduce using rule 71 (declaration2 -> enumDeclaration .)
    LIT_STR         reduce using rule 71 (declaration2 -> enumDeclaration .)
    SEMICOLON       reduce using rule 71 (declaration2 -> enumDeclaration .)
    ELSE            reduce using rule 71 (declaration2 -> enumDeclaration .)


state 38

    (72) declaration2 -> functionDeclaration .

    PRIVATE         reduce using rule 72 (declaration2 -> functionDeclaration .)
    PROTECTED       reduce using rule 72 (declaration2 -> functionDeclaration .)
    PUBLIC          reduce using rule 72 (declaration2 -> functionDeclaration .)
    STATIC          reduce using rule 72 (declaration2 -> functionDeclaration .)
    EXTERN          reduce using rule 72 (declaration2 -> functionDeclaration .)
    FINAL           reduce using rule 72 (declaration2 -> functionDeclaration .)
    AUTO            reduce using rule 72 (declaration2 -> functionDeclaration .)
    CONST           reduce using rule 72 (declaration2 -> functionDeclaration .)
    IMMUTABLE       reduce using rule 72 (declaration2 -> functionDeclaration .)
    ALIAS           reduce using rule 72 (declaration2 -> functionDeclaration .)
    ENUM            reduce using rule 72 (declaration2 -> functionDeclaration .)
    CLASS           reduce using rule 72 (declaration2 -> functionDeclaration .)
    THIS            reduce using rule 72 (declaration2 -> functionDeclaration .)
    TILDE           reduce using rule 72 (declaration2 -> functionDeclaration .)
    IMPORT          reduce using rule 72 (declaration2 -> functionDeclaration .)
    UNION           reduce using rule 72 (declaration2 -> functionDeclaration .)
    MIXIN           reduce using rule 72 (declaration2 -> functionDeclaration .)
    CHAR            reduce using rule 72 (declaration2 -> functionDeclaration .)
    INT             reduce using rule 72 (declaration2 -> functionDeclaration .)
    UINT            reduce using rule 72 (declaration2 -> functionDeclaration .)
    LONG            reduce using rule 72 (declaration2 -> functionDeclaration .)
    FLOAT           reduce using rule 72 (declaration2 -> functionDeclaration .)
    DOUBLE          reduce using rule 72 (declaration2 -> functionDeclaration .)
    BOOL            reduce using rule 72 (declaration2 -> functionDeclaration .)
    SHORT           reduce using rule 72 (declaration2 -> functionDeclaration .)
    USHORT          reduce using rule 72 (declaration2 -> functionDeclaration .)
    ULONG           reduce using rule 72 (declaration2 -> functionDeclaration .)
    TYPEOF          reduce using rule 72 (declaration2 -> functionDeclaration .)
    IDENTIFIER      reduce using rule 72 (declaration2 -> functionDeclaration .)
    $end            reduce using rule 72 (declaration2 -> functionDeclaration .)
    RBRACE          reduce using rule 72 (declaration2 -> functionDeclaration .)
    CASE            reduce using rule 72 (declaration2 -> functionDeclaration .)
    DEFAULT         reduce using rule 72 (declaration2 -> functionDeclaration .)
    LBRACE          reduce using rule 72 (declaration2 -> functionDeclaration .)
    IF              reduce using rule 72 (declaration2 -> functionDeclaration .)
    WHILE           reduce using rule 72 (declaration2 -> functionDeclaration .)
    DO              reduce using rule 72 (declaration2 -> functionDeclaration .)
    FOR             reduce using rule 72 (declaration2 -> functionDeclaration .)
    FOREACH         reduce using rule 72 (declaration2 -> functionDeclaration .)
    FOREACH_REVERSE reduce using rule 72 (declaration2 -> functionDeclaration .)
    SWITCH          reduce using rule 72 (declaration2 -> functionDeclaration .)
    CONTINUE        reduce using rule 72 (declaration2 -> functionDeclaration .)
    BREAK           reduce using rule 72 (declaration2 -> functionDeclaration .)
    RETURN          reduce using rule 72 (declaration2 -> functionDeclaration .)
    GOTO            reduce using rule 72 (declaration2 -> functionDeclaration .)
    WITH            reduce using rule 72 (declaration2 -> functionDeclaration .)
    UAMPERSAND      reduce using rule 72 (declaration2 -> functionDeclaration .)
    EXCLAMATION     reduce using rule 72 (declaration2 -> functionDeclaration .)
    UTIMES          reduce using rule 72 (declaration2 -> functionDeclaration .)
    UPLUS           reduce using rule 72 (declaration2 -> functionDeclaration .)
    UMINUS          reduce using rule 72 (declaration2 -> functionDeclaration .)
    PLUS_PLUS       reduce using rule 72 (declaration2 -> functionDeclaration .)
    MINUS_MINUS     reduce using rule 72 (declaration2 -> functionDeclaration .)
    LPAREN          reduce using rule 72 (declaration2 -> functionDeclaration .)
    DOT             reduce using rule 72 (declaration2 -> functionDeclaration .)
    DOLLAR          reduce using rule 72 (declaration2 -> functionDeclaration .)
    NULL            reduce using rule 72 (declaration2 -> functionDeclaration .)
    TRUE            reduce using rule 72 (declaration2 -> functionDeclaration .)
    FALSE           reduce using rule 72 (declaration2 -> functionDeclaration .)
    INUMBER         reduce using rule 72 (declaration2 -> functionDeclaration .)
    DNUMBER         reduce using rule 72 (declaration2 -> functionDeclaration .)
    LIT_CHAR        reduce using rule 72 (declaration2 -> functionDeclaration .)
    NEW             reduce using rule 72 (declaration2 -> functionDeclaration .)
    DELETE          reduce using rule 72 (declaration2 -> functionDeclaration .)
    CAST            reduce using rule 72 (declaration2 -> functionDeclaration .)
    LBRACKET        reduce using rule 72 (declaration2 -> functionDeclaration .)
    FUNCTION        reduce using rule 72 (declaration2 -> functionDeclaration .)
    LIT_STR         reduce using rule 72 (declaration2 -> functionDeclaration .)
    SEMICOLON       reduce using rule 72 (declaration2 -> functionDeclaration .)
    ELSE            reduce using rule 72 (declaration2 -> functionDeclaration .)


state 39

    (111) unionDeclaration -> UNION . IDENTIFIER structBody
    (112) unionDeclaration -> UNION . IDENTIFIER SEMICOLON
    (113) unionDeclaration -> UNION . structBody
    (61) structBody -> . LBRACE multiple_declaration RBRACE

    IDENTIFIER      shift and go to state 78
    LBRACE          shift and go to state 76

    structBody                     shift and go to state 77

state 40

    (81) variableDeclaration -> multiplestorageClass . BasicTypeX declarator CommaDeclarator SEMICOLON
    (82) variableDeclaration -> multiplestorageClass . BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON
    (84) BasicTypeX -> . CHAR
    (85) BasicTypeX -> . INT
    (86) BasicTypeX -> . UINT
    (87) BasicTypeX -> . LONG
    (88) BasicTypeX -> . FLOAT
    (89) BasicTypeX -> . DOUBLE

    CHAR            shift and go to state 83
    INT             shift and go to state 80
    UINT            shift and go to state 85
    LONG            shift and go to state 82
    FLOAT           shift and go to state 81
    DOUBLE          shift and go to state 79

    BasicTypeX                     shift and go to state 84

state 41

    (75) declaration2 -> unionDeclaration .

    PRIVATE         reduce using rule 75 (declaration2 -> unionDeclaration .)
    PROTECTED       reduce using rule 75 (declaration2 -> unionDeclaration .)
    PUBLIC          reduce using rule 75 (declaration2 -> unionDeclaration .)
    STATIC          reduce using rule 75 (declaration2 -> unionDeclaration .)
    EXTERN          reduce using rule 75 (declaration2 -> unionDeclaration .)
    FINAL           reduce using rule 75 (declaration2 -> unionDeclaration .)
    AUTO            reduce using rule 75 (declaration2 -> unionDeclaration .)
    CONST           reduce using rule 75 (declaration2 -> unionDeclaration .)
    IMMUTABLE       reduce using rule 75 (declaration2 -> unionDeclaration .)
    ALIAS           reduce using rule 75 (declaration2 -> unionDeclaration .)
    ENUM            reduce using rule 75 (declaration2 -> unionDeclaration .)
    CLASS           reduce using rule 75 (declaration2 -> unionDeclaration .)
    THIS            reduce using rule 75 (declaration2 -> unionDeclaration .)
    TILDE           reduce using rule 75 (declaration2 -> unionDeclaration .)
    IMPORT          reduce using rule 75 (declaration2 -> unionDeclaration .)
    UNION           reduce using rule 75 (declaration2 -> unionDeclaration .)
    MIXIN           reduce using rule 75 (declaration2 -> unionDeclaration .)
    CHAR            reduce using rule 75 (declaration2 -> unionDeclaration .)
    INT             reduce using rule 75 (declaration2 -> unionDeclaration .)
    UINT            reduce using rule 75 (declaration2 -> unionDeclaration .)
    LONG            reduce using rule 75 (declaration2 -> unionDeclaration .)
    FLOAT           reduce using rule 75 (declaration2 -> unionDeclaration .)
    DOUBLE          reduce using rule 75 (declaration2 -> unionDeclaration .)
    BOOL            reduce using rule 75 (declaration2 -> unionDeclaration .)
    SHORT           reduce using rule 75 (declaration2 -> unionDeclaration .)
    USHORT          reduce using rule 75 (declaration2 -> unionDeclaration .)
    ULONG           reduce using rule 75 (declaration2 -> unionDeclaration .)
    TYPEOF          reduce using rule 75 (declaration2 -> unionDeclaration .)
    IDENTIFIER      reduce using rule 75 (declaration2 -> unionDeclaration .)
    $end            reduce using rule 75 (declaration2 -> unionDeclaration .)
    RBRACE          reduce using rule 75 (declaration2 -> unionDeclaration .)
    CASE            reduce using rule 75 (declaration2 -> unionDeclaration .)
    DEFAULT         reduce using rule 75 (declaration2 -> unionDeclaration .)
    LBRACE          reduce using rule 75 (declaration2 -> unionDeclaration .)
    IF              reduce using rule 75 (declaration2 -> unionDeclaration .)
    WHILE           reduce using rule 75 (declaration2 -> unionDeclaration .)
    DO              reduce using rule 75 (declaration2 -> unionDeclaration .)
    FOR             reduce using rule 75 (declaration2 -> unionDeclaration .)
    FOREACH         reduce using rule 75 (declaration2 -> unionDeclaration .)
    FOREACH_REVERSE reduce using rule 75 (declaration2 -> unionDeclaration .)
    SWITCH          reduce using rule 75 (declaration2 -> unionDeclaration .)
    CONTINUE        reduce using rule 75 (declaration2 -> unionDeclaration .)
    BREAK           reduce using rule 75 (declaration2 -> unionDeclaration .)
    RETURN          reduce using rule 75 (declaration2 -> unionDeclaration .)
    GOTO            reduce using rule 75 (declaration2 -> unionDeclaration .)
    WITH            reduce using rule 75 (declaration2 -> unionDeclaration .)
    UAMPERSAND      reduce using rule 75 (declaration2 -> unionDeclaration .)
    EXCLAMATION     reduce using rule 75 (declaration2 -> unionDeclaration .)
    UTIMES          reduce using rule 75 (declaration2 -> unionDeclaration .)
    UPLUS           reduce using rule 75 (declaration2 -> unionDeclaration .)
    UMINUS          reduce using rule 75 (declaration2 -> unionDeclaration .)
    PLUS_PLUS       reduce using rule 75 (declaration2 -> unionDeclaration .)
    MINUS_MINUS     reduce using rule 75 (declaration2 -> unionDeclaration .)
    LPAREN          reduce using rule 75 (declaration2 -> unionDeclaration .)
    DOT             reduce using rule 75 (declaration2 -> unionDeclaration .)
    DOLLAR          reduce using rule 75 (declaration2 -> unionDeclaration .)
    NULL            reduce using rule 75 (declaration2 -> unionDeclaration .)
    TRUE            reduce using rule 75 (declaration2 -> unionDeclaration .)
    FALSE           reduce using rule 75 (declaration2 -> unionDeclaration .)
    INUMBER         reduce using rule 75 (declaration2 -> unionDeclaration .)
    DNUMBER         reduce using rule 75 (declaration2 -> unionDeclaration .)
    LIT_CHAR        reduce using rule 75 (declaration2 -> unionDeclaration .)
    NEW             reduce using rule 75 (declaration2 -> unionDeclaration .)
    DELETE          reduce using rule 75 (declaration2 -> unionDeclaration .)
    CAST            reduce using rule 75 (declaration2 -> unionDeclaration .)
    LBRACKET        reduce using rule 75 (declaration2 -> unionDeclaration .)
    FUNCTION        reduce using rule 75 (declaration2 -> unionDeclaration .)
    LIT_STR         reduce using rule 75 (declaration2 -> unionDeclaration .)
    SEMICOLON       reduce using rule 75 (declaration2 -> unionDeclaration .)
    ELSE            reduce using rule 75 (declaration2 -> unionDeclaration .)


state 42

    (322) type -> typeConstructors_quetsion . type2 typeSuffixStar
    (215) type2 -> . builtinType
    (216) type2 -> . typeIdentifierPart
    (217) type2 -> . THIS DOT typeIdentifierPart
    (218) type2 -> . typeofExpression typeIdentifierPart_question
    (219) type2 -> . typeConstructor LPAREN type RPAREN
    (323) builtinType -> . BOOL
    (324) builtinType -> . SHORT
    (325) builtinType -> . USHORT
    (326) builtinType -> . INT
    (327) builtinType -> . UINT
    (328) builtinType -> . LONG
    (329) builtinType -> . ULONG
    (330) builtinType -> . CHAR
    (331) builtinType -> . FLOAT
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (237) typeofExpression -> . TYPEOF LPAREN expression RPAREN
    (238) typeofExpression -> . TYPEOF LPAREN RETURN RPAREN
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    THIS            shift and go to state 97
    BOOL            shift and go to state 101
    SHORT           shift and go to state 86
    USHORT          shift and go to state 98
    INT             shift and go to state 100
    UINT            shift and go to state 96
    LONG            shift and go to state 91
    ULONG           shift and go to state 90
    CHAR            shift and go to state 87
    FLOAT           shift and go to state 99
    TYPEOF          shift and go to state 102
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 93

    builtinType                    shift and go to state 94
    typeIdentifierPart             shift and go to state 95
    typeofExpression               shift and go to state 88
    identifierOrTemplateInstance   shift and go to state 92
    typeConstructor                shift and go to state 103
    type2                          shift and go to state 89

state 43

    (182) aliasDeclaration -> ALIAS . aliasInitializer comma_aliasInitializer SEMICOLON
    (183) aliasDeclaration -> ALIAS . multiplestorageClass type declaratorIdentifierList SEMICOLON
    (184) aliasDeclaration -> ALIAS . multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON
    (199) aliasThisDeclaration -> ALIAS . IDENTIFIER THIS SEMICOLON
    (197) aliasInitializer -> . IDENTIFIER ASSIGN multiplestorageClass type
    (198) aliasInitializer -> . IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON
    (195) multiplestorageClass -> . storageClass multiplestorageClass
    (196) multiplestorageClass -> . empty
    (92) storageClass -> . typeConstructor
    (93) storageClass -> . AUTO
    (94) storageClass -> . ENUM
    (95) storageClass -> . EXTERN
    (96) storageClass -> . FINAL
    (97) storageClass -> . STATIC
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      shift and go to state 108
    AUTO            shift and go to state 107
    ENUM            shift and go to state 111
    EXTERN          shift and go to state 105
    FINAL           shift and go to state 106
    STATIC          shift and go to state 104
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    aliasInitializer               shift and go to state 112
    multiplestorageClass           shift and go to state 110
    storageClass                   shift and go to state 113
    typeConstructor                shift and go to state 114
    empty                          shift and go to state 109

state 44

    (68) declaration2 -> classDeclaration .

    PRIVATE         reduce using rule 68 (declaration2 -> classDeclaration .)
    PROTECTED       reduce using rule 68 (declaration2 -> classDeclaration .)
    PUBLIC          reduce using rule 68 (declaration2 -> classDeclaration .)
    STATIC          reduce using rule 68 (declaration2 -> classDeclaration .)
    EXTERN          reduce using rule 68 (declaration2 -> classDeclaration .)
    FINAL           reduce using rule 68 (declaration2 -> classDeclaration .)
    AUTO            reduce using rule 68 (declaration2 -> classDeclaration .)
    CONST           reduce using rule 68 (declaration2 -> classDeclaration .)
    IMMUTABLE       reduce using rule 68 (declaration2 -> classDeclaration .)
    ALIAS           reduce using rule 68 (declaration2 -> classDeclaration .)
    ENUM            reduce using rule 68 (declaration2 -> classDeclaration .)
    CLASS           reduce using rule 68 (declaration2 -> classDeclaration .)
    THIS            reduce using rule 68 (declaration2 -> classDeclaration .)
    TILDE           reduce using rule 68 (declaration2 -> classDeclaration .)
    IMPORT          reduce using rule 68 (declaration2 -> classDeclaration .)
    UNION           reduce using rule 68 (declaration2 -> classDeclaration .)
    MIXIN           reduce using rule 68 (declaration2 -> classDeclaration .)
    CHAR            reduce using rule 68 (declaration2 -> classDeclaration .)
    INT             reduce using rule 68 (declaration2 -> classDeclaration .)
    UINT            reduce using rule 68 (declaration2 -> classDeclaration .)
    LONG            reduce using rule 68 (declaration2 -> classDeclaration .)
    FLOAT           reduce using rule 68 (declaration2 -> classDeclaration .)
    DOUBLE          reduce using rule 68 (declaration2 -> classDeclaration .)
    BOOL            reduce using rule 68 (declaration2 -> classDeclaration .)
    SHORT           reduce using rule 68 (declaration2 -> classDeclaration .)
    USHORT          reduce using rule 68 (declaration2 -> classDeclaration .)
    ULONG           reduce using rule 68 (declaration2 -> classDeclaration .)
    TYPEOF          reduce using rule 68 (declaration2 -> classDeclaration .)
    IDENTIFIER      reduce using rule 68 (declaration2 -> classDeclaration .)
    $end            reduce using rule 68 (declaration2 -> classDeclaration .)
    RBRACE          reduce using rule 68 (declaration2 -> classDeclaration .)
    CASE            reduce using rule 68 (declaration2 -> classDeclaration .)
    DEFAULT         reduce using rule 68 (declaration2 -> classDeclaration .)
    LBRACE          reduce using rule 68 (declaration2 -> classDeclaration .)
    IF              reduce using rule 68 (declaration2 -> classDeclaration .)
    WHILE           reduce using rule 68 (declaration2 -> classDeclaration .)
    DO              reduce using rule 68 (declaration2 -> classDeclaration .)
    FOR             reduce using rule 68 (declaration2 -> classDeclaration .)
    FOREACH         reduce using rule 68 (declaration2 -> classDeclaration .)
    FOREACH_REVERSE reduce using rule 68 (declaration2 -> classDeclaration .)
    SWITCH          reduce using rule 68 (declaration2 -> classDeclaration .)
    CONTINUE        reduce using rule 68 (declaration2 -> classDeclaration .)
    BREAK           reduce using rule 68 (declaration2 -> classDeclaration .)
    RETURN          reduce using rule 68 (declaration2 -> classDeclaration .)
    GOTO            reduce using rule 68 (declaration2 -> classDeclaration .)
    WITH            reduce using rule 68 (declaration2 -> classDeclaration .)
    UAMPERSAND      reduce using rule 68 (declaration2 -> classDeclaration .)
    EXCLAMATION     reduce using rule 68 (declaration2 -> classDeclaration .)
    UTIMES          reduce using rule 68 (declaration2 -> classDeclaration .)
    UPLUS           reduce using rule 68 (declaration2 -> classDeclaration .)
    UMINUS          reduce using rule 68 (declaration2 -> classDeclaration .)
    PLUS_PLUS       reduce using rule 68 (declaration2 -> classDeclaration .)
    MINUS_MINUS     reduce using rule 68 (declaration2 -> classDeclaration .)
    LPAREN          reduce using rule 68 (declaration2 -> classDeclaration .)
    DOT             reduce using rule 68 (declaration2 -> classDeclaration .)
    DOLLAR          reduce using rule 68 (declaration2 -> classDeclaration .)
    NULL            reduce using rule 68 (declaration2 -> classDeclaration .)
    TRUE            reduce using rule 68 (declaration2 -> classDeclaration .)
    FALSE           reduce using rule 68 (declaration2 -> classDeclaration .)
    INUMBER         reduce using rule 68 (declaration2 -> classDeclaration .)
    DNUMBER         reduce using rule 68 (declaration2 -> classDeclaration .)
    LIT_CHAR        reduce using rule 68 (declaration2 -> classDeclaration .)
    NEW             reduce using rule 68 (declaration2 -> classDeclaration .)
    DELETE          reduce using rule 68 (declaration2 -> classDeclaration .)
    CAST            reduce using rule 68 (declaration2 -> classDeclaration .)
    LBRACKET        reduce using rule 68 (declaration2 -> classDeclaration .)
    FUNCTION        reduce using rule 68 (declaration2 -> classDeclaration .)
    LIT_STR         reduce using rule 68 (declaration2 -> classDeclaration .)
    SEMICOLON       reduce using rule 68 (declaration2 -> classDeclaration .)
    ELSE            reduce using rule 68 (declaration2 -> classDeclaration .)


state 45

    (114) mixinDeclaration -> mixinExpression . SEMICOLON

    SEMICOLON       shift and go to state 115


state 46

    (210) attribute -> IMMUTABLE .
    (223) typeConstructor -> IMMUTABLE .

  ! reduce/reduce conflict for CONST resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for THIS resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for BOOL resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for SHORT resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for USHORT resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for INT resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for UINT resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for LONG resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for ULONG resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for CHAR resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for AUTO resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for ENUM resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for EXTERN resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for FINAL resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for STATIC resolved using rule 210 (attribute -> IMMUTABLE .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 210 (attribute -> IMMUTABLE .)
    PRIVATE         reduce using rule 210 (attribute -> IMMUTABLE .)
    PROTECTED       reduce using rule 210 (attribute -> IMMUTABLE .)
    PUBLIC          reduce using rule 210 (attribute -> IMMUTABLE .)
    STATIC          reduce using rule 210 (attribute -> IMMUTABLE .)
    EXTERN          reduce using rule 210 (attribute -> IMMUTABLE .)
    FINAL           reduce using rule 210 (attribute -> IMMUTABLE .)
    AUTO            reduce using rule 210 (attribute -> IMMUTABLE .)
    CONST           reduce using rule 210 (attribute -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 210 (attribute -> IMMUTABLE .)
    LBRACE          reduce using rule 210 (attribute -> IMMUTABLE .)
    ALIAS           reduce using rule 210 (attribute -> IMMUTABLE .)
    ENUM            reduce using rule 210 (attribute -> IMMUTABLE .)
    CLASS           reduce using rule 210 (attribute -> IMMUTABLE .)
    THIS            reduce using rule 210 (attribute -> IMMUTABLE .)
    TILDE           reduce using rule 210 (attribute -> IMMUTABLE .)
    IMPORT          reduce using rule 210 (attribute -> IMMUTABLE .)
    UNION           reduce using rule 210 (attribute -> IMMUTABLE .)
    MIXIN           reduce using rule 210 (attribute -> IMMUTABLE .)
    CHAR            reduce using rule 210 (attribute -> IMMUTABLE .)
    INT             reduce using rule 210 (attribute -> IMMUTABLE .)
    UINT            reduce using rule 210 (attribute -> IMMUTABLE .)
    LONG            reduce using rule 210 (attribute -> IMMUTABLE .)
    FLOAT           reduce using rule 210 (attribute -> IMMUTABLE .)
    DOUBLE          reduce using rule 210 (attribute -> IMMUTABLE .)
    BOOL            reduce using rule 210 (attribute -> IMMUTABLE .)
    SHORT           reduce using rule 210 (attribute -> IMMUTABLE .)
    USHORT          reduce using rule 210 (attribute -> IMMUTABLE .)
    ULONG           reduce using rule 210 (attribute -> IMMUTABLE .)
    TYPEOF          reduce using rule 210 (attribute -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 210 (attribute -> IMMUTABLE .)
    COLON           reduce using rule 210 (attribute -> IMMUTABLE .)
    LPAREN          reduce using rule 223 (typeConstructor -> IMMUTABLE .)

  ! CONST           [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! IMMUTABLE       [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! THIS            [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! BOOL            [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! SHORT           [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! USHORT          [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! INT             [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! UINT            [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! LONG            [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! ULONG           [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! CHAR            [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! FLOAT           [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! TYPEOF          [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! IDENTIFIER      [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! AUTO            [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! ENUM            [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! EXTERN          [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! FINAL           [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! STATIC          [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]
  ! DOUBLE          [ reduce using rule 223 (typeConstructor -> IMMUTABLE .) ]


state 47

    (208) attribute -> AUTO .
    (93) storageClass -> AUTO .

    COLON           reduce using rule 208 (attribute -> AUTO .)
    AUTO            reduce using rule 93 (storageClass -> AUTO .)
    ENUM            reduce using rule 93 (storageClass -> AUTO .)
    EXTERN          reduce using rule 93 (storageClass -> AUTO .)
    FINAL           reduce using rule 93 (storageClass -> AUTO .)
    STATIC          reduce using rule 93 (storageClass -> AUTO .)
    CONST           reduce using rule 93 (storageClass -> AUTO .)
    IMMUTABLE       reduce using rule 93 (storageClass -> AUTO .)
    IDENTIFIER      reduce using rule 93 (storageClass -> AUTO .)
    CHAR            reduce using rule 93 (storageClass -> AUTO .)
    INT             reduce using rule 93 (storageClass -> AUTO .)
    UINT            reduce using rule 93 (storageClass -> AUTO .)
    LONG            reduce using rule 93 (storageClass -> AUTO .)
    FLOAT           reduce using rule 93 (storageClass -> AUTO .)
    DOUBLE          reduce using rule 93 (storageClass -> AUTO .)


state 48

    (151) constructor -> THIS . parameters multiple_memberFunctionAttribute functionBody
    (152) constructor -> THIS . parameters multiple_memberFunctionAttribute SEMICOLON
    (153) constructor -> THIS . parameters multiple_memberFunctionAttribute constraint functionBody
    (154) constructor -> THIS . parameters multiple_memberFunctionAttribute constraint SEMICOLON
    (132) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (134) parameters -> . LPAREN ELLIPSIS RPAREN
    (135) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 117

    parameters                     shift and go to state 116

state 49

    (147) functionDeclaration -> storageClass . multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (148) functionDeclaration -> storageClass . multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (195) multiplestorageClass -> storageClass . multiplestorageClass
    (77) autoDeclaration -> storageClass . multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON
    (195) multiplestorageClass -> . storageClass multiplestorageClass
    (196) multiplestorageClass -> . empty
    (92) storageClass -> . typeConstructor
    (93) storageClass -> . AUTO
    (94) storageClass -> . ENUM
    (95) storageClass -> . EXTERN
    (96) storageClass -> . FINAL
    (97) storageClass -> . STATIC
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

    AUTO            shift and go to state 107
    ENUM            shift and go to state 111
    EXTERN          shift and go to state 105
    FINAL           shift and go to state 106
    STATIC          shift and go to state 104
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

    typeConstructor                shift and go to state 114
    multiplestorageClass           shift and go to state 118
    storageClass                   shift and go to state 113
    empty                          shift and go to state 109

state 50

    (348) mixinExpression -> MIXIN . LPAREN assignExpression RPAREN

    LPAREN          shift and go to state 119


state 51

    (69) declaration2 -> constructor .

    PRIVATE         reduce using rule 69 (declaration2 -> constructor .)
    PROTECTED       reduce using rule 69 (declaration2 -> constructor .)
    PUBLIC          reduce using rule 69 (declaration2 -> constructor .)
    STATIC          reduce using rule 69 (declaration2 -> constructor .)
    EXTERN          reduce using rule 69 (declaration2 -> constructor .)
    FINAL           reduce using rule 69 (declaration2 -> constructor .)
    AUTO            reduce using rule 69 (declaration2 -> constructor .)
    CONST           reduce using rule 69 (declaration2 -> constructor .)
    IMMUTABLE       reduce using rule 69 (declaration2 -> constructor .)
    ALIAS           reduce using rule 69 (declaration2 -> constructor .)
    ENUM            reduce using rule 69 (declaration2 -> constructor .)
    CLASS           reduce using rule 69 (declaration2 -> constructor .)
    THIS            reduce using rule 69 (declaration2 -> constructor .)
    TILDE           reduce using rule 69 (declaration2 -> constructor .)
    IMPORT          reduce using rule 69 (declaration2 -> constructor .)
    UNION           reduce using rule 69 (declaration2 -> constructor .)
    MIXIN           reduce using rule 69 (declaration2 -> constructor .)
    CHAR            reduce using rule 69 (declaration2 -> constructor .)
    INT             reduce using rule 69 (declaration2 -> constructor .)
    UINT            reduce using rule 69 (declaration2 -> constructor .)
    LONG            reduce using rule 69 (declaration2 -> constructor .)
    FLOAT           reduce using rule 69 (declaration2 -> constructor .)
    DOUBLE          reduce using rule 69 (declaration2 -> constructor .)
    BOOL            reduce using rule 69 (declaration2 -> constructor .)
    SHORT           reduce using rule 69 (declaration2 -> constructor .)
    USHORT          reduce using rule 69 (declaration2 -> constructor .)
    ULONG           reduce using rule 69 (declaration2 -> constructor .)
    TYPEOF          reduce using rule 69 (declaration2 -> constructor .)
    IDENTIFIER      reduce using rule 69 (declaration2 -> constructor .)
    $end            reduce using rule 69 (declaration2 -> constructor .)
    RBRACE          reduce using rule 69 (declaration2 -> constructor .)
    CASE            reduce using rule 69 (declaration2 -> constructor .)
    DEFAULT         reduce using rule 69 (declaration2 -> constructor .)
    LBRACE          reduce using rule 69 (declaration2 -> constructor .)
    IF              reduce using rule 69 (declaration2 -> constructor .)
    WHILE           reduce using rule 69 (declaration2 -> constructor .)
    DO              reduce using rule 69 (declaration2 -> constructor .)
    FOR             reduce using rule 69 (declaration2 -> constructor .)
    FOREACH         reduce using rule 69 (declaration2 -> constructor .)
    FOREACH_REVERSE reduce using rule 69 (declaration2 -> constructor .)
    SWITCH          reduce using rule 69 (declaration2 -> constructor .)
    CONTINUE        reduce using rule 69 (declaration2 -> constructor .)
    BREAK           reduce using rule 69 (declaration2 -> constructor .)
    RETURN          reduce using rule 69 (declaration2 -> constructor .)
    GOTO            reduce using rule 69 (declaration2 -> constructor .)
    WITH            reduce using rule 69 (declaration2 -> constructor .)
    UAMPERSAND      reduce using rule 69 (declaration2 -> constructor .)
    EXCLAMATION     reduce using rule 69 (declaration2 -> constructor .)
    UTIMES          reduce using rule 69 (declaration2 -> constructor .)
    UPLUS           reduce using rule 69 (declaration2 -> constructor .)
    UMINUS          reduce using rule 69 (declaration2 -> constructor .)
    PLUS_PLUS       reduce using rule 69 (declaration2 -> constructor .)
    MINUS_MINUS     reduce using rule 69 (declaration2 -> constructor .)
    LPAREN          reduce using rule 69 (declaration2 -> constructor .)
    DOT             reduce using rule 69 (declaration2 -> constructor .)
    DOLLAR          reduce using rule 69 (declaration2 -> constructor .)
    NULL            reduce using rule 69 (declaration2 -> constructor .)
    TRUE            reduce using rule 69 (declaration2 -> constructor .)
    FALSE           reduce using rule 69 (declaration2 -> constructor .)
    INUMBER         reduce using rule 69 (declaration2 -> constructor .)
    DNUMBER         reduce using rule 69 (declaration2 -> constructor .)
    LIT_CHAR        reduce using rule 69 (declaration2 -> constructor .)
    NEW             reduce using rule 69 (declaration2 -> constructor .)
    DELETE          reduce using rule 69 (declaration2 -> constructor .)
    CAST            reduce using rule 69 (declaration2 -> constructor .)
    LBRACKET        reduce using rule 69 (declaration2 -> constructor .)
    FUNCTION        reduce using rule 69 (declaration2 -> constructor .)
    LIT_STR         reduce using rule 69 (declaration2 -> constructor .)
    SEMICOLON       reduce using rule 69 (declaration2 -> constructor .)
    ELSE            reduce using rule 69 (declaration2 -> constructor .)


state 52

    (66) declaration2 -> anonymousEnumDeclaration .

    PRIVATE         reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    PROTECTED       reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    PUBLIC          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    STATIC          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    EXTERN          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    FINAL           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    AUTO            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    CONST           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    IMMUTABLE       reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    ALIAS           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    ENUM            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    CLASS           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    THIS            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    TILDE           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    IMPORT          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    UNION           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    MIXIN           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    CHAR            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    INT             reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    UINT            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    LONG            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    FLOAT           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    DOUBLE          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    BOOL            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    SHORT           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    USHORT          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    ULONG           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    TYPEOF          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    IDENTIFIER      reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    $end            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    RBRACE          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    CASE            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    DEFAULT         reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    LBRACE          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    IF              reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    WHILE           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    DO              reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    FOR             reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    FOREACH         reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    FOREACH_REVERSE reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    SWITCH          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    CONTINUE        reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    BREAK           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    RETURN          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    GOTO            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    WITH            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    UAMPERSAND      reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    EXCLAMATION     reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    UTIMES          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    UPLUS           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    UMINUS          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    PLUS_PLUS       reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    MINUS_MINUS     reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    LPAREN          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    DOT             reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    DOLLAR          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    NULL            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    TRUE            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    FALSE           reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    INUMBER         reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    DNUMBER         reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    LIT_CHAR        reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    NEW             reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    DELETE          reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    CAST            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    LBRACKET        reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    FUNCTION        reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    LIT_STR         reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    SEMICOLON       reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)
    ELSE            reduce using rule 66 (declaration2 -> anonymousEnumDeclaration .)


state 53

    (206) attribute -> EXTERN .
    (95) storageClass -> EXTERN .

    COLON           reduce using rule 206 (attribute -> EXTERN .)
    AUTO            reduce using rule 95 (storageClass -> EXTERN .)
    ENUM            reduce using rule 95 (storageClass -> EXTERN .)
    EXTERN          reduce using rule 95 (storageClass -> EXTERN .)
    FINAL           reduce using rule 95 (storageClass -> EXTERN .)
    STATIC          reduce using rule 95 (storageClass -> EXTERN .)
    CONST           reduce using rule 95 (storageClass -> EXTERN .)
    IMMUTABLE       reduce using rule 95 (storageClass -> EXTERN .)
    IDENTIFIER      reduce using rule 95 (storageClass -> EXTERN .)
    CHAR            reduce using rule 95 (storageClass -> EXTERN .)
    INT             reduce using rule 95 (storageClass -> EXTERN .)
    UINT            reduce using rule 95 (storageClass -> EXTERN .)
    LONG            reduce using rule 95 (storageClass -> EXTERN .)
    FLOAT           reduce using rule 95 (storageClass -> EXTERN .)
    DOUBLE          reduce using rule 95 (storageClass -> EXTERN .)


state 54

    (76) declaration2 -> variableDeclaration .

    PRIVATE         reduce using rule 76 (declaration2 -> variableDeclaration .)
    PROTECTED       reduce using rule 76 (declaration2 -> variableDeclaration .)
    PUBLIC          reduce using rule 76 (declaration2 -> variableDeclaration .)
    STATIC          reduce using rule 76 (declaration2 -> variableDeclaration .)
    EXTERN          reduce using rule 76 (declaration2 -> variableDeclaration .)
    FINAL           reduce using rule 76 (declaration2 -> variableDeclaration .)
    AUTO            reduce using rule 76 (declaration2 -> variableDeclaration .)
    CONST           reduce using rule 76 (declaration2 -> variableDeclaration .)
    IMMUTABLE       reduce using rule 76 (declaration2 -> variableDeclaration .)
    ALIAS           reduce using rule 76 (declaration2 -> variableDeclaration .)
    ENUM            reduce using rule 76 (declaration2 -> variableDeclaration .)
    CLASS           reduce using rule 76 (declaration2 -> variableDeclaration .)
    THIS            reduce using rule 76 (declaration2 -> variableDeclaration .)
    TILDE           reduce using rule 76 (declaration2 -> variableDeclaration .)
    IMPORT          reduce using rule 76 (declaration2 -> variableDeclaration .)
    UNION           reduce using rule 76 (declaration2 -> variableDeclaration .)
    MIXIN           reduce using rule 76 (declaration2 -> variableDeclaration .)
    CHAR            reduce using rule 76 (declaration2 -> variableDeclaration .)
    INT             reduce using rule 76 (declaration2 -> variableDeclaration .)
    UINT            reduce using rule 76 (declaration2 -> variableDeclaration .)
    LONG            reduce using rule 76 (declaration2 -> variableDeclaration .)
    FLOAT           reduce using rule 76 (declaration2 -> variableDeclaration .)
    DOUBLE          reduce using rule 76 (declaration2 -> variableDeclaration .)
    BOOL            reduce using rule 76 (declaration2 -> variableDeclaration .)
    SHORT           reduce using rule 76 (declaration2 -> variableDeclaration .)
    USHORT          reduce using rule 76 (declaration2 -> variableDeclaration .)
    ULONG           reduce using rule 76 (declaration2 -> variableDeclaration .)
    TYPEOF          reduce using rule 76 (declaration2 -> variableDeclaration .)
    IDENTIFIER      reduce using rule 76 (declaration2 -> variableDeclaration .)
    $end            reduce using rule 76 (declaration2 -> variableDeclaration .)
    RBRACE          reduce using rule 76 (declaration2 -> variableDeclaration .)
    CASE            reduce using rule 76 (declaration2 -> variableDeclaration .)
    DEFAULT         reduce using rule 76 (declaration2 -> variableDeclaration .)
    LBRACE          reduce using rule 76 (declaration2 -> variableDeclaration .)
    IF              reduce using rule 76 (declaration2 -> variableDeclaration .)
    WHILE           reduce using rule 76 (declaration2 -> variableDeclaration .)
    DO              reduce using rule 76 (declaration2 -> variableDeclaration .)
    FOR             reduce using rule 76 (declaration2 -> variableDeclaration .)
    FOREACH         reduce using rule 76 (declaration2 -> variableDeclaration .)
    FOREACH_REVERSE reduce using rule 76 (declaration2 -> variableDeclaration .)
    SWITCH          reduce using rule 76 (declaration2 -> variableDeclaration .)
    CONTINUE        reduce using rule 76 (declaration2 -> variableDeclaration .)
    BREAK           reduce using rule 76 (declaration2 -> variableDeclaration .)
    RETURN          reduce using rule 76 (declaration2 -> variableDeclaration .)
    GOTO            reduce using rule 76 (declaration2 -> variableDeclaration .)
    WITH            reduce using rule 76 (declaration2 -> variableDeclaration .)
    UAMPERSAND      reduce using rule 76 (declaration2 -> variableDeclaration .)
    EXCLAMATION     reduce using rule 76 (declaration2 -> variableDeclaration .)
    UTIMES          reduce using rule 76 (declaration2 -> variableDeclaration .)
    UPLUS           reduce using rule 76 (declaration2 -> variableDeclaration .)
    UMINUS          reduce using rule 76 (declaration2 -> variableDeclaration .)
    PLUS_PLUS       reduce using rule 76 (declaration2 -> variableDeclaration .)
    MINUS_MINUS     reduce using rule 76 (declaration2 -> variableDeclaration .)
    LPAREN          reduce using rule 76 (declaration2 -> variableDeclaration .)
    DOT             reduce using rule 76 (declaration2 -> variableDeclaration .)
    DOLLAR          reduce using rule 76 (declaration2 -> variableDeclaration .)
    NULL            reduce using rule 76 (declaration2 -> variableDeclaration .)
    TRUE            reduce using rule 76 (declaration2 -> variableDeclaration .)
    FALSE           reduce using rule 76 (declaration2 -> variableDeclaration .)
    INUMBER         reduce using rule 76 (declaration2 -> variableDeclaration .)
    DNUMBER         reduce using rule 76 (declaration2 -> variableDeclaration .)
    LIT_CHAR        reduce using rule 76 (declaration2 -> variableDeclaration .)
    NEW             reduce using rule 76 (declaration2 -> variableDeclaration .)
    DELETE          reduce using rule 76 (declaration2 -> variableDeclaration .)
    CAST            reduce using rule 76 (declaration2 -> variableDeclaration .)
    LBRACKET        reduce using rule 76 (declaration2 -> variableDeclaration .)
    FUNCTION        reduce using rule 76 (declaration2 -> variableDeclaration .)
    LIT_STR         reduce using rule 76 (declaration2 -> variableDeclaration .)
    SEMICOLON       reduce using rule 76 (declaration2 -> variableDeclaration .)
    ELSE            reduce using rule 76 (declaration2 -> variableDeclaration .)


state 55

    (63) declaration -> attribute multipleattributes . LBRACE multiple_declaration RBRACE
    (200) multipleattributes -> attribute multipleattributes .

    LBRACE          shift and go to state 120
    ALIAS           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    ENUM            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    CLASS           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    THIS            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    TILDE           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    IMPORT          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    UNION           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    PRIVATE         reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    PROTECTED       reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    PUBLIC          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    STATIC          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    EXTERN          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    FINAL           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    AUTO            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    CONST           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    IMMUTABLE       reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    MIXIN           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    CHAR            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    INT             reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    UINT            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    LONG            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    FLOAT           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    DOUBLE          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    BOOL            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    SHORT           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    USHORT          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    ULONG           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    TYPEOF          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    IDENTIFIER      reduce using rule 200 (multipleattributes -> attribute multipleattributes .)


state 56

    (200) multipleattributes -> attribute . multipleattributes
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 1
    LBRACE          reduce using rule 397 (empty -> .)
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    IMPORT          reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    MIXIN           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    attribute                      shift and go to state 56
    multipleattributes             shift and go to state 121
    empty                          shift and go to state 57

state 57

    (201) multipleattributes -> empty .

    LBRACE          reduce using rule 201 (multipleattributes -> empty .)
    ALIAS           reduce using rule 201 (multipleattributes -> empty .)
    ENUM            reduce using rule 201 (multipleattributes -> empty .)
    CLASS           reduce using rule 201 (multipleattributes -> empty .)
    THIS            reduce using rule 201 (multipleattributes -> empty .)
    TILDE           reduce using rule 201 (multipleattributes -> empty .)
    IMPORT          reduce using rule 201 (multipleattributes -> empty .)
    UNION           reduce using rule 201 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 201 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 201 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 201 (multipleattributes -> empty .)
    STATIC          reduce using rule 201 (multipleattributes -> empty .)
    EXTERN          reduce using rule 201 (multipleattributes -> empty .)
    FINAL           reduce using rule 201 (multipleattributes -> empty .)
    AUTO            reduce using rule 201 (multipleattributes -> empty .)
    CONST           reduce using rule 201 (multipleattributes -> empty .)
    IMMUTABLE       reduce using rule 201 (multipleattributes -> empty .)
    MIXIN           reduce using rule 201 (multipleattributes -> empty .)
    CHAR            reduce using rule 201 (multipleattributes -> empty .)
    INT             reduce using rule 201 (multipleattributes -> empty .)
    UINT            reduce using rule 201 (multipleattributes -> empty .)
    LONG            reduce using rule 201 (multipleattributes -> empty .)
    FLOAT           reduce using rule 201 (multipleattributes -> empty .)
    DOUBLE          reduce using rule 201 (multipleattributes -> empty .)
    BOOL            reduce using rule 201 (multipleattributes -> empty .)
    SHORT           reduce using rule 201 (multipleattributes -> empty .)
    USHORT          reduce using rule 201 (multipleattributes -> empty .)
    ULONG           reduce using rule 201 (multipleattributes -> empty .)
    TYPEOF          reduce using rule 201 (multipleattributes -> empty .)
    IDENTIFIER      reduce using rule 201 (multipleattributes -> empty .)


state 58

    (3) multiple_declaration -> declaration multiple_declaration .

    RBRACE          reduce using rule 3 (multiple_declaration -> declaration multiple_declaration .)
    $end            reduce using rule 3 (multiple_declaration -> declaration multiple_declaration .)


state 59

    (178) attributeDeclaration -> attribute COLON .

    PRIVATE         reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    PROTECTED       reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    PUBLIC          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    STATIC          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    EXTERN          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    FINAL           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    AUTO            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    CONST           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    IMMUTABLE       reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    ALIAS           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    ENUM            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    CLASS           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    THIS            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    TILDE           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    IMPORT          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    UNION           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    MIXIN           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    CHAR            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    INT             reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    UINT            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    LONG            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    FLOAT           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    DOUBLE          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    BOOL            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    SHORT           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    USHORT          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    ULONG           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    TYPEOF          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    IDENTIFIER      reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    $end            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    RBRACE          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    CASE            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    DEFAULT         reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    LBRACE          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    IF              reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    WHILE           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    DO              reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    FOR             reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    FOREACH         reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    FOREACH_REVERSE reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    SWITCH          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    CONTINUE        reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    BREAK           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    RETURN          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    GOTO            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    WITH            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    UAMPERSAND      reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    EXCLAMATION     reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    UTIMES          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    UPLUS           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    UMINUS          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    PLUS_PLUS       reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    MINUS_MINUS     reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    LPAREN          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    DOT             reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    DOLLAR          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    NULL            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    TRUE            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    FALSE           reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    INUMBER         reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    DNUMBER         reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    LIT_CHAR        reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    NEW             reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    DELETE          reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    CAST            reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    LBRACKET        reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    FUNCTION        reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    LIT_STR         reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    SEMICOLON       reduce using rule 178 (attributeDeclaration -> attribute COLON .)
    ELSE            reduce using rule 178 (attributeDeclaration -> attribute COLON .)


state 60

    (224) typeConstructors -> typeConstructor multiple_typeConstructors .

    THIS            reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    BOOL            reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    SHORT           reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    USHORT          reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    INT             reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    UINT            reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    LONG            reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    ULONG           reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    CHAR            reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    FLOAT           reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    TYPEOF          reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    CONST           reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    IMMUTABLE       reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)
    IDENTIFIER      reduce using rule 224 (typeConstructors -> typeConstructor multiple_typeConstructors .)


state 61

    (225) multiple_typeConstructors -> typeConstructor . multiple_typeConstructors
    (225) multiple_typeConstructors -> . typeConstructor multiple_typeConstructors
    (226) multiple_typeConstructors -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multiple_typeConstructors      shift and go to state 122
    typeConstructor                shift and go to state 61
    empty                          shift and go to state 64

state 62

    (222) typeConstructor -> CONST .

    LPAREN          reduce using rule 222 (typeConstructor -> CONST .)
    CONST           reduce using rule 222 (typeConstructor -> CONST .)
    IMMUTABLE       reduce using rule 222 (typeConstructor -> CONST .)
    THIS            reduce using rule 222 (typeConstructor -> CONST .)
    BOOL            reduce using rule 222 (typeConstructor -> CONST .)
    SHORT           reduce using rule 222 (typeConstructor -> CONST .)
    USHORT          reduce using rule 222 (typeConstructor -> CONST .)
    INT             reduce using rule 222 (typeConstructor -> CONST .)
    UINT            reduce using rule 222 (typeConstructor -> CONST .)
    LONG            reduce using rule 222 (typeConstructor -> CONST .)
    ULONG           reduce using rule 222 (typeConstructor -> CONST .)
    CHAR            reduce using rule 222 (typeConstructor -> CONST .)
    FLOAT           reduce using rule 222 (typeConstructor -> CONST .)
    TYPEOF          reduce using rule 222 (typeConstructor -> CONST .)
    IDENTIFIER      reduce using rule 222 (typeConstructor -> CONST .)
    FINAL           reduce using rule 222 (typeConstructor -> CONST .)
    AUTO            reduce using rule 222 (typeConstructor -> CONST .)
    RETURN          reduce using rule 222 (typeConstructor -> CONST .)
    ENUM            reduce using rule 222 (typeConstructor -> CONST .)
    EXTERN          reduce using rule 222 (typeConstructor -> CONST .)
    STATIC          reduce using rule 222 (typeConstructor -> CONST .)
    DOUBLE          reduce using rule 222 (typeConstructor -> CONST .)


state 63

    (223) typeConstructor -> IMMUTABLE .

    LPAREN          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    CONST           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    THIS            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    BOOL            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    SHORT           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    USHORT          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    INT             reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    UINT            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    LONG            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    ULONG           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    CHAR            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    FLOAT           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    TYPEOF          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    FINAL           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    AUTO            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    RETURN          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    ENUM            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    EXTERN          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    STATIC          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    DOUBLE          reduce using rule 223 (typeConstructor -> IMMUTABLE .)


state 64

    (226) multiple_typeConstructors -> empty .

    THIS            reduce using rule 226 (multiple_typeConstructors -> empty .)
    BOOL            reduce using rule 226 (multiple_typeConstructors -> empty .)
    SHORT           reduce using rule 226 (multiple_typeConstructors -> empty .)
    USHORT          reduce using rule 226 (multiple_typeConstructors -> empty .)
    INT             reduce using rule 226 (multiple_typeConstructors -> empty .)
    UINT            reduce using rule 226 (multiple_typeConstructors -> empty .)
    LONG            reduce using rule 226 (multiple_typeConstructors -> empty .)
    ULONG           reduce using rule 226 (multiple_typeConstructors -> empty .)
    CHAR            reduce using rule 226 (multiple_typeConstructors -> empty .)
    FLOAT           reduce using rule 226 (multiple_typeConstructors -> empty .)
    TYPEOF          reduce using rule 226 (multiple_typeConstructors -> empty .)
    CONST           reduce using rule 226 (multiple_typeConstructors -> empty .)
    IMMUTABLE       reduce using rule 226 (multiple_typeConstructors -> empty .)
    IDENTIFIER      reduce using rule 226 (multiple_typeConstructors -> empty .)


state 65

    (161) destructor -> TILDE THIS . LPAREN RPAREN multiple_memberFunctionAttribute functionBody
    (162) destructor -> TILDE THIS . LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON

    LPAREN          shift and go to state 123


state 66

    (117) importDeclaration -> IMPORT importBindings . SEMICOLON

    SEMICOLON       shift and go to state 124


state 67

    (121) singleImport -> identifierChain .

    COLON           reduce using rule 121 (singleImport -> identifierChain .)
    COMMA           reduce using rule 121 (singleImport -> identifierChain .)
    SEMICOLON       reduce using rule 121 (singleImport -> identifierChain .)


state 68

    (115) importDeclaration -> IMPORT singleImport . comma_singleImport COMMA importBindings SEMICOLON
    (116) importDeclaration -> IMPORT singleImport . comma_singleImport SEMICOLON
    (124) importBindings -> singleImport . COLON importBind importBindstr
    (118) comma_singleImport -> . COMMA singleImport comma_singleImport
    (119) comma_singleImport -> . empty
    (397) empty -> .

    COLON           shift and go to state 125
    COMMA           reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)

  ! COMMA           [ shift and go to state 126 ]

    comma_singleImport             shift and go to state 127
    empty                          shift and go to state 128

state 69

    (120) singleImport -> IDENTIFIER . ASSIGN identifierChain
    (127) identifierChain -> IDENTIFIER . multiple_dot_identifier
    (128) multiple_dot_identifier -> . DOT IDENTIFIER multiple_dot_identifier
    (129) multiple_dot_identifier -> . empty
    (397) empty -> .

    ASSIGN          shift and go to state 131
    DOT             shift and go to state 130
    COLON           reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)

    multiple_dot_identifier        shift and go to state 129
    empty                          shift and go to state 132

state 70

    (149) functionDeclaration -> type IDENTIFIER . parameters multiple_memberFunctionAttribute SEMICOLON
    (150) functionDeclaration -> type IDENTIFIER . parameters multiple_memberFunctionAttribute functionBody
    (132) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (134) parameters -> . LPAREN ELLIPSIS RPAREN
    (135) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 117

    parameters                     shift and go to state 133

state 71

    (179) classDeclaration -> CLASS IDENTIFIER . SEMICOLON
    (180) classDeclaration -> CLASS IDENTIFIER . COLON baseClassList structBody
    (181) classDeclaration -> CLASS IDENTIFIER . structBody
    (61) structBody -> . LBRACE multiple_declaration RBRACE

    SEMICOLON       shift and go to state 134
    COLON           shift and go to state 135
    LBRACE          shift and go to state 76

    structBody                     shift and go to state 136

state 72

    (170) COMMA_TYPE_Question -> COLON . type
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    type                           shift and go to state 138
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34

state 73

    (173) anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question . LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE

    LBRACE          shift and go to state 140


state 74

    (174) enumDeclaration -> ENUM IDENTIFIER . COMMA_TYPE_Question SEMICOLON
    (175) enumDeclaration -> ENUM IDENTIFIER . COMMA_TYPE_Question enumBody
    (169) COMMA_TYPE_Question -> . empty
    (170) COMMA_TYPE_Question -> . COLON type
    (397) empty -> .

    COLON           shift and go to state 72
    SEMICOLON       reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)

    COMMA_TYPE_Question            shift and go to state 141
    empty                          shift and go to state 75

state 75

    (169) COMMA_TYPE_Question -> empty .

    LBRACE          reduce using rule 169 (COMMA_TYPE_Question -> empty .)
    SEMICOLON       reduce using rule 169 (COMMA_TYPE_Question -> empty .)


state 76

    (61) structBody -> LBRACE . multiple_declaration RBRACE
    (3) multiple_declaration -> . declaration multiple_declaration
    (4) multiple_declaration -> . empty
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (397) empty -> .
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 397 (empty -> .)
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    IMPORT          reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    MIXIN           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 1

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multipleattributes             shift and go to state 4
    attribute                      shift and go to state 5
    declaration                    shift and go to state 10
    multiple_declaration           shift and go to state 142
    empty                          shift and go to state 15

state 77

    (113) unionDeclaration -> UNION structBody .

    PRIVATE         reduce using rule 113 (unionDeclaration -> UNION structBody .)
    PROTECTED       reduce using rule 113 (unionDeclaration -> UNION structBody .)
    PUBLIC          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    STATIC          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    EXTERN          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    FINAL           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    AUTO            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    CONST           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    IMMUTABLE       reduce using rule 113 (unionDeclaration -> UNION structBody .)
    ALIAS           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    ENUM            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    CLASS           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    THIS            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    TILDE           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    IMPORT          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    UNION           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    MIXIN           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    CHAR            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    INT             reduce using rule 113 (unionDeclaration -> UNION structBody .)
    UINT            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    LONG            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    FLOAT           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    DOUBLE          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    BOOL            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    SHORT           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    USHORT          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    ULONG           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    TYPEOF          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    IDENTIFIER      reduce using rule 113 (unionDeclaration -> UNION structBody .)
    $end            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    RBRACE          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    CASE            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    DEFAULT         reduce using rule 113 (unionDeclaration -> UNION structBody .)
    LBRACE          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    IF              reduce using rule 113 (unionDeclaration -> UNION structBody .)
    WHILE           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    DO              reduce using rule 113 (unionDeclaration -> UNION structBody .)
    FOR             reduce using rule 113 (unionDeclaration -> UNION structBody .)
    FOREACH         reduce using rule 113 (unionDeclaration -> UNION structBody .)
    FOREACH_REVERSE reduce using rule 113 (unionDeclaration -> UNION structBody .)
    SWITCH          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    CONTINUE        reduce using rule 113 (unionDeclaration -> UNION structBody .)
    BREAK           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    RETURN          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    GOTO            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    WITH            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    UAMPERSAND      reduce using rule 113 (unionDeclaration -> UNION structBody .)
    EXCLAMATION     reduce using rule 113 (unionDeclaration -> UNION structBody .)
    UTIMES          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    UPLUS           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    UMINUS          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    PLUS_PLUS       reduce using rule 113 (unionDeclaration -> UNION structBody .)
    MINUS_MINUS     reduce using rule 113 (unionDeclaration -> UNION structBody .)
    LPAREN          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    DOT             reduce using rule 113 (unionDeclaration -> UNION structBody .)
    DOLLAR          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    NULL            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    TRUE            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    FALSE           reduce using rule 113 (unionDeclaration -> UNION structBody .)
    INUMBER         reduce using rule 113 (unionDeclaration -> UNION structBody .)
    DNUMBER         reduce using rule 113 (unionDeclaration -> UNION structBody .)
    LIT_CHAR        reduce using rule 113 (unionDeclaration -> UNION structBody .)
    NEW             reduce using rule 113 (unionDeclaration -> UNION structBody .)
    DELETE          reduce using rule 113 (unionDeclaration -> UNION structBody .)
    CAST            reduce using rule 113 (unionDeclaration -> UNION structBody .)
    LBRACKET        reduce using rule 113 (unionDeclaration -> UNION structBody .)
    FUNCTION        reduce using rule 113 (unionDeclaration -> UNION structBody .)
    LIT_STR         reduce using rule 113 (unionDeclaration -> UNION structBody .)
    SEMICOLON       reduce using rule 113 (unionDeclaration -> UNION structBody .)
    ELSE            reduce using rule 113 (unionDeclaration -> UNION structBody .)


state 78

    (111) unionDeclaration -> UNION IDENTIFIER . structBody
    (112) unionDeclaration -> UNION IDENTIFIER . SEMICOLON
    (61) structBody -> . LBRACE multiple_declaration RBRACE

    SEMICOLON       shift and go to state 143
    LBRACE          shift and go to state 76

    structBody                     shift and go to state 144

state 79

    (89) BasicTypeX -> DOUBLE .

    IDENTIFIER      reduce using rule 89 (BasicTypeX -> DOUBLE .)


state 80

    (85) BasicTypeX -> INT .

    IDENTIFIER      reduce using rule 85 (BasicTypeX -> INT .)


state 81

    (88) BasicTypeX -> FLOAT .

    IDENTIFIER      reduce using rule 88 (BasicTypeX -> FLOAT .)


state 82

    (87) BasicTypeX -> LONG .

    IDENTIFIER      reduce using rule 87 (BasicTypeX -> LONG .)


state 83

    (84) BasicTypeX -> CHAR .

    IDENTIFIER      reduce using rule 84 (BasicTypeX -> CHAR .)


state 84

    (81) variableDeclaration -> multiplestorageClass BasicTypeX . declarator CommaDeclarator SEMICOLON
    (82) variableDeclaration -> multiplestorageClass BasicTypeX . IDENTIFIER ASSIGN functionBody SEMICOLON
    (98) declarator -> . IDENTIFIER
    (99) declarator -> . IDENTIFIER ASSIGN initializer

    IDENTIFIER      shift and go to state 146

    declarator                     shift and go to state 145

state 85

    (86) BasicTypeX -> UINT .

    IDENTIFIER      reduce using rule 86 (BasicTypeX -> UINT .)


state 86

    (324) builtinType -> SHORT .

    COMMA           reduce using rule 324 (builtinType -> SHORT .)
    LBRACE          reduce using rule 324 (builtinType -> SHORT .)
    TIMES           reduce using rule 324 (builtinType -> SHORT .)
    LBRACKET        reduce using rule 324 (builtinType -> SHORT .)
    DELEGATE        reduce using rule 324 (builtinType -> SHORT .)
    FUNCTION        reduce using rule 324 (builtinType -> SHORT .)
    IDENTIFIER      reduce using rule 324 (builtinType -> SHORT .)
    SEMICOLON       reduce using rule 324 (builtinType -> SHORT .)
    DOT             reduce using rule 324 (builtinType -> SHORT .)
    LPAREN          reduce using rule 324 (builtinType -> SHORT .)
    RBRACKET        reduce using rule 324 (builtinType -> SHORT .)
    RPAREN          reduce using rule 324 (builtinType -> SHORT .)
    ELLIPSIS        reduce using rule 324 (builtinType -> SHORT .)
    ASSIGN          reduce using rule 324 (builtinType -> SHORT .)
    PLUS_PLUS       reduce using rule 324 (builtinType -> SHORT .)
    MINUS_MINUS     reduce using rule 324 (builtinType -> SHORT .)
    POWER           reduce using rule 324 (builtinType -> SHORT .)
    DIV             reduce using rule 324 (builtinType -> SHORT .)
    MODULO          reduce using rule 324 (builtinType -> SHORT .)
    PLUS            reduce using rule 324 (builtinType -> SHORT .)
    MINUS           reduce using rule 324 (builtinType -> SHORT .)
    TILDE           reduce using rule 324 (builtinType -> SHORT .)
    RIGHT_SHIFT     reduce using rule 324 (builtinType -> SHORT .)
    LEFT_SHIFT      reduce using rule 324 (builtinType -> SHORT .)
    IS_EQ           reduce using rule 324 (builtinType -> SHORT .)
    NOT_EQ          reduce using rule 324 (builtinType -> SHORT .)
    AMPERSAND       reduce using rule 324 (builtinType -> SHORT .)
    CARET           reduce using rule 324 (builtinType -> SHORT .)
    PIPE            reduce using rule 324 (builtinType -> SHORT .)
    DOUBLE_AMPERSAND reduce using rule 324 (builtinType -> SHORT .)
    QUESTION        reduce using rule 324 (builtinType -> SHORT .)
    DOUBLE_PIPE     reduce using rule 324 (builtinType -> SHORT .)
    EQ_LEFT         reduce using rule 324 (builtinType -> SHORT .)
    EQ_RIGHT        reduce using rule 324 (builtinType -> SHORT .)
    EQ_PLUS         reduce using rule 324 (builtinType -> SHORT .)
    EQ_MINUS        reduce using rule 324 (builtinType -> SHORT .)
    EQ_TIMES        reduce using rule 324 (builtinType -> SHORT .)
    EQ_MODULO       reduce using rule 324 (builtinType -> SHORT .)
    EQ_AND_BIT      reduce using rule 324 (builtinType -> SHORT .)
    EQ_DIV          reduce using rule 324 (builtinType -> SHORT .)
    EQ_OR_BIT       reduce using rule 324 (builtinType -> SHORT .)
    EQ_XOR_BIT      reduce using rule 324 (builtinType -> SHORT .)
    LESS            reduce using rule 324 (builtinType -> SHORT .)
    LESS_EQ         reduce using rule 324 (builtinType -> SHORT .)
    GREATER         reduce using rule 324 (builtinType -> SHORT .)
    GREATER_EQ      reduce using rule 324 (builtinType -> SHORT .)
    IS_EQ_DIFF      reduce using rule 324 (builtinType -> SHORT .)
    NOT_EQ_DIFF     reduce using rule 324 (builtinType -> SHORT .)
    LESS_EQ_DIFF    reduce using rule 324 (builtinType -> SHORT .)
    LESS_DIFF       reduce using rule 324 (builtinType -> SHORT .)
    GREATER_EQ_DIFF reduce using rule 324 (builtinType -> SHORT .)
    GREATER_DIFF    reduce using rule 324 (builtinType -> SHORT .)
    RANGE           reduce using rule 324 (builtinType -> SHORT .)
    COLON           reduce using rule 324 (builtinType -> SHORT .)
    CONST           reduce using rule 324 (builtinType -> SHORT .)
    IMMUTABLE       reduce using rule 324 (builtinType -> SHORT .)
    RBRACE          reduce using rule 324 (builtinType -> SHORT .)
    THIS            reduce using rule 324 (builtinType -> SHORT .)
    BOOL            reduce using rule 324 (builtinType -> SHORT .)
    SHORT           reduce using rule 324 (builtinType -> SHORT .)
    USHORT          reduce using rule 324 (builtinType -> SHORT .)
    INT             reduce using rule 324 (builtinType -> SHORT .)
    UINT            reduce using rule 324 (builtinType -> SHORT .)
    LONG            reduce using rule 324 (builtinType -> SHORT .)
    ULONG           reduce using rule 324 (builtinType -> SHORT .)
    CHAR            reduce using rule 324 (builtinType -> SHORT .)
    FLOAT           reduce using rule 324 (builtinType -> SHORT .)
    TYPEOF          reduce using rule 324 (builtinType -> SHORT .)


state 87

    (330) builtinType -> CHAR .

    COMMA           reduce using rule 330 (builtinType -> CHAR .)
    LBRACE          reduce using rule 330 (builtinType -> CHAR .)
    TIMES           reduce using rule 330 (builtinType -> CHAR .)
    LBRACKET        reduce using rule 330 (builtinType -> CHAR .)
    DELEGATE        reduce using rule 330 (builtinType -> CHAR .)
    FUNCTION        reduce using rule 330 (builtinType -> CHAR .)
    IDENTIFIER      reduce using rule 330 (builtinType -> CHAR .)
    SEMICOLON       reduce using rule 330 (builtinType -> CHAR .)
    DOT             reduce using rule 330 (builtinType -> CHAR .)
    LPAREN          reduce using rule 330 (builtinType -> CHAR .)
    RBRACKET        reduce using rule 330 (builtinType -> CHAR .)
    RPAREN          reduce using rule 330 (builtinType -> CHAR .)
    ELLIPSIS        reduce using rule 330 (builtinType -> CHAR .)
    ASSIGN          reduce using rule 330 (builtinType -> CHAR .)
    PLUS_PLUS       reduce using rule 330 (builtinType -> CHAR .)
    MINUS_MINUS     reduce using rule 330 (builtinType -> CHAR .)
    POWER           reduce using rule 330 (builtinType -> CHAR .)
    DIV             reduce using rule 330 (builtinType -> CHAR .)
    MODULO          reduce using rule 330 (builtinType -> CHAR .)
    PLUS            reduce using rule 330 (builtinType -> CHAR .)
    MINUS           reduce using rule 330 (builtinType -> CHAR .)
    TILDE           reduce using rule 330 (builtinType -> CHAR .)
    RIGHT_SHIFT     reduce using rule 330 (builtinType -> CHAR .)
    LEFT_SHIFT      reduce using rule 330 (builtinType -> CHAR .)
    IS_EQ           reduce using rule 330 (builtinType -> CHAR .)
    NOT_EQ          reduce using rule 330 (builtinType -> CHAR .)
    AMPERSAND       reduce using rule 330 (builtinType -> CHAR .)
    CARET           reduce using rule 330 (builtinType -> CHAR .)
    PIPE            reduce using rule 330 (builtinType -> CHAR .)
    DOUBLE_AMPERSAND reduce using rule 330 (builtinType -> CHAR .)
    QUESTION        reduce using rule 330 (builtinType -> CHAR .)
    DOUBLE_PIPE     reduce using rule 330 (builtinType -> CHAR .)
    EQ_LEFT         reduce using rule 330 (builtinType -> CHAR .)
    EQ_RIGHT        reduce using rule 330 (builtinType -> CHAR .)
    EQ_PLUS         reduce using rule 330 (builtinType -> CHAR .)
    EQ_MINUS        reduce using rule 330 (builtinType -> CHAR .)
    EQ_TIMES        reduce using rule 330 (builtinType -> CHAR .)
    EQ_MODULO       reduce using rule 330 (builtinType -> CHAR .)
    EQ_AND_BIT      reduce using rule 330 (builtinType -> CHAR .)
    EQ_DIV          reduce using rule 330 (builtinType -> CHAR .)
    EQ_OR_BIT       reduce using rule 330 (builtinType -> CHAR .)
    EQ_XOR_BIT      reduce using rule 330 (builtinType -> CHAR .)
    LESS            reduce using rule 330 (builtinType -> CHAR .)
    LESS_EQ         reduce using rule 330 (builtinType -> CHAR .)
    GREATER         reduce using rule 330 (builtinType -> CHAR .)
    GREATER_EQ      reduce using rule 330 (builtinType -> CHAR .)
    IS_EQ_DIFF      reduce using rule 330 (builtinType -> CHAR .)
    NOT_EQ_DIFF     reduce using rule 330 (builtinType -> CHAR .)
    LESS_EQ_DIFF    reduce using rule 330 (builtinType -> CHAR .)
    LESS_DIFF       reduce using rule 330 (builtinType -> CHAR .)
    GREATER_EQ_DIFF reduce using rule 330 (builtinType -> CHAR .)
    GREATER_DIFF    reduce using rule 330 (builtinType -> CHAR .)
    RANGE           reduce using rule 330 (builtinType -> CHAR .)
    COLON           reduce using rule 330 (builtinType -> CHAR .)
    CONST           reduce using rule 330 (builtinType -> CHAR .)
    IMMUTABLE       reduce using rule 330 (builtinType -> CHAR .)
    RBRACE          reduce using rule 330 (builtinType -> CHAR .)
    THIS            reduce using rule 330 (builtinType -> CHAR .)
    BOOL            reduce using rule 330 (builtinType -> CHAR .)
    SHORT           reduce using rule 330 (builtinType -> CHAR .)
    USHORT          reduce using rule 330 (builtinType -> CHAR .)
    INT             reduce using rule 330 (builtinType -> CHAR .)
    UINT            reduce using rule 330 (builtinType -> CHAR .)
    LONG            reduce using rule 330 (builtinType -> CHAR .)
    ULONG           reduce using rule 330 (builtinType -> CHAR .)
    CHAR            reduce using rule 330 (builtinType -> CHAR .)
    FLOAT           reduce using rule 330 (builtinType -> CHAR .)
    TYPEOF          reduce using rule 330 (builtinType -> CHAR .)


state 88

    (218) type2 -> typeofExpression . typeIdentifierPart_question
    (220) typeIdentifierPart_question -> . DOT typeIdentifierPart
    (221) typeIdentifierPart_question -> . empty
    (397) empty -> .

    DOT             shift and go to state 147
    TIMES           reduce using rule 397 (empty -> .)
    LBRACKET        reduce using rule 397 (empty -> .)
    DELEGATE        reduce using rule 397 (empty -> .)
    FUNCTION        reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    LPAREN          reduce using rule 397 (empty -> .)
    RBRACKET        reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)
    ELLIPSIS        reduce using rule 397 (empty -> .)
    ASSIGN          reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    PLUS_PLUS       reduce using rule 397 (empty -> .)
    MINUS_MINUS     reduce using rule 397 (empty -> .)
    POWER           reduce using rule 397 (empty -> .)
    DIV             reduce using rule 397 (empty -> .)
    MODULO          reduce using rule 397 (empty -> .)
    PLUS            reduce using rule 397 (empty -> .)
    MINUS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    RIGHT_SHIFT     reduce using rule 397 (empty -> .)
    LEFT_SHIFT      reduce using rule 397 (empty -> .)
    IS_EQ           reduce using rule 397 (empty -> .)
    NOT_EQ          reduce using rule 397 (empty -> .)
    AMPERSAND       reduce using rule 397 (empty -> .)
    CARET           reduce using rule 397 (empty -> .)
    PIPE            reduce using rule 397 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 397 (empty -> .)
    QUESTION        reduce using rule 397 (empty -> .)
    DOUBLE_PIPE     reduce using rule 397 (empty -> .)
    EQ_LEFT         reduce using rule 397 (empty -> .)
    EQ_RIGHT        reduce using rule 397 (empty -> .)
    EQ_PLUS         reduce using rule 397 (empty -> .)
    EQ_MINUS        reduce using rule 397 (empty -> .)
    EQ_TIMES        reduce using rule 397 (empty -> .)
    EQ_MODULO       reduce using rule 397 (empty -> .)
    EQ_AND_BIT      reduce using rule 397 (empty -> .)
    EQ_DIV          reduce using rule 397 (empty -> .)
    EQ_OR_BIT       reduce using rule 397 (empty -> .)
    EQ_XOR_BIT      reduce using rule 397 (empty -> .)
    LESS            reduce using rule 397 (empty -> .)
    LESS_EQ         reduce using rule 397 (empty -> .)
    GREATER         reduce using rule 397 (empty -> .)
    GREATER_EQ      reduce using rule 397 (empty -> .)
    IS_EQ_DIFF      reduce using rule 397 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 397 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 397 (empty -> .)
    LESS_DIFF       reduce using rule 397 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 397 (empty -> .)
    GREATER_DIFF    reduce using rule 397 (empty -> .)
    RANGE           reduce using rule 397 (empty -> .)
    COLON           reduce using rule 397 (empty -> .)
    CONST           reduce using rule 397 (empty -> .)
    IMMUTABLE       reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! DOT             [ reduce using rule 397 (empty -> .) ]

    empty                          shift and go to state 148
    typeIdentifierPart_question    shift and go to state 149

state 89

    (322) type -> typeConstructors_quetsion type2 . typeSuffixStar
    (332) typeSuffixStar -> . typeSuffix typeSuffixStar
    (333) typeSuffixStar -> . empty
    (227) typeSuffix -> . TIMES
    (228) typeSuffix -> . LBRACKET type_question RBRACKET
    (229) typeSuffix -> . LBRACKET assignExpression RBRACKET
    (230) typeSuffix -> . LBRACKET assignExpression RANGE assignExpression RBRACKET
    (231) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute
    (232) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute
    (397) empty -> .

    DELEGATE        shift and go to state 154
    FUNCTION        shift and go to state 150
    IDENTIFIER      reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    DOT             reduce using rule 397 (empty -> .)
    LPAREN          reduce using rule 397 (empty -> .)
    RBRACKET        reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)
    ELLIPSIS        reduce using rule 397 (empty -> .)
    ASSIGN          reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    LBRACKET        reduce using rule 397 (empty -> .)
    PLUS_PLUS       reduce using rule 397 (empty -> .)
    MINUS_MINUS     reduce using rule 397 (empty -> .)
    POWER           reduce using rule 397 (empty -> .)
    TIMES           reduce using rule 397 (empty -> .)
    DIV             reduce using rule 397 (empty -> .)
    MODULO          reduce using rule 397 (empty -> .)
    PLUS            reduce using rule 397 (empty -> .)
    MINUS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    RIGHT_SHIFT     reduce using rule 397 (empty -> .)
    LEFT_SHIFT      reduce using rule 397 (empty -> .)
    IS_EQ           reduce using rule 397 (empty -> .)
    NOT_EQ          reduce using rule 397 (empty -> .)
    AMPERSAND       reduce using rule 397 (empty -> .)
    CARET           reduce using rule 397 (empty -> .)
    PIPE            reduce using rule 397 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 397 (empty -> .)
    QUESTION        reduce using rule 397 (empty -> .)
    DOUBLE_PIPE     reduce using rule 397 (empty -> .)
    EQ_LEFT         reduce using rule 397 (empty -> .)
    EQ_RIGHT        reduce using rule 397 (empty -> .)
    EQ_PLUS         reduce using rule 397 (empty -> .)
    EQ_MINUS        reduce using rule 397 (empty -> .)
    EQ_TIMES        reduce using rule 397 (empty -> .)
    EQ_MODULO       reduce using rule 397 (empty -> .)
    EQ_AND_BIT      reduce using rule 397 (empty -> .)
    EQ_DIV          reduce using rule 397 (empty -> .)
    EQ_OR_BIT       reduce using rule 397 (empty -> .)
    EQ_XOR_BIT      reduce using rule 397 (empty -> .)
    LESS            reduce using rule 397 (empty -> .)
    LESS_EQ         reduce using rule 397 (empty -> .)
    GREATER         reduce using rule 397 (empty -> .)
    GREATER_EQ      reduce using rule 397 (empty -> .)
    IS_EQ_DIFF      reduce using rule 397 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 397 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 397 (empty -> .)
    LESS_DIFF       reduce using rule 397 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 397 (empty -> .)
    GREATER_DIFF    reduce using rule 397 (empty -> .)
    RANGE           reduce using rule 397 (empty -> .)
    COLON           reduce using rule 397 (empty -> .)
    CONST           reduce using rule 397 (empty -> .)
    IMMUTABLE       reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! TIMES           [ shift and go to state 152 ]
  ! LBRACKET        [ shift and go to state 153 ]

    typeSuffix                     shift and go to state 151
    typeSuffixStar                 shift and go to state 155
    empty                          shift and go to state 156

state 90

    (329) builtinType -> ULONG .

    COMMA           reduce using rule 329 (builtinType -> ULONG .)
    LBRACE          reduce using rule 329 (builtinType -> ULONG .)
    TIMES           reduce using rule 329 (builtinType -> ULONG .)
    LBRACKET        reduce using rule 329 (builtinType -> ULONG .)
    DELEGATE        reduce using rule 329 (builtinType -> ULONG .)
    FUNCTION        reduce using rule 329 (builtinType -> ULONG .)
    IDENTIFIER      reduce using rule 329 (builtinType -> ULONG .)
    SEMICOLON       reduce using rule 329 (builtinType -> ULONG .)
    DOT             reduce using rule 329 (builtinType -> ULONG .)
    LPAREN          reduce using rule 329 (builtinType -> ULONG .)
    RBRACKET        reduce using rule 329 (builtinType -> ULONG .)
    RPAREN          reduce using rule 329 (builtinType -> ULONG .)
    ELLIPSIS        reduce using rule 329 (builtinType -> ULONG .)
    ASSIGN          reduce using rule 329 (builtinType -> ULONG .)
    PLUS_PLUS       reduce using rule 329 (builtinType -> ULONG .)
    MINUS_MINUS     reduce using rule 329 (builtinType -> ULONG .)
    POWER           reduce using rule 329 (builtinType -> ULONG .)
    DIV             reduce using rule 329 (builtinType -> ULONG .)
    MODULO          reduce using rule 329 (builtinType -> ULONG .)
    PLUS            reduce using rule 329 (builtinType -> ULONG .)
    MINUS           reduce using rule 329 (builtinType -> ULONG .)
    TILDE           reduce using rule 329 (builtinType -> ULONG .)
    RIGHT_SHIFT     reduce using rule 329 (builtinType -> ULONG .)
    LEFT_SHIFT      reduce using rule 329 (builtinType -> ULONG .)
    IS_EQ           reduce using rule 329 (builtinType -> ULONG .)
    NOT_EQ          reduce using rule 329 (builtinType -> ULONG .)
    AMPERSAND       reduce using rule 329 (builtinType -> ULONG .)
    CARET           reduce using rule 329 (builtinType -> ULONG .)
    PIPE            reduce using rule 329 (builtinType -> ULONG .)
    DOUBLE_AMPERSAND reduce using rule 329 (builtinType -> ULONG .)
    QUESTION        reduce using rule 329 (builtinType -> ULONG .)
    DOUBLE_PIPE     reduce using rule 329 (builtinType -> ULONG .)
    EQ_LEFT         reduce using rule 329 (builtinType -> ULONG .)
    EQ_RIGHT        reduce using rule 329 (builtinType -> ULONG .)
    EQ_PLUS         reduce using rule 329 (builtinType -> ULONG .)
    EQ_MINUS        reduce using rule 329 (builtinType -> ULONG .)
    EQ_TIMES        reduce using rule 329 (builtinType -> ULONG .)
    EQ_MODULO       reduce using rule 329 (builtinType -> ULONG .)
    EQ_AND_BIT      reduce using rule 329 (builtinType -> ULONG .)
    EQ_DIV          reduce using rule 329 (builtinType -> ULONG .)
    EQ_OR_BIT       reduce using rule 329 (builtinType -> ULONG .)
    EQ_XOR_BIT      reduce using rule 329 (builtinType -> ULONG .)
    LESS            reduce using rule 329 (builtinType -> ULONG .)
    LESS_EQ         reduce using rule 329 (builtinType -> ULONG .)
    GREATER         reduce using rule 329 (builtinType -> ULONG .)
    GREATER_EQ      reduce using rule 329 (builtinType -> ULONG .)
    IS_EQ_DIFF      reduce using rule 329 (builtinType -> ULONG .)
    NOT_EQ_DIFF     reduce using rule 329 (builtinType -> ULONG .)
    LESS_EQ_DIFF    reduce using rule 329 (builtinType -> ULONG .)
    LESS_DIFF       reduce using rule 329 (builtinType -> ULONG .)
    GREATER_EQ_DIFF reduce using rule 329 (builtinType -> ULONG .)
    GREATER_DIFF    reduce using rule 329 (builtinType -> ULONG .)
    RANGE           reduce using rule 329 (builtinType -> ULONG .)
    COLON           reduce using rule 329 (builtinType -> ULONG .)
    CONST           reduce using rule 329 (builtinType -> ULONG .)
    IMMUTABLE       reduce using rule 329 (builtinType -> ULONG .)
    RBRACE          reduce using rule 329 (builtinType -> ULONG .)
    THIS            reduce using rule 329 (builtinType -> ULONG .)
    BOOL            reduce using rule 329 (builtinType -> ULONG .)
    SHORT           reduce using rule 329 (builtinType -> ULONG .)
    USHORT          reduce using rule 329 (builtinType -> ULONG .)
    INT             reduce using rule 329 (builtinType -> ULONG .)
    UINT            reduce using rule 329 (builtinType -> ULONG .)
    LONG            reduce using rule 329 (builtinType -> ULONG .)
    ULONG           reduce using rule 329 (builtinType -> ULONG .)
    CHAR            reduce using rule 329 (builtinType -> ULONG .)
    FLOAT           reduce using rule 329 (builtinType -> ULONG .)
    TYPEOF          reduce using rule 329 (builtinType -> ULONG .)


state 91

    (328) builtinType -> LONG .

    COMMA           reduce using rule 328 (builtinType -> LONG .)
    LBRACE          reduce using rule 328 (builtinType -> LONG .)
    TIMES           reduce using rule 328 (builtinType -> LONG .)
    LBRACKET        reduce using rule 328 (builtinType -> LONG .)
    DELEGATE        reduce using rule 328 (builtinType -> LONG .)
    FUNCTION        reduce using rule 328 (builtinType -> LONG .)
    IDENTIFIER      reduce using rule 328 (builtinType -> LONG .)
    SEMICOLON       reduce using rule 328 (builtinType -> LONG .)
    DOT             reduce using rule 328 (builtinType -> LONG .)
    LPAREN          reduce using rule 328 (builtinType -> LONG .)
    RBRACKET        reduce using rule 328 (builtinType -> LONG .)
    RPAREN          reduce using rule 328 (builtinType -> LONG .)
    ELLIPSIS        reduce using rule 328 (builtinType -> LONG .)
    ASSIGN          reduce using rule 328 (builtinType -> LONG .)
    PLUS_PLUS       reduce using rule 328 (builtinType -> LONG .)
    MINUS_MINUS     reduce using rule 328 (builtinType -> LONG .)
    POWER           reduce using rule 328 (builtinType -> LONG .)
    DIV             reduce using rule 328 (builtinType -> LONG .)
    MODULO          reduce using rule 328 (builtinType -> LONG .)
    PLUS            reduce using rule 328 (builtinType -> LONG .)
    MINUS           reduce using rule 328 (builtinType -> LONG .)
    TILDE           reduce using rule 328 (builtinType -> LONG .)
    RIGHT_SHIFT     reduce using rule 328 (builtinType -> LONG .)
    LEFT_SHIFT      reduce using rule 328 (builtinType -> LONG .)
    IS_EQ           reduce using rule 328 (builtinType -> LONG .)
    NOT_EQ          reduce using rule 328 (builtinType -> LONG .)
    AMPERSAND       reduce using rule 328 (builtinType -> LONG .)
    CARET           reduce using rule 328 (builtinType -> LONG .)
    PIPE            reduce using rule 328 (builtinType -> LONG .)
    DOUBLE_AMPERSAND reduce using rule 328 (builtinType -> LONG .)
    QUESTION        reduce using rule 328 (builtinType -> LONG .)
    DOUBLE_PIPE     reduce using rule 328 (builtinType -> LONG .)
    EQ_LEFT         reduce using rule 328 (builtinType -> LONG .)
    EQ_RIGHT        reduce using rule 328 (builtinType -> LONG .)
    EQ_PLUS         reduce using rule 328 (builtinType -> LONG .)
    EQ_MINUS        reduce using rule 328 (builtinType -> LONG .)
    EQ_TIMES        reduce using rule 328 (builtinType -> LONG .)
    EQ_MODULO       reduce using rule 328 (builtinType -> LONG .)
    EQ_AND_BIT      reduce using rule 328 (builtinType -> LONG .)
    EQ_DIV          reduce using rule 328 (builtinType -> LONG .)
    EQ_OR_BIT       reduce using rule 328 (builtinType -> LONG .)
    EQ_XOR_BIT      reduce using rule 328 (builtinType -> LONG .)
    LESS            reduce using rule 328 (builtinType -> LONG .)
    LESS_EQ         reduce using rule 328 (builtinType -> LONG .)
    GREATER         reduce using rule 328 (builtinType -> LONG .)
    GREATER_EQ      reduce using rule 328 (builtinType -> LONG .)
    IS_EQ_DIFF      reduce using rule 328 (builtinType -> LONG .)
    NOT_EQ_DIFF     reduce using rule 328 (builtinType -> LONG .)
    LESS_EQ_DIFF    reduce using rule 328 (builtinType -> LONG .)
    LESS_DIFF       reduce using rule 328 (builtinType -> LONG .)
    GREATER_EQ_DIFF reduce using rule 328 (builtinType -> LONG .)
    GREATER_DIFF    reduce using rule 328 (builtinType -> LONG .)
    RANGE           reduce using rule 328 (builtinType -> LONG .)
    COLON           reduce using rule 328 (builtinType -> LONG .)
    CONST           reduce using rule 328 (builtinType -> LONG .)
    IMMUTABLE       reduce using rule 328 (builtinType -> LONG .)
    RBRACE          reduce using rule 328 (builtinType -> LONG .)
    THIS            reduce using rule 328 (builtinType -> LONG .)
    BOOL            reduce using rule 328 (builtinType -> LONG .)
    SHORT           reduce using rule 328 (builtinType -> LONG .)
    USHORT          reduce using rule 328 (builtinType -> LONG .)
    INT             reduce using rule 328 (builtinType -> LONG .)
    UINT            reduce using rule 328 (builtinType -> LONG .)
    LONG            reduce using rule 328 (builtinType -> LONG .)
    ULONG           reduce using rule 328 (builtinType -> LONG .)
    CHAR            reduce using rule 328 (builtinType -> LONG .)
    FLOAT           reduce using rule 328 (builtinType -> LONG .)
    TYPEOF          reduce using rule 328 (builtinType -> LONG .)


state 92

    (188) typeIdentifierPart -> identifierOrTemplateInstance .
    (189) typeIdentifierPart -> identifierOrTemplateInstance . DOT typeIdentifierPart
    (190) typeIdentifierPart -> identifierOrTemplateInstance . LBRACKET assignExpression RBRACKET DOT typeIdentifierPart

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    TIMES           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    DELEGATE        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    FUNCTION        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LBRACE          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    RPAREN          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    ELLIPSIS        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    POWER           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    DIV             reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    CARET           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LESS            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    RANGE           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    COLON           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    CONST           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    IMMUTABLE       reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    RBRACE          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    THIS            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    BOOL            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    SHORT           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    USHORT          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    INT             reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    UINT            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    LONG            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    ULONG           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    CHAR            reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    FLOAT           reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    TYPEOF          reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .)
    DOT             shift and go to state 158
    LBRACKET        shift and go to state 157

  ! LBRACKET        [ reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .) ]
  ! DOT             [ reduce using rule 188 (typeIdentifierPart -> identifierOrTemplateInstance .) ]


state 93

    (315) identifierOrTemplateInstance -> IDENTIFIER .

    DOT             reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LBRACKET        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LPAREN          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    POWER           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TIMES           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    MINUS           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    CARET           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RPAREN          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACKET        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RANGE           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    SEMICOLON       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    COLON           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    CONST           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IMMUTABLE       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACE          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    THIS            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    BOOL            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    SHORT           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    USHORT          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    INT             reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    UINT            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LONG            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    ULONG           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    CHAR            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    FLOAT           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TYPEOF          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DELEGATE        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    FUNCTION        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LBRACE          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    ELLIPSIS        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)


state 94

    (215) type2 -> builtinType .

    TIMES           reduce using rule 215 (type2 -> builtinType .)
    LBRACKET        reduce using rule 215 (type2 -> builtinType .)
    DELEGATE        reduce using rule 215 (type2 -> builtinType .)
    FUNCTION        reduce using rule 215 (type2 -> builtinType .)
    IDENTIFIER      reduce using rule 215 (type2 -> builtinType .)
    LBRACE          reduce using rule 215 (type2 -> builtinType .)
    SEMICOLON       reduce using rule 215 (type2 -> builtinType .)
    DOT             reduce using rule 215 (type2 -> builtinType .)
    LPAREN          reduce using rule 215 (type2 -> builtinType .)
    RBRACKET        reduce using rule 215 (type2 -> builtinType .)
    RPAREN          reduce using rule 215 (type2 -> builtinType .)
    ELLIPSIS        reduce using rule 215 (type2 -> builtinType .)
    ASSIGN          reduce using rule 215 (type2 -> builtinType .)
    COMMA           reduce using rule 215 (type2 -> builtinType .)
    PLUS_PLUS       reduce using rule 215 (type2 -> builtinType .)
    MINUS_MINUS     reduce using rule 215 (type2 -> builtinType .)
    POWER           reduce using rule 215 (type2 -> builtinType .)
    DIV             reduce using rule 215 (type2 -> builtinType .)
    MODULO          reduce using rule 215 (type2 -> builtinType .)
    PLUS            reduce using rule 215 (type2 -> builtinType .)
    MINUS           reduce using rule 215 (type2 -> builtinType .)
    TILDE           reduce using rule 215 (type2 -> builtinType .)
    RIGHT_SHIFT     reduce using rule 215 (type2 -> builtinType .)
    LEFT_SHIFT      reduce using rule 215 (type2 -> builtinType .)
    IS_EQ           reduce using rule 215 (type2 -> builtinType .)
    NOT_EQ          reduce using rule 215 (type2 -> builtinType .)
    AMPERSAND       reduce using rule 215 (type2 -> builtinType .)
    CARET           reduce using rule 215 (type2 -> builtinType .)
    PIPE            reduce using rule 215 (type2 -> builtinType .)
    DOUBLE_AMPERSAND reduce using rule 215 (type2 -> builtinType .)
    QUESTION        reduce using rule 215 (type2 -> builtinType .)
    DOUBLE_PIPE     reduce using rule 215 (type2 -> builtinType .)
    EQ_LEFT         reduce using rule 215 (type2 -> builtinType .)
    EQ_RIGHT        reduce using rule 215 (type2 -> builtinType .)
    EQ_PLUS         reduce using rule 215 (type2 -> builtinType .)
    EQ_MINUS        reduce using rule 215 (type2 -> builtinType .)
    EQ_TIMES        reduce using rule 215 (type2 -> builtinType .)
    EQ_MODULO       reduce using rule 215 (type2 -> builtinType .)
    EQ_AND_BIT      reduce using rule 215 (type2 -> builtinType .)
    EQ_DIV          reduce using rule 215 (type2 -> builtinType .)
    EQ_OR_BIT       reduce using rule 215 (type2 -> builtinType .)
    EQ_XOR_BIT      reduce using rule 215 (type2 -> builtinType .)
    LESS            reduce using rule 215 (type2 -> builtinType .)
    LESS_EQ         reduce using rule 215 (type2 -> builtinType .)
    GREATER         reduce using rule 215 (type2 -> builtinType .)
    GREATER_EQ      reduce using rule 215 (type2 -> builtinType .)
    IS_EQ_DIFF      reduce using rule 215 (type2 -> builtinType .)
    NOT_EQ_DIFF     reduce using rule 215 (type2 -> builtinType .)
    LESS_EQ_DIFF    reduce using rule 215 (type2 -> builtinType .)
    LESS_DIFF       reduce using rule 215 (type2 -> builtinType .)
    GREATER_EQ_DIFF reduce using rule 215 (type2 -> builtinType .)
    GREATER_DIFF    reduce using rule 215 (type2 -> builtinType .)
    RANGE           reduce using rule 215 (type2 -> builtinType .)
    COLON           reduce using rule 215 (type2 -> builtinType .)
    CONST           reduce using rule 215 (type2 -> builtinType .)
    IMMUTABLE       reduce using rule 215 (type2 -> builtinType .)
    RBRACE          reduce using rule 215 (type2 -> builtinType .)
    THIS            reduce using rule 215 (type2 -> builtinType .)
    BOOL            reduce using rule 215 (type2 -> builtinType .)
    SHORT           reduce using rule 215 (type2 -> builtinType .)
    USHORT          reduce using rule 215 (type2 -> builtinType .)
    INT             reduce using rule 215 (type2 -> builtinType .)
    UINT            reduce using rule 215 (type2 -> builtinType .)
    LONG            reduce using rule 215 (type2 -> builtinType .)
    ULONG           reduce using rule 215 (type2 -> builtinType .)
    CHAR            reduce using rule 215 (type2 -> builtinType .)
    FLOAT           reduce using rule 215 (type2 -> builtinType .)
    TYPEOF          reduce using rule 215 (type2 -> builtinType .)


state 95

    (216) type2 -> typeIdentifierPart .

    TIMES           reduce using rule 216 (type2 -> typeIdentifierPart .)
    LBRACKET        reduce using rule 216 (type2 -> typeIdentifierPart .)
    DELEGATE        reduce using rule 216 (type2 -> typeIdentifierPart .)
    FUNCTION        reduce using rule 216 (type2 -> typeIdentifierPart .)
    IDENTIFIER      reduce using rule 216 (type2 -> typeIdentifierPart .)
    LBRACE          reduce using rule 216 (type2 -> typeIdentifierPart .)
    SEMICOLON       reduce using rule 216 (type2 -> typeIdentifierPart .)
    DOT             reduce using rule 216 (type2 -> typeIdentifierPart .)
    LPAREN          reduce using rule 216 (type2 -> typeIdentifierPart .)
    RBRACKET        reduce using rule 216 (type2 -> typeIdentifierPart .)
    RPAREN          reduce using rule 216 (type2 -> typeIdentifierPart .)
    ELLIPSIS        reduce using rule 216 (type2 -> typeIdentifierPart .)
    ASSIGN          reduce using rule 216 (type2 -> typeIdentifierPart .)
    COMMA           reduce using rule 216 (type2 -> typeIdentifierPart .)
    PLUS_PLUS       reduce using rule 216 (type2 -> typeIdentifierPart .)
    MINUS_MINUS     reduce using rule 216 (type2 -> typeIdentifierPart .)
    POWER           reduce using rule 216 (type2 -> typeIdentifierPart .)
    DIV             reduce using rule 216 (type2 -> typeIdentifierPart .)
    MODULO          reduce using rule 216 (type2 -> typeIdentifierPart .)
    PLUS            reduce using rule 216 (type2 -> typeIdentifierPart .)
    MINUS           reduce using rule 216 (type2 -> typeIdentifierPart .)
    TILDE           reduce using rule 216 (type2 -> typeIdentifierPart .)
    RIGHT_SHIFT     reduce using rule 216 (type2 -> typeIdentifierPart .)
    LEFT_SHIFT      reduce using rule 216 (type2 -> typeIdentifierPart .)
    IS_EQ           reduce using rule 216 (type2 -> typeIdentifierPart .)
    NOT_EQ          reduce using rule 216 (type2 -> typeIdentifierPart .)
    AMPERSAND       reduce using rule 216 (type2 -> typeIdentifierPart .)
    CARET           reduce using rule 216 (type2 -> typeIdentifierPart .)
    PIPE            reduce using rule 216 (type2 -> typeIdentifierPart .)
    DOUBLE_AMPERSAND reduce using rule 216 (type2 -> typeIdentifierPart .)
    QUESTION        reduce using rule 216 (type2 -> typeIdentifierPart .)
    DOUBLE_PIPE     reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_LEFT         reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_RIGHT        reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_PLUS         reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_MINUS        reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_TIMES        reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_MODULO       reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_AND_BIT      reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_DIV          reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_OR_BIT       reduce using rule 216 (type2 -> typeIdentifierPart .)
    EQ_XOR_BIT      reduce using rule 216 (type2 -> typeIdentifierPart .)
    LESS            reduce using rule 216 (type2 -> typeIdentifierPart .)
    LESS_EQ         reduce using rule 216 (type2 -> typeIdentifierPart .)
    GREATER         reduce using rule 216 (type2 -> typeIdentifierPart .)
    GREATER_EQ      reduce using rule 216 (type2 -> typeIdentifierPart .)
    IS_EQ_DIFF      reduce using rule 216 (type2 -> typeIdentifierPart .)
    NOT_EQ_DIFF     reduce using rule 216 (type2 -> typeIdentifierPart .)
    LESS_EQ_DIFF    reduce using rule 216 (type2 -> typeIdentifierPart .)
    LESS_DIFF       reduce using rule 216 (type2 -> typeIdentifierPart .)
    GREATER_EQ_DIFF reduce using rule 216 (type2 -> typeIdentifierPart .)
    GREATER_DIFF    reduce using rule 216 (type2 -> typeIdentifierPart .)
    RANGE           reduce using rule 216 (type2 -> typeIdentifierPart .)
    COLON           reduce using rule 216 (type2 -> typeIdentifierPart .)
    CONST           reduce using rule 216 (type2 -> typeIdentifierPart .)
    IMMUTABLE       reduce using rule 216 (type2 -> typeIdentifierPart .)
    RBRACE          reduce using rule 216 (type2 -> typeIdentifierPart .)
    THIS            reduce using rule 216 (type2 -> typeIdentifierPart .)
    BOOL            reduce using rule 216 (type2 -> typeIdentifierPart .)
    SHORT           reduce using rule 216 (type2 -> typeIdentifierPart .)
    USHORT          reduce using rule 216 (type2 -> typeIdentifierPart .)
    INT             reduce using rule 216 (type2 -> typeIdentifierPart .)
    UINT            reduce using rule 216 (type2 -> typeIdentifierPart .)
    LONG            reduce using rule 216 (type2 -> typeIdentifierPart .)
    ULONG           reduce using rule 216 (type2 -> typeIdentifierPart .)
    CHAR            reduce using rule 216 (type2 -> typeIdentifierPart .)
    FLOAT           reduce using rule 216 (type2 -> typeIdentifierPart .)
    TYPEOF          reduce using rule 216 (type2 -> typeIdentifierPart .)


state 96

    (327) builtinType -> UINT .

    COMMA           reduce using rule 327 (builtinType -> UINT .)
    LBRACE          reduce using rule 327 (builtinType -> UINT .)
    TIMES           reduce using rule 327 (builtinType -> UINT .)
    LBRACKET        reduce using rule 327 (builtinType -> UINT .)
    DELEGATE        reduce using rule 327 (builtinType -> UINT .)
    FUNCTION        reduce using rule 327 (builtinType -> UINT .)
    IDENTIFIER      reduce using rule 327 (builtinType -> UINT .)
    SEMICOLON       reduce using rule 327 (builtinType -> UINT .)
    DOT             reduce using rule 327 (builtinType -> UINT .)
    LPAREN          reduce using rule 327 (builtinType -> UINT .)
    RBRACKET        reduce using rule 327 (builtinType -> UINT .)
    RPAREN          reduce using rule 327 (builtinType -> UINT .)
    ELLIPSIS        reduce using rule 327 (builtinType -> UINT .)
    ASSIGN          reduce using rule 327 (builtinType -> UINT .)
    PLUS_PLUS       reduce using rule 327 (builtinType -> UINT .)
    MINUS_MINUS     reduce using rule 327 (builtinType -> UINT .)
    POWER           reduce using rule 327 (builtinType -> UINT .)
    DIV             reduce using rule 327 (builtinType -> UINT .)
    MODULO          reduce using rule 327 (builtinType -> UINT .)
    PLUS            reduce using rule 327 (builtinType -> UINT .)
    MINUS           reduce using rule 327 (builtinType -> UINT .)
    TILDE           reduce using rule 327 (builtinType -> UINT .)
    RIGHT_SHIFT     reduce using rule 327 (builtinType -> UINT .)
    LEFT_SHIFT      reduce using rule 327 (builtinType -> UINT .)
    IS_EQ           reduce using rule 327 (builtinType -> UINT .)
    NOT_EQ          reduce using rule 327 (builtinType -> UINT .)
    AMPERSAND       reduce using rule 327 (builtinType -> UINT .)
    CARET           reduce using rule 327 (builtinType -> UINT .)
    PIPE            reduce using rule 327 (builtinType -> UINT .)
    DOUBLE_AMPERSAND reduce using rule 327 (builtinType -> UINT .)
    QUESTION        reduce using rule 327 (builtinType -> UINT .)
    DOUBLE_PIPE     reduce using rule 327 (builtinType -> UINT .)
    EQ_LEFT         reduce using rule 327 (builtinType -> UINT .)
    EQ_RIGHT        reduce using rule 327 (builtinType -> UINT .)
    EQ_PLUS         reduce using rule 327 (builtinType -> UINT .)
    EQ_MINUS        reduce using rule 327 (builtinType -> UINT .)
    EQ_TIMES        reduce using rule 327 (builtinType -> UINT .)
    EQ_MODULO       reduce using rule 327 (builtinType -> UINT .)
    EQ_AND_BIT      reduce using rule 327 (builtinType -> UINT .)
    EQ_DIV          reduce using rule 327 (builtinType -> UINT .)
    EQ_OR_BIT       reduce using rule 327 (builtinType -> UINT .)
    EQ_XOR_BIT      reduce using rule 327 (builtinType -> UINT .)
    LESS            reduce using rule 327 (builtinType -> UINT .)
    LESS_EQ         reduce using rule 327 (builtinType -> UINT .)
    GREATER         reduce using rule 327 (builtinType -> UINT .)
    GREATER_EQ      reduce using rule 327 (builtinType -> UINT .)
    IS_EQ_DIFF      reduce using rule 327 (builtinType -> UINT .)
    NOT_EQ_DIFF     reduce using rule 327 (builtinType -> UINT .)
    LESS_EQ_DIFF    reduce using rule 327 (builtinType -> UINT .)
    LESS_DIFF       reduce using rule 327 (builtinType -> UINT .)
    GREATER_EQ_DIFF reduce using rule 327 (builtinType -> UINT .)
    GREATER_DIFF    reduce using rule 327 (builtinType -> UINT .)
    RANGE           reduce using rule 327 (builtinType -> UINT .)
    COLON           reduce using rule 327 (builtinType -> UINT .)
    CONST           reduce using rule 327 (builtinType -> UINT .)
    IMMUTABLE       reduce using rule 327 (builtinType -> UINT .)
    RBRACE          reduce using rule 327 (builtinType -> UINT .)
    THIS            reduce using rule 327 (builtinType -> UINT .)
    BOOL            reduce using rule 327 (builtinType -> UINT .)
    SHORT           reduce using rule 327 (builtinType -> UINT .)
    USHORT          reduce using rule 327 (builtinType -> UINT .)
    INT             reduce using rule 327 (builtinType -> UINT .)
    UINT            reduce using rule 327 (builtinType -> UINT .)
    LONG            reduce using rule 327 (builtinType -> UINT .)
    ULONG           reduce using rule 327 (builtinType -> UINT .)
    CHAR            reduce using rule 327 (builtinType -> UINT .)
    FLOAT           reduce using rule 327 (builtinType -> UINT .)
    TYPEOF          reduce using rule 327 (builtinType -> UINT .)


state 97

    (217) type2 -> THIS . DOT typeIdentifierPart

    DOT             shift and go to state 159


state 98

    (325) builtinType -> USHORT .

    COMMA           reduce using rule 325 (builtinType -> USHORT .)
    LBRACE          reduce using rule 325 (builtinType -> USHORT .)
    TIMES           reduce using rule 325 (builtinType -> USHORT .)
    LBRACKET        reduce using rule 325 (builtinType -> USHORT .)
    DELEGATE        reduce using rule 325 (builtinType -> USHORT .)
    FUNCTION        reduce using rule 325 (builtinType -> USHORT .)
    IDENTIFIER      reduce using rule 325 (builtinType -> USHORT .)
    SEMICOLON       reduce using rule 325 (builtinType -> USHORT .)
    DOT             reduce using rule 325 (builtinType -> USHORT .)
    LPAREN          reduce using rule 325 (builtinType -> USHORT .)
    RBRACKET        reduce using rule 325 (builtinType -> USHORT .)
    RPAREN          reduce using rule 325 (builtinType -> USHORT .)
    ELLIPSIS        reduce using rule 325 (builtinType -> USHORT .)
    ASSIGN          reduce using rule 325 (builtinType -> USHORT .)
    PLUS_PLUS       reduce using rule 325 (builtinType -> USHORT .)
    MINUS_MINUS     reduce using rule 325 (builtinType -> USHORT .)
    POWER           reduce using rule 325 (builtinType -> USHORT .)
    DIV             reduce using rule 325 (builtinType -> USHORT .)
    MODULO          reduce using rule 325 (builtinType -> USHORT .)
    PLUS            reduce using rule 325 (builtinType -> USHORT .)
    MINUS           reduce using rule 325 (builtinType -> USHORT .)
    TILDE           reduce using rule 325 (builtinType -> USHORT .)
    RIGHT_SHIFT     reduce using rule 325 (builtinType -> USHORT .)
    LEFT_SHIFT      reduce using rule 325 (builtinType -> USHORT .)
    IS_EQ           reduce using rule 325 (builtinType -> USHORT .)
    NOT_EQ          reduce using rule 325 (builtinType -> USHORT .)
    AMPERSAND       reduce using rule 325 (builtinType -> USHORT .)
    CARET           reduce using rule 325 (builtinType -> USHORT .)
    PIPE            reduce using rule 325 (builtinType -> USHORT .)
    DOUBLE_AMPERSAND reduce using rule 325 (builtinType -> USHORT .)
    QUESTION        reduce using rule 325 (builtinType -> USHORT .)
    DOUBLE_PIPE     reduce using rule 325 (builtinType -> USHORT .)
    EQ_LEFT         reduce using rule 325 (builtinType -> USHORT .)
    EQ_RIGHT        reduce using rule 325 (builtinType -> USHORT .)
    EQ_PLUS         reduce using rule 325 (builtinType -> USHORT .)
    EQ_MINUS        reduce using rule 325 (builtinType -> USHORT .)
    EQ_TIMES        reduce using rule 325 (builtinType -> USHORT .)
    EQ_MODULO       reduce using rule 325 (builtinType -> USHORT .)
    EQ_AND_BIT      reduce using rule 325 (builtinType -> USHORT .)
    EQ_DIV          reduce using rule 325 (builtinType -> USHORT .)
    EQ_OR_BIT       reduce using rule 325 (builtinType -> USHORT .)
    EQ_XOR_BIT      reduce using rule 325 (builtinType -> USHORT .)
    LESS            reduce using rule 325 (builtinType -> USHORT .)
    LESS_EQ         reduce using rule 325 (builtinType -> USHORT .)
    GREATER         reduce using rule 325 (builtinType -> USHORT .)
    GREATER_EQ      reduce using rule 325 (builtinType -> USHORT .)
    IS_EQ_DIFF      reduce using rule 325 (builtinType -> USHORT .)
    NOT_EQ_DIFF     reduce using rule 325 (builtinType -> USHORT .)
    LESS_EQ_DIFF    reduce using rule 325 (builtinType -> USHORT .)
    LESS_DIFF       reduce using rule 325 (builtinType -> USHORT .)
    GREATER_EQ_DIFF reduce using rule 325 (builtinType -> USHORT .)
    GREATER_DIFF    reduce using rule 325 (builtinType -> USHORT .)
    RANGE           reduce using rule 325 (builtinType -> USHORT .)
    COLON           reduce using rule 325 (builtinType -> USHORT .)
    CONST           reduce using rule 325 (builtinType -> USHORT .)
    IMMUTABLE       reduce using rule 325 (builtinType -> USHORT .)
    RBRACE          reduce using rule 325 (builtinType -> USHORT .)
    THIS            reduce using rule 325 (builtinType -> USHORT .)
    BOOL            reduce using rule 325 (builtinType -> USHORT .)
    SHORT           reduce using rule 325 (builtinType -> USHORT .)
    USHORT          reduce using rule 325 (builtinType -> USHORT .)
    INT             reduce using rule 325 (builtinType -> USHORT .)
    UINT            reduce using rule 325 (builtinType -> USHORT .)
    LONG            reduce using rule 325 (builtinType -> USHORT .)
    ULONG           reduce using rule 325 (builtinType -> USHORT .)
    CHAR            reduce using rule 325 (builtinType -> USHORT .)
    FLOAT           reduce using rule 325 (builtinType -> USHORT .)
    TYPEOF          reduce using rule 325 (builtinType -> USHORT .)


state 99

    (331) builtinType -> FLOAT .

    COMMA           reduce using rule 331 (builtinType -> FLOAT .)
    LBRACE          reduce using rule 331 (builtinType -> FLOAT .)
    TIMES           reduce using rule 331 (builtinType -> FLOAT .)
    LBRACKET        reduce using rule 331 (builtinType -> FLOAT .)
    DELEGATE        reduce using rule 331 (builtinType -> FLOAT .)
    FUNCTION        reduce using rule 331 (builtinType -> FLOAT .)
    IDENTIFIER      reduce using rule 331 (builtinType -> FLOAT .)
    SEMICOLON       reduce using rule 331 (builtinType -> FLOAT .)
    DOT             reduce using rule 331 (builtinType -> FLOAT .)
    LPAREN          reduce using rule 331 (builtinType -> FLOAT .)
    RBRACKET        reduce using rule 331 (builtinType -> FLOAT .)
    RPAREN          reduce using rule 331 (builtinType -> FLOAT .)
    ELLIPSIS        reduce using rule 331 (builtinType -> FLOAT .)
    ASSIGN          reduce using rule 331 (builtinType -> FLOAT .)
    PLUS_PLUS       reduce using rule 331 (builtinType -> FLOAT .)
    MINUS_MINUS     reduce using rule 331 (builtinType -> FLOAT .)
    POWER           reduce using rule 331 (builtinType -> FLOAT .)
    DIV             reduce using rule 331 (builtinType -> FLOAT .)
    MODULO          reduce using rule 331 (builtinType -> FLOAT .)
    PLUS            reduce using rule 331 (builtinType -> FLOAT .)
    MINUS           reduce using rule 331 (builtinType -> FLOAT .)
    TILDE           reduce using rule 331 (builtinType -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 331 (builtinType -> FLOAT .)
    LEFT_SHIFT      reduce using rule 331 (builtinType -> FLOAT .)
    IS_EQ           reduce using rule 331 (builtinType -> FLOAT .)
    NOT_EQ          reduce using rule 331 (builtinType -> FLOAT .)
    AMPERSAND       reduce using rule 331 (builtinType -> FLOAT .)
    CARET           reduce using rule 331 (builtinType -> FLOAT .)
    PIPE            reduce using rule 331 (builtinType -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 331 (builtinType -> FLOAT .)
    QUESTION        reduce using rule 331 (builtinType -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 331 (builtinType -> FLOAT .)
    EQ_LEFT         reduce using rule 331 (builtinType -> FLOAT .)
    EQ_RIGHT        reduce using rule 331 (builtinType -> FLOAT .)
    EQ_PLUS         reduce using rule 331 (builtinType -> FLOAT .)
    EQ_MINUS        reduce using rule 331 (builtinType -> FLOAT .)
    EQ_TIMES        reduce using rule 331 (builtinType -> FLOAT .)
    EQ_MODULO       reduce using rule 331 (builtinType -> FLOAT .)
    EQ_AND_BIT      reduce using rule 331 (builtinType -> FLOAT .)
    EQ_DIV          reduce using rule 331 (builtinType -> FLOAT .)
    EQ_OR_BIT       reduce using rule 331 (builtinType -> FLOAT .)
    EQ_XOR_BIT      reduce using rule 331 (builtinType -> FLOAT .)
    LESS            reduce using rule 331 (builtinType -> FLOAT .)
    LESS_EQ         reduce using rule 331 (builtinType -> FLOAT .)
    GREATER         reduce using rule 331 (builtinType -> FLOAT .)
    GREATER_EQ      reduce using rule 331 (builtinType -> FLOAT .)
    IS_EQ_DIFF      reduce using rule 331 (builtinType -> FLOAT .)
    NOT_EQ_DIFF     reduce using rule 331 (builtinType -> FLOAT .)
    LESS_EQ_DIFF    reduce using rule 331 (builtinType -> FLOAT .)
    LESS_DIFF       reduce using rule 331 (builtinType -> FLOAT .)
    GREATER_EQ_DIFF reduce using rule 331 (builtinType -> FLOAT .)
    GREATER_DIFF    reduce using rule 331 (builtinType -> FLOAT .)
    RANGE           reduce using rule 331 (builtinType -> FLOAT .)
    COLON           reduce using rule 331 (builtinType -> FLOAT .)
    CONST           reduce using rule 331 (builtinType -> FLOAT .)
    IMMUTABLE       reduce using rule 331 (builtinType -> FLOAT .)
    RBRACE          reduce using rule 331 (builtinType -> FLOAT .)
    THIS            reduce using rule 331 (builtinType -> FLOAT .)
    BOOL            reduce using rule 331 (builtinType -> FLOAT .)
    SHORT           reduce using rule 331 (builtinType -> FLOAT .)
    USHORT          reduce using rule 331 (builtinType -> FLOAT .)
    INT             reduce using rule 331 (builtinType -> FLOAT .)
    UINT            reduce using rule 331 (builtinType -> FLOAT .)
    LONG            reduce using rule 331 (builtinType -> FLOAT .)
    ULONG           reduce using rule 331 (builtinType -> FLOAT .)
    CHAR            reduce using rule 331 (builtinType -> FLOAT .)
    FLOAT           reduce using rule 331 (builtinType -> FLOAT .)
    TYPEOF          reduce using rule 331 (builtinType -> FLOAT .)


state 100

    (326) builtinType -> INT .

    COMMA           reduce using rule 326 (builtinType -> INT .)
    LBRACE          reduce using rule 326 (builtinType -> INT .)
    TIMES           reduce using rule 326 (builtinType -> INT .)
    LBRACKET        reduce using rule 326 (builtinType -> INT .)
    DELEGATE        reduce using rule 326 (builtinType -> INT .)
    FUNCTION        reduce using rule 326 (builtinType -> INT .)
    IDENTIFIER      reduce using rule 326 (builtinType -> INT .)
    SEMICOLON       reduce using rule 326 (builtinType -> INT .)
    DOT             reduce using rule 326 (builtinType -> INT .)
    LPAREN          reduce using rule 326 (builtinType -> INT .)
    RBRACKET        reduce using rule 326 (builtinType -> INT .)
    RPAREN          reduce using rule 326 (builtinType -> INT .)
    ELLIPSIS        reduce using rule 326 (builtinType -> INT .)
    ASSIGN          reduce using rule 326 (builtinType -> INT .)
    PLUS_PLUS       reduce using rule 326 (builtinType -> INT .)
    MINUS_MINUS     reduce using rule 326 (builtinType -> INT .)
    POWER           reduce using rule 326 (builtinType -> INT .)
    DIV             reduce using rule 326 (builtinType -> INT .)
    MODULO          reduce using rule 326 (builtinType -> INT .)
    PLUS            reduce using rule 326 (builtinType -> INT .)
    MINUS           reduce using rule 326 (builtinType -> INT .)
    TILDE           reduce using rule 326 (builtinType -> INT .)
    RIGHT_SHIFT     reduce using rule 326 (builtinType -> INT .)
    LEFT_SHIFT      reduce using rule 326 (builtinType -> INT .)
    IS_EQ           reduce using rule 326 (builtinType -> INT .)
    NOT_EQ          reduce using rule 326 (builtinType -> INT .)
    AMPERSAND       reduce using rule 326 (builtinType -> INT .)
    CARET           reduce using rule 326 (builtinType -> INT .)
    PIPE            reduce using rule 326 (builtinType -> INT .)
    DOUBLE_AMPERSAND reduce using rule 326 (builtinType -> INT .)
    QUESTION        reduce using rule 326 (builtinType -> INT .)
    DOUBLE_PIPE     reduce using rule 326 (builtinType -> INT .)
    EQ_LEFT         reduce using rule 326 (builtinType -> INT .)
    EQ_RIGHT        reduce using rule 326 (builtinType -> INT .)
    EQ_PLUS         reduce using rule 326 (builtinType -> INT .)
    EQ_MINUS        reduce using rule 326 (builtinType -> INT .)
    EQ_TIMES        reduce using rule 326 (builtinType -> INT .)
    EQ_MODULO       reduce using rule 326 (builtinType -> INT .)
    EQ_AND_BIT      reduce using rule 326 (builtinType -> INT .)
    EQ_DIV          reduce using rule 326 (builtinType -> INT .)
    EQ_OR_BIT       reduce using rule 326 (builtinType -> INT .)
    EQ_XOR_BIT      reduce using rule 326 (builtinType -> INT .)
    LESS            reduce using rule 326 (builtinType -> INT .)
    LESS_EQ         reduce using rule 326 (builtinType -> INT .)
    GREATER         reduce using rule 326 (builtinType -> INT .)
    GREATER_EQ      reduce using rule 326 (builtinType -> INT .)
    IS_EQ_DIFF      reduce using rule 326 (builtinType -> INT .)
    NOT_EQ_DIFF     reduce using rule 326 (builtinType -> INT .)
    LESS_EQ_DIFF    reduce using rule 326 (builtinType -> INT .)
    LESS_DIFF       reduce using rule 326 (builtinType -> INT .)
    GREATER_EQ_DIFF reduce using rule 326 (builtinType -> INT .)
    GREATER_DIFF    reduce using rule 326 (builtinType -> INT .)
    RANGE           reduce using rule 326 (builtinType -> INT .)
    COLON           reduce using rule 326 (builtinType -> INT .)
    CONST           reduce using rule 326 (builtinType -> INT .)
    IMMUTABLE       reduce using rule 326 (builtinType -> INT .)
    RBRACE          reduce using rule 326 (builtinType -> INT .)
    THIS            reduce using rule 326 (builtinType -> INT .)
    BOOL            reduce using rule 326 (builtinType -> INT .)
    SHORT           reduce using rule 326 (builtinType -> INT .)
    USHORT          reduce using rule 326 (builtinType -> INT .)
    INT             reduce using rule 326 (builtinType -> INT .)
    UINT            reduce using rule 326 (builtinType -> INT .)
    LONG            reduce using rule 326 (builtinType -> INT .)
    ULONG           reduce using rule 326 (builtinType -> INT .)
    CHAR            reduce using rule 326 (builtinType -> INT .)
    FLOAT           reduce using rule 326 (builtinType -> INT .)
    TYPEOF          reduce using rule 326 (builtinType -> INT .)


state 101

    (323) builtinType -> BOOL .

    COMMA           reduce using rule 323 (builtinType -> BOOL .)
    LBRACE          reduce using rule 323 (builtinType -> BOOL .)
    TIMES           reduce using rule 323 (builtinType -> BOOL .)
    LBRACKET        reduce using rule 323 (builtinType -> BOOL .)
    DELEGATE        reduce using rule 323 (builtinType -> BOOL .)
    FUNCTION        reduce using rule 323 (builtinType -> BOOL .)
    IDENTIFIER      reduce using rule 323 (builtinType -> BOOL .)
    SEMICOLON       reduce using rule 323 (builtinType -> BOOL .)
    DOT             reduce using rule 323 (builtinType -> BOOL .)
    LPAREN          reduce using rule 323 (builtinType -> BOOL .)
    RBRACKET        reduce using rule 323 (builtinType -> BOOL .)
    RPAREN          reduce using rule 323 (builtinType -> BOOL .)
    ELLIPSIS        reduce using rule 323 (builtinType -> BOOL .)
    ASSIGN          reduce using rule 323 (builtinType -> BOOL .)
    PLUS_PLUS       reduce using rule 323 (builtinType -> BOOL .)
    MINUS_MINUS     reduce using rule 323 (builtinType -> BOOL .)
    POWER           reduce using rule 323 (builtinType -> BOOL .)
    DIV             reduce using rule 323 (builtinType -> BOOL .)
    MODULO          reduce using rule 323 (builtinType -> BOOL .)
    PLUS            reduce using rule 323 (builtinType -> BOOL .)
    MINUS           reduce using rule 323 (builtinType -> BOOL .)
    TILDE           reduce using rule 323 (builtinType -> BOOL .)
    RIGHT_SHIFT     reduce using rule 323 (builtinType -> BOOL .)
    LEFT_SHIFT      reduce using rule 323 (builtinType -> BOOL .)
    IS_EQ           reduce using rule 323 (builtinType -> BOOL .)
    NOT_EQ          reduce using rule 323 (builtinType -> BOOL .)
    AMPERSAND       reduce using rule 323 (builtinType -> BOOL .)
    CARET           reduce using rule 323 (builtinType -> BOOL .)
    PIPE            reduce using rule 323 (builtinType -> BOOL .)
    DOUBLE_AMPERSAND reduce using rule 323 (builtinType -> BOOL .)
    QUESTION        reduce using rule 323 (builtinType -> BOOL .)
    DOUBLE_PIPE     reduce using rule 323 (builtinType -> BOOL .)
    EQ_LEFT         reduce using rule 323 (builtinType -> BOOL .)
    EQ_RIGHT        reduce using rule 323 (builtinType -> BOOL .)
    EQ_PLUS         reduce using rule 323 (builtinType -> BOOL .)
    EQ_MINUS        reduce using rule 323 (builtinType -> BOOL .)
    EQ_TIMES        reduce using rule 323 (builtinType -> BOOL .)
    EQ_MODULO       reduce using rule 323 (builtinType -> BOOL .)
    EQ_AND_BIT      reduce using rule 323 (builtinType -> BOOL .)
    EQ_DIV          reduce using rule 323 (builtinType -> BOOL .)
    EQ_OR_BIT       reduce using rule 323 (builtinType -> BOOL .)
    EQ_XOR_BIT      reduce using rule 323 (builtinType -> BOOL .)
    LESS            reduce using rule 323 (builtinType -> BOOL .)
    LESS_EQ         reduce using rule 323 (builtinType -> BOOL .)
    GREATER         reduce using rule 323 (builtinType -> BOOL .)
    GREATER_EQ      reduce using rule 323 (builtinType -> BOOL .)
    IS_EQ_DIFF      reduce using rule 323 (builtinType -> BOOL .)
    NOT_EQ_DIFF     reduce using rule 323 (builtinType -> BOOL .)
    LESS_EQ_DIFF    reduce using rule 323 (builtinType -> BOOL .)
    LESS_DIFF       reduce using rule 323 (builtinType -> BOOL .)
    GREATER_EQ_DIFF reduce using rule 323 (builtinType -> BOOL .)
    GREATER_DIFF    reduce using rule 323 (builtinType -> BOOL .)
    RANGE           reduce using rule 323 (builtinType -> BOOL .)
    COLON           reduce using rule 323 (builtinType -> BOOL .)
    CONST           reduce using rule 323 (builtinType -> BOOL .)
    IMMUTABLE       reduce using rule 323 (builtinType -> BOOL .)
    RBRACE          reduce using rule 323 (builtinType -> BOOL .)
    THIS            reduce using rule 323 (builtinType -> BOOL .)
    BOOL            reduce using rule 323 (builtinType -> BOOL .)
    SHORT           reduce using rule 323 (builtinType -> BOOL .)
    USHORT          reduce using rule 323 (builtinType -> BOOL .)
    INT             reduce using rule 323 (builtinType -> BOOL .)
    UINT            reduce using rule 323 (builtinType -> BOOL .)
    LONG            reduce using rule 323 (builtinType -> BOOL .)
    ULONG           reduce using rule 323 (builtinType -> BOOL .)
    CHAR            reduce using rule 323 (builtinType -> BOOL .)
    FLOAT           reduce using rule 323 (builtinType -> BOOL .)
    TYPEOF          reduce using rule 323 (builtinType -> BOOL .)


state 102

    (237) typeofExpression -> TYPEOF . LPAREN expression RPAREN
    (238) typeofExpression -> TYPEOF . LPAREN RETURN RPAREN

    LPAREN          shift and go to state 160


state 103

    (219) type2 -> typeConstructor . LPAREN type RPAREN

    LPAREN          shift and go to state 161


state 104

    (97) storageClass -> STATIC .

    AUTO            reduce using rule 97 (storageClass -> STATIC .)
    ENUM            reduce using rule 97 (storageClass -> STATIC .)
    EXTERN          reduce using rule 97 (storageClass -> STATIC .)
    FINAL           reduce using rule 97 (storageClass -> STATIC .)
    STATIC          reduce using rule 97 (storageClass -> STATIC .)
    CONST           reduce using rule 97 (storageClass -> STATIC .)
    IMMUTABLE       reduce using rule 97 (storageClass -> STATIC .)
    THIS            reduce using rule 97 (storageClass -> STATIC .)
    BOOL            reduce using rule 97 (storageClass -> STATIC .)
    SHORT           reduce using rule 97 (storageClass -> STATIC .)
    USHORT          reduce using rule 97 (storageClass -> STATIC .)
    INT             reduce using rule 97 (storageClass -> STATIC .)
    UINT            reduce using rule 97 (storageClass -> STATIC .)
    LONG            reduce using rule 97 (storageClass -> STATIC .)
    ULONG           reduce using rule 97 (storageClass -> STATIC .)
    CHAR            reduce using rule 97 (storageClass -> STATIC .)
    FLOAT           reduce using rule 97 (storageClass -> STATIC .)
    TYPEOF          reduce using rule 97 (storageClass -> STATIC .)
    IDENTIFIER      reduce using rule 97 (storageClass -> STATIC .)
    DOUBLE          reduce using rule 97 (storageClass -> STATIC .)


state 105

    (95) storageClass -> EXTERN .

    AUTO            reduce using rule 95 (storageClass -> EXTERN .)
    ENUM            reduce using rule 95 (storageClass -> EXTERN .)
    EXTERN          reduce using rule 95 (storageClass -> EXTERN .)
    FINAL           reduce using rule 95 (storageClass -> EXTERN .)
    STATIC          reduce using rule 95 (storageClass -> EXTERN .)
    CONST           reduce using rule 95 (storageClass -> EXTERN .)
    IMMUTABLE       reduce using rule 95 (storageClass -> EXTERN .)
    THIS            reduce using rule 95 (storageClass -> EXTERN .)
    BOOL            reduce using rule 95 (storageClass -> EXTERN .)
    SHORT           reduce using rule 95 (storageClass -> EXTERN .)
    USHORT          reduce using rule 95 (storageClass -> EXTERN .)
    INT             reduce using rule 95 (storageClass -> EXTERN .)
    UINT            reduce using rule 95 (storageClass -> EXTERN .)
    LONG            reduce using rule 95 (storageClass -> EXTERN .)
    ULONG           reduce using rule 95 (storageClass -> EXTERN .)
    CHAR            reduce using rule 95 (storageClass -> EXTERN .)
    FLOAT           reduce using rule 95 (storageClass -> EXTERN .)
    TYPEOF          reduce using rule 95 (storageClass -> EXTERN .)
    IDENTIFIER      reduce using rule 95 (storageClass -> EXTERN .)
    DOUBLE          reduce using rule 95 (storageClass -> EXTERN .)


state 106

    (96) storageClass -> FINAL .

    AUTO            reduce using rule 96 (storageClass -> FINAL .)
    ENUM            reduce using rule 96 (storageClass -> FINAL .)
    EXTERN          reduce using rule 96 (storageClass -> FINAL .)
    FINAL           reduce using rule 96 (storageClass -> FINAL .)
    STATIC          reduce using rule 96 (storageClass -> FINAL .)
    CONST           reduce using rule 96 (storageClass -> FINAL .)
    IMMUTABLE       reduce using rule 96 (storageClass -> FINAL .)
    THIS            reduce using rule 96 (storageClass -> FINAL .)
    BOOL            reduce using rule 96 (storageClass -> FINAL .)
    SHORT           reduce using rule 96 (storageClass -> FINAL .)
    USHORT          reduce using rule 96 (storageClass -> FINAL .)
    INT             reduce using rule 96 (storageClass -> FINAL .)
    UINT            reduce using rule 96 (storageClass -> FINAL .)
    LONG            reduce using rule 96 (storageClass -> FINAL .)
    ULONG           reduce using rule 96 (storageClass -> FINAL .)
    CHAR            reduce using rule 96 (storageClass -> FINAL .)
    FLOAT           reduce using rule 96 (storageClass -> FINAL .)
    TYPEOF          reduce using rule 96 (storageClass -> FINAL .)
    IDENTIFIER      reduce using rule 96 (storageClass -> FINAL .)
    DOUBLE          reduce using rule 96 (storageClass -> FINAL .)


state 107

    (93) storageClass -> AUTO .

    AUTO            reduce using rule 93 (storageClass -> AUTO .)
    ENUM            reduce using rule 93 (storageClass -> AUTO .)
    EXTERN          reduce using rule 93 (storageClass -> AUTO .)
    FINAL           reduce using rule 93 (storageClass -> AUTO .)
    STATIC          reduce using rule 93 (storageClass -> AUTO .)
    CONST           reduce using rule 93 (storageClass -> AUTO .)
    IMMUTABLE       reduce using rule 93 (storageClass -> AUTO .)
    THIS            reduce using rule 93 (storageClass -> AUTO .)
    BOOL            reduce using rule 93 (storageClass -> AUTO .)
    SHORT           reduce using rule 93 (storageClass -> AUTO .)
    USHORT          reduce using rule 93 (storageClass -> AUTO .)
    INT             reduce using rule 93 (storageClass -> AUTO .)
    UINT            reduce using rule 93 (storageClass -> AUTO .)
    LONG            reduce using rule 93 (storageClass -> AUTO .)
    ULONG           reduce using rule 93 (storageClass -> AUTO .)
    CHAR            reduce using rule 93 (storageClass -> AUTO .)
    FLOAT           reduce using rule 93 (storageClass -> AUTO .)
    TYPEOF          reduce using rule 93 (storageClass -> AUTO .)
    IDENTIFIER      reduce using rule 93 (storageClass -> AUTO .)
    DOUBLE          reduce using rule 93 (storageClass -> AUTO .)


state 108

    (199) aliasThisDeclaration -> ALIAS IDENTIFIER . THIS SEMICOLON
    (197) aliasInitializer -> IDENTIFIER . ASSIGN multiplestorageClass type
    (198) aliasInitializer -> IDENTIFIER . ASSIGN functionLiteralExpression SEMICOLON

    THIS            shift and go to state 162
    ASSIGN          shift and go to state 163


state 109

    (196) multiplestorageClass -> empty .

    CONST           reduce using rule 196 (multiplestorageClass -> empty .)
    IMMUTABLE       reduce using rule 196 (multiplestorageClass -> empty .)
    THIS            reduce using rule 196 (multiplestorageClass -> empty .)
    BOOL            reduce using rule 196 (multiplestorageClass -> empty .)
    SHORT           reduce using rule 196 (multiplestorageClass -> empty .)
    USHORT          reduce using rule 196 (multiplestorageClass -> empty .)
    INT             reduce using rule 196 (multiplestorageClass -> empty .)
    UINT            reduce using rule 196 (multiplestorageClass -> empty .)
    LONG            reduce using rule 196 (multiplestorageClass -> empty .)
    ULONG           reduce using rule 196 (multiplestorageClass -> empty .)
    CHAR            reduce using rule 196 (multiplestorageClass -> empty .)
    FLOAT           reduce using rule 196 (multiplestorageClass -> empty .)
    TYPEOF          reduce using rule 196 (multiplestorageClass -> empty .)
    IDENTIFIER      reduce using rule 196 (multiplestorageClass -> empty .)
    DOUBLE          reduce using rule 196 (multiplestorageClass -> empty .)


state 110

    (183) aliasDeclaration -> ALIAS multiplestorageClass . type declaratorIdentifierList SEMICOLON
    (184) aliasDeclaration -> ALIAS multiplestorageClass . type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    typeConstructors               shift and go to state 34
    type                           shift and go to state 164
    empty                          shift and go to state 139

state 111

    (94) storageClass -> ENUM .

    AUTO            reduce using rule 94 (storageClass -> ENUM .)
    ENUM            reduce using rule 94 (storageClass -> ENUM .)
    EXTERN          reduce using rule 94 (storageClass -> ENUM .)
    FINAL           reduce using rule 94 (storageClass -> ENUM .)
    STATIC          reduce using rule 94 (storageClass -> ENUM .)
    CONST           reduce using rule 94 (storageClass -> ENUM .)
    IMMUTABLE       reduce using rule 94 (storageClass -> ENUM .)
    THIS            reduce using rule 94 (storageClass -> ENUM .)
    BOOL            reduce using rule 94 (storageClass -> ENUM .)
    SHORT           reduce using rule 94 (storageClass -> ENUM .)
    USHORT          reduce using rule 94 (storageClass -> ENUM .)
    INT             reduce using rule 94 (storageClass -> ENUM .)
    UINT            reduce using rule 94 (storageClass -> ENUM .)
    LONG            reduce using rule 94 (storageClass -> ENUM .)
    ULONG           reduce using rule 94 (storageClass -> ENUM .)
    CHAR            reduce using rule 94 (storageClass -> ENUM .)
    FLOAT           reduce using rule 94 (storageClass -> ENUM .)
    TYPEOF          reduce using rule 94 (storageClass -> ENUM .)
    IDENTIFIER      reduce using rule 94 (storageClass -> ENUM .)
    DOUBLE          reduce using rule 94 (storageClass -> ENUM .)


state 112

    (182) aliasDeclaration -> ALIAS aliasInitializer . comma_aliasInitializer SEMICOLON
    (193) comma_aliasInitializer -> . COMMA aliasInitializer comma_aliasInitializer
    (194) comma_aliasInitializer -> . empty
    (397) empty -> .

    COMMA           shift and go to state 166
    SEMICOLON       reduce using rule 397 (empty -> .)

    comma_aliasInitializer         shift and go to state 165
    empty                          shift and go to state 167

state 113

    (195) multiplestorageClass -> storageClass . multiplestorageClass
    (195) multiplestorageClass -> . storageClass multiplestorageClass
    (196) multiplestorageClass -> . empty
    (92) storageClass -> . typeConstructor
    (93) storageClass -> . AUTO
    (94) storageClass -> . ENUM
    (95) storageClass -> . EXTERN
    (96) storageClass -> . FINAL
    (97) storageClass -> . STATIC
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    AUTO            shift and go to state 107
    ENUM            shift and go to state 111
    EXTERN          shift and go to state 105
    FINAL           shift and go to state 106
    STATIC          shift and go to state 104
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multiplestorageClass           shift and go to state 168
    typeConstructor                shift and go to state 114
    storageClass                   shift and go to state 113
    empty                          shift and go to state 109

state 114

    (92) storageClass -> typeConstructor .

    AUTO            reduce using rule 92 (storageClass -> typeConstructor .)
    ENUM            reduce using rule 92 (storageClass -> typeConstructor .)
    EXTERN          reduce using rule 92 (storageClass -> typeConstructor .)
    FINAL           reduce using rule 92 (storageClass -> typeConstructor .)
    STATIC          reduce using rule 92 (storageClass -> typeConstructor .)
    CONST           reduce using rule 92 (storageClass -> typeConstructor .)
    IMMUTABLE       reduce using rule 92 (storageClass -> typeConstructor .)
    THIS            reduce using rule 92 (storageClass -> typeConstructor .)
    BOOL            reduce using rule 92 (storageClass -> typeConstructor .)
    SHORT           reduce using rule 92 (storageClass -> typeConstructor .)
    USHORT          reduce using rule 92 (storageClass -> typeConstructor .)
    INT             reduce using rule 92 (storageClass -> typeConstructor .)
    UINT            reduce using rule 92 (storageClass -> typeConstructor .)
    LONG            reduce using rule 92 (storageClass -> typeConstructor .)
    ULONG           reduce using rule 92 (storageClass -> typeConstructor .)
    CHAR            reduce using rule 92 (storageClass -> typeConstructor .)
    FLOAT           reduce using rule 92 (storageClass -> typeConstructor .)
    TYPEOF          reduce using rule 92 (storageClass -> typeConstructor .)
    IDENTIFIER      reduce using rule 92 (storageClass -> typeConstructor .)
    DOUBLE          reduce using rule 92 (storageClass -> typeConstructor .)


state 115

    (114) mixinDeclaration -> mixinExpression SEMICOLON .

    PRIVATE         reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    PROTECTED       reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    PUBLIC          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    STATIC          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    EXTERN          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FINAL           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    AUTO            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CONST           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IMMUTABLE       reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ALIAS           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ENUM            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CLASS           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    THIS            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TILDE           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IMPORT          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UNION           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    MIXIN           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CHAR            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    INT             reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UINT            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LONG            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FLOAT           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DOUBLE          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    BOOL            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    SHORT           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    USHORT          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ULONG           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TYPEOF          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IDENTIFIER      reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    $end            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    RBRACE          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CASE            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DEFAULT         reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LBRACE          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    IF              reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    WHILE           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DO              reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FOR             reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FOREACH         reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    SWITCH          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CONTINUE        reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    BREAK           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    RETURN          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    GOTO            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    WITH            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UAMPERSAND      reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    EXCLAMATION     reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UTIMES          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UPLUS           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    UMINUS          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    PLUS_PLUS       reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    MINUS_MINUS     reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LPAREN          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DOT             reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DOLLAR          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    NULL            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    TRUE            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FALSE           reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    INUMBER         reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DNUMBER         reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LIT_CHAR        reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    NEW             reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    DELETE          reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    CAST            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LBRACKET        reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    FUNCTION        reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    LIT_STR         reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    SEMICOLON       reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)
    ELSE            reduce using rule 114 (mixinDeclaration -> mixinExpression SEMICOLON .)


state 116

    (151) constructor -> THIS parameters . multiple_memberFunctionAttribute functionBody
    (152) constructor -> THIS parameters . multiple_memberFunctionAttribute SEMICOLON
    (153) constructor -> THIS parameters . multiple_memberFunctionAttribute constraint functionBody
    (154) constructor -> THIS parameters . multiple_memberFunctionAttribute constraint SEMICOLON
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    SEMICOLON       reduce using rule 397 (empty -> .)
    IF              reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 170
    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174

state 117

    (132) parameters -> LPAREN . parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> LPAREN . parameter CommaParameterStar RPAREN
    (134) parameters -> LPAREN . ELLIPSIS RPAREN
    (135) parameters -> LPAREN . RPAREN
    (136) parameter -> . parameterAttributeStar type Identifier_question ELLIPSIS
    (137) parameter -> . parameterAttributeStar type Identifier_question
    (138) parameter -> . parameterAttributeStar type Identifier_question ASSIGN assignExpression
    (141) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (142) parameterAttributeStar -> . empty
    (143) parameterAttribute -> . typeConstructor
    (144) parameterAttribute -> . FINAL
    (145) parameterAttribute -> . AUTO
    (146) parameterAttribute -> . RETURN
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    ELLIPSIS        shift and go to state 180
    RPAREN          shift and go to state 181
    FINAL           shift and go to state 175
    AUTO            shift and go to state 176
    RETURN          shift and go to state 179
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    parameterAttribute             shift and go to state 177
    parameterAttributeStar         shift and go to state 178
    typeConstructor                shift and go to state 182
    parameter                      shift and go to state 183
    empty                          shift and go to state 184

state 118

    (147) functionDeclaration -> storageClass multiplestorageClass . IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON
    (148) functionDeclaration -> storageClass multiplestorageClass . IDENTIFIER parameters multiple_memberFunctionAttribute functionBody
    (195) multiplestorageClass -> storageClass multiplestorageClass .
    (77) autoDeclaration -> storageClass multiplestorageClass . autoDeclarationPart comma_identifier_assign_initializer SEMICOLON
    (78) autoDeclarationPart -> . IDENTIFIER ASSIGN initializer

    IDENTIFIER      shift and go to state 186
    CHAR            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    INT             reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    UINT            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    LONG            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    FLOAT           reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    DOUBLE          reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)

    autoDeclarationPart            shift and go to state 185

state 119

    (348) mixinExpression -> MIXIN LPAREN . assignExpression RPAREN
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 206
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 120

    (63) declaration -> attribute multipleattributes LBRACE . multiple_declaration RBRACE
    (3) multiple_declaration -> . declaration multiple_declaration
    (4) multiple_declaration -> . empty
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (397) empty -> .
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACE          reduce using rule 397 (empty -> .)
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    IMPORT          reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    MIXIN           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 3
    IMMUTABLE       shift and go to state 1

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multipleattributes             shift and go to state 4
    attribute                      shift and go to state 5
    declaration                    shift and go to state 10
    multiple_declaration           shift and go to state 247
    empty                          shift and go to state 15

state 121

    (200) multipleattributes -> attribute multipleattributes .

    LBRACE          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    ALIAS           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    ENUM            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    CLASS           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    THIS            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    TILDE           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    IMPORT          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    UNION           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    PRIVATE         reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    PROTECTED       reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    PUBLIC          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    STATIC          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    EXTERN          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    FINAL           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    AUTO            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    CONST           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    IMMUTABLE       reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    MIXIN           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    CHAR            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    INT             reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    UINT            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    LONG            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    FLOAT           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    DOUBLE          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    BOOL            reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    SHORT           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    USHORT          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    ULONG           reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    TYPEOF          reduce using rule 200 (multipleattributes -> attribute multipleattributes .)
    IDENTIFIER      reduce using rule 200 (multipleattributes -> attribute multipleattributes .)


state 122

    (225) multiple_typeConstructors -> typeConstructor multiple_typeConstructors .

    THIS            reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    BOOL            reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    SHORT           reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    USHORT          reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    INT             reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    UINT            reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    LONG            reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    ULONG           reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    CHAR            reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    FLOAT           reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    TYPEOF          reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    CONST           reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    IMMUTABLE       reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)
    IDENTIFIER      reduce using rule 225 (multiple_typeConstructors -> typeConstructor multiple_typeConstructors .)


state 123

    (161) destructor -> TILDE THIS LPAREN . RPAREN multiple_memberFunctionAttribute functionBody
    (162) destructor -> TILDE THIS LPAREN . RPAREN multiple_memberFunctionAttribute SEMICOLON

    RPAREN          shift and go to state 248


state 124

    (117) importDeclaration -> IMPORT importBindings SEMICOLON .

    PRIVATE         reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    PROTECTED       reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    PUBLIC          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    STATIC          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    EXTERN          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FINAL           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    AUTO            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CONST           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IMMUTABLE       reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ALIAS           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ENUM            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CLASS           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    THIS            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TILDE           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IMPORT          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UNION           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    MIXIN           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CHAR            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    INT             reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UINT            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LONG            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FLOAT           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DOUBLE          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    BOOL            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    SHORT           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    USHORT          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ULONG           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TYPEOF          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IDENTIFIER      reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    $end            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    RBRACE          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CASE            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DEFAULT         reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LBRACE          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    IF              reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    WHILE           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DO              reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FOR             reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FOREACH         reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FOREACH_REVERSE reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    SWITCH          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CONTINUE        reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    BREAK           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    RETURN          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    GOTO            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    WITH            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UAMPERSAND      reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    EXCLAMATION     reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UTIMES          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UPLUS           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    UMINUS          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    PLUS_PLUS       reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    MINUS_MINUS     reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LPAREN          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DOT             reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DOLLAR          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    NULL            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    TRUE            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FALSE           reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    INUMBER         reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DNUMBER         reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LIT_CHAR        reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    NEW             reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    DELETE          reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    CAST            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LBRACKET        reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    FUNCTION        reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    LIT_STR         reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    SEMICOLON       reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)
    ELSE            reduce using rule 117 (importDeclaration -> IMPORT importBindings SEMICOLON .)


state 125

    (124) importBindings -> singleImport COLON . importBind importBindstr
    (122) importBind -> . IDENTIFIER
    (123) importBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 250

    importBind                     shift and go to state 249

state 126

    (118) comma_singleImport -> COMMA . singleImport comma_singleImport
    (120) singleImport -> . IDENTIFIER ASSIGN identifierChain
    (121) singleImport -> . identifierChain
    (127) identifierChain -> . IDENTIFIER multiple_dot_identifier

    IDENTIFIER      shift and go to state 69

    identifierChain                shift and go to state 67
    singleImport                   shift and go to state 251

state 127

    (115) importDeclaration -> IMPORT singleImport comma_singleImport . COMMA importBindings SEMICOLON
    (116) importDeclaration -> IMPORT singleImport comma_singleImport . SEMICOLON

    COMMA           shift and go to state 253
    SEMICOLON       shift and go to state 252


state 128

    (119) comma_singleImport -> empty .

    COMMA           reduce using rule 119 (comma_singleImport -> empty .)
    SEMICOLON       reduce using rule 119 (comma_singleImport -> empty .)


state 129

    (127) identifierChain -> IDENTIFIER multiple_dot_identifier .

    COLON           reduce using rule 127 (identifierChain -> IDENTIFIER multiple_dot_identifier .)
    COMMA           reduce using rule 127 (identifierChain -> IDENTIFIER multiple_dot_identifier .)
    SEMICOLON       reduce using rule 127 (identifierChain -> IDENTIFIER multiple_dot_identifier .)


state 130

    (128) multiple_dot_identifier -> DOT . IDENTIFIER multiple_dot_identifier

    IDENTIFIER      shift and go to state 254


state 131

    (120) singleImport -> IDENTIFIER ASSIGN . identifierChain
    (127) identifierChain -> . IDENTIFIER multiple_dot_identifier

    IDENTIFIER      shift and go to state 255

    identifierChain                shift and go to state 256

state 132

    (129) multiple_dot_identifier -> empty .

    COLON           reduce using rule 129 (multiple_dot_identifier -> empty .)
    COMMA           reduce using rule 129 (multiple_dot_identifier -> empty .)
    SEMICOLON       reduce using rule 129 (multiple_dot_identifier -> empty .)


state 133

    (149) functionDeclaration -> type IDENTIFIER parameters . multiple_memberFunctionAttribute SEMICOLON
    (150) functionDeclaration -> type IDENTIFIER parameters . multiple_memberFunctionAttribute functionBody
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    SEMICOLON       reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 257
    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174

state 134

    (179) classDeclaration -> CLASS IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INT             reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    $end            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    IF              reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DO              reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UTIMES          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 179 (classDeclaration -> CLASS IDENTIFIER SEMICOLON .)


state 135

    (180) classDeclaration -> CLASS IDENTIFIER COLON . baseClassList structBody
    (212) baseClassList -> . baseClass comma_baseclass_multiple
    (211) baseClass -> . type2
    (215) type2 -> . builtinType
    (216) type2 -> . typeIdentifierPart
    (217) type2 -> . THIS DOT typeIdentifierPart
    (218) type2 -> . typeofExpression typeIdentifierPart_question
    (219) type2 -> . typeConstructor LPAREN type RPAREN
    (323) builtinType -> . BOOL
    (324) builtinType -> . SHORT
    (325) builtinType -> . USHORT
    (326) builtinType -> . INT
    (327) builtinType -> . UINT
    (328) builtinType -> . LONG
    (329) builtinType -> . ULONG
    (330) builtinType -> . CHAR
    (331) builtinType -> . FLOAT
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (237) typeofExpression -> . TYPEOF LPAREN expression RPAREN
    (238) typeofExpression -> . TYPEOF LPAREN RETURN RPAREN
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    THIS            shift and go to state 97
    BOOL            shift and go to state 101
    SHORT           shift and go to state 86
    USHORT          shift and go to state 98
    INT             shift and go to state 100
    UINT            shift and go to state 96
    LONG            shift and go to state 91
    ULONG           shift and go to state 90
    CHAR            shift and go to state 87
    FLOAT           shift and go to state 99
    TYPEOF          shift and go to state 102
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 93

    typeIdentifierPart             shift and go to state 95
    builtinType                    shift and go to state 94
    baseClassList                  shift and go to state 260
    typeofExpression               shift and go to state 88
    identifierOrTemplateInstance   shift and go to state 92
    typeConstructor                shift and go to state 103
    baseClass                      shift and go to state 259
    type2                          shift and go to state 258

state 136

    (181) classDeclaration -> CLASS IDENTIFIER structBody .

    PRIVATE         reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    PROTECTED       reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    PUBLIC          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    STATIC          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    EXTERN          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FINAL           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    AUTO            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CONST           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IMMUTABLE       reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ALIAS           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ENUM            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CLASS           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    THIS            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TILDE           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IMPORT          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UNION           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    MIXIN           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CHAR            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    INT             reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UINT            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LONG            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FLOAT           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DOUBLE          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    BOOL            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    SHORT           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    USHORT          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ULONG           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TYPEOF          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IDENTIFIER      reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    $end            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    RBRACE          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CASE            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DEFAULT         reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LBRACE          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    IF              reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    WHILE           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DO              reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FOR             reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FOREACH         reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FOREACH_REVERSE reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    SWITCH          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CONTINUE        reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    BREAK           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    RETURN          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    GOTO            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    WITH            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UAMPERSAND      reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    EXCLAMATION     reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UTIMES          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UPLUS           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    UMINUS          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    PLUS_PLUS       reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    MINUS_MINUS     reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LPAREN          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DOT             reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DOLLAR          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    NULL            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    TRUE            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FALSE           reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    INUMBER         reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DNUMBER         reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LIT_CHAR        reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    NEW             reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    DELETE          reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    CAST            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LBRACKET        reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    FUNCTION        reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    LIT_STR         reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    SEMICOLON       reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)
    ELSE            reduce using rule 181 (classDeclaration -> CLASS IDENTIFIER structBody .)


state 137

    (224) typeConstructors -> typeConstructor . multiple_typeConstructors
    (225) multiple_typeConstructors -> . typeConstructor multiple_typeConstructors
    (226) multiple_typeConstructors -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multiple_typeConstructors      shift and go to state 60
    typeConstructor                shift and go to state 61
    empty                          shift and go to state 64

state 138

    (170) COMMA_TYPE_Question -> COLON type .

    LBRACE          reduce using rule 170 (COMMA_TYPE_Question -> COLON type .)
    SEMICOLON       reduce using rule 170 (COMMA_TYPE_Question -> COLON type .)


state 139

    (192) typeConstructors_quetsion -> empty .

    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)


state 140

    (173) anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE . anonymousEnumMember multipleanonymousEnumMember RBRACE
    (166) anonymousEnumMember -> . type IDENTIFIER ASSIGN assignExpression
    (167) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (168) anonymousEnumMember -> . IDENTIFIER
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      shift and go to state 261
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    typeConstructors               shift and go to state 34
    type                           shift and go to state 262
    anonymousEnumMember            shift and go to state 263
    empty                          shift and go to state 139

state 141

    (174) enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question . SEMICOLON
    (175) enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question . enumBody
    (163) enumBody -> . LBRACE enumMember comma_enumMember RBRACE

    SEMICOLON       shift and go to state 265
    LBRACE          shift and go to state 264

    enumBody                       shift and go to state 266

state 142

    (61) structBody -> LBRACE multiple_declaration . RBRACE

    RBRACE          shift and go to state 267


state 143

    (112) unionDeclaration -> UNION IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INT             reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    $end            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    IF              reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DO              reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UTIMES          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 112 (unionDeclaration -> UNION IDENTIFIER SEMICOLON .)


state 144

    (111) unionDeclaration -> UNION IDENTIFIER structBody .

    PRIVATE         reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    PROTECTED       reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    PUBLIC          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    STATIC          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    EXTERN          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FINAL           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    AUTO            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CONST           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IMMUTABLE       reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ALIAS           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ENUM            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CLASS           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    THIS            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TILDE           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IMPORT          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UNION           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    MIXIN           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CHAR            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    INT             reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UINT            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LONG            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FLOAT           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DOUBLE          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    BOOL            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    SHORT           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    USHORT          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ULONG           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TYPEOF          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IDENTIFIER      reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    $end            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    RBRACE          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CASE            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DEFAULT         reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LBRACE          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    IF              reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    WHILE           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DO              reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FOR             reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FOREACH         reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FOREACH_REVERSE reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    SWITCH          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CONTINUE        reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    BREAK           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    RETURN          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    GOTO            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    WITH            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UAMPERSAND      reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    EXCLAMATION     reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UTIMES          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UPLUS           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    UMINUS          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    PLUS_PLUS       reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    MINUS_MINUS     reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LPAREN          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DOT             reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DOLLAR          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    NULL            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    TRUE            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FALSE           reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    INUMBER         reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DNUMBER         reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LIT_CHAR        reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    NEW             reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    DELETE          reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    CAST            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LBRACKET        reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    FUNCTION        reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    LIT_STR         reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    SEMICOLON       reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)
    ELSE            reduce using rule 111 (unionDeclaration -> UNION IDENTIFIER structBody .)


state 145

    (81) variableDeclaration -> multiplestorageClass BasicTypeX declarator . CommaDeclarator SEMICOLON
    (90) CommaDeclarator -> . COMMA declarator CommaDeclarator
    (91) CommaDeclarator -> . empty
    (397) empty -> .

    COMMA           shift and go to state 268
    SEMICOLON       reduce using rule 397 (empty -> .)

    CommaDeclarator                shift and go to state 269
    empty                          shift and go to state 270

state 146

    (82) variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER . ASSIGN functionBody SEMICOLON
    (98) declarator -> IDENTIFIER .
    (99) declarator -> IDENTIFIER . ASSIGN initializer

    ASSIGN          shift and go to state 271
    COMMA           reduce using rule 98 (declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 98 (declarator -> IDENTIFIER .)


state 147

    (220) typeIdentifierPart_question -> DOT . typeIdentifierPart
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    typeIdentifierPart             shift and go to state 272
    identifierOrTemplateInstance   shift and go to state 92

state 148

    (221) typeIdentifierPart_question -> empty .

    TIMES           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LBRACKET        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    DELEGATE        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    FUNCTION        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    IDENTIFIER      reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LBRACE          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    SEMICOLON       reduce using rule 221 (typeIdentifierPart_question -> empty .)
    DOT             reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LPAREN          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    RBRACKET        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    RPAREN          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    ELLIPSIS        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    ASSIGN          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    COMMA           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    PLUS_PLUS       reduce using rule 221 (typeIdentifierPart_question -> empty .)
    MINUS_MINUS     reduce using rule 221 (typeIdentifierPart_question -> empty .)
    POWER           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    DIV             reduce using rule 221 (typeIdentifierPart_question -> empty .)
    MODULO          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    PLUS            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    MINUS           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    TILDE           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    RIGHT_SHIFT     reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LEFT_SHIFT      reduce using rule 221 (typeIdentifierPart_question -> empty .)
    IS_EQ           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    NOT_EQ          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    AMPERSAND       reduce using rule 221 (typeIdentifierPart_question -> empty .)
    CARET           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    PIPE            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    DOUBLE_AMPERSAND reduce using rule 221 (typeIdentifierPart_question -> empty .)
    QUESTION        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    DOUBLE_PIPE     reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_LEFT         reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_RIGHT        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_PLUS         reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_MINUS        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_TIMES        reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_MODULO       reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_AND_BIT      reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_DIV          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_OR_BIT       reduce using rule 221 (typeIdentifierPart_question -> empty .)
    EQ_XOR_BIT      reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LESS            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LESS_EQ         reduce using rule 221 (typeIdentifierPart_question -> empty .)
    GREATER         reduce using rule 221 (typeIdentifierPart_question -> empty .)
    GREATER_EQ      reduce using rule 221 (typeIdentifierPart_question -> empty .)
    IS_EQ_DIFF      reduce using rule 221 (typeIdentifierPart_question -> empty .)
    NOT_EQ_DIFF     reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LESS_EQ_DIFF    reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LESS_DIFF       reduce using rule 221 (typeIdentifierPart_question -> empty .)
    GREATER_EQ_DIFF reduce using rule 221 (typeIdentifierPart_question -> empty .)
    GREATER_DIFF    reduce using rule 221 (typeIdentifierPart_question -> empty .)
    RANGE           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    COLON           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    CONST           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    IMMUTABLE       reduce using rule 221 (typeIdentifierPart_question -> empty .)
    RBRACE          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    THIS            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    BOOL            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    SHORT           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    USHORT          reduce using rule 221 (typeIdentifierPart_question -> empty .)
    INT             reduce using rule 221 (typeIdentifierPart_question -> empty .)
    UINT            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    LONG            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    ULONG           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    CHAR            reduce using rule 221 (typeIdentifierPart_question -> empty .)
    FLOAT           reduce using rule 221 (typeIdentifierPart_question -> empty .)
    TYPEOF          reduce using rule 221 (typeIdentifierPart_question -> empty .)


state 149

    (218) type2 -> typeofExpression typeIdentifierPart_question .

    TIMES           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LBRACKET        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    DELEGATE        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    FUNCTION        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    IDENTIFIER      reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LBRACE          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    SEMICOLON       reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    DOT             reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LPAREN          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    RBRACKET        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    RPAREN          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    ELLIPSIS        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    ASSIGN          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    COMMA           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    PLUS_PLUS       reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    MINUS_MINUS     reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    POWER           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    DIV             reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    MODULO          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    PLUS            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    MINUS           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    TILDE           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    RIGHT_SHIFT     reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LEFT_SHIFT      reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    IS_EQ           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    NOT_EQ          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    AMPERSAND       reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    CARET           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    PIPE            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    DOUBLE_AMPERSAND reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    QUESTION        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    DOUBLE_PIPE     reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_LEFT         reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_RIGHT        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_PLUS         reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_MINUS        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_TIMES        reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_MODULO       reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_AND_BIT      reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_DIV          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_OR_BIT       reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    EQ_XOR_BIT      reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LESS            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LESS_EQ         reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    GREATER         reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    GREATER_EQ      reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    IS_EQ_DIFF      reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    NOT_EQ_DIFF     reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LESS_EQ_DIFF    reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LESS_DIFF       reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    GREATER_EQ_DIFF reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    GREATER_DIFF    reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    RANGE           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    COLON           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    CONST           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    IMMUTABLE       reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    RBRACE          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    THIS            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    BOOL            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    SHORT           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    USHORT          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    INT             reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    UINT            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    LONG            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    ULONG           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    CHAR            reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    FLOAT           reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)
    TYPEOF          reduce using rule 218 (type2 -> typeofExpression typeIdentifierPart_question .)


state 150

    (232) typeSuffix -> FUNCTION . parameters multiple_memberFunctionAttribute
    (132) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (134) parameters -> . LPAREN ELLIPSIS RPAREN
    (135) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 117

    parameters                     shift and go to state 273

state 151

    (332) typeSuffixStar -> typeSuffix . typeSuffixStar
    (332) typeSuffixStar -> . typeSuffix typeSuffixStar
    (333) typeSuffixStar -> . empty
    (227) typeSuffix -> . TIMES
    (228) typeSuffix -> . LBRACKET type_question RBRACKET
    (229) typeSuffix -> . LBRACKET assignExpression RBRACKET
    (230) typeSuffix -> . LBRACKET assignExpression RANGE assignExpression RBRACKET
    (231) typeSuffix -> . DELEGATE parameters multiple_memberFunctionAttribute
    (232) typeSuffix -> . FUNCTION parameters multiple_memberFunctionAttribute
    (397) empty -> .

    DELEGATE        shift and go to state 154
    FUNCTION        shift and go to state 150
    IDENTIFIER      reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    DOT             reduce using rule 397 (empty -> .)
    LPAREN          reduce using rule 397 (empty -> .)
    RBRACKET        reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)
    ELLIPSIS        reduce using rule 397 (empty -> .)
    ASSIGN          reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    LBRACKET        reduce using rule 397 (empty -> .)
    PLUS_PLUS       reduce using rule 397 (empty -> .)
    MINUS_MINUS     reduce using rule 397 (empty -> .)
    POWER           reduce using rule 397 (empty -> .)
    TIMES           reduce using rule 397 (empty -> .)
    DIV             reduce using rule 397 (empty -> .)
    MODULO          reduce using rule 397 (empty -> .)
    PLUS            reduce using rule 397 (empty -> .)
    MINUS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    RIGHT_SHIFT     reduce using rule 397 (empty -> .)
    LEFT_SHIFT      reduce using rule 397 (empty -> .)
    IS_EQ           reduce using rule 397 (empty -> .)
    NOT_EQ          reduce using rule 397 (empty -> .)
    AMPERSAND       reduce using rule 397 (empty -> .)
    CARET           reduce using rule 397 (empty -> .)
    PIPE            reduce using rule 397 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 397 (empty -> .)
    QUESTION        reduce using rule 397 (empty -> .)
    DOUBLE_PIPE     reduce using rule 397 (empty -> .)
    EQ_LEFT         reduce using rule 397 (empty -> .)
    EQ_RIGHT        reduce using rule 397 (empty -> .)
    EQ_PLUS         reduce using rule 397 (empty -> .)
    EQ_MINUS        reduce using rule 397 (empty -> .)
    EQ_TIMES        reduce using rule 397 (empty -> .)
    EQ_MODULO       reduce using rule 397 (empty -> .)
    EQ_AND_BIT      reduce using rule 397 (empty -> .)
    EQ_DIV          reduce using rule 397 (empty -> .)
    EQ_OR_BIT       reduce using rule 397 (empty -> .)
    EQ_XOR_BIT      reduce using rule 397 (empty -> .)
    LESS            reduce using rule 397 (empty -> .)
    LESS_EQ         reduce using rule 397 (empty -> .)
    GREATER         reduce using rule 397 (empty -> .)
    GREATER_EQ      reduce using rule 397 (empty -> .)
    IS_EQ_DIFF      reduce using rule 397 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 397 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 397 (empty -> .)
    LESS_DIFF       reduce using rule 397 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 397 (empty -> .)
    GREATER_DIFF    reduce using rule 397 (empty -> .)
    RANGE           reduce using rule 397 (empty -> .)
    COLON           reduce using rule 397 (empty -> .)
    CONST           reduce using rule 397 (empty -> .)
    IMMUTABLE       reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! TIMES           [ shift and go to state 152 ]
  ! LBRACKET        [ shift and go to state 153 ]

    typeSuffix                     shift and go to state 151
    typeSuffixStar                 shift and go to state 274
    empty                          shift and go to state 156

state 152

    (227) typeSuffix -> TIMES .

    TIMES           reduce using rule 227 (typeSuffix -> TIMES .)
    LBRACKET        reduce using rule 227 (typeSuffix -> TIMES .)
    DELEGATE        reduce using rule 227 (typeSuffix -> TIMES .)
    FUNCTION        reduce using rule 227 (typeSuffix -> TIMES .)
    IDENTIFIER      reduce using rule 227 (typeSuffix -> TIMES .)
    LBRACE          reduce using rule 227 (typeSuffix -> TIMES .)
    SEMICOLON       reduce using rule 227 (typeSuffix -> TIMES .)
    DOT             reduce using rule 227 (typeSuffix -> TIMES .)
    LPAREN          reduce using rule 227 (typeSuffix -> TIMES .)
    RBRACKET        reduce using rule 227 (typeSuffix -> TIMES .)
    RPAREN          reduce using rule 227 (typeSuffix -> TIMES .)
    ELLIPSIS        reduce using rule 227 (typeSuffix -> TIMES .)
    ASSIGN          reduce using rule 227 (typeSuffix -> TIMES .)
    COMMA           reduce using rule 227 (typeSuffix -> TIMES .)
    PLUS_PLUS       reduce using rule 227 (typeSuffix -> TIMES .)
    MINUS_MINUS     reduce using rule 227 (typeSuffix -> TIMES .)
    POWER           reduce using rule 227 (typeSuffix -> TIMES .)
    DIV             reduce using rule 227 (typeSuffix -> TIMES .)
    MODULO          reduce using rule 227 (typeSuffix -> TIMES .)
    PLUS            reduce using rule 227 (typeSuffix -> TIMES .)
    MINUS           reduce using rule 227 (typeSuffix -> TIMES .)
    TILDE           reduce using rule 227 (typeSuffix -> TIMES .)
    RIGHT_SHIFT     reduce using rule 227 (typeSuffix -> TIMES .)
    LEFT_SHIFT      reduce using rule 227 (typeSuffix -> TIMES .)
    IS_EQ           reduce using rule 227 (typeSuffix -> TIMES .)
    NOT_EQ          reduce using rule 227 (typeSuffix -> TIMES .)
    AMPERSAND       reduce using rule 227 (typeSuffix -> TIMES .)
    CARET           reduce using rule 227 (typeSuffix -> TIMES .)
    PIPE            reduce using rule 227 (typeSuffix -> TIMES .)
    DOUBLE_AMPERSAND reduce using rule 227 (typeSuffix -> TIMES .)
    QUESTION        reduce using rule 227 (typeSuffix -> TIMES .)
    DOUBLE_PIPE     reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_LEFT         reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_RIGHT        reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_PLUS         reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_MINUS        reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_TIMES        reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_MODULO       reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_AND_BIT      reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_DIV          reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_OR_BIT       reduce using rule 227 (typeSuffix -> TIMES .)
    EQ_XOR_BIT      reduce using rule 227 (typeSuffix -> TIMES .)
    LESS            reduce using rule 227 (typeSuffix -> TIMES .)
    LESS_EQ         reduce using rule 227 (typeSuffix -> TIMES .)
    GREATER         reduce using rule 227 (typeSuffix -> TIMES .)
    GREATER_EQ      reduce using rule 227 (typeSuffix -> TIMES .)
    IS_EQ_DIFF      reduce using rule 227 (typeSuffix -> TIMES .)
    NOT_EQ_DIFF     reduce using rule 227 (typeSuffix -> TIMES .)
    LESS_EQ_DIFF    reduce using rule 227 (typeSuffix -> TIMES .)
    LESS_DIFF       reduce using rule 227 (typeSuffix -> TIMES .)
    GREATER_EQ_DIFF reduce using rule 227 (typeSuffix -> TIMES .)
    GREATER_DIFF    reduce using rule 227 (typeSuffix -> TIMES .)
    RANGE           reduce using rule 227 (typeSuffix -> TIMES .)
    COLON           reduce using rule 227 (typeSuffix -> TIMES .)
    CONST           reduce using rule 227 (typeSuffix -> TIMES .)
    IMMUTABLE       reduce using rule 227 (typeSuffix -> TIMES .)
    RBRACE          reduce using rule 227 (typeSuffix -> TIMES .)
    THIS            reduce using rule 227 (typeSuffix -> TIMES .)
    BOOL            reduce using rule 227 (typeSuffix -> TIMES .)
    SHORT           reduce using rule 227 (typeSuffix -> TIMES .)
    USHORT          reduce using rule 227 (typeSuffix -> TIMES .)
    INT             reduce using rule 227 (typeSuffix -> TIMES .)
    UINT            reduce using rule 227 (typeSuffix -> TIMES .)
    LONG            reduce using rule 227 (typeSuffix -> TIMES .)
    ULONG           reduce using rule 227 (typeSuffix -> TIMES .)
    CHAR            reduce using rule 227 (typeSuffix -> TIMES .)
    FLOAT           reduce using rule 227 (typeSuffix -> TIMES .)
    TYPEOF          reduce using rule 227 (typeSuffix -> TIMES .)


state 153

    (228) typeSuffix -> LBRACKET . type_question RBRACKET
    (229) typeSuffix -> LBRACKET . assignExpression RBRACKET
    (230) typeSuffix -> LBRACKET . assignExpression RANGE assignExpression RBRACKET
    (233) type_question -> . type
    (234) type_question -> . empty
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (397) empty -> .
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RBRACKET        reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 277
    empty                          shift and go to state 278
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 276
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    type_question                  shift and go to state 279
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 275
    functionLiteralExpression      shift and go to state 245

state 154

    (231) typeSuffix -> DELEGATE . parameters multiple_memberFunctionAttribute
    (132) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (134) parameters -> . LPAREN ELLIPSIS RPAREN
    (135) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 117

    parameters                     shift and go to state 280

state 155

    (322) type -> typeConstructors_quetsion type2 typeSuffixStar .

    DOT             reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LPAREN          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    RPAREN          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    IDENTIFIER      reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    RBRACKET        reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LBRACE          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    SEMICOLON       reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    ELLIPSIS        reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    ASSIGN          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    COMMA           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LBRACKET        reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    PLUS_PLUS       reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    MINUS_MINUS     reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    POWER           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    TIMES           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    DIV             reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    MODULO          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    PLUS            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    MINUS           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    TILDE           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    IS_EQ           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    NOT_EQ          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    AMPERSAND       reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    CARET           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    PIPE            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    QUESTION        reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_LEFT         reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_RIGHT        reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_PLUS         reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_MINUS        reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_TIMES        reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_MODULO       reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_DIV          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LESS            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LESS_EQ         reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    GREATER         reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    GREATER_EQ      reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LESS_DIFF       reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    GREATER_DIFF    reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    RANGE           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    COLON           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    CONST           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    IMMUTABLE       reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    RBRACE          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    THIS            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    BOOL            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    SHORT           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    USHORT          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    INT             reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    UINT            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    LONG            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    ULONG           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    CHAR            reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    FLOAT           reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)
    TYPEOF          reduce using rule 322 (type -> typeConstructors_quetsion type2 typeSuffixStar .)


state 156

    (333) typeSuffixStar -> empty .

    IDENTIFIER      reduce using rule 333 (typeSuffixStar -> empty .)
    LBRACE          reduce using rule 333 (typeSuffixStar -> empty .)
    SEMICOLON       reduce using rule 333 (typeSuffixStar -> empty .)
    DOT             reduce using rule 333 (typeSuffixStar -> empty .)
    LPAREN          reduce using rule 333 (typeSuffixStar -> empty .)
    RBRACKET        reduce using rule 333 (typeSuffixStar -> empty .)
    RPAREN          reduce using rule 333 (typeSuffixStar -> empty .)
    ELLIPSIS        reduce using rule 333 (typeSuffixStar -> empty .)
    ASSIGN          reduce using rule 333 (typeSuffixStar -> empty .)
    COMMA           reduce using rule 333 (typeSuffixStar -> empty .)
    LBRACKET        reduce using rule 333 (typeSuffixStar -> empty .)
    PLUS_PLUS       reduce using rule 333 (typeSuffixStar -> empty .)
    MINUS_MINUS     reduce using rule 333 (typeSuffixStar -> empty .)
    POWER           reduce using rule 333 (typeSuffixStar -> empty .)
    TIMES           reduce using rule 333 (typeSuffixStar -> empty .)
    DIV             reduce using rule 333 (typeSuffixStar -> empty .)
    MODULO          reduce using rule 333 (typeSuffixStar -> empty .)
    PLUS            reduce using rule 333 (typeSuffixStar -> empty .)
    MINUS           reduce using rule 333 (typeSuffixStar -> empty .)
    TILDE           reduce using rule 333 (typeSuffixStar -> empty .)
    RIGHT_SHIFT     reduce using rule 333 (typeSuffixStar -> empty .)
    LEFT_SHIFT      reduce using rule 333 (typeSuffixStar -> empty .)
    IS_EQ           reduce using rule 333 (typeSuffixStar -> empty .)
    NOT_EQ          reduce using rule 333 (typeSuffixStar -> empty .)
    AMPERSAND       reduce using rule 333 (typeSuffixStar -> empty .)
    CARET           reduce using rule 333 (typeSuffixStar -> empty .)
    PIPE            reduce using rule 333 (typeSuffixStar -> empty .)
    DOUBLE_AMPERSAND reduce using rule 333 (typeSuffixStar -> empty .)
    QUESTION        reduce using rule 333 (typeSuffixStar -> empty .)
    DOUBLE_PIPE     reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_LEFT         reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_RIGHT        reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_PLUS         reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_MINUS        reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_TIMES        reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_MODULO       reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_AND_BIT      reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_DIV          reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_OR_BIT       reduce using rule 333 (typeSuffixStar -> empty .)
    EQ_XOR_BIT      reduce using rule 333 (typeSuffixStar -> empty .)
    LESS            reduce using rule 333 (typeSuffixStar -> empty .)
    LESS_EQ         reduce using rule 333 (typeSuffixStar -> empty .)
    GREATER         reduce using rule 333 (typeSuffixStar -> empty .)
    GREATER_EQ      reduce using rule 333 (typeSuffixStar -> empty .)
    IS_EQ_DIFF      reduce using rule 333 (typeSuffixStar -> empty .)
    NOT_EQ_DIFF     reduce using rule 333 (typeSuffixStar -> empty .)
    LESS_EQ_DIFF    reduce using rule 333 (typeSuffixStar -> empty .)
    LESS_DIFF       reduce using rule 333 (typeSuffixStar -> empty .)
    GREATER_EQ_DIFF reduce using rule 333 (typeSuffixStar -> empty .)
    GREATER_DIFF    reduce using rule 333 (typeSuffixStar -> empty .)
    RANGE           reduce using rule 333 (typeSuffixStar -> empty .)
    COLON           reduce using rule 333 (typeSuffixStar -> empty .)
    CONST           reduce using rule 333 (typeSuffixStar -> empty .)
    IMMUTABLE       reduce using rule 333 (typeSuffixStar -> empty .)
    RBRACE          reduce using rule 333 (typeSuffixStar -> empty .)
    THIS            reduce using rule 333 (typeSuffixStar -> empty .)
    BOOL            reduce using rule 333 (typeSuffixStar -> empty .)
    SHORT           reduce using rule 333 (typeSuffixStar -> empty .)
    USHORT          reduce using rule 333 (typeSuffixStar -> empty .)
    INT             reduce using rule 333 (typeSuffixStar -> empty .)
    UINT            reduce using rule 333 (typeSuffixStar -> empty .)
    LONG            reduce using rule 333 (typeSuffixStar -> empty .)
    ULONG           reduce using rule 333 (typeSuffixStar -> empty .)
    CHAR            reduce using rule 333 (typeSuffixStar -> empty .)
    FLOAT           reduce using rule 333 (typeSuffixStar -> empty .)
    TYPEOF          reduce using rule 333 (typeSuffixStar -> empty .)


state 157

    (190) typeIdentifierPart -> identifierOrTemplateInstance LBRACKET . assignExpression RBRACKET DOT typeIdentifierPart
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 281
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 158

    (189) typeIdentifierPart -> identifierOrTemplateInstance DOT . typeIdentifierPart
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    typeIdentifierPart             shift and go to state 282
    identifierOrTemplateInstance   shift and go to state 92

state 159

    (217) type2 -> THIS DOT . typeIdentifierPart
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    typeIdentifierPart             shift and go to state 283
    identifierOrTemplateInstance   shift and go to state 92

state 160

    (237) typeofExpression -> TYPEOF LPAREN . expression RPAREN
    (238) typeofExpression -> TYPEOF LPAREN . RETURN RPAREN
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RETURN          shift and go to state 284
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 286

state 161

    (219) type2 -> typeConstructor LPAREN . type RPAREN
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructors_quetsion      shift and go to state 42
    typeConstructor                shift and go to state 137
    type                           shift and go to state 287
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34

state 162

    (199) aliasThisDeclaration -> ALIAS IDENTIFIER THIS . SEMICOLON

    SEMICOLON       shift and go to state 288


state 163

    (197) aliasInitializer -> IDENTIFIER ASSIGN . multiplestorageClass type
    (198) aliasInitializer -> IDENTIFIER ASSIGN . functionLiteralExpression SEMICOLON
    (195) multiplestorageClass -> . storageClass multiplestorageClass
    (196) multiplestorageClass -> . empty
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (92) storageClass -> . typeConstructor
    (93) storageClass -> . AUTO
    (94) storageClass -> . ENUM
    (95) storageClass -> . EXTERN
    (96) storageClass -> . FINAL
    (97) storageClass -> . STATIC
    (397) empty -> .
    (341) functionBody -> . blockStatement
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FUNCTION        shift and go to state 202
    IDENTIFIER      shift and go to state 289
    AUTO            shift and go to state 107
    ENUM            shift and go to state 111
    EXTERN          shift and go to state 105
    FINAL           shift and go to state 106
    STATIC          shift and go to state 104
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACE          shift and go to state 207

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    functionBody                   shift and go to state 223
    multiplestorageClass           shift and go to state 290
    functionLiteralExpression      shift and go to state 291
    storageClass                   shift and go to state 113
    blockStatement                 shift and go to state 237
    typeConstructor                shift and go to state 114
    empty                          shift and go to state 109

state 164

    (183) aliasDeclaration -> ALIAS multiplestorageClass type . declaratorIdentifierList SEMICOLON
    (184) aliasDeclaration -> ALIAS multiplestorageClass type . IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON
    (185) declaratorIdentifierList -> . IDENTIFIER multiple_comma_identifer

    IDENTIFIER      shift and go to state 293

    declaratorIdentifierList       shift and go to state 292

state 165

    (182) aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer . SEMICOLON

    SEMICOLON       shift and go to state 294


state 166

    (193) comma_aliasInitializer -> COMMA . aliasInitializer comma_aliasInitializer
    (197) aliasInitializer -> . IDENTIFIER ASSIGN multiplestorageClass type
    (198) aliasInitializer -> . IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON

    IDENTIFIER      shift and go to state 296

    aliasInitializer               shift and go to state 295

state 167

    (194) comma_aliasInitializer -> empty .

    SEMICOLON       reduce using rule 194 (comma_aliasInitializer -> empty .)


state 168

    (195) multiplestorageClass -> storageClass multiplestorageClass .

    CONST           reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    IMMUTABLE       reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    THIS            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    BOOL            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    SHORT           reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    USHORT          reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    INT             reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    UINT            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    LONG            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    ULONG           reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    CHAR            reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    FLOAT           reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    TYPEOF          reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    IDENTIFIER      reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)
    DOUBLE          reduce using rule 195 (multiplestorageClass -> storageClass multiplestorageClass .)


state 169

    (159) memberFunctionAttribute -> CONST .

    IMMUTABLE       reduce using rule 159 (memberFunctionAttribute -> CONST .)
    CONST           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    RETURN          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    SEMICOLON       reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LBRACE          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    IF              reduce using rule 159 (memberFunctionAttribute -> CONST .)
    TIMES           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LBRACKET        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    DELEGATE        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    FUNCTION        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    IDENTIFIER      reduce using rule 159 (memberFunctionAttribute -> CONST .)
    DOT             reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LPAREN          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    RBRACKET        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    RPAREN          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    ELLIPSIS        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    ASSIGN          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    COMMA           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    PLUS_PLUS       reduce using rule 159 (memberFunctionAttribute -> CONST .)
    MINUS_MINUS     reduce using rule 159 (memberFunctionAttribute -> CONST .)
    POWER           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    DIV             reduce using rule 159 (memberFunctionAttribute -> CONST .)
    MODULO          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    PLUS            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    MINUS           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    TILDE           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    RIGHT_SHIFT     reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LEFT_SHIFT      reduce using rule 159 (memberFunctionAttribute -> CONST .)
    IS_EQ           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    NOT_EQ          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    AMPERSAND       reduce using rule 159 (memberFunctionAttribute -> CONST .)
    CARET           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    PIPE            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    DOUBLE_AMPERSAND reduce using rule 159 (memberFunctionAttribute -> CONST .)
    QUESTION        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    DOUBLE_PIPE     reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_LEFT         reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_RIGHT        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_PLUS         reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_MINUS        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_TIMES        reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_MODULO       reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_AND_BIT      reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_DIV          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_OR_BIT       reduce using rule 159 (memberFunctionAttribute -> CONST .)
    EQ_XOR_BIT      reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LESS            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LESS_EQ         reduce using rule 159 (memberFunctionAttribute -> CONST .)
    GREATER         reduce using rule 159 (memberFunctionAttribute -> CONST .)
    GREATER_EQ      reduce using rule 159 (memberFunctionAttribute -> CONST .)
    IS_EQ_DIFF      reduce using rule 159 (memberFunctionAttribute -> CONST .)
    NOT_EQ_DIFF     reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LESS_EQ_DIFF    reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LESS_DIFF       reduce using rule 159 (memberFunctionAttribute -> CONST .)
    GREATER_EQ_DIFF reduce using rule 159 (memberFunctionAttribute -> CONST .)
    GREATER_DIFF    reduce using rule 159 (memberFunctionAttribute -> CONST .)
    RANGE           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    COLON           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    RBRACE          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    THIS            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    BOOL            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    SHORT           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    USHORT          reduce using rule 159 (memberFunctionAttribute -> CONST .)
    INT             reduce using rule 159 (memberFunctionAttribute -> CONST .)
    UINT            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    LONG            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    ULONG           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    CHAR            reduce using rule 159 (memberFunctionAttribute -> CONST .)
    FLOAT           reduce using rule 159 (memberFunctionAttribute -> CONST .)
    TYPEOF          reduce using rule 159 (memberFunctionAttribute -> CONST .)


state 170

    (151) constructor -> THIS parameters multiple_memberFunctionAttribute . functionBody
    (152) constructor -> THIS parameters multiple_memberFunctionAttribute . SEMICOLON
    (153) constructor -> THIS parameters multiple_memberFunctionAttribute . constraint functionBody
    (154) constructor -> THIS parameters multiple_memberFunctionAttribute . constraint SEMICOLON
    (341) functionBody -> . blockStatement
    (155) constraint -> . IF LPAREN expression RPAREN
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 298
    IF              shift and go to state 300
    LBRACE          shift and go to state 207

    functionBody                   shift and go to state 297
    constraint                     shift and go to state 299
    blockStatement                 shift and go to state 237

state 171

    (156) multiple_memberFunctionAttribute -> memberFunctionAttribute . multiple_memberFunctionAttribute
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    SEMICOLON       reduce using rule 397 (empty -> .)
    IF              reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)
    TIMES           reduce using rule 397 (empty -> .)
    LBRACKET        reduce using rule 397 (empty -> .)
    DELEGATE        reduce using rule 397 (empty -> .)
    FUNCTION        reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    DOT             reduce using rule 397 (empty -> .)
    LPAREN          reduce using rule 397 (empty -> .)
    RBRACKET        reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)
    ELLIPSIS        reduce using rule 397 (empty -> .)
    ASSIGN          reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    PLUS_PLUS       reduce using rule 397 (empty -> .)
    MINUS_MINUS     reduce using rule 397 (empty -> .)
    POWER           reduce using rule 397 (empty -> .)
    DIV             reduce using rule 397 (empty -> .)
    MODULO          reduce using rule 397 (empty -> .)
    PLUS            reduce using rule 397 (empty -> .)
    MINUS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    RIGHT_SHIFT     reduce using rule 397 (empty -> .)
    LEFT_SHIFT      reduce using rule 397 (empty -> .)
    IS_EQ           reduce using rule 397 (empty -> .)
    NOT_EQ          reduce using rule 397 (empty -> .)
    AMPERSAND       reduce using rule 397 (empty -> .)
    CARET           reduce using rule 397 (empty -> .)
    PIPE            reduce using rule 397 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 397 (empty -> .)
    QUESTION        reduce using rule 397 (empty -> .)
    DOUBLE_PIPE     reduce using rule 397 (empty -> .)
    EQ_LEFT         reduce using rule 397 (empty -> .)
    EQ_RIGHT        reduce using rule 397 (empty -> .)
    EQ_PLUS         reduce using rule 397 (empty -> .)
    EQ_MINUS        reduce using rule 397 (empty -> .)
    EQ_TIMES        reduce using rule 397 (empty -> .)
    EQ_MODULO       reduce using rule 397 (empty -> .)
    EQ_AND_BIT      reduce using rule 397 (empty -> .)
    EQ_DIV          reduce using rule 397 (empty -> .)
    EQ_OR_BIT       reduce using rule 397 (empty -> .)
    EQ_XOR_BIT      reduce using rule 397 (empty -> .)
    LESS            reduce using rule 397 (empty -> .)
    LESS_EQ         reduce using rule 397 (empty -> .)
    GREATER         reduce using rule 397 (empty -> .)
    GREATER_EQ      reduce using rule 397 (empty -> .)
    IS_EQ_DIFF      reduce using rule 397 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 397 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 397 (empty -> .)
    LESS_DIFF       reduce using rule 397 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 397 (empty -> .)
    GREATER_DIFF    reduce using rule 397 (empty -> .)
    RANGE           reduce using rule 397 (empty -> .)
    COLON           reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174
    multiple_memberFunctionAttribute shift and go to state 301

state 172

    (160) memberFunctionAttribute -> RETURN .

    IMMUTABLE       reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    CONST           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    RETURN          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    SEMICOLON       reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LBRACE          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    IF              reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    TIMES           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LBRACKET        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    DELEGATE        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    FUNCTION        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    IDENTIFIER      reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    DOT             reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LPAREN          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    RBRACKET        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    RPAREN          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    ELLIPSIS        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    ASSIGN          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    COMMA           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    PLUS_PLUS       reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    MINUS_MINUS     reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    POWER           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    DIV             reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    MODULO          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    PLUS            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    MINUS           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    TILDE           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    RIGHT_SHIFT     reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LEFT_SHIFT      reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    IS_EQ           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    NOT_EQ          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    AMPERSAND       reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    CARET           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    PIPE            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    DOUBLE_AMPERSAND reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    QUESTION        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    DOUBLE_PIPE     reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_LEFT         reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_RIGHT        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_PLUS         reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_MINUS        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_TIMES        reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_MODULO       reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_AND_BIT      reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_DIV          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_OR_BIT       reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    EQ_XOR_BIT      reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LESS            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LESS_EQ         reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    GREATER         reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    GREATER_EQ      reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    IS_EQ_DIFF      reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    NOT_EQ_DIFF     reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LESS_EQ_DIFF    reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LESS_DIFF       reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    GREATER_EQ_DIFF reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    GREATER_DIFF    reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    RANGE           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    COLON           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    RBRACE          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    THIS            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    BOOL            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    SHORT           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    USHORT          reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    INT             reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    UINT            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    LONG            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    ULONG           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    CHAR            reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    FLOAT           reduce using rule 160 (memberFunctionAttribute -> RETURN .)
    TYPEOF          reduce using rule 160 (memberFunctionAttribute -> RETURN .)


state 173

    (158) memberFunctionAttribute -> IMMUTABLE .

    IMMUTABLE       reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    CONST           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    RETURN          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    SEMICOLON       reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LBRACE          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    IF              reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    TIMES           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LBRACKET        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    DELEGATE        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    FUNCTION        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    DOT             reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LPAREN          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    RBRACKET        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    RPAREN          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    ELLIPSIS        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    ASSIGN          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    COMMA           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    PLUS_PLUS       reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    MINUS_MINUS     reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    POWER           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    DIV             reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    MODULO          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    PLUS            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    MINUS           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    TILDE           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    RIGHT_SHIFT     reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LEFT_SHIFT      reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    IS_EQ           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    NOT_EQ          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    AMPERSAND       reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    CARET           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    PIPE            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    DOUBLE_AMPERSAND reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    QUESTION        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    DOUBLE_PIPE     reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_LEFT         reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_RIGHT        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_PLUS         reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_MINUS        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_TIMES        reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_MODULO       reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_AND_BIT      reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_DIV          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_OR_BIT       reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    EQ_XOR_BIT      reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LESS            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LESS_EQ         reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    GREATER         reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    GREATER_EQ      reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    IS_EQ_DIFF      reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    NOT_EQ_DIFF     reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LESS_EQ_DIFF    reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LESS_DIFF       reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    GREATER_EQ_DIFF reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    GREATER_DIFF    reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    RANGE           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    COLON           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    RBRACE          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    THIS            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    BOOL            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    SHORT           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    USHORT          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    INT             reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    UINT            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    LONG            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    ULONG           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    CHAR            reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    FLOAT           reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)
    TYPEOF          reduce using rule 158 (memberFunctionAttribute -> IMMUTABLE .)


state 174

    (157) multiple_memberFunctionAttribute -> empty .

    SEMICOLON       reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LBRACE          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    TIMES           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LBRACKET        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    DELEGATE        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    FUNCTION        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    IDENTIFIER      reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    DOT             reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LPAREN          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    RBRACKET        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    RPAREN          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    ELLIPSIS        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    ASSIGN          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    COMMA           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    PLUS_PLUS       reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    MINUS_MINUS     reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    POWER           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    DIV             reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    MODULO          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    PLUS            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    MINUS           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    TILDE           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    RIGHT_SHIFT     reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LEFT_SHIFT      reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    IS_EQ           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    NOT_EQ          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    AMPERSAND       reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    CARET           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    PIPE            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    DOUBLE_AMPERSAND reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    QUESTION        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    DOUBLE_PIPE     reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_LEFT         reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_RIGHT        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_PLUS         reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_MINUS        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_TIMES        reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_MODULO       reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_AND_BIT      reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_DIV          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_OR_BIT       reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    EQ_XOR_BIT      reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LESS            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LESS_EQ         reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    GREATER         reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    GREATER_EQ      reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    IS_EQ_DIFF      reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    NOT_EQ_DIFF     reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LESS_EQ_DIFF    reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LESS_DIFF       reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    GREATER_EQ_DIFF reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    GREATER_DIFF    reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    RANGE           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    COLON           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    CONST           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    IMMUTABLE       reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    RBRACE          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    THIS            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    BOOL            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    SHORT           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    USHORT          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    INT             reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    UINT            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    LONG            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    ULONG           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    CHAR            reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    FLOAT           reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    TYPEOF          reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)
    IF              reduce using rule 157 (multiple_memberFunctionAttribute -> empty .)


state 175

    (144) parameterAttribute -> FINAL .

    FINAL           reduce using rule 144 (parameterAttribute -> FINAL .)
    AUTO            reduce using rule 144 (parameterAttribute -> FINAL .)
    RETURN          reduce using rule 144 (parameterAttribute -> FINAL .)
    CONST           reduce using rule 144 (parameterAttribute -> FINAL .)
    IMMUTABLE       reduce using rule 144 (parameterAttribute -> FINAL .)
    THIS            reduce using rule 144 (parameterAttribute -> FINAL .)
    BOOL            reduce using rule 144 (parameterAttribute -> FINAL .)
    SHORT           reduce using rule 144 (parameterAttribute -> FINAL .)
    USHORT          reduce using rule 144 (parameterAttribute -> FINAL .)
    INT             reduce using rule 144 (parameterAttribute -> FINAL .)
    UINT            reduce using rule 144 (parameterAttribute -> FINAL .)
    LONG            reduce using rule 144 (parameterAttribute -> FINAL .)
    ULONG           reduce using rule 144 (parameterAttribute -> FINAL .)
    CHAR            reduce using rule 144 (parameterAttribute -> FINAL .)
    FLOAT           reduce using rule 144 (parameterAttribute -> FINAL .)
    TYPEOF          reduce using rule 144 (parameterAttribute -> FINAL .)
    IDENTIFIER      reduce using rule 144 (parameterAttribute -> FINAL .)


state 176

    (145) parameterAttribute -> AUTO .

    FINAL           reduce using rule 145 (parameterAttribute -> AUTO .)
    AUTO            reduce using rule 145 (parameterAttribute -> AUTO .)
    RETURN          reduce using rule 145 (parameterAttribute -> AUTO .)
    CONST           reduce using rule 145 (parameterAttribute -> AUTO .)
    IMMUTABLE       reduce using rule 145 (parameterAttribute -> AUTO .)
    THIS            reduce using rule 145 (parameterAttribute -> AUTO .)
    BOOL            reduce using rule 145 (parameterAttribute -> AUTO .)
    SHORT           reduce using rule 145 (parameterAttribute -> AUTO .)
    USHORT          reduce using rule 145 (parameterAttribute -> AUTO .)
    INT             reduce using rule 145 (parameterAttribute -> AUTO .)
    UINT            reduce using rule 145 (parameterAttribute -> AUTO .)
    LONG            reduce using rule 145 (parameterAttribute -> AUTO .)
    ULONG           reduce using rule 145 (parameterAttribute -> AUTO .)
    CHAR            reduce using rule 145 (parameterAttribute -> AUTO .)
    FLOAT           reduce using rule 145 (parameterAttribute -> AUTO .)
    TYPEOF          reduce using rule 145 (parameterAttribute -> AUTO .)
    IDENTIFIER      reduce using rule 145 (parameterAttribute -> AUTO .)


state 177

    (141) parameterAttributeStar -> parameterAttribute . parameterAttributeStar
    (141) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (142) parameterAttributeStar -> . empty
    (143) parameterAttribute -> . typeConstructor
    (144) parameterAttribute -> . FINAL
    (145) parameterAttribute -> . AUTO
    (146) parameterAttribute -> . RETURN
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FINAL           shift and go to state 175
    AUTO            shift and go to state 176
    RETURN          shift and go to state 179
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 182
    parameterAttribute             shift and go to state 177
    empty                          shift and go to state 184
    parameterAttributeStar         shift and go to state 302

state 178

    (136) parameter -> parameterAttributeStar . type Identifier_question ELLIPSIS
    (137) parameter -> parameterAttributeStar . type Identifier_question
    (138) parameter -> parameterAttributeStar . type Identifier_question ASSIGN assignExpression
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    typeConstructors               shift and go to state 34
    type                           shift and go to state 303
    empty                          shift and go to state 139

state 179

    (146) parameterAttribute -> RETURN .

    FINAL           reduce using rule 146 (parameterAttribute -> RETURN .)
    AUTO            reduce using rule 146 (parameterAttribute -> RETURN .)
    RETURN          reduce using rule 146 (parameterAttribute -> RETURN .)
    CONST           reduce using rule 146 (parameterAttribute -> RETURN .)
    IMMUTABLE       reduce using rule 146 (parameterAttribute -> RETURN .)
    THIS            reduce using rule 146 (parameterAttribute -> RETURN .)
    BOOL            reduce using rule 146 (parameterAttribute -> RETURN .)
    SHORT           reduce using rule 146 (parameterAttribute -> RETURN .)
    USHORT          reduce using rule 146 (parameterAttribute -> RETURN .)
    INT             reduce using rule 146 (parameterAttribute -> RETURN .)
    UINT            reduce using rule 146 (parameterAttribute -> RETURN .)
    LONG            reduce using rule 146 (parameterAttribute -> RETURN .)
    ULONG           reduce using rule 146 (parameterAttribute -> RETURN .)
    CHAR            reduce using rule 146 (parameterAttribute -> RETURN .)
    FLOAT           reduce using rule 146 (parameterAttribute -> RETURN .)
    TYPEOF          reduce using rule 146 (parameterAttribute -> RETURN .)
    IDENTIFIER      reduce using rule 146 (parameterAttribute -> RETURN .)


state 180

    (134) parameters -> LPAREN ELLIPSIS . RPAREN

    RPAREN          shift and go to state 304


state 181

    (135) parameters -> LPAREN RPAREN .

    IMMUTABLE       reduce using rule 135 (parameters -> LPAREN RPAREN .)
    CONST           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 135 (parameters -> LPAREN RPAREN .)
    IF              reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LBRACE          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    TIMES           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    DELEGATE        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    IDENTIFIER      reduce using rule 135 (parameters -> LPAREN RPAREN .)
    DOT             reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LPAREN          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    ELLIPSIS        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    ASSIGN          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    PLUS_PLUS       reduce using rule 135 (parameters -> LPAREN RPAREN .)
    MINUS_MINUS     reduce using rule 135 (parameters -> LPAREN RPAREN .)
    POWER           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    DIV             reduce using rule 135 (parameters -> LPAREN RPAREN .)
    MODULO          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    PLUS            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    MINUS           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    TILDE           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    RIGHT_SHIFT     reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LEFT_SHIFT      reduce using rule 135 (parameters -> LPAREN RPAREN .)
    IS_EQ           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    NOT_EQ          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    AMPERSAND       reduce using rule 135 (parameters -> LPAREN RPAREN .)
    CARET           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    PIPE            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 135 (parameters -> LPAREN RPAREN .)
    QUESTION        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    DOUBLE_PIPE     reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_LEFT         reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_RIGHT        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_PLUS         reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_MINUS        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_TIMES        reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_MODULO       reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_AND_BIT      reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_DIV          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_OR_BIT       reduce using rule 135 (parameters -> LPAREN RPAREN .)
    EQ_XOR_BIT      reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LESS            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LESS_EQ         reduce using rule 135 (parameters -> LPAREN RPAREN .)
    GREATER         reduce using rule 135 (parameters -> LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 135 (parameters -> LPAREN RPAREN .)
    IS_EQ_DIFF      reduce using rule 135 (parameters -> LPAREN RPAREN .)
    NOT_EQ_DIFF     reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LESS_EQ_DIFF    reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LESS_DIFF       reduce using rule 135 (parameters -> LPAREN RPAREN .)
    GREATER_EQ_DIFF reduce using rule 135 (parameters -> LPAREN RPAREN .)
    GREATER_DIFF    reduce using rule 135 (parameters -> LPAREN RPAREN .)
    RANGE           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    COLON           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    RBRACE          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    THIS            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    BOOL            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    SHORT           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    USHORT          reduce using rule 135 (parameters -> LPAREN RPAREN .)
    INT             reduce using rule 135 (parameters -> LPAREN RPAREN .)
    UINT            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    LONG            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    ULONG           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    CHAR            reduce using rule 135 (parameters -> LPAREN RPAREN .)
    FLOAT           reduce using rule 135 (parameters -> LPAREN RPAREN .)
    TYPEOF          reduce using rule 135 (parameters -> LPAREN RPAREN .)


state 182

    (143) parameterAttribute -> typeConstructor .

    FINAL           reduce using rule 143 (parameterAttribute -> typeConstructor .)
    AUTO            reduce using rule 143 (parameterAttribute -> typeConstructor .)
    RETURN          reduce using rule 143 (parameterAttribute -> typeConstructor .)
    CONST           reduce using rule 143 (parameterAttribute -> typeConstructor .)
    IMMUTABLE       reduce using rule 143 (parameterAttribute -> typeConstructor .)
    THIS            reduce using rule 143 (parameterAttribute -> typeConstructor .)
    BOOL            reduce using rule 143 (parameterAttribute -> typeConstructor .)
    SHORT           reduce using rule 143 (parameterAttribute -> typeConstructor .)
    USHORT          reduce using rule 143 (parameterAttribute -> typeConstructor .)
    INT             reduce using rule 143 (parameterAttribute -> typeConstructor .)
    UINT            reduce using rule 143 (parameterAttribute -> typeConstructor .)
    LONG            reduce using rule 143 (parameterAttribute -> typeConstructor .)
    ULONG           reduce using rule 143 (parameterAttribute -> typeConstructor .)
    CHAR            reduce using rule 143 (parameterAttribute -> typeConstructor .)
    FLOAT           reduce using rule 143 (parameterAttribute -> typeConstructor .)
    TYPEOF          reduce using rule 143 (parameterAttribute -> typeConstructor .)
    IDENTIFIER      reduce using rule 143 (parameterAttribute -> typeConstructor .)


state 183

    (132) parameters -> LPAREN parameter . CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> LPAREN parameter . CommaParameterStar RPAREN
    (130) CommaParameterStar -> . COMMA parameter CommaParameterStar
    (131) CommaParameterStar -> . empty
    (397) empty -> .

    COMMA           reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)

  ! COMMA           [ shift and go to state 306 ]

    CommaParameterStar             shift and go to state 305
    empty                          shift and go to state 307

state 184

    (142) parameterAttributeStar -> empty .

    CONST           reduce using rule 142 (parameterAttributeStar -> empty .)
    IMMUTABLE       reduce using rule 142 (parameterAttributeStar -> empty .)
    THIS            reduce using rule 142 (parameterAttributeStar -> empty .)
    BOOL            reduce using rule 142 (parameterAttributeStar -> empty .)
    SHORT           reduce using rule 142 (parameterAttributeStar -> empty .)
    USHORT          reduce using rule 142 (parameterAttributeStar -> empty .)
    INT             reduce using rule 142 (parameterAttributeStar -> empty .)
    UINT            reduce using rule 142 (parameterAttributeStar -> empty .)
    LONG            reduce using rule 142 (parameterAttributeStar -> empty .)
    ULONG           reduce using rule 142 (parameterAttributeStar -> empty .)
    CHAR            reduce using rule 142 (parameterAttributeStar -> empty .)
    FLOAT           reduce using rule 142 (parameterAttributeStar -> empty .)
    TYPEOF          reduce using rule 142 (parameterAttributeStar -> empty .)
    IDENTIFIER      reduce using rule 142 (parameterAttributeStar -> empty .)


state 185

    (77) autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart . comma_identifier_assign_initializer SEMICOLON
    (79) comma_identifier_assign_initializer -> . COMMA autoDeclarationPart comma_identifier_assign_initializer
    (80) comma_identifier_assign_initializer -> . empty
    (397) empty -> .

    COMMA           shift and go to state 308
    SEMICOLON       reduce using rule 397 (empty -> .)

    empty                          shift and go to state 310
    comma_identifier_assign_initializer shift and go to state 309

state 186

    (147) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER . parameters multiple_memberFunctionAttribute SEMICOLON
    (148) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER . parameters multiple_memberFunctionAttribute functionBody
    (78) autoDeclarationPart -> IDENTIFIER . ASSIGN initializer
    (132) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (134) parameters -> . LPAREN ELLIPSIS RPAREN
    (135) parameters -> . LPAREN RPAREN

    ASSIGN          shift and go to state 312
    LPAREN          shift and go to state 117

    parameters                     shift and go to state 311

state 187

    (108) arrayLiteral -> LBRACKET . argumentList_question RBRACKET
    (335) argumentList_question -> . argumentList
    (336) argumentList_question -> . empty
    (337) argumentList -> . assignExpression
    (338) argumentList -> . argumentList comma_assign
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACKET        reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    argumentList                   shift and go to state 316
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    argumentList_question          shift and go to state 313
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 315
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    identifierOrTemplateInstance   shift and go to state 217
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 314
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    typeConstructor                shift and go to state 196
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229

state 188

    (16) unaryExpression -> UAMPERSAND . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 317
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 189

    (46) primaryExpression -> TRUE .

    DOT             reduce using rule 46 (primaryExpression -> TRUE .)
    PLUS_PLUS       reduce using rule 46 (primaryExpression -> TRUE .)
    MINUS_MINUS     reduce using rule 46 (primaryExpression -> TRUE .)
    LBRACKET        reduce using rule 46 (primaryExpression -> TRUE .)
    LPAREN          reduce using rule 46 (primaryExpression -> TRUE .)
    POWER           reduce using rule 46 (primaryExpression -> TRUE .)
    TIMES           reduce using rule 46 (primaryExpression -> TRUE .)
    DIV             reduce using rule 46 (primaryExpression -> TRUE .)
    MODULO          reduce using rule 46 (primaryExpression -> TRUE .)
    PLUS            reduce using rule 46 (primaryExpression -> TRUE .)
    MINUS           reduce using rule 46 (primaryExpression -> TRUE .)
    TILDE           reduce using rule 46 (primaryExpression -> TRUE .)
    RIGHT_SHIFT     reduce using rule 46 (primaryExpression -> TRUE .)
    LEFT_SHIFT      reduce using rule 46 (primaryExpression -> TRUE .)
    IS_EQ           reduce using rule 46 (primaryExpression -> TRUE .)
    NOT_EQ          reduce using rule 46 (primaryExpression -> TRUE .)
    AMPERSAND       reduce using rule 46 (primaryExpression -> TRUE .)
    CARET           reduce using rule 46 (primaryExpression -> TRUE .)
    PIPE            reduce using rule 46 (primaryExpression -> TRUE .)
    DOUBLE_AMPERSAND reduce using rule 46 (primaryExpression -> TRUE .)
    QUESTION        reduce using rule 46 (primaryExpression -> TRUE .)
    DOUBLE_PIPE     reduce using rule 46 (primaryExpression -> TRUE .)
    ASSIGN          reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_LEFT         reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_RIGHT        reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_PLUS         reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_MINUS        reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_TIMES        reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_MODULO       reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_AND_BIT      reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_DIV          reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_OR_BIT       reduce using rule 46 (primaryExpression -> TRUE .)
    EQ_XOR_BIT      reduce using rule 46 (primaryExpression -> TRUE .)
    RBRACKET        reduce using rule 46 (primaryExpression -> TRUE .)
    RANGE           reduce using rule 46 (primaryExpression -> TRUE .)
    LESS            reduce using rule 46 (primaryExpression -> TRUE .)
    LESS_EQ         reduce using rule 46 (primaryExpression -> TRUE .)
    GREATER         reduce using rule 46 (primaryExpression -> TRUE .)
    GREATER_EQ      reduce using rule 46 (primaryExpression -> TRUE .)
    IS_EQ_DIFF      reduce using rule 46 (primaryExpression -> TRUE .)
    NOT_EQ_DIFF     reduce using rule 46 (primaryExpression -> TRUE .)
    LESS_EQ_DIFF    reduce using rule 46 (primaryExpression -> TRUE .)
    LESS_DIFF       reduce using rule 46 (primaryExpression -> TRUE .)
    GREATER_EQ_DIFF reduce using rule 46 (primaryExpression -> TRUE .)
    GREATER_DIFF    reduce using rule 46 (primaryExpression -> TRUE .)
    RPAREN          reduce using rule 46 (primaryExpression -> TRUE .)
    COMMA           reduce using rule 46 (primaryExpression -> TRUE .)
    SEMICOLON       reduce using rule 46 (primaryExpression -> TRUE .)
    COLON           reduce using rule 46 (primaryExpression -> TRUE .)
    IDENTIFIER      reduce using rule 46 (primaryExpression -> TRUE .)
    CONST           reduce using rule 46 (primaryExpression -> TRUE .)
    IMMUTABLE       reduce using rule 46 (primaryExpression -> TRUE .)
    RBRACE          reduce using rule 46 (primaryExpression -> TRUE .)
    THIS            reduce using rule 46 (primaryExpression -> TRUE .)
    BOOL            reduce using rule 46 (primaryExpression -> TRUE .)
    SHORT           reduce using rule 46 (primaryExpression -> TRUE .)
    USHORT          reduce using rule 46 (primaryExpression -> TRUE .)
    INT             reduce using rule 46 (primaryExpression -> TRUE .)
    UINT            reduce using rule 46 (primaryExpression -> TRUE .)
    LONG            reduce using rule 46 (primaryExpression -> TRUE .)
    ULONG           reduce using rule 46 (primaryExpression -> TRUE .)
    CHAR            reduce using rule 46 (primaryExpression -> TRUE .)
    FLOAT           reduce using rule 46 (primaryExpression -> TRUE .)
    TYPEOF          reduce using rule 46 (primaryExpression -> TRUE .)


state 190

    (379) cmpExpression -> relExpression .
    (386) relExpression -> relExpression . relOperator shiftExpression
    (387) relOperator -> . LESS
    (388) relOperator -> . LESS_EQ
    (389) relOperator -> . GREATER
    (390) relOperator -> . GREATER_EQ
    (391) relOperator -> . IS_EQ_DIFF
    (392) relOperator -> . NOT_EQ_DIFF
    (393) relOperator -> . LESS_EQ_DIFF
    (394) relOperator -> . LESS_DIFF
    (395) relOperator -> . GREATER_EQ_DIFF
    (396) relOperator -> . GREATER_DIFF

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
  ! shift/reduce conflict for IS_EQ_DIFF resolved as shift
  ! shift/reduce conflict for NOT_EQ_DIFF resolved as shift
  ! shift/reduce conflict for LESS_EQ_DIFF resolved as shift
  ! shift/reduce conflict for LESS_DIFF resolved as shift
  ! shift/reduce conflict for GREATER_EQ_DIFF resolved as shift
  ! shift/reduce conflict for GREATER_DIFF resolved as shift
    AMPERSAND       reduce using rule 379 (cmpExpression -> relExpression .)
    CARET           reduce using rule 379 (cmpExpression -> relExpression .)
    PIPE            reduce using rule 379 (cmpExpression -> relExpression .)
    DOUBLE_AMPERSAND reduce using rule 379 (cmpExpression -> relExpression .)
    QUESTION        reduce using rule 379 (cmpExpression -> relExpression .)
    DOUBLE_PIPE     reduce using rule 379 (cmpExpression -> relExpression .)
    ASSIGN          reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_LEFT         reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_RIGHT        reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_PLUS         reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_MINUS        reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_TIMES        reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_MODULO       reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_AND_BIT      reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_DIV          reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_OR_BIT       reduce using rule 379 (cmpExpression -> relExpression .)
    EQ_XOR_BIT      reduce using rule 379 (cmpExpression -> relExpression .)
    RPAREN          reduce using rule 379 (cmpExpression -> relExpression .)
    COMMA           reduce using rule 379 (cmpExpression -> relExpression .)
    COLON           reduce using rule 379 (cmpExpression -> relExpression .)
    RBRACKET        reduce using rule 379 (cmpExpression -> relExpression .)
    IDENTIFIER      reduce using rule 379 (cmpExpression -> relExpression .)
    CONST           reduce using rule 379 (cmpExpression -> relExpression .)
    IMMUTABLE       reduce using rule 379 (cmpExpression -> relExpression .)
    RBRACE          reduce using rule 379 (cmpExpression -> relExpression .)
    THIS            reduce using rule 379 (cmpExpression -> relExpression .)
    BOOL            reduce using rule 379 (cmpExpression -> relExpression .)
    SHORT           reduce using rule 379 (cmpExpression -> relExpression .)
    USHORT          reduce using rule 379 (cmpExpression -> relExpression .)
    INT             reduce using rule 379 (cmpExpression -> relExpression .)
    UINT            reduce using rule 379 (cmpExpression -> relExpression .)
    LONG            reduce using rule 379 (cmpExpression -> relExpression .)
    ULONG           reduce using rule 379 (cmpExpression -> relExpression .)
    CHAR            reduce using rule 379 (cmpExpression -> relExpression .)
    FLOAT           reduce using rule 379 (cmpExpression -> relExpression .)
    TYPEOF          reduce using rule 379 (cmpExpression -> relExpression .)
    SEMICOLON       reduce using rule 379 (cmpExpression -> relExpression .)
    RANGE           reduce using rule 379 (cmpExpression -> relExpression .)
    DOT             reduce using rule 379 (cmpExpression -> relExpression .)
    PLUS_PLUS       reduce using rule 379 (cmpExpression -> relExpression .)
    MINUS_MINUS     reduce using rule 379 (cmpExpression -> relExpression .)
    LBRACKET        reduce using rule 379 (cmpExpression -> relExpression .)
    LPAREN          reduce using rule 379 (cmpExpression -> relExpression .)
    POWER           reduce using rule 379 (cmpExpression -> relExpression .)
    TIMES           reduce using rule 379 (cmpExpression -> relExpression .)
    DIV             reduce using rule 379 (cmpExpression -> relExpression .)
    MODULO          reduce using rule 379 (cmpExpression -> relExpression .)
    PLUS            reduce using rule 379 (cmpExpression -> relExpression .)
    MINUS           reduce using rule 379 (cmpExpression -> relExpression .)
    TILDE           reduce using rule 379 (cmpExpression -> relExpression .)
    RIGHT_SHIFT     reduce using rule 379 (cmpExpression -> relExpression .)
    LEFT_SHIFT      reduce using rule 379 (cmpExpression -> relExpression .)
    IS_EQ           reduce using rule 379 (cmpExpression -> relExpression .)
    NOT_EQ          reduce using rule 379 (cmpExpression -> relExpression .)
    LESS            shift and go to state 321
    LESS_EQ         shift and go to state 318
    GREATER         shift and go to state 320
    GREATER_EQ      shift and go to state 324
    IS_EQ_DIFF      shift and go to state 323
    NOT_EQ_DIFF     shift and go to state 325
    LESS_EQ_DIFF    shift and go to state 327
    LESS_DIFF       shift and go to state 322
    GREATER_EQ_DIFF shift and go to state 319
    GREATER_DIFF    shift and go to state 326

  ! LESS            [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! LESS_EQ         [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! GREATER         [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! GREATER_EQ      [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! IS_EQ_DIFF      [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! LESS_DIFF       [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 379 (cmpExpression -> relExpression .) ]
  ! GREATER_DIFF    [ reduce using rule 379 (cmpExpression -> relExpression .) ]

    relOperator                    shift and go to state 328

state 191

    (38) primaryExpression -> arrayLiteral .

    DOT             reduce using rule 38 (primaryExpression -> arrayLiteral .)
    PLUS_PLUS       reduce using rule 38 (primaryExpression -> arrayLiteral .)
    MINUS_MINUS     reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LBRACKET        reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LPAREN          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    POWER           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    TIMES           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    DIV             reduce using rule 38 (primaryExpression -> arrayLiteral .)
    MODULO          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    PLUS            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    MINUS           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    TILDE           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    RIGHT_SHIFT     reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LEFT_SHIFT      reduce using rule 38 (primaryExpression -> arrayLiteral .)
    IS_EQ           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    NOT_EQ          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    AMPERSAND       reduce using rule 38 (primaryExpression -> arrayLiteral .)
    CARET           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    PIPE            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    DOUBLE_AMPERSAND reduce using rule 38 (primaryExpression -> arrayLiteral .)
    QUESTION        reduce using rule 38 (primaryExpression -> arrayLiteral .)
    DOUBLE_PIPE     reduce using rule 38 (primaryExpression -> arrayLiteral .)
    ASSIGN          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_LEFT         reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_RIGHT        reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_PLUS         reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_MINUS        reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_TIMES        reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_MODULO       reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_AND_BIT      reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_DIV          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_OR_BIT       reduce using rule 38 (primaryExpression -> arrayLiteral .)
    EQ_XOR_BIT      reduce using rule 38 (primaryExpression -> arrayLiteral .)
    RBRACKET        reduce using rule 38 (primaryExpression -> arrayLiteral .)
    RANGE           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LESS            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LESS_EQ         reduce using rule 38 (primaryExpression -> arrayLiteral .)
    GREATER         reduce using rule 38 (primaryExpression -> arrayLiteral .)
    GREATER_EQ      reduce using rule 38 (primaryExpression -> arrayLiteral .)
    IS_EQ_DIFF      reduce using rule 38 (primaryExpression -> arrayLiteral .)
    NOT_EQ_DIFF     reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LESS_EQ_DIFF    reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LESS_DIFF       reduce using rule 38 (primaryExpression -> arrayLiteral .)
    GREATER_EQ_DIFF reduce using rule 38 (primaryExpression -> arrayLiteral .)
    GREATER_DIFF    reduce using rule 38 (primaryExpression -> arrayLiteral .)
    RPAREN          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    COMMA           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    SEMICOLON       reduce using rule 38 (primaryExpression -> arrayLiteral .)
    COLON           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    IDENTIFIER      reduce using rule 38 (primaryExpression -> arrayLiteral .)
    CONST           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    IMMUTABLE       reduce using rule 38 (primaryExpression -> arrayLiteral .)
    RBRACE          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    THIS            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    BOOL            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    SHORT           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    USHORT          reduce using rule 38 (primaryExpression -> arrayLiteral .)
    INT             reduce using rule 38 (primaryExpression -> arrayLiteral .)
    UINT            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    LONG            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    ULONG           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    CHAR            reduce using rule 38 (primaryExpression -> arrayLiteral .)
    FLOAT           reduce using rule 38 (primaryExpression -> arrayLiteral .)
    TYPEOF          reduce using rule 38 (primaryExpression -> arrayLiteral .)


state 192

    (49) primaryExpression -> DNUMBER .

    DOT             reduce using rule 49 (primaryExpression -> DNUMBER .)
    PLUS_PLUS       reduce using rule 49 (primaryExpression -> DNUMBER .)
    MINUS_MINUS     reduce using rule 49 (primaryExpression -> DNUMBER .)
    LBRACKET        reduce using rule 49 (primaryExpression -> DNUMBER .)
    LPAREN          reduce using rule 49 (primaryExpression -> DNUMBER .)
    POWER           reduce using rule 49 (primaryExpression -> DNUMBER .)
    TIMES           reduce using rule 49 (primaryExpression -> DNUMBER .)
    DIV             reduce using rule 49 (primaryExpression -> DNUMBER .)
    MODULO          reduce using rule 49 (primaryExpression -> DNUMBER .)
    PLUS            reduce using rule 49 (primaryExpression -> DNUMBER .)
    MINUS           reduce using rule 49 (primaryExpression -> DNUMBER .)
    TILDE           reduce using rule 49 (primaryExpression -> DNUMBER .)
    RIGHT_SHIFT     reduce using rule 49 (primaryExpression -> DNUMBER .)
    LEFT_SHIFT      reduce using rule 49 (primaryExpression -> DNUMBER .)
    IS_EQ           reduce using rule 49 (primaryExpression -> DNUMBER .)
    NOT_EQ          reduce using rule 49 (primaryExpression -> DNUMBER .)
    AMPERSAND       reduce using rule 49 (primaryExpression -> DNUMBER .)
    CARET           reduce using rule 49 (primaryExpression -> DNUMBER .)
    PIPE            reduce using rule 49 (primaryExpression -> DNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 49 (primaryExpression -> DNUMBER .)
    QUESTION        reduce using rule 49 (primaryExpression -> DNUMBER .)
    DOUBLE_PIPE     reduce using rule 49 (primaryExpression -> DNUMBER .)
    ASSIGN          reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_LEFT         reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_RIGHT        reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_PLUS         reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_MINUS        reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_TIMES        reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_MODULO       reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_AND_BIT      reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_DIV          reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_OR_BIT       reduce using rule 49 (primaryExpression -> DNUMBER .)
    EQ_XOR_BIT      reduce using rule 49 (primaryExpression -> DNUMBER .)
    RBRACKET        reduce using rule 49 (primaryExpression -> DNUMBER .)
    RANGE           reduce using rule 49 (primaryExpression -> DNUMBER .)
    LESS            reduce using rule 49 (primaryExpression -> DNUMBER .)
    LESS_EQ         reduce using rule 49 (primaryExpression -> DNUMBER .)
    GREATER         reduce using rule 49 (primaryExpression -> DNUMBER .)
    GREATER_EQ      reduce using rule 49 (primaryExpression -> DNUMBER .)
    IS_EQ_DIFF      reduce using rule 49 (primaryExpression -> DNUMBER .)
    NOT_EQ_DIFF     reduce using rule 49 (primaryExpression -> DNUMBER .)
    LESS_EQ_DIFF    reduce using rule 49 (primaryExpression -> DNUMBER .)
    LESS_DIFF       reduce using rule 49 (primaryExpression -> DNUMBER .)
    GREATER_EQ_DIFF reduce using rule 49 (primaryExpression -> DNUMBER .)
    GREATER_DIFF    reduce using rule 49 (primaryExpression -> DNUMBER .)
    RPAREN          reduce using rule 49 (primaryExpression -> DNUMBER .)
    COMMA           reduce using rule 49 (primaryExpression -> DNUMBER .)
    SEMICOLON       reduce using rule 49 (primaryExpression -> DNUMBER .)
    COLON           reduce using rule 49 (primaryExpression -> DNUMBER .)
    IDENTIFIER      reduce using rule 49 (primaryExpression -> DNUMBER .)
    CONST           reduce using rule 49 (primaryExpression -> DNUMBER .)
    IMMUTABLE       reduce using rule 49 (primaryExpression -> DNUMBER .)
    RBRACE          reduce using rule 49 (primaryExpression -> DNUMBER .)
    THIS            reduce using rule 49 (primaryExpression -> DNUMBER .)
    BOOL            reduce using rule 49 (primaryExpression -> DNUMBER .)
    SHORT           reduce using rule 49 (primaryExpression -> DNUMBER .)
    USHORT          reduce using rule 49 (primaryExpression -> DNUMBER .)
    INT             reduce using rule 49 (primaryExpression -> DNUMBER .)
    UINT            reduce using rule 49 (primaryExpression -> DNUMBER .)
    LONG            reduce using rule 49 (primaryExpression -> DNUMBER .)
    ULONG           reduce using rule 49 (primaryExpression -> DNUMBER .)
    CHAR            reduce using rule 49 (primaryExpression -> DNUMBER .)
    FLOAT           reduce using rule 49 (primaryExpression -> DNUMBER .)
    TYPEOF          reduce using rule 49 (primaryExpression -> DNUMBER .)


state 193

    (19) unaryExpression -> UPLUS . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 329
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 194

    (44) primaryExpression -> THIS .

    DOT             reduce using rule 44 (primaryExpression -> THIS .)
    PLUS_PLUS       reduce using rule 44 (primaryExpression -> THIS .)
    MINUS_MINUS     reduce using rule 44 (primaryExpression -> THIS .)
    LBRACKET        reduce using rule 44 (primaryExpression -> THIS .)
    LPAREN          reduce using rule 44 (primaryExpression -> THIS .)
    POWER           reduce using rule 44 (primaryExpression -> THIS .)
    TIMES           reduce using rule 44 (primaryExpression -> THIS .)
    DIV             reduce using rule 44 (primaryExpression -> THIS .)
    MODULO          reduce using rule 44 (primaryExpression -> THIS .)
    PLUS            reduce using rule 44 (primaryExpression -> THIS .)
    MINUS           reduce using rule 44 (primaryExpression -> THIS .)
    TILDE           reduce using rule 44 (primaryExpression -> THIS .)
    RIGHT_SHIFT     reduce using rule 44 (primaryExpression -> THIS .)
    LEFT_SHIFT      reduce using rule 44 (primaryExpression -> THIS .)
    IS_EQ           reduce using rule 44 (primaryExpression -> THIS .)
    NOT_EQ          reduce using rule 44 (primaryExpression -> THIS .)
    AMPERSAND       reduce using rule 44 (primaryExpression -> THIS .)
    CARET           reduce using rule 44 (primaryExpression -> THIS .)
    PIPE            reduce using rule 44 (primaryExpression -> THIS .)
    DOUBLE_AMPERSAND reduce using rule 44 (primaryExpression -> THIS .)
    QUESTION        reduce using rule 44 (primaryExpression -> THIS .)
    DOUBLE_PIPE     reduce using rule 44 (primaryExpression -> THIS .)
    ASSIGN          reduce using rule 44 (primaryExpression -> THIS .)
    EQ_LEFT         reduce using rule 44 (primaryExpression -> THIS .)
    EQ_RIGHT        reduce using rule 44 (primaryExpression -> THIS .)
    EQ_PLUS         reduce using rule 44 (primaryExpression -> THIS .)
    EQ_MINUS        reduce using rule 44 (primaryExpression -> THIS .)
    EQ_TIMES        reduce using rule 44 (primaryExpression -> THIS .)
    EQ_MODULO       reduce using rule 44 (primaryExpression -> THIS .)
    EQ_AND_BIT      reduce using rule 44 (primaryExpression -> THIS .)
    EQ_DIV          reduce using rule 44 (primaryExpression -> THIS .)
    EQ_OR_BIT       reduce using rule 44 (primaryExpression -> THIS .)
    EQ_XOR_BIT      reduce using rule 44 (primaryExpression -> THIS .)
    RBRACKET        reduce using rule 44 (primaryExpression -> THIS .)
    RANGE           reduce using rule 44 (primaryExpression -> THIS .)
    LESS            reduce using rule 44 (primaryExpression -> THIS .)
    LESS_EQ         reduce using rule 44 (primaryExpression -> THIS .)
    GREATER         reduce using rule 44 (primaryExpression -> THIS .)
    GREATER_EQ      reduce using rule 44 (primaryExpression -> THIS .)
    IS_EQ_DIFF      reduce using rule 44 (primaryExpression -> THIS .)
    NOT_EQ_DIFF     reduce using rule 44 (primaryExpression -> THIS .)
    LESS_EQ_DIFF    reduce using rule 44 (primaryExpression -> THIS .)
    LESS_DIFF       reduce using rule 44 (primaryExpression -> THIS .)
    GREATER_EQ_DIFF reduce using rule 44 (primaryExpression -> THIS .)
    GREATER_DIFF    reduce using rule 44 (primaryExpression -> THIS .)
    RPAREN          reduce using rule 44 (primaryExpression -> THIS .)
    COMMA           reduce using rule 44 (primaryExpression -> THIS .)
    SEMICOLON       reduce using rule 44 (primaryExpression -> THIS .)
    COLON           reduce using rule 44 (primaryExpression -> THIS .)
    IDENTIFIER      reduce using rule 44 (primaryExpression -> THIS .)
    CONST           reduce using rule 44 (primaryExpression -> THIS .)
    IMMUTABLE       reduce using rule 44 (primaryExpression -> THIS .)
    RBRACE          reduce using rule 44 (primaryExpression -> THIS .)
    THIS            reduce using rule 44 (primaryExpression -> THIS .)
    BOOL            reduce using rule 44 (primaryExpression -> THIS .)
    SHORT           reduce using rule 44 (primaryExpression -> THIS .)
    USHORT          reduce using rule 44 (primaryExpression -> THIS .)
    INT             reduce using rule 44 (primaryExpression -> THIS .)
    UINT            reduce using rule 44 (primaryExpression -> THIS .)
    LONG            reduce using rule 44 (primaryExpression -> THIS .)
    ULONG           reduce using rule 44 (primaryExpression -> THIS .)
    CHAR            reduce using rule 44 (primaryExpression -> THIS .)
    FLOAT           reduce using rule 44 (primaryExpression -> THIS .)
    TYPEOF          reduce using rule 44 (primaryExpression -> THIS .)


state 195

    (312) symbol -> identifierOrTemplateChain .
    (314) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

    LPAREN          reduce using rule 312 (symbol -> identifierOrTemplateChain .)
    DOT             shift and go to state 330


state 196

    (35) primaryExpression -> typeConstructor . LPAREN type RPAREN DOT IDENTIFIER
    (224) typeConstructors -> typeConstructor . multiple_typeConstructors
    (225) multiple_typeConstructors -> . typeConstructor multiple_typeConstructors
    (226) multiple_typeConstructors -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LPAREN          shift and go to state 331
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multiple_typeConstructors      shift and go to state 60
    typeConstructor                shift and go to state 61
    empty                          shift and go to state 64

state 197

    (302) deleteExpression -> DELETE . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 332
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 198

    (367) orOrExpression -> andAndExpression .
    (370) andAndExpression -> andAndExpression . DOUBLE_AMPERSAND orExpression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
    QUESTION        reduce using rule 367 (orOrExpression -> andAndExpression .)
    DOUBLE_PIPE     reduce using rule 367 (orOrExpression -> andAndExpression .)
    ASSIGN          reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_LEFT         reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_RIGHT        reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_PLUS         reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_MINUS        reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_TIMES        reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_MODULO       reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_AND_BIT      reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_DIV          reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_OR_BIT       reduce using rule 367 (orOrExpression -> andAndExpression .)
    EQ_XOR_BIT      reduce using rule 367 (orOrExpression -> andAndExpression .)
    COMMA           reduce using rule 367 (orOrExpression -> andAndExpression .)
    SEMICOLON       reduce using rule 367 (orOrExpression -> andAndExpression .)
    RBRACKET        reduce using rule 367 (orOrExpression -> andAndExpression .)
    RPAREN          reduce using rule 367 (orOrExpression -> andAndExpression .)
    IDENTIFIER      reduce using rule 367 (orOrExpression -> andAndExpression .)
    CONST           reduce using rule 367 (orOrExpression -> andAndExpression .)
    IMMUTABLE       reduce using rule 367 (orOrExpression -> andAndExpression .)
    RBRACE          reduce using rule 367 (orOrExpression -> andAndExpression .)
    THIS            reduce using rule 367 (orOrExpression -> andAndExpression .)
    BOOL            reduce using rule 367 (orOrExpression -> andAndExpression .)
    SHORT           reduce using rule 367 (orOrExpression -> andAndExpression .)
    USHORT          reduce using rule 367 (orOrExpression -> andAndExpression .)
    INT             reduce using rule 367 (orOrExpression -> andAndExpression .)
    UINT            reduce using rule 367 (orOrExpression -> andAndExpression .)
    LONG            reduce using rule 367 (orOrExpression -> andAndExpression .)
    ULONG           reduce using rule 367 (orOrExpression -> andAndExpression .)
    CHAR            reduce using rule 367 (orOrExpression -> andAndExpression .)
    FLOAT           reduce using rule 367 (orOrExpression -> andAndExpression .)
    TYPEOF          reduce using rule 367 (orOrExpression -> andAndExpression .)
    RANGE           reduce using rule 367 (orOrExpression -> andAndExpression .)
    COLON           reduce using rule 367 (orOrExpression -> andAndExpression .)
    DOT             reduce using rule 367 (orOrExpression -> andAndExpression .)
    PLUS_PLUS       reduce using rule 367 (orOrExpression -> andAndExpression .)
    MINUS_MINUS     reduce using rule 367 (orOrExpression -> andAndExpression .)
    LBRACKET        reduce using rule 367 (orOrExpression -> andAndExpression .)
    LPAREN          reduce using rule 367 (orOrExpression -> andAndExpression .)
    POWER           reduce using rule 367 (orOrExpression -> andAndExpression .)
    TIMES           reduce using rule 367 (orOrExpression -> andAndExpression .)
    DIV             reduce using rule 367 (orOrExpression -> andAndExpression .)
    MODULO          reduce using rule 367 (orOrExpression -> andAndExpression .)
    PLUS            reduce using rule 367 (orOrExpression -> andAndExpression .)
    MINUS           reduce using rule 367 (orOrExpression -> andAndExpression .)
    TILDE           reduce using rule 367 (orOrExpression -> andAndExpression .)
    RIGHT_SHIFT     reduce using rule 367 (orOrExpression -> andAndExpression .)
    LEFT_SHIFT      reduce using rule 367 (orOrExpression -> andAndExpression .)
    IS_EQ           reduce using rule 367 (orOrExpression -> andAndExpression .)
    NOT_EQ          reduce using rule 367 (orOrExpression -> andAndExpression .)
    AMPERSAND       reduce using rule 367 (orOrExpression -> andAndExpression .)
    CARET           reduce using rule 367 (orOrExpression -> andAndExpression .)
    PIPE            reduce using rule 367 (orOrExpression -> andAndExpression .)
    LESS            reduce using rule 367 (orOrExpression -> andAndExpression .)
    LESS_EQ         reduce using rule 367 (orOrExpression -> andAndExpression .)
    GREATER         reduce using rule 367 (orOrExpression -> andAndExpression .)
    GREATER_EQ      reduce using rule 367 (orOrExpression -> andAndExpression .)
    IS_EQ_DIFF      reduce using rule 367 (orOrExpression -> andAndExpression .)
    NOT_EQ_DIFF     reduce using rule 367 (orOrExpression -> andAndExpression .)
    LESS_EQ_DIFF    reduce using rule 367 (orOrExpression -> andAndExpression .)
    LESS_DIFF       reduce using rule 367 (orOrExpression -> andAndExpression .)
    GREATER_EQ_DIFF reduce using rule 367 (orOrExpression -> andAndExpression .)
    GREATER_DIFF    reduce using rule 367 (orOrExpression -> andAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 333

  ! DOUBLE_AMPERSAND [ reduce using rule 367 (orOrExpression -> andAndExpression .) ]


state 199

    (41) primaryExpression -> mixinExpression .

    DOT             reduce using rule 41 (primaryExpression -> mixinExpression .)
    PLUS_PLUS       reduce using rule 41 (primaryExpression -> mixinExpression .)
    MINUS_MINUS     reduce using rule 41 (primaryExpression -> mixinExpression .)
    LBRACKET        reduce using rule 41 (primaryExpression -> mixinExpression .)
    LPAREN          reduce using rule 41 (primaryExpression -> mixinExpression .)
    POWER           reduce using rule 41 (primaryExpression -> mixinExpression .)
    TIMES           reduce using rule 41 (primaryExpression -> mixinExpression .)
    DIV             reduce using rule 41 (primaryExpression -> mixinExpression .)
    MODULO          reduce using rule 41 (primaryExpression -> mixinExpression .)
    PLUS            reduce using rule 41 (primaryExpression -> mixinExpression .)
    MINUS           reduce using rule 41 (primaryExpression -> mixinExpression .)
    TILDE           reduce using rule 41 (primaryExpression -> mixinExpression .)
    RIGHT_SHIFT     reduce using rule 41 (primaryExpression -> mixinExpression .)
    LEFT_SHIFT      reduce using rule 41 (primaryExpression -> mixinExpression .)
    IS_EQ           reduce using rule 41 (primaryExpression -> mixinExpression .)
    NOT_EQ          reduce using rule 41 (primaryExpression -> mixinExpression .)
    AMPERSAND       reduce using rule 41 (primaryExpression -> mixinExpression .)
    CARET           reduce using rule 41 (primaryExpression -> mixinExpression .)
    PIPE            reduce using rule 41 (primaryExpression -> mixinExpression .)
    DOUBLE_AMPERSAND reduce using rule 41 (primaryExpression -> mixinExpression .)
    QUESTION        reduce using rule 41 (primaryExpression -> mixinExpression .)
    DOUBLE_PIPE     reduce using rule 41 (primaryExpression -> mixinExpression .)
    ASSIGN          reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_LEFT         reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_RIGHT        reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_PLUS         reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_MINUS        reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_TIMES        reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_MODULO       reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_AND_BIT      reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_DIV          reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_OR_BIT       reduce using rule 41 (primaryExpression -> mixinExpression .)
    EQ_XOR_BIT      reduce using rule 41 (primaryExpression -> mixinExpression .)
    RBRACKET        reduce using rule 41 (primaryExpression -> mixinExpression .)
    RANGE           reduce using rule 41 (primaryExpression -> mixinExpression .)
    LESS            reduce using rule 41 (primaryExpression -> mixinExpression .)
    LESS_EQ         reduce using rule 41 (primaryExpression -> mixinExpression .)
    GREATER         reduce using rule 41 (primaryExpression -> mixinExpression .)
    GREATER_EQ      reduce using rule 41 (primaryExpression -> mixinExpression .)
    IS_EQ_DIFF      reduce using rule 41 (primaryExpression -> mixinExpression .)
    NOT_EQ_DIFF     reduce using rule 41 (primaryExpression -> mixinExpression .)
    LESS_EQ_DIFF    reduce using rule 41 (primaryExpression -> mixinExpression .)
    LESS_DIFF       reduce using rule 41 (primaryExpression -> mixinExpression .)
    GREATER_EQ_DIFF reduce using rule 41 (primaryExpression -> mixinExpression .)
    GREATER_DIFF    reduce using rule 41 (primaryExpression -> mixinExpression .)
    RPAREN          reduce using rule 41 (primaryExpression -> mixinExpression .)
    COMMA           reduce using rule 41 (primaryExpression -> mixinExpression .)
    SEMICOLON       reduce using rule 41 (primaryExpression -> mixinExpression .)
    COLON           reduce using rule 41 (primaryExpression -> mixinExpression .)
    IDENTIFIER      reduce using rule 41 (primaryExpression -> mixinExpression .)
    CONST           reduce using rule 41 (primaryExpression -> mixinExpression .)
    IMMUTABLE       reduce using rule 41 (primaryExpression -> mixinExpression .)
    RBRACE          reduce using rule 41 (primaryExpression -> mixinExpression .)
    THIS            reduce using rule 41 (primaryExpression -> mixinExpression .)
    BOOL            reduce using rule 41 (primaryExpression -> mixinExpression .)
    SHORT           reduce using rule 41 (primaryExpression -> mixinExpression .)
    USHORT          reduce using rule 41 (primaryExpression -> mixinExpression .)
    INT             reduce using rule 41 (primaryExpression -> mixinExpression .)
    UINT            reduce using rule 41 (primaryExpression -> mixinExpression .)
    LONG            reduce using rule 41 (primaryExpression -> mixinExpression .)
    ULONG           reduce using rule 41 (primaryExpression -> mixinExpression .)
    CHAR            reduce using rule 41 (primaryExpression -> mixinExpression .)
    FLOAT           reduce using rule 41 (primaryExpression -> mixinExpression .)
    TYPEOF          reduce using rule 41 (primaryExpression -> mixinExpression .)


state 200

    (5) addExpression -> mulExpression .
    (10) mulExpression -> mulExpression . TIMES powExpression
    (11) mulExpression -> mulExpression . DIV powExpression
    (12) mulExpression -> mulExpression . MODULO powExpression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 5 (addExpression -> mulExpression .)
    MINUS           reduce using rule 5 (addExpression -> mulExpression .)
    TILDE           reduce using rule 5 (addExpression -> mulExpression .)
    RIGHT_SHIFT     reduce using rule 5 (addExpression -> mulExpression .)
    LEFT_SHIFT      reduce using rule 5 (addExpression -> mulExpression .)
    IS_EQ           reduce using rule 5 (addExpression -> mulExpression .)
    NOT_EQ          reduce using rule 5 (addExpression -> mulExpression .)
    AMPERSAND       reduce using rule 5 (addExpression -> mulExpression .)
    CARET           reduce using rule 5 (addExpression -> mulExpression .)
    PIPE            reduce using rule 5 (addExpression -> mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 5 (addExpression -> mulExpression .)
    QUESTION        reduce using rule 5 (addExpression -> mulExpression .)
    DOUBLE_PIPE     reduce using rule 5 (addExpression -> mulExpression .)
    ASSIGN          reduce using rule 5 (addExpression -> mulExpression .)
    EQ_LEFT         reduce using rule 5 (addExpression -> mulExpression .)
    EQ_RIGHT        reduce using rule 5 (addExpression -> mulExpression .)
    EQ_PLUS         reduce using rule 5 (addExpression -> mulExpression .)
    EQ_MINUS        reduce using rule 5 (addExpression -> mulExpression .)
    EQ_TIMES        reduce using rule 5 (addExpression -> mulExpression .)
    EQ_MODULO       reduce using rule 5 (addExpression -> mulExpression .)
    EQ_AND_BIT      reduce using rule 5 (addExpression -> mulExpression .)
    EQ_DIV          reduce using rule 5 (addExpression -> mulExpression .)
    EQ_OR_BIT       reduce using rule 5 (addExpression -> mulExpression .)
    EQ_XOR_BIT      reduce using rule 5 (addExpression -> mulExpression .)
    RBRACKET        reduce using rule 5 (addExpression -> mulExpression .)
    LESS            reduce using rule 5 (addExpression -> mulExpression .)
    LESS_EQ         reduce using rule 5 (addExpression -> mulExpression .)
    GREATER         reduce using rule 5 (addExpression -> mulExpression .)
    GREATER_EQ      reduce using rule 5 (addExpression -> mulExpression .)
    IS_EQ_DIFF      reduce using rule 5 (addExpression -> mulExpression .)
    NOT_EQ_DIFF     reduce using rule 5 (addExpression -> mulExpression .)
    LESS_EQ_DIFF    reduce using rule 5 (addExpression -> mulExpression .)
    LESS_DIFF       reduce using rule 5 (addExpression -> mulExpression .)
    GREATER_EQ_DIFF reduce using rule 5 (addExpression -> mulExpression .)
    GREATER_DIFF    reduce using rule 5 (addExpression -> mulExpression .)
    SEMICOLON       reduce using rule 5 (addExpression -> mulExpression .)
    COMMA           reduce using rule 5 (addExpression -> mulExpression .)
    RPAREN          reduce using rule 5 (addExpression -> mulExpression .)
    COLON           reduce using rule 5 (addExpression -> mulExpression .)
    DOT             reduce using rule 5 (addExpression -> mulExpression .)
    PLUS_PLUS       reduce using rule 5 (addExpression -> mulExpression .)
    MINUS_MINUS     reduce using rule 5 (addExpression -> mulExpression .)
    LBRACKET        reduce using rule 5 (addExpression -> mulExpression .)
    LPAREN          reduce using rule 5 (addExpression -> mulExpression .)
    POWER           reduce using rule 5 (addExpression -> mulExpression .)
    RANGE           reduce using rule 5 (addExpression -> mulExpression .)
    IDENTIFIER      reduce using rule 5 (addExpression -> mulExpression .)
    CONST           reduce using rule 5 (addExpression -> mulExpression .)
    IMMUTABLE       reduce using rule 5 (addExpression -> mulExpression .)
    RBRACE          reduce using rule 5 (addExpression -> mulExpression .)
    THIS            reduce using rule 5 (addExpression -> mulExpression .)
    BOOL            reduce using rule 5 (addExpression -> mulExpression .)
    SHORT           reduce using rule 5 (addExpression -> mulExpression .)
    USHORT          reduce using rule 5 (addExpression -> mulExpression .)
    INT             reduce using rule 5 (addExpression -> mulExpression .)
    UINT            reduce using rule 5 (addExpression -> mulExpression .)
    LONG            reduce using rule 5 (addExpression -> mulExpression .)
    ULONG           reduce using rule 5 (addExpression -> mulExpression .)
    CHAR            reduce using rule 5 (addExpression -> mulExpression .)
    FLOAT           reduce using rule 5 (addExpression -> mulExpression .)
    TYPEOF          reduce using rule 5 (addExpression -> mulExpression .)
    TIMES           shift and go to state 336
    DIV             shift and go to state 334
    MODULO          shift and go to state 335

  ! TIMES           [ reduce using rule 5 (addExpression -> mulExpression .) ]
  ! DIV             [ reduce using rule 5 (addExpression -> mulExpression .) ]
  ! MODULO          [ reduce using rule 5 (addExpression -> mulExpression .) ]


state 201

    (22) unaryExpression -> MINUS_MINUS . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 337
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 202

    (344) functionLiteralExpression -> FUNCTION . functionBody
    (345) functionLiteralExpression -> FUNCTION . type functionBody
    (341) functionBody -> . blockStatement
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LBRACE          shift and go to state 207
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    functionBody                   shift and go to state 338
    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    blockStatement                 shift and go to state 237
    typeConstructors               shift and go to state 34
    type                           shift and go to state 339
    empty                          shift and go to state 139

state 203

    (27) unaryExpression -> indexExpression .

    DOT             reduce using rule 27 (unaryExpression -> indexExpression .)
    PLUS_PLUS       reduce using rule 27 (unaryExpression -> indexExpression .)
    MINUS_MINUS     reduce using rule 27 (unaryExpression -> indexExpression .)
    LBRACKET        reduce using rule 27 (unaryExpression -> indexExpression .)
    LPAREN          reduce using rule 27 (unaryExpression -> indexExpression .)
    POWER           reduce using rule 27 (unaryExpression -> indexExpression .)
    TIMES           reduce using rule 27 (unaryExpression -> indexExpression .)
    DIV             reduce using rule 27 (unaryExpression -> indexExpression .)
    MODULO          reduce using rule 27 (unaryExpression -> indexExpression .)
    PLUS            reduce using rule 27 (unaryExpression -> indexExpression .)
    MINUS           reduce using rule 27 (unaryExpression -> indexExpression .)
    TILDE           reduce using rule 27 (unaryExpression -> indexExpression .)
    RIGHT_SHIFT     reduce using rule 27 (unaryExpression -> indexExpression .)
    LEFT_SHIFT      reduce using rule 27 (unaryExpression -> indexExpression .)
    IS_EQ           reduce using rule 27 (unaryExpression -> indexExpression .)
    NOT_EQ          reduce using rule 27 (unaryExpression -> indexExpression .)
    AMPERSAND       reduce using rule 27 (unaryExpression -> indexExpression .)
    CARET           reduce using rule 27 (unaryExpression -> indexExpression .)
    PIPE            reduce using rule 27 (unaryExpression -> indexExpression .)
    DOUBLE_AMPERSAND reduce using rule 27 (unaryExpression -> indexExpression .)
    QUESTION        reduce using rule 27 (unaryExpression -> indexExpression .)
    DOUBLE_PIPE     reduce using rule 27 (unaryExpression -> indexExpression .)
    ASSIGN          reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_LEFT         reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_RIGHT        reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_PLUS         reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_MINUS        reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_TIMES        reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_MODULO       reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_AND_BIT      reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_DIV          reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_OR_BIT       reduce using rule 27 (unaryExpression -> indexExpression .)
    EQ_XOR_BIT      reduce using rule 27 (unaryExpression -> indexExpression .)
    COMMA           reduce using rule 27 (unaryExpression -> indexExpression .)
    SEMICOLON       reduce using rule 27 (unaryExpression -> indexExpression .)
    LESS            reduce using rule 27 (unaryExpression -> indexExpression .)
    LESS_EQ         reduce using rule 27 (unaryExpression -> indexExpression .)
    GREATER         reduce using rule 27 (unaryExpression -> indexExpression .)
    GREATER_EQ      reduce using rule 27 (unaryExpression -> indexExpression .)
    IS_EQ_DIFF      reduce using rule 27 (unaryExpression -> indexExpression .)
    NOT_EQ_DIFF     reduce using rule 27 (unaryExpression -> indexExpression .)
    LESS_EQ_DIFF    reduce using rule 27 (unaryExpression -> indexExpression .)
    LESS_DIFF       reduce using rule 27 (unaryExpression -> indexExpression .)
    GREATER_EQ_DIFF reduce using rule 27 (unaryExpression -> indexExpression .)
    GREATER_DIFF    reduce using rule 27 (unaryExpression -> indexExpression .)
    RPAREN          reduce using rule 27 (unaryExpression -> indexExpression .)
    RBRACKET        reduce using rule 27 (unaryExpression -> indexExpression .)
    COLON           reduce using rule 27 (unaryExpression -> indexExpression .)
    RANGE           reduce using rule 27 (unaryExpression -> indexExpression .)
    IDENTIFIER      reduce using rule 27 (unaryExpression -> indexExpression .)
    CONST           reduce using rule 27 (unaryExpression -> indexExpression .)
    IMMUTABLE       reduce using rule 27 (unaryExpression -> indexExpression .)
    RBRACE          reduce using rule 27 (unaryExpression -> indexExpression .)
    THIS            reduce using rule 27 (unaryExpression -> indexExpression .)
    BOOL            reduce using rule 27 (unaryExpression -> indexExpression .)
    SHORT           reduce using rule 27 (unaryExpression -> indexExpression .)
    USHORT          reduce using rule 27 (unaryExpression -> indexExpression .)
    INT             reduce using rule 27 (unaryExpression -> indexExpression .)
    UINT            reduce using rule 27 (unaryExpression -> indexExpression .)
    LONG            reduce using rule 27 (unaryExpression -> indexExpression .)
    ULONG           reduce using rule 27 (unaryExpression -> indexExpression .)
    CHAR            reduce using rule 27 (unaryExpression -> indexExpression .)
    FLOAT           reduce using rule 27 (unaryExpression -> indexExpression .)
    TYPEOF          reduce using rule 27 (unaryExpression -> indexExpression .)


state 204

    (371) orExpression -> xorExpression .
    (374) xorExpression -> xorExpression . CARET andExpression

  ! shift/reduce conflict for CARET resolved as shift
    PIPE            reduce using rule 371 (orExpression -> xorExpression .)
    DOUBLE_AMPERSAND reduce using rule 371 (orExpression -> xorExpression .)
    QUESTION        reduce using rule 371 (orExpression -> xorExpression .)
    DOUBLE_PIPE     reduce using rule 371 (orExpression -> xorExpression .)
    ASSIGN          reduce using rule 371 (orExpression -> xorExpression .)
    EQ_LEFT         reduce using rule 371 (orExpression -> xorExpression .)
    EQ_RIGHT        reduce using rule 371 (orExpression -> xorExpression .)
    EQ_PLUS         reduce using rule 371 (orExpression -> xorExpression .)
    EQ_MINUS        reduce using rule 371 (orExpression -> xorExpression .)
    EQ_TIMES        reduce using rule 371 (orExpression -> xorExpression .)
    EQ_MODULO       reduce using rule 371 (orExpression -> xorExpression .)
    EQ_AND_BIT      reduce using rule 371 (orExpression -> xorExpression .)
    EQ_DIV          reduce using rule 371 (orExpression -> xorExpression .)
    EQ_OR_BIT       reduce using rule 371 (orExpression -> xorExpression .)
    EQ_XOR_BIT      reduce using rule 371 (orExpression -> xorExpression .)
    SEMICOLON       reduce using rule 371 (orExpression -> xorExpression .)
    COMMA           reduce using rule 371 (orExpression -> xorExpression .)
    DOT             reduce using rule 371 (orExpression -> xorExpression .)
    PLUS_PLUS       reduce using rule 371 (orExpression -> xorExpression .)
    MINUS_MINUS     reduce using rule 371 (orExpression -> xorExpression .)
    LBRACKET        reduce using rule 371 (orExpression -> xorExpression .)
    LPAREN          reduce using rule 371 (orExpression -> xorExpression .)
    POWER           reduce using rule 371 (orExpression -> xorExpression .)
    TIMES           reduce using rule 371 (orExpression -> xorExpression .)
    DIV             reduce using rule 371 (orExpression -> xorExpression .)
    MODULO          reduce using rule 371 (orExpression -> xorExpression .)
    PLUS            reduce using rule 371 (orExpression -> xorExpression .)
    MINUS           reduce using rule 371 (orExpression -> xorExpression .)
    TILDE           reduce using rule 371 (orExpression -> xorExpression .)
    RIGHT_SHIFT     reduce using rule 371 (orExpression -> xorExpression .)
    LEFT_SHIFT      reduce using rule 371 (orExpression -> xorExpression .)
    IS_EQ           reduce using rule 371 (orExpression -> xorExpression .)
    NOT_EQ          reduce using rule 371 (orExpression -> xorExpression .)
    AMPERSAND       reduce using rule 371 (orExpression -> xorExpression .)
    RPAREN          reduce using rule 371 (orExpression -> xorExpression .)
    LESS            reduce using rule 371 (orExpression -> xorExpression .)
    LESS_EQ         reduce using rule 371 (orExpression -> xorExpression .)
    GREATER         reduce using rule 371 (orExpression -> xorExpression .)
    GREATER_EQ      reduce using rule 371 (orExpression -> xorExpression .)
    IS_EQ_DIFF      reduce using rule 371 (orExpression -> xorExpression .)
    NOT_EQ_DIFF     reduce using rule 371 (orExpression -> xorExpression .)
    LESS_EQ_DIFF    reduce using rule 371 (orExpression -> xorExpression .)
    LESS_DIFF       reduce using rule 371 (orExpression -> xorExpression .)
    GREATER_EQ_DIFF reduce using rule 371 (orExpression -> xorExpression .)
    GREATER_DIFF    reduce using rule 371 (orExpression -> xorExpression .)
    RBRACKET        reduce using rule 371 (orExpression -> xorExpression .)
    RANGE           reduce using rule 371 (orExpression -> xorExpression .)
    COLON           reduce using rule 371 (orExpression -> xorExpression .)
    IDENTIFIER      reduce using rule 371 (orExpression -> xorExpression .)
    CONST           reduce using rule 371 (orExpression -> xorExpression .)
    IMMUTABLE       reduce using rule 371 (orExpression -> xorExpression .)
    RBRACE          reduce using rule 371 (orExpression -> xorExpression .)
    THIS            reduce using rule 371 (orExpression -> xorExpression .)
    BOOL            reduce using rule 371 (orExpression -> xorExpression .)
    SHORT           reduce using rule 371 (orExpression -> xorExpression .)
    USHORT          reduce using rule 371 (orExpression -> xorExpression .)
    INT             reduce using rule 371 (orExpression -> xorExpression .)
    UINT            reduce using rule 371 (orExpression -> xorExpression .)
    LONG            reduce using rule 371 (orExpression -> xorExpression .)
    ULONG           reduce using rule 371 (orExpression -> xorExpression .)
    CHAR            reduce using rule 371 (orExpression -> xorExpression .)
    FLOAT           reduce using rule 371 (orExpression -> xorExpression .)
    TYPEOF          reduce using rule 371 (orExpression -> xorExpression .)
    CARET           shift and go to state 340

  ! CARET           [ reduce using rule 371 (orExpression -> xorExpression .) ]


state 205

    (55) newExpression -> newAnonClassExpression .

    DOT             reduce using rule 55 (newExpression -> newAnonClassExpression .)
    PLUS_PLUS       reduce using rule 55 (newExpression -> newAnonClassExpression .)
    MINUS_MINUS     reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LBRACKET        reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LPAREN          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    POWER           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    TIMES           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    DIV             reduce using rule 55 (newExpression -> newAnonClassExpression .)
    MODULO          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    PLUS            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    MINUS           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    TILDE           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    RIGHT_SHIFT     reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LEFT_SHIFT      reduce using rule 55 (newExpression -> newAnonClassExpression .)
    IS_EQ           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    NOT_EQ          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    AMPERSAND       reduce using rule 55 (newExpression -> newAnonClassExpression .)
    CARET           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    PIPE            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    DOUBLE_AMPERSAND reduce using rule 55 (newExpression -> newAnonClassExpression .)
    QUESTION        reduce using rule 55 (newExpression -> newAnonClassExpression .)
    DOUBLE_PIPE     reduce using rule 55 (newExpression -> newAnonClassExpression .)
    ASSIGN          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_LEFT         reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_RIGHT        reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_PLUS         reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_MINUS        reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_TIMES        reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_MODULO       reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_AND_BIT      reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_DIV          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_OR_BIT       reduce using rule 55 (newExpression -> newAnonClassExpression .)
    EQ_XOR_BIT      reduce using rule 55 (newExpression -> newAnonClassExpression .)
    RBRACKET        reduce using rule 55 (newExpression -> newAnonClassExpression .)
    COMMA           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LESS            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LESS_EQ         reduce using rule 55 (newExpression -> newAnonClassExpression .)
    GREATER         reduce using rule 55 (newExpression -> newAnonClassExpression .)
    GREATER_EQ      reduce using rule 55 (newExpression -> newAnonClassExpression .)
    IS_EQ_DIFF      reduce using rule 55 (newExpression -> newAnonClassExpression .)
    NOT_EQ_DIFF     reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LESS_EQ_DIFF    reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LESS_DIFF       reduce using rule 55 (newExpression -> newAnonClassExpression .)
    GREATER_EQ_DIFF reduce using rule 55 (newExpression -> newAnonClassExpression .)
    GREATER_DIFF    reduce using rule 55 (newExpression -> newAnonClassExpression .)
    SEMICOLON       reduce using rule 55 (newExpression -> newAnonClassExpression .)
    RPAREN          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    RANGE           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    COLON           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    IDENTIFIER      reduce using rule 55 (newExpression -> newAnonClassExpression .)
    CONST           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    IMMUTABLE       reduce using rule 55 (newExpression -> newAnonClassExpression .)
    RBRACE          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    THIS            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    BOOL            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    SHORT           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    USHORT          reduce using rule 55 (newExpression -> newAnonClassExpression .)
    INT             reduce using rule 55 (newExpression -> newAnonClassExpression .)
    UINT            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    LONG            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    ULONG           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    CHAR            reduce using rule 55 (newExpression -> newAnonClassExpression .)
    FLOAT           reduce using rule 55 (newExpression -> newAnonClassExpression .)
    TYPEOF          reduce using rule 55 (newExpression -> newAnonClassExpression .)


state 206

    (348) mixinExpression -> MIXIN LPAREN assignExpression . RPAREN

    RPAREN          shift and go to state 341


state 207

    (254) blockStatement -> LBRACE . RBRACE
    (255) blockStatement -> LBRACE . declarationsAndStatements RBRACE
    (279) declarationsAndStatements -> . declarationOrStatement declarationOrStatementmultiple
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    RBRACE          shift and go to state 379
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    declarationsAndStatements      shift and go to state 380
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 351
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 208

    (48) primaryExpression -> INUMBER .

    DOT             reduce using rule 48 (primaryExpression -> INUMBER .)
    PLUS_PLUS       reduce using rule 48 (primaryExpression -> INUMBER .)
    MINUS_MINUS     reduce using rule 48 (primaryExpression -> INUMBER .)
    LBRACKET        reduce using rule 48 (primaryExpression -> INUMBER .)
    LPAREN          reduce using rule 48 (primaryExpression -> INUMBER .)
    POWER           reduce using rule 48 (primaryExpression -> INUMBER .)
    TIMES           reduce using rule 48 (primaryExpression -> INUMBER .)
    DIV             reduce using rule 48 (primaryExpression -> INUMBER .)
    MODULO          reduce using rule 48 (primaryExpression -> INUMBER .)
    PLUS            reduce using rule 48 (primaryExpression -> INUMBER .)
    MINUS           reduce using rule 48 (primaryExpression -> INUMBER .)
    TILDE           reduce using rule 48 (primaryExpression -> INUMBER .)
    RIGHT_SHIFT     reduce using rule 48 (primaryExpression -> INUMBER .)
    LEFT_SHIFT      reduce using rule 48 (primaryExpression -> INUMBER .)
    IS_EQ           reduce using rule 48 (primaryExpression -> INUMBER .)
    NOT_EQ          reduce using rule 48 (primaryExpression -> INUMBER .)
    AMPERSAND       reduce using rule 48 (primaryExpression -> INUMBER .)
    CARET           reduce using rule 48 (primaryExpression -> INUMBER .)
    PIPE            reduce using rule 48 (primaryExpression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 48 (primaryExpression -> INUMBER .)
    QUESTION        reduce using rule 48 (primaryExpression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 48 (primaryExpression -> INUMBER .)
    ASSIGN          reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_LEFT         reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_RIGHT        reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_PLUS         reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_MINUS        reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_TIMES        reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_MODULO       reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_AND_BIT      reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_DIV          reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_OR_BIT       reduce using rule 48 (primaryExpression -> INUMBER .)
    EQ_XOR_BIT      reduce using rule 48 (primaryExpression -> INUMBER .)
    RBRACKET        reduce using rule 48 (primaryExpression -> INUMBER .)
    RANGE           reduce using rule 48 (primaryExpression -> INUMBER .)
    LESS            reduce using rule 48 (primaryExpression -> INUMBER .)
    LESS_EQ         reduce using rule 48 (primaryExpression -> INUMBER .)
    GREATER         reduce using rule 48 (primaryExpression -> INUMBER .)
    GREATER_EQ      reduce using rule 48 (primaryExpression -> INUMBER .)
    IS_EQ_DIFF      reduce using rule 48 (primaryExpression -> INUMBER .)
    NOT_EQ_DIFF     reduce using rule 48 (primaryExpression -> INUMBER .)
    LESS_EQ_DIFF    reduce using rule 48 (primaryExpression -> INUMBER .)
    LESS_DIFF       reduce using rule 48 (primaryExpression -> INUMBER .)
    GREATER_EQ_DIFF reduce using rule 48 (primaryExpression -> INUMBER .)
    GREATER_DIFF    reduce using rule 48 (primaryExpression -> INUMBER .)
    RPAREN          reduce using rule 48 (primaryExpression -> INUMBER .)
    COMMA           reduce using rule 48 (primaryExpression -> INUMBER .)
    SEMICOLON       reduce using rule 48 (primaryExpression -> INUMBER .)
    COLON           reduce using rule 48 (primaryExpression -> INUMBER .)
    IDENTIFIER      reduce using rule 48 (primaryExpression -> INUMBER .)
    CONST           reduce using rule 48 (primaryExpression -> INUMBER .)
    IMMUTABLE       reduce using rule 48 (primaryExpression -> INUMBER .)
    RBRACE          reduce using rule 48 (primaryExpression -> INUMBER .)
    THIS            reduce using rule 48 (primaryExpression -> INUMBER .)
    BOOL            reduce using rule 48 (primaryExpression -> INUMBER .)
    SHORT           reduce using rule 48 (primaryExpression -> INUMBER .)
    USHORT          reduce using rule 48 (primaryExpression -> INUMBER .)
    INT             reduce using rule 48 (primaryExpression -> INUMBER .)
    UINT            reduce using rule 48 (primaryExpression -> INUMBER .)
    LONG            reduce using rule 48 (primaryExpression -> INUMBER .)
    ULONG           reduce using rule 48 (primaryExpression -> INUMBER .)
    CHAR            reduce using rule 48 (primaryExpression -> INUMBER .)
    FLOAT           reduce using rule 48 (primaryExpression -> INUMBER .)
    TYPEOF          reduce using rule 48 (primaryExpression -> INUMBER .)


state 209

    (21) unaryExpression -> PLUS_PLUS . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 382
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 210

    (373) xorExpression -> andExpression .
    (376) andExpression -> andExpression . AMPERSAND cmpExpression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    CARET           reduce using rule 373 (xorExpression -> andExpression .)
    PIPE            reduce using rule 373 (xorExpression -> andExpression .)
    DOUBLE_AMPERSAND reduce using rule 373 (xorExpression -> andExpression .)
    QUESTION        reduce using rule 373 (xorExpression -> andExpression .)
    DOUBLE_PIPE     reduce using rule 373 (xorExpression -> andExpression .)
    ASSIGN          reduce using rule 373 (xorExpression -> andExpression .)
    EQ_LEFT         reduce using rule 373 (xorExpression -> andExpression .)
    EQ_RIGHT        reduce using rule 373 (xorExpression -> andExpression .)
    EQ_PLUS         reduce using rule 373 (xorExpression -> andExpression .)
    EQ_MINUS        reduce using rule 373 (xorExpression -> andExpression .)
    EQ_TIMES        reduce using rule 373 (xorExpression -> andExpression .)
    EQ_MODULO       reduce using rule 373 (xorExpression -> andExpression .)
    EQ_AND_BIT      reduce using rule 373 (xorExpression -> andExpression .)
    EQ_DIV          reduce using rule 373 (xorExpression -> andExpression .)
    EQ_OR_BIT       reduce using rule 373 (xorExpression -> andExpression .)
    EQ_XOR_BIT      reduce using rule 373 (xorExpression -> andExpression .)
    SEMICOLON       reduce using rule 373 (xorExpression -> andExpression .)
    COMMA           reduce using rule 373 (xorExpression -> andExpression .)
    RPAREN          reduce using rule 373 (xorExpression -> andExpression .)
    DOT             reduce using rule 373 (xorExpression -> andExpression .)
    PLUS_PLUS       reduce using rule 373 (xorExpression -> andExpression .)
    MINUS_MINUS     reduce using rule 373 (xorExpression -> andExpression .)
    LBRACKET        reduce using rule 373 (xorExpression -> andExpression .)
    LPAREN          reduce using rule 373 (xorExpression -> andExpression .)
    POWER           reduce using rule 373 (xorExpression -> andExpression .)
    TIMES           reduce using rule 373 (xorExpression -> andExpression .)
    DIV             reduce using rule 373 (xorExpression -> andExpression .)
    MODULO          reduce using rule 373 (xorExpression -> andExpression .)
    PLUS            reduce using rule 373 (xorExpression -> andExpression .)
    MINUS           reduce using rule 373 (xorExpression -> andExpression .)
    TILDE           reduce using rule 373 (xorExpression -> andExpression .)
    RIGHT_SHIFT     reduce using rule 373 (xorExpression -> andExpression .)
    LEFT_SHIFT      reduce using rule 373 (xorExpression -> andExpression .)
    IS_EQ           reduce using rule 373 (xorExpression -> andExpression .)
    NOT_EQ          reduce using rule 373 (xorExpression -> andExpression .)
    LESS            reduce using rule 373 (xorExpression -> andExpression .)
    LESS_EQ         reduce using rule 373 (xorExpression -> andExpression .)
    GREATER         reduce using rule 373 (xorExpression -> andExpression .)
    GREATER_EQ      reduce using rule 373 (xorExpression -> andExpression .)
    IS_EQ_DIFF      reduce using rule 373 (xorExpression -> andExpression .)
    NOT_EQ_DIFF     reduce using rule 373 (xorExpression -> andExpression .)
    LESS_EQ_DIFF    reduce using rule 373 (xorExpression -> andExpression .)
    LESS_DIFF       reduce using rule 373 (xorExpression -> andExpression .)
    GREATER_EQ_DIFF reduce using rule 373 (xorExpression -> andExpression .)
    GREATER_DIFF    reduce using rule 373 (xorExpression -> andExpression .)
    RBRACKET        reduce using rule 373 (xorExpression -> andExpression .)
    RANGE           reduce using rule 373 (xorExpression -> andExpression .)
    COLON           reduce using rule 373 (xorExpression -> andExpression .)
    IDENTIFIER      reduce using rule 373 (xorExpression -> andExpression .)
    CONST           reduce using rule 373 (xorExpression -> andExpression .)
    IMMUTABLE       reduce using rule 373 (xorExpression -> andExpression .)
    RBRACE          reduce using rule 373 (xorExpression -> andExpression .)
    THIS            reduce using rule 373 (xorExpression -> andExpression .)
    BOOL            reduce using rule 373 (xorExpression -> andExpression .)
    SHORT           reduce using rule 373 (xorExpression -> andExpression .)
    USHORT          reduce using rule 373 (xorExpression -> andExpression .)
    INT             reduce using rule 373 (xorExpression -> andExpression .)
    UINT            reduce using rule 373 (xorExpression -> andExpression .)
    LONG            reduce using rule 373 (xorExpression -> andExpression .)
    ULONG           reduce using rule 373 (xorExpression -> andExpression .)
    CHAR            reduce using rule 373 (xorExpression -> andExpression .)
    FLOAT           reduce using rule 373 (xorExpression -> andExpression .)
    TYPEOF          reduce using rule 373 (xorExpression -> andExpression .)
    AMPERSAND       shift and go to state 383

  ! AMPERSAND       [ reduce using rule 373 (xorExpression -> andExpression .) ]


state 211

    (17) unaryExpression -> EXCLAMATION . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 384
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 212

    (24) unaryExpression -> deleteExpression .

    DOT             reduce using rule 24 (unaryExpression -> deleteExpression .)
    PLUS_PLUS       reduce using rule 24 (unaryExpression -> deleteExpression .)
    MINUS_MINUS     reduce using rule 24 (unaryExpression -> deleteExpression .)
    LBRACKET        reduce using rule 24 (unaryExpression -> deleteExpression .)
    LPAREN          reduce using rule 24 (unaryExpression -> deleteExpression .)
    POWER           reduce using rule 24 (unaryExpression -> deleteExpression .)
    TIMES           reduce using rule 24 (unaryExpression -> deleteExpression .)
    DIV             reduce using rule 24 (unaryExpression -> deleteExpression .)
    MODULO          reduce using rule 24 (unaryExpression -> deleteExpression .)
    PLUS            reduce using rule 24 (unaryExpression -> deleteExpression .)
    MINUS           reduce using rule 24 (unaryExpression -> deleteExpression .)
    TILDE           reduce using rule 24 (unaryExpression -> deleteExpression .)
    RIGHT_SHIFT     reduce using rule 24 (unaryExpression -> deleteExpression .)
    LEFT_SHIFT      reduce using rule 24 (unaryExpression -> deleteExpression .)
    IS_EQ           reduce using rule 24 (unaryExpression -> deleteExpression .)
    NOT_EQ          reduce using rule 24 (unaryExpression -> deleteExpression .)
    AMPERSAND       reduce using rule 24 (unaryExpression -> deleteExpression .)
    CARET           reduce using rule 24 (unaryExpression -> deleteExpression .)
    PIPE            reduce using rule 24 (unaryExpression -> deleteExpression .)
    DOUBLE_AMPERSAND reduce using rule 24 (unaryExpression -> deleteExpression .)
    QUESTION        reduce using rule 24 (unaryExpression -> deleteExpression .)
    DOUBLE_PIPE     reduce using rule 24 (unaryExpression -> deleteExpression .)
    ASSIGN          reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_LEFT         reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_RIGHT        reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_PLUS         reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_MINUS        reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_TIMES        reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_MODULO       reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_AND_BIT      reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_DIV          reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_OR_BIT       reduce using rule 24 (unaryExpression -> deleteExpression .)
    EQ_XOR_BIT      reduce using rule 24 (unaryExpression -> deleteExpression .)
    COMMA           reduce using rule 24 (unaryExpression -> deleteExpression .)
    SEMICOLON       reduce using rule 24 (unaryExpression -> deleteExpression .)
    LESS            reduce using rule 24 (unaryExpression -> deleteExpression .)
    LESS_EQ         reduce using rule 24 (unaryExpression -> deleteExpression .)
    GREATER         reduce using rule 24 (unaryExpression -> deleteExpression .)
    GREATER_EQ      reduce using rule 24 (unaryExpression -> deleteExpression .)
    IS_EQ_DIFF      reduce using rule 24 (unaryExpression -> deleteExpression .)
    NOT_EQ_DIFF     reduce using rule 24 (unaryExpression -> deleteExpression .)
    LESS_EQ_DIFF    reduce using rule 24 (unaryExpression -> deleteExpression .)
    LESS_DIFF       reduce using rule 24 (unaryExpression -> deleteExpression .)
    GREATER_EQ_DIFF reduce using rule 24 (unaryExpression -> deleteExpression .)
    GREATER_DIFF    reduce using rule 24 (unaryExpression -> deleteExpression .)
    RPAREN          reduce using rule 24 (unaryExpression -> deleteExpression .)
    RBRACKET        reduce using rule 24 (unaryExpression -> deleteExpression .)
    COLON           reduce using rule 24 (unaryExpression -> deleteExpression .)
    RANGE           reduce using rule 24 (unaryExpression -> deleteExpression .)
    IDENTIFIER      reduce using rule 24 (unaryExpression -> deleteExpression .)
    CONST           reduce using rule 24 (unaryExpression -> deleteExpression .)
    IMMUTABLE       reduce using rule 24 (unaryExpression -> deleteExpression .)
    RBRACE          reduce using rule 24 (unaryExpression -> deleteExpression .)
    THIS            reduce using rule 24 (unaryExpression -> deleteExpression .)
    BOOL            reduce using rule 24 (unaryExpression -> deleteExpression .)
    SHORT           reduce using rule 24 (unaryExpression -> deleteExpression .)
    USHORT          reduce using rule 24 (unaryExpression -> deleteExpression .)
    INT             reduce using rule 24 (unaryExpression -> deleteExpression .)
    UINT            reduce using rule 24 (unaryExpression -> deleteExpression .)
    LONG            reduce using rule 24 (unaryExpression -> deleteExpression .)
    ULONG           reduce using rule 24 (unaryExpression -> deleteExpression .)
    CHAR            reduce using rule 24 (unaryExpression -> deleteExpression .)
    FLOAT           reduce using rule 24 (unaryExpression -> deleteExpression .)
    TYPEOF          reduce using rule 24 (unaryExpression -> deleteExpression .)


state 213

    (52) newExpression -> NEW . type
    (53) newExpression -> NEW . type LBRACKET assignExpression RBRACKET
    (54) newExpression -> NEW . type arguments
    (56) newAnonClassExpression -> NEW . arguments_question CLASS arguments_question baseClassList_question structBody
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (57) arguments_question -> . arguments
    (58) arguments_question -> . empty
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (334) arguments -> . LPAREN argumentList_question RPAREN
    (397) empty -> .
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LPAREN          shift and go to state 389
    CLASS           reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    arguments_question             shift and go to state 388
    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    arguments                      shift and go to state 385
    typeConstructors               shift and go to state 34
    type                           shift and go to state 386
    empty                          shift and go to state 387

state 214

    (34) primaryExpression -> DOT . identifierOrTemplateInstance
    (311) symbol -> DOT . identifierOrTemplateChain
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance

    IDENTIFIER      shift and go to state 93

    identifierOrTemplateInstance   shift and go to state 390
    identifierOrTemplateChain      shift and go to state 391

state 215

    (51) primaryExpression -> LIT_CHAR .

    DOT             reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    PLUS_PLUS       reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    MINUS_MINUS     reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LBRACKET        reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LPAREN          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    POWER           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    TIMES           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    DIV             reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    MODULO          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    PLUS            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    MINUS           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    TILDE           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    RIGHT_SHIFT     reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LEFT_SHIFT      reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    IS_EQ           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    NOT_EQ          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    AMPERSAND       reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    CARET           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    PIPE            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    DOUBLE_AMPERSAND reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    QUESTION        reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    DOUBLE_PIPE     reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    ASSIGN          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_LEFT         reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_RIGHT        reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_PLUS         reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_MINUS        reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_TIMES        reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_MODULO       reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_AND_BIT      reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_DIV          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_OR_BIT       reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    EQ_XOR_BIT      reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    RBRACKET        reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    RANGE           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LESS            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LESS_EQ         reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    GREATER         reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    GREATER_EQ      reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    IS_EQ_DIFF      reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    NOT_EQ_DIFF     reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LESS_EQ_DIFF    reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LESS_DIFF       reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    GREATER_EQ_DIFF reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    GREATER_DIFF    reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    RPAREN          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    COMMA           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    SEMICOLON       reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    COLON           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    IDENTIFIER      reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    CONST           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    IMMUTABLE       reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    RBRACE          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    THIS            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    BOOL            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    SHORT           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    USHORT          reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    INT             reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    UINT            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    LONG            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    ULONG           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    CHAR            reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    FLOAT           reduce using rule 51 (primaryExpression -> LIT_CHAR .)
    TYPEOF          reduce using rule 51 (primaryExpression -> LIT_CHAR .)


state 216

    (303) castExpression -> CAST . LPAREN RPAREN unaryExpression
    (304) castExpression -> CAST . LPAREN type RPAREN unaryExpression
    (305) castExpression -> CAST . LPAREN castQualifier RPAREN unaryExpression

    LPAREN          shift and go to state 392


state 217

    (33) primaryExpression -> identifierOrTemplateInstance .
    (313) identifierOrTemplateChain -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LPAREN resolved using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    DOT             reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    POWER           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    DIV             reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    CARET           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    RANGE           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LESS            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    RPAREN          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    COLON           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    CONST           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    IMMUTABLE       reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    RBRACE          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    THIS            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    BOOL            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    SHORT           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    USHORT          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    INT             reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    UINT            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    LONG            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    ULONG           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    CHAR            reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    FLOAT           reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)
    TYPEOF          reduce using rule 33 (primaryExpression -> identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 313 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]
  ! LPAREN          [ reduce using rule 313 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]


state 218

    (315) identifierOrTemplateInstance -> IDENTIFIER .
    (347) functionLiteralExpression -> IDENTIFIER . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! reduce/reduce conflict for BOOL resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for SHORT resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for USHORT resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for INT resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for UINT resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for LONG resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for ULONG resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for CHAR resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for FLOAT resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    POWER           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TIMES           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    MINUS           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    CARET           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RPAREN          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACKET        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RANGE           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    SEMICOLON       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    COLON           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACE          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    BOOL            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    SHORT           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    USHORT          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    INT             reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    UINT            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LONG            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    ULONG           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    CHAR            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    FLOAT           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TYPEOF          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! DOT             [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! MINUS_MINUS     [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! IDENTIFIER      [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! CONST           [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! IMMUTABLE       [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! THIS            [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! BOOL            [ reduce using rule 397 (empty -> .) ]
  ! SHORT           [ reduce using rule 397 (empty -> .) ]
  ! USHORT          [ reduce using rule 397 (empty -> .) ]
  ! INT             [ reduce using rule 397 (empty -> .) ]
  ! UINT            [ reduce using rule 397 (empty -> .) ]
  ! LONG            [ reduce using rule 397 (empty -> .) ]
  ! ULONG           [ reduce using rule 397 (empty -> .) ]
  ! CHAR            [ reduce using rule 397 (empty -> .) ]
  ! FLOAT           [ reduce using rule 397 (empty -> .) ]
  ! TYPEOF          [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 393
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 219

    (36) primaryExpression -> type . DOT IDENTIFIER
    (37) primaryExpression -> type . arguments
    (310) functionCallExpression -> type . arguments
    (334) arguments -> . LPAREN argumentList_question RPAREN

    DOT             shift and go to state 395
    LPAREN          shift and go to state 389

    arguments                      shift and go to state 394

state 220

    (365) ternaryExpression -> orOrExpression . QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> orOrExpression .
    (368) orOrExpression -> orOrExpression . DOUBLE_PIPE andAndExpression

  ! shift/reduce conflict for DOUBLE_PIPE resolved as shift
    ASSIGN          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_LEFT         reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_RIGHT        reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_PLUS         reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_MINUS        reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_TIMES        reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_MODULO       reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_AND_BIT      reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_DIV          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_OR_BIT       reduce using rule 366 (ternaryExpression -> orOrExpression .)
    EQ_XOR_BIT      reduce using rule 366 (ternaryExpression -> orOrExpression .)
    COMMA           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    SEMICOLON       reduce using rule 366 (ternaryExpression -> orOrExpression .)
    RBRACKET        reduce using rule 366 (ternaryExpression -> orOrExpression .)
    RPAREN          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    COLON           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    RANGE           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    IDENTIFIER      reduce using rule 366 (ternaryExpression -> orOrExpression .)
    CONST           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    IMMUTABLE       reduce using rule 366 (ternaryExpression -> orOrExpression .)
    RBRACE          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    THIS            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    BOOL            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    SHORT           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    USHORT          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    INT             reduce using rule 366 (ternaryExpression -> orOrExpression .)
    UINT            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LONG            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    ULONG           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    CHAR            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    FLOAT           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    TYPEOF          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    DOT             reduce using rule 366 (ternaryExpression -> orOrExpression .)
    PLUS_PLUS       reduce using rule 366 (ternaryExpression -> orOrExpression .)
    MINUS_MINUS     reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LBRACKET        reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LPAREN          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    POWER           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    TIMES           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    DIV             reduce using rule 366 (ternaryExpression -> orOrExpression .)
    MODULO          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    PLUS            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    MINUS           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    TILDE           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    RIGHT_SHIFT     reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LEFT_SHIFT      reduce using rule 366 (ternaryExpression -> orOrExpression .)
    IS_EQ           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    NOT_EQ          reduce using rule 366 (ternaryExpression -> orOrExpression .)
    AMPERSAND       reduce using rule 366 (ternaryExpression -> orOrExpression .)
    CARET           reduce using rule 366 (ternaryExpression -> orOrExpression .)
    PIPE            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    DOUBLE_AMPERSAND reduce using rule 366 (ternaryExpression -> orOrExpression .)
    QUESTION        reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LESS            reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LESS_EQ         reduce using rule 366 (ternaryExpression -> orOrExpression .)
    GREATER         reduce using rule 366 (ternaryExpression -> orOrExpression .)
    GREATER_EQ      reduce using rule 366 (ternaryExpression -> orOrExpression .)
    IS_EQ_DIFF      reduce using rule 366 (ternaryExpression -> orOrExpression .)
    NOT_EQ_DIFF     reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LESS_EQ_DIFF    reduce using rule 366 (ternaryExpression -> orOrExpression .)
    LESS_DIFF       reduce using rule 366 (ternaryExpression -> orOrExpression .)
    GREATER_EQ_DIFF reduce using rule 366 (ternaryExpression -> orOrExpression .)
    GREATER_DIFF    reduce using rule 366 (ternaryExpression -> orOrExpression .)
    DOUBLE_PIPE     shift and go to state 397

  ! QUESTION        [ shift and go to state 396 ]
  ! DOUBLE_PIPE     [ reduce using rule 366 (ternaryExpression -> orOrExpression .) ]


state 221

    (375) andExpression -> cmpExpression .

    AMPERSAND       reduce using rule 375 (andExpression -> cmpExpression .)
    CARET           reduce using rule 375 (andExpression -> cmpExpression .)
    PIPE            reduce using rule 375 (andExpression -> cmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 375 (andExpression -> cmpExpression .)
    QUESTION        reduce using rule 375 (andExpression -> cmpExpression .)
    DOUBLE_PIPE     reduce using rule 375 (andExpression -> cmpExpression .)
    ASSIGN          reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_LEFT         reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_RIGHT        reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_PLUS         reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_MINUS        reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_TIMES        reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_MODULO       reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_AND_BIT      reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_DIV          reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_OR_BIT       reduce using rule 375 (andExpression -> cmpExpression .)
    EQ_XOR_BIT      reduce using rule 375 (andExpression -> cmpExpression .)
    COMMA           reduce using rule 375 (andExpression -> cmpExpression .)
    RPAREN          reduce using rule 375 (andExpression -> cmpExpression .)
    SEMICOLON       reduce using rule 375 (andExpression -> cmpExpression .)
    RBRACKET        reduce using rule 375 (andExpression -> cmpExpression .)
    DOT             reduce using rule 375 (andExpression -> cmpExpression .)
    PLUS_PLUS       reduce using rule 375 (andExpression -> cmpExpression .)
    MINUS_MINUS     reduce using rule 375 (andExpression -> cmpExpression .)
    LBRACKET        reduce using rule 375 (andExpression -> cmpExpression .)
    LPAREN          reduce using rule 375 (andExpression -> cmpExpression .)
    POWER           reduce using rule 375 (andExpression -> cmpExpression .)
    TIMES           reduce using rule 375 (andExpression -> cmpExpression .)
    DIV             reduce using rule 375 (andExpression -> cmpExpression .)
    MODULO          reduce using rule 375 (andExpression -> cmpExpression .)
    PLUS            reduce using rule 375 (andExpression -> cmpExpression .)
    MINUS           reduce using rule 375 (andExpression -> cmpExpression .)
    TILDE           reduce using rule 375 (andExpression -> cmpExpression .)
    RIGHT_SHIFT     reduce using rule 375 (andExpression -> cmpExpression .)
    LEFT_SHIFT      reduce using rule 375 (andExpression -> cmpExpression .)
    IS_EQ           reduce using rule 375 (andExpression -> cmpExpression .)
    NOT_EQ          reduce using rule 375 (andExpression -> cmpExpression .)
    LESS            reduce using rule 375 (andExpression -> cmpExpression .)
    LESS_EQ         reduce using rule 375 (andExpression -> cmpExpression .)
    GREATER         reduce using rule 375 (andExpression -> cmpExpression .)
    GREATER_EQ      reduce using rule 375 (andExpression -> cmpExpression .)
    IS_EQ_DIFF      reduce using rule 375 (andExpression -> cmpExpression .)
    NOT_EQ_DIFF     reduce using rule 375 (andExpression -> cmpExpression .)
    LESS_EQ_DIFF    reduce using rule 375 (andExpression -> cmpExpression .)
    LESS_DIFF       reduce using rule 375 (andExpression -> cmpExpression .)
    GREATER_EQ_DIFF reduce using rule 375 (andExpression -> cmpExpression .)
    GREATER_DIFF    reduce using rule 375 (andExpression -> cmpExpression .)
    RANGE           reduce using rule 375 (andExpression -> cmpExpression .)
    COLON           reduce using rule 375 (andExpression -> cmpExpression .)
    IDENTIFIER      reduce using rule 375 (andExpression -> cmpExpression .)
    CONST           reduce using rule 375 (andExpression -> cmpExpression .)
    IMMUTABLE       reduce using rule 375 (andExpression -> cmpExpression .)
    RBRACE          reduce using rule 375 (andExpression -> cmpExpression .)
    THIS            reduce using rule 375 (andExpression -> cmpExpression .)
    BOOL            reduce using rule 375 (andExpression -> cmpExpression .)
    SHORT           reduce using rule 375 (andExpression -> cmpExpression .)
    USHORT          reduce using rule 375 (andExpression -> cmpExpression .)
    INT             reduce using rule 375 (andExpression -> cmpExpression .)
    UINT            reduce using rule 375 (andExpression -> cmpExpression .)
    LONG            reduce using rule 375 (andExpression -> cmpExpression .)
    ULONG           reduce using rule 375 (andExpression -> cmpExpression .)
    CHAR            reduce using rule 375 (andExpression -> cmpExpression .)
    FLOAT           reduce using rule 375 (andExpression -> cmpExpression .)
    TYPEOF          reduce using rule 375 (andExpression -> cmpExpression .)


state 222

    (349) importExpression -> IMPORT . LBRACKET assignExpression RBRACKET

    LBRACKET        shift and go to state 398


state 223

    (346) functionLiteralExpression -> functionBody .

    DOT             reduce using rule 346 (functionLiteralExpression -> functionBody .)
    PLUS_PLUS       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    MINUS_MINUS     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LBRACKET        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LPAREN          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    POWER           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    TIMES           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    DIV             reduce using rule 346 (functionLiteralExpression -> functionBody .)
    MODULO          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    PLUS            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    MINUS           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    TILDE           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    RIGHT_SHIFT     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LEFT_SHIFT      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    IS_EQ           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    NOT_EQ          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    AMPERSAND       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    CARET           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    PIPE            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    DOUBLE_AMPERSAND reduce using rule 346 (functionLiteralExpression -> functionBody .)
    QUESTION        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    DOUBLE_PIPE     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    ASSIGN          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_LEFT         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_RIGHT        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_PLUS         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_MINUS        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_TIMES        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_MODULO       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_AND_BIT      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_DIV          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_OR_BIT       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_XOR_BIT      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    RPAREN          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS_EQ         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER_EQ      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    IS_EQ_DIFF      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    NOT_EQ_DIFF     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS_EQ_DIFF    reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS_DIFF       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER_EQ_DIFF reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER_DIFF    reduce using rule 346 (functionLiteralExpression -> functionBody .)
    RBRACKET        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    RANGE           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    COMMA           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    SEMICOLON       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    COLON           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    IDENTIFIER      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    CONST           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    IMMUTABLE       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    RBRACE          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    THIS            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    BOOL            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    SHORT           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    USHORT          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    INT             reduce using rule 346 (functionLiteralExpression -> functionBody .)
    UINT            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LONG            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    ULONG           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    CHAR            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    FLOAT           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    TYPEOF          reduce using rule 346 (functionLiteralExpression -> functionBody .)


state 224

    (47) primaryExpression -> FALSE .

    DOT             reduce using rule 47 (primaryExpression -> FALSE .)
    PLUS_PLUS       reduce using rule 47 (primaryExpression -> FALSE .)
    MINUS_MINUS     reduce using rule 47 (primaryExpression -> FALSE .)
    LBRACKET        reduce using rule 47 (primaryExpression -> FALSE .)
    LPAREN          reduce using rule 47 (primaryExpression -> FALSE .)
    POWER           reduce using rule 47 (primaryExpression -> FALSE .)
    TIMES           reduce using rule 47 (primaryExpression -> FALSE .)
    DIV             reduce using rule 47 (primaryExpression -> FALSE .)
    MODULO          reduce using rule 47 (primaryExpression -> FALSE .)
    PLUS            reduce using rule 47 (primaryExpression -> FALSE .)
    MINUS           reduce using rule 47 (primaryExpression -> FALSE .)
    TILDE           reduce using rule 47 (primaryExpression -> FALSE .)
    RIGHT_SHIFT     reduce using rule 47 (primaryExpression -> FALSE .)
    LEFT_SHIFT      reduce using rule 47 (primaryExpression -> FALSE .)
    IS_EQ           reduce using rule 47 (primaryExpression -> FALSE .)
    NOT_EQ          reduce using rule 47 (primaryExpression -> FALSE .)
    AMPERSAND       reduce using rule 47 (primaryExpression -> FALSE .)
    CARET           reduce using rule 47 (primaryExpression -> FALSE .)
    PIPE            reduce using rule 47 (primaryExpression -> FALSE .)
    DOUBLE_AMPERSAND reduce using rule 47 (primaryExpression -> FALSE .)
    QUESTION        reduce using rule 47 (primaryExpression -> FALSE .)
    DOUBLE_PIPE     reduce using rule 47 (primaryExpression -> FALSE .)
    ASSIGN          reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_LEFT         reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_RIGHT        reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_PLUS         reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_MINUS        reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_TIMES        reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_MODULO       reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_AND_BIT      reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_DIV          reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_OR_BIT       reduce using rule 47 (primaryExpression -> FALSE .)
    EQ_XOR_BIT      reduce using rule 47 (primaryExpression -> FALSE .)
    RBRACKET        reduce using rule 47 (primaryExpression -> FALSE .)
    RANGE           reduce using rule 47 (primaryExpression -> FALSE .)
    LESS            reduce using rule 47 (primaryExpression -> FALSE .)
    LESS_EQ         reduce using rule 47 (primaryExpression -> FALSE .)
    GREATER         reduce using rule 47 (primaryExpression -> FALSE .)
    GREATER_EQ      reduce using rule 47 (primaryExpression -> FALSE .)
    IS_EQ_DIFF      reduce using rule 47 (primaryExpression -> FALSE .)
    NOT_EQ_DIFF     reduce using rule 47 (primaryExpression -> FALSE .)
    LESS_EQ_DIFF    reduce using rule 47 (primaryExpression -> FALSE .)
    LESS_DIFF       reduce using rule 47 (primaryExpression -> FALSE .)
    GREATER_EQ_DIFF reduce using rule 47 (primaryExpression -> FALSE .)
    GREATER_DIFF    reduce using rule 47 (primaryExpression -> FALSE .)
    RPAREN          reduce using rule 47 (primaryExpression -> FALSE .)
    COMMA           reduce using rule 47 (primaryExpression -> FALSE .)
    SEMICOLON       reduce using rule 47 (primaryExpression -> FALSE .)
    COLON           reduce using rule 47 (primaryExpression -> FALSE .)
    IDENTIFIER      reduce using rule 47 (primaryExpression -> FALSE .)
    CONST           reduce using rule 47 (primaryExpression -> FALSE .)
    IMMUTABLE       reduce using rule 47 (primaryExpression -> FALSE .)
    RBRACE          reduce using rule 47 (primaryExpression -> FALSE .)
    THIS            reduce using rule 47 (primaryExpression -> FALSE .)
    BOOL            reduce using rule 47 (primaryExpression -> FALSE .)
    SHORT           reduce using rule 47 (primaryExpression -> FALSE .)
    USHORT          reduce using rule 47 (primaryExpression -> FALSE .)
    INT             reduce using rule 47 (primaryExpression -> FALSE .)
    UINT            reduce using rule 47 (primaryExpression -> FALSE .)
    LONG            reduce using rule 47 (primaryExpression -> FALSE .)
    ULONG           reduce using rule 47 (primaryExpression -> FALSE .)
    CHAR            reduce using rule 47 (primaryExpression -> FALSE .)
    FLOAT           reduce using rule 47 (primaryExpression -> FALSE .)
    TYPEOF          reduce using rule 47 (primaryExpression -> FALSE .)


state 225

    (15) unaryExpression -> primaryExpression .

    DOT             reduce using rule 15 (unaryExpression -> primaryExpression .)
    PLUS_PLUS       reduce using rule 15 (unaryExpression -> primaryExpression .)
    MINUS_MINUS     reduce using rule 15 (unaryExpression -> primaryExpression .)
    LBRACKET        reduce using rule 15 (unaryExpression -> primaryExpression .)
    LPAREN          reduce using rule 15 (unaryExpression -> primaryExpression .)
    POWER           reduce using rule 15 (unaryExpression -> primaryExpression .)
    TIMES           reduce using rule 15 (unaryExpression -> primaryExpression .)
    DIV             reduce using rule 15 (unaryExpression -> primaryExpression .)
    MODULO          reduce using rule 15 (unaryExpression -> primaryExpression .)
    PLUS            reduce using rule 15 (unaryExpression -> primaryExpression .)
    MINUS           reduce using rule 15 (unaryExpression -> primaryExpression .)
    TILDE           reduce using rule 15 (unaryExpression -> primaryExpression .)
    RIGHT_SHIFT     reduce using rule 15 (unaryExpression -> primaryExpression .)
    LEFT_SHIFT      reduce using rule 15 (unaryExpression -> primaryExpression .)
    IS_EQ           reduce using rule 15 (unaryExpression -> primaryExpression .)
    NOT_EQ          reduce using rule 15 (unaryExpression -> primaryExpression .)
    AMPERSAND       reduce using rule 15 (unaryExpression -> primaryExpression .)
    CARET           reduce using rule 15 (unaryExpression -> primaryExpression .)
    PIPE            reduce using rule 15 (unaryExpression -> primaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 15 (unaryExpression -> primaryExpression .)
    QUESTION        reduce using rule 15 (unaryExpression -> primaryExpression .)
    DOUBLE_PIPE     reduce using rule 15 (unaryExpression -> primaryExpression .)
    ASSIGN          reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_LEFT         reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_RIGHT        reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_PLUS         reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_MINUS        reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_TIMES        reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_MODULO       reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_AND_BIT      reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_DIV          reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_OR_BIT       reduce using rule 15 (unaryExpression -> primaryExpression .)
    EQ_XOR_BIT      reduce using rule 15 (unaryExpression -> primaryExpression .)
    COMMA           reduce using rule 15 (unaryExpression -> primaryExpression .)
    SEMICOLON       reduce using rule 15 (unaryExpression -> primaryExpression .)
    LESS            reduce using rule 15 (unaryExpression -> primaryExpression .)
    LESS_EQ         reduce using rule 15 (unaryExpression -> primaryExpression .)
    GREATER         reduce using rule 15 (unaryExpression -> primaryExpression .)
    GREATER_EQ      reduce using rule 15 (unaryExpression -> primaryExpression .)
    IS_EQ_DIFF      reduce using rule 15 (unaryExpression -> primaryExpression .)
    NOT_EQ_DIFF     reduce using rule 15 (unaryExpression -> primaryExpression .)
    LESS_EQ_DIFF    reduce using rule 15 (unaryExpression -> primaryExpression .)
    LESS_DIFF       reduce using rule 15 (unaryExpression -> primaryExpression .)
    GREATER_EQ_DIFF reduce using rule 15 (unaryExpression -> primaryExpression .)
    GREATER_DIFF    reduce using rule 15 (unaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 15 (unaryExpression -> primaryExpression .)
    RBRACKET        reduce using rule 15 (unaryExpression -> primaryExpression .)
    COLON           reduce using rule 15 (unaryExpression -> primaryExpression .)
    RANGE           reduce using rule 15 (unaryExpression -> primaryExpression .)
    IDENTIFIER      reduce using rule 15 (unaryExpression -> primaryExpression .)
    CONST           reduce using rule 15 (unaryExpression -> primaryExpression .)
    IMMUTABLE       reduce using rule 15 (unaryExpression -> primaryExpression .)
    RBRACE          reduce using rule 15 (unaryExpression -> primaryExpression .)
    THIS            reduce using rule 15 (unaryExpression -> primaryExpression .)
    BOOL            reduce using rule 15 (unaryExpression -> primaryExpression .)
    SHORT           reduce using rule 15 (unaryExpression -> primaryExpression .)
    USHORT          reduce using rule 15 (unaryExpression -> primaryExpression .)
    INT             reduce using rule 15 (unaryExpression -> primaryExpression .)
    UINT            reduce using rule 15 (unaryExpression -> primaryExpression .)
    LONG            reduce using rule 15 (unaryExpression -> primaryExpression .)
    ULONG           reduce using rule 15 (unaryExpression -> primaryExpression .)
    CHAR            reduce using rule 15 (unaryExpression -> primaryExpression .)
    FLOAT           reduce using rule 15 (unaryExpression -> primaryExpression .)
    TYPEOF          reduce using rule 15 (unaryExpression -> primaryExpression .)


state 226

    (352) assignExpression -> ternaryExpression .
    (353) assignExpression -> ternaryExpression . assignOperator expression
    (354) assignOperator -> . ASSIGN
    (355) assignOperator -> . EQ_LEFT
    (356) assignOperator -> . EQ_RIGHT
    (357) assignOperator -> . EQ_PLUS
    (358) assignOperator -> . EQ_MINUS
    (359) assignOperator -> . EQ_TIMES
    (360) assignOperator -> . EQ_MODULO
    (361) assignOperator -> . EQ_AND_BIT
    (362) assignOperator -> . EQ_DIV
    (363) assignOperator -> . EQ_OR_BIT
    (364) assignOperator -> . EQ_XOR_BIT

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for EQ_LEFT resolved as shift
  ! shift/reduce conflict for EQ_RIGHT resolved as shift
  ! shift/reduce conflict for EQ_PLUS resolved as shift
  ! shift/reduce conflict for EQ_MINUS resolved as shift
  ! shift/reduce conflict for EQ_TIMES resolved as shift
  ! shift/reduce conflict for EQ_MODULO resolved as shift
  ! shift/reduce conflict for EQ_AND_BIT resolved as shift
  ! shift/reduce conflict for EQ_DIV resolved as shift
  ! shift/reduce conflict for EQ_OR_BIT resolved as shift
  ! shift/reduce conflict for EQ_XOR_BIT resolved as shift
    DOT             reduce using rule 352 (assignExpression -> ternaryExpression .)
    PLUS_PLUS       reduce using rule 352 (assignExpression -> ternaryExpression .)
    MINUS_MINUS     reduce using rule 352 (assignExpression -> ternaryExpression .)
    LBRACKET        reduce using rule 352 (assignExpression -> ternaryExpression .)
    LPAREN          reduce using rule 352 (assignExpression -> ternaryExpression .)
    POWER           reduce using rule 352 (assignExpression -> ternaryExpression .)
    TIMES           reduce using rule 352 (assignExpression -> ternaryExpression .)
    DIV             reduce using rule 352 (assignExpression -> ternaryExpression .)
    MODULO          reduce using rule 352 (assignExpression -> ternaryExpression .)
    PLUS            reduce using rule 352 (assignExpression -> ternaryExpression .)
    MINUS           reduce using rule 352 (assignExpression -> ternaryExpression .)
    TILDE           reduce using rule 352 (assignExpression -> ternaryExpression .)
    RIGHT_SHIFT     reduce using rule 352 (assignExpression -> ternaryExpression .)
    LEFT_SHIFT      reduce using rule 352 (assignExpression -> ternaryExpression .)
    IS_EQ           reduce using rule 352 (assignExpression -> ternaryExpression .)
    NOT_EQ          reduce using rule 352 (assignExpression -> ternaryExpression .)
    AMPERSAND       reduce using rule 352 (assignExpression -> ternaryExpression .)
    CARET           reduce using rule 352 (assignExpression -> ternaryExpression .)
    PIPE            reduce using rule 352 (assignExpression -> ternaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 352 (assignExpression -> ternaryExpression .)
    QUESTION        reduce using rule 352 (assignExpression -> ternaryExpression .)
    DOUBLE_PIPE     reduce using rule 352 (assignExpression -> ternaryExpression .)
    RPAREN          reduce using rule 352 (assignExpression -> ternaryExpression .)
    LESS            reduce using rule 352 (assignExpression -> ternaryExpression .)
    LESS_EQ         reduce using rule 352 (assignExpression -> ternaryExpression .)
    GREATER         reduce using rule 352 (assignExpression -> ternaryExpression .)
    GREATER_EQ      reduce using rule 352 (assignExpression -> ternaryExpression .)
    IS_EQ_DIFF      reduce using rule 352 (assignExpression -> ternaryExpression .)
    NOT_EQ_DIFF     reduce using rule 352 (assignExpression -> ternaryExpression .)
    LESS_EQ_DIFF    reduce using rule 352 (assignExpression -> ternaryExpression .)
    LESS_DIFF       reduce using rule 352 (assignExpression -> ternaryExpression .)
    GREATER_EQ_DIFF reduce using rule 352 (assignExpression -> ternaryExpression .)
    GREATER_DIFF    reduce using rule 352 (assignExpression -> ternaryExpression .)
    RBRACKET        reduce using rule 352 (assignExpression -> ternaryExpression .)
    RANGE           reduce using rule 352 (assignExpression -> ternaryExpression .)
    COMMA           reduce using rule 352 (assignExpression -> ternaryExpression .)
    SEMICOLON       reduce using rule 352 (assignExpression -> ternaryExpression .)
    COLON           reduce using rule 352 (assignExpression -> ternaryExpression .)
    IDENTIFIER      reduce using rule 352 (assignExpression -> ternaryExpression .)
    CONST           reduce using rule 352 (assignExpression -> ternaryExpression .)
    IMMUTABLE       reduce using rule 352 (assignExpression -> ternaryExpression .)
    RBRACE          reduce using rule 352 (assignExpression -> ternaryExpression .)
    THIS            reduce using rule 352 (assignExpression -> ternaryExpression .)
    BOOL            reduce using rule 352 (assignExpression -> ternaryExpression .)
    SHORT           reduce using rule 352 (assignExpression -> ternaryExpression .)
    USHORT          reduce using rule 352 (assignExpression -> ternaryExpression .)
    INT             reduce using rule 352 (assignExpression -> ternaryExpression .)
    UINT            reduce using rule 352 (assignExpression -> ternaryExpression .)
    LONG            reduce using rule 352 (assignExpression -> ternaryExpression .)
    ULONG           reduce using rule 352 (assignExpression -> ternaryExpression .)
    CHAR            reduce using rule 352 (assignExpression -> ternaryExpression .)
    FLOAT           reduce using rule 352 (assignExpression -> ternaryExpression .)
    TYPEOF          reduce using rule 352 (assignExpression -> ternaryExpression .)
    ASSIGN          shift and go to state 405
    EQ_LEFT         shift and go to state 406
    EQ_RIGHT        shift and go to state 399
    EQ_PLUS         shift and go to state 402
    EQ_MINUS        shift and go to state 408
    EQ_TIMES        shift and go to state 410
    EQ_MODULO       shift and go to state 407
    EQ_AND_BIT      shift and go to state 400
    EQ_DIV          shift and go to state 403
    EQ_OR_BIT       shift and go to state 401
    EQ_XOR_BIT      shift and go to state 404

  ! ASSIGN          [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_LEFT         [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_RIGHT        [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_PLUS         [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_MINUS        [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_TIMES        [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_MODULO       [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_AND_BIT      [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_DIV          [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_OR_BIT       [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]
  ! EQ_XOR_BIT      [ reduce using rule 352 (assignExpression -> ternaryExpression .) ]

    assignOperator                 shift and go to state 409

state 227

    (50) primaryExpression -> LIT_STRPlus .

    DOT             reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LBRACKET        reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LPAREN          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    POWER           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    TIMES           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    DIV             reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    MODULO          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    PLUS            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    MINUS           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    TILDE           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    IS_EQ           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    NOT_EQ          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    AMPERSAND       reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    CARET           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    PIPE            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    QUESTION        reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    ASSIGN          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_LEFT         reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_PLUS         reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_MINUS        reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_TIMES        reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_MODULO       reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_DIV          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    RBRACKET        reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    RANGE           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LESS            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LESS_EQ         reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    GREATER         reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    GREATER_EQ      reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    IS_EQ_DIFF      reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    NOT_EQ_DIFF     reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LESS_EQ_DIFF    reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LESS_DIFF       reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    GREATER_EQ_DIFF reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    GREATER_DIFF    reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    RPAREN          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    COMMA           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    SEMICOLON       reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    COLON           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    IDENTIFIER      reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    CONST           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    IMMUTABLE       reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    RBRACE          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    THIS            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    BOOL            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    SHORT           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    USHORT          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    INT             reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    UINT            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    LONG            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    ULONG           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    CHAR            reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    FLOAT           reduce using rule 50 (primaryExpression -> LIT_STRPlus .)
    TYPEOF          reduce using rule 50 (primaryExpression -> LIT_STRPlus .)


state 228

    (42) primaryExpression -> importExpression .

    DOT             reduce using rule 42 (primaryExpression -> importExpression .)
    PLUS_PLUS       reduce using rule 42 (primaryExpression -> importExpression .)
    MINUS_MINUS     reduce using rule 42 (primaryExpression -> importExpression .)
    LBRACKET        reduce using rule 42 (primaryExpression -> importExpression .)
    LPAREN          reduce using rule 42 (primaryExpression -> importExpression .)
    POWER           reduce using rule 42 (primaryExpression -> importExpression .)
    TIMES           reduce using rule 42 (primaryExpression -> importExpression .)
    DIV             reduce using rule 42 (primaryExpression -> importExpression .)
    MODULO          reduce using rule 42 (primaryExpression -> importExpression .)
    PLUS            reduce using rule 42 (primaryExpression -> importExpression .)
    MINUS           reduce using rule 42 (primaryExpression -> importExpression .)
    TILDE           reduce using rule 42 (primaryExpression -> importExpression .)
    RIGHT_SHIFT     reduce using rule 42 (primaryExpression -> importExpression .)
    LEFT_SHIFT      reduce using rule 42 (primaryExpression -> importExpression .)
    IS_EQ           reduce using rule 42 (primaryExpression -> importExpression .)
    NOT_EQ          reduce using rule 42 (primaryExpression -> importExpression .)
    AMPERSAND       reduce using rule 42 (primaryExpression -> importExpression .)
    CARET           reduce using rule 42 (primaryExpression -> importExpression .)
    PIPE            reduce using rule 42 (primaryExpression -> importExpression .)
    DOUBLE_AMPERSAND reduce using rule 42 (primaryExpression -> importExpression .)
    QUESTION        reduce using rule 42 (primaryExpression -> importExpression .)
    DOUBLE_PIPE     reduce using rule 42 (primaryExpression -> importExpression .)
    ASSIGN          reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_LEFT         reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_RIGHT        reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_PLUS         reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_MINUS        reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_TIMES        reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_MODULO       reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_AND_BIT      reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_DIV          reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_OR_BIT       reduce using rule 42 (primaryExpression -> importExpression .)
    EQ_XOR_BIT      reduce using rule 42 (primaryExpression -> importExpression .)
    RBRACKET        reduce using rule 42 (primaryExpression -> importExpression .)
    RANGE           reduce using rule 42 (primaryExpression -> importExpression .)
    LESS            reduce using rule 42 (primaryExpression -> importExpression .)
    LESS_EQ         reduce using rule 42 (primaryExpression -> importExpression .)
    GREATER         reduce using rule 42 (primaryExpression -> importExpression .)
    GREATER_EQ      reduce using rule 42 (primaryExpression -> importExpression .)
    IS_EQ_DIFF      reduce using rule 42 (primaryExpression -> importExpression .)
    NOT_EQ_DIFF     reduce using rule 42 (primaryExpression -> importExpression .)
    LESS_EQ_DIFF    reduce using rule 42 (primaryExpression -> importExpression .)
    LESS_DIFF       reduce using rule 42 (primaryExpression -> importExpression .)
    GREATER_EQ_DIFF reduce using rule 42 (primaryExpression -> importExpression .)
    GREATER_DIFF    reduce using rule 42 (primaryExpression -> importExpression .)
    RPAREN          reduce using rule 42 (primaryExpression -> importExpression .)
    COMMA           reduce using rule 42 (primaryExpression -> importExpression .)
    SEMICOLON       reduce using rule 42 (primaryExpression -> importExpression .)
    COLON           reduce using rule 42 (primaryExpression -> importExpression .)
    IDENTIFIER      reduce using rule 42 (primaryExpression -> importExpression .)
    CONST           reduce using rule 42 (primaryExpression -> importExpression .)
    IMMUTABLE       reduce using rule 42 (primaryExpression -> importExpression .)
    RBRACE          reduce using rule 42 (primaryExpression -> importExpression .)
    THIS            reduce using rule 42 (primaryExpression -> importExpression .)
    BOOL            reduce using rule 42 (primaryExpression -> importExpression .)
    SHORT           reduce using rule 42 (primaryExpression -> importExpression .)
    USHORT          reduce using rule 42 (primaryExpression -> importExpression .)
    INT             reduce using rule 42 (primaryExpression -> importExpression .)
    UINT            reduce using rule 42 (primaryExpression -> importExpression .)
    LONG            reduce using rule 42 (primaryExpression -> importExpression .)
    ULONG           reduce using rule 42 (primaryExpression -> importExpression .)
    CHAR            reduce using rule 42 (primaryExpression -> importExpression .)
    FLOAT           reduce using rule 42 (primaryExpression -> importExpression .)
    TYPEOF          reduce using rule 42 (primaryExpression -> importExpression .)


state 229

    (9) mulExpression -> powExpression .
    (14) powExpression -> powExpression . POWER unaryExpression

  ! shift/reduce conflict for POWER resolved as shift
    TIMES           reduce using rule 9 (mulExpression -> powExpression .)
    DIV             reduce using rule 9 (mulExpression -> powExpression .)
    MODULO          reduce using rule 9 (mulExpression -> powExpression .)
    PLUS            reduce using rule 9 (mulExpression -> powExpression .)
    MINUS           reduce using rule 9 (mulExpression -> powExpression .)
    TILDE           reduce using rule 9 (mulExpression -> powExpression .)
    RIGHT_SHIFT     reduce using rule 9 (mulExpression -> powExpression .)
    LEFT_SHIFT      reduce using rule 9 (mulExpression -> powExpression .)
    IS_EQ           reduce using rule 9 (mulExpression -> powExpression .)
    NOT_EQ          reduce using rule 9 (mulExpression -> powExpression .)
    AMPERSAND       reduce using rule 9 (mulExpression -> powExpression .)
    CARET           reduce using rule 9 (mulExpression -> powExpression .)
    PIPE            reduce using rule 9 (mulExpression -> powExpression .)
    DOUBLE_AMPERSAND reduce using rule 9 (mulExpression -> powExpression .)
    QUESTION        reduce using rule 9 (mulExpression -> powExpression .)
    DOUBLE_PIPE     reduce using rule 9 (mulExpression -> powExpression .)
    ASSIGN          reduce using rule 9 (mulExpression -> powExpression .)
    EQ_LEFT         reduce using rule 9 (mulExpression -> powExpression .)
    EQ_RIGHT        reduce using rule 9 (mulExpression -> powExpression .)
    EQ_PLUS         reduce using rule 9 (mulExpression -> powExpression .)
    EQ_MINUS        reduce using rule 9 (mulExpression -> powExpression .)
    EQ_TIMES        reduce using rule 9 (mulExpression -> powExpression .)
    EQ_MODULO       reduce using rule 9 (mulExpression -> powExpression .)
    EQ_AND_BIT      reduce using rule 9 (mulExpression -> powExpression .)
    EQ_DIV          reduce using rule 9 (mulExpression -> powExpression .)
    EQ_OR_BIT       reduce using rule 9 (mulExpression -> powExpression .)
    EQ_XOR_BIT      reduce using rule 9 (mulExpression -> powExpression .)
    COMMA           reduce using rule 9 (mulExpression -> powExpression .)
    RPAREN          reduce using rule 9 (mulExpression -> powExpression .)
    LESS            reduce using rule 9 (mulExpression -> powExpression .)
    LESS_EQ         reduce using rule 9 (mulExpression -> powExpression .)
    GREATER         reduce using rule 9 (mulExpression -> powExpression .)
    GREATER_EQ      reduce using rule 9 (mulExpression -> powExpression .)
    IS_EQ_DIFF      reduce using rule 9 (mulExpression -> powExpression .)
    NOT_EQ_DIFF     reduce using rule 9 (mulExpression -> powExpression .)
    LESS_EQ_DIFF    reduce using rule 9 (mulExpression -> powExpression .)
    LESS_DIFF       reduce using rule 9 (mulExpression -> powExpression .)
    GREATER_EQ_DIFF reduce using rule 9 (mulExpression -> powExpression .)
    GREATER_DIFF    reduce using rule 9 (mulExpression -> powExpression .)
    SEMICOLON       reduce using rule 9 (mulExpression -> powExpression .)
    RBRACKET        reduce using rule 9 (mulExpression -> powExpression .)
    COLON           reduce using rule 9 (mulExpression -> powExpression .)
    DOT             reduce using rule 9 (mulExpression -> powExpression .)
    PLUS_PLUS       reduce using rule 9 (mulExpression -> powExpression .)
    MINUS_MINUS     reduce using rule 9 (mulExpression -> powExpression .)
    LBRACKET        reduce using rule 9 (mulExpression -> powExpression .)
    LPAREN          reduce using rule 9 (mulExpression -> powExpression .)
    RANGE           reduce using rule 9 (mulExpression -> powExpression .)
    IDENTIFIER      reduce using rule 9 (mulExpression -> powExpression .)
    CONST           reduce using rule 9 (mulExpression -> powExpression .)
    IMMUTABLE       reduce using rule 9 (mulExpression -> powExpression .)
    RBRACE          reduce using rule 9 (mulExpression -> powExpression .)
    THIS            reduce using rule 9 (mulExpression -> powExpression .)
    BOOL            reduce using rule 9 (mulExpression -> powExpression .)
    SHORT           reduce using rule 9 (mulExpression -> powExpression .)
    USHORT          reduce using rule 9 (mulExpression -> powExpression .)
    INT             reduce using rule 9 (mulExpression -> powExpression .)
    UINT            reduce using rule 9 (mulExpression -> powExpression .)
    LONG            reduce using rule 9 (mulExpression -> powExpression .)
    ULONG           reduce using rule 9 (mulExpression -> powExpression .)
    CHAR            reduce using rule 9 (mulExpression -> powExpression .)
    FLOAT           reduce using rule 9 (mulExpression -> powExpression .)
    TYPEOF          reduce using rule 9 (mulExpression -> powExpression .)
    POWER           shift and go to state 411

  ! POWER           [ reduce using rule 9 (mulExpression -> powExpression .) ]


state 230

    (18) unaryExpression -> UTIMES . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 412
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 231

    (20) unaryExpression -> UMINUS . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 413
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 232

    (26) unaryExpression -> functionCallExpression .

    DOT             reduce using rule 26 (unaryExpression -> functionCallExpression .)
    PLUS_PLUS       reduce using rule 26 (unaryExpression -> functionCallExpression .)
    MINUS_MINUS     reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LBRACKET        reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LPAREN          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    POWER           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    TIMES           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    DIV             reduce using rule 26 (unaryExpression -> functionCallExpression .)
    MODULO          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    PLUS            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    MINUS           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    TILDE           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    RIGHT_SHIFT     reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LEFT_SHIFT      reduce using rule 26 (unaryExpression -> functionCallExpression .)
    IS_EQ           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    NOT_EQ          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    AMPERSAND       reduce using rule 26 (unaryExpression -> functionCallExpression .)
    CARET           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    PIPE            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    DOUBLE_AMPERSAND reduce using rule 26 (unaryExpression -> functionCallExpression .)
    QUESTION        reduce using rule 26 (unaryExpression -> functionCallExpression .)
    DOUBLE_PIPE     reduce using rule 26 (unaryExpression -> functionCallExpression .)
    ASSIGN          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_LEFT         reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_RIGHT        reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_PLUS         reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_MINUS        reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_TIMES        reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_MODULO       reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_AND_BIT      reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_DIV          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_OR_BIT       reduce using rule 26 (unaryExpression -> functionCallExpression .)
    EQ_XOR_BIT      reduce using rule 26 (unaryExpression -> functionCallExpression .)
    COMMA           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    SEMICOLON       reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LESS            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LESS_EQ         reduce using rule 26 (unaryExpression -> functionCallExpression .)
    GREATER         reduce using rule 26 (unaryExpression -> functionCallExpression .)
    GREATER_EQ      reduce using rule 26 (unaryExpression -> functionCallExpression .)
    IS_EQ_DIFF      reduce using rule 26 (unaryExpression -> functionCallExpression .)
    NOT_EQ_DIFF     reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LESS_EQ_DIFF    reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LESS_DIFF       reduce using rule 26 (unaryExpression -> functionCallExpression .)
    GREATER_EQ_DIFF reduce using rule 26 (unaryExpression -> functionCallExpression .)
    GREATER_DIFF    reduce using rule 26 (unaryExpression -> functionCallExpression .)
    RPAREN          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    RBRACKET        reduce using rule 26 (unaryExpression -> functionCallExpression .)
    COLON           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    RANGE           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    IDENTIFIER      reduce using rule 26 (unaryExpression -> functionCallExpression .)
    CONST           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    IMMUTABLE       reduce using rule 26 (unaryExpression -> functionCallExpression .)
    RBRACE          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    THIS            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    BOOL            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    SHORT           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    USHORT          reduce using rule 26 (unaryExpression -> functionCallExpression .)
    INT             reduce using rule 26 (unaryExpression -> functionCallExpression .)
    UINT            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    LONG            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    ULONG           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    CHAR            reduce using rule 26 (unaryExpression -> functionCallExpression .)
    FLOAT           reduce using rule 26 (unaryExpression -> functionCallExpression .)
    TYPEOF          reduce using rule 26 (unaryExpression -> functionCallExpression .)


state 233

    (45) primaryExpression -> NULL .

    DOT             reduce using rule 45 (primaryExpression -> NULL .)
    PLUS_PLUS       reduce using rule 45 (primaryExpression -> NULL .)
    MINUS_MINUS     reduce using rule 45 (primaryExpression -> NULL .)
    LBRACKET        reduce using rule 45 (primaryExpression -> NULL .)
    LPAREN          reduce using rule 45 (primaryExpression -> NULL .)
    POWER           reduce using rule 45 (primaryExpression -> NULL .)
    TIMES           reduce using rule 45 (primaryExpression -> NULL .)
    DIV             reduce using rule 45 (primaryExpression -> NULL .)
    MODULO          reduce using rule 45 (primaryExpression -> NULL .)
    PLUS            reduce using rule 45 (primaryExpression -> NULL .)
    MINUS           reduce using rule 45 (primaryExpression -> NULL .)
    TILDE           reduce using rule 45 (primaryExpression -> NULL .)
    RIGHT_SHIFT     reduce using rule 45 (primaryExpression -> NULL .)
    LEFT_SHIFT      reduce using rule 45 (primaryExpression -> NULL .)
    IS_EQ           reduce using rule 45 (primaryExpression -> NULL .)
    NOT_EQ          reduce using rule 45 (primaryExpression -> NULL .)
    AMPERSAND       reduce using rule 45 (primaryExpression -> NULL .)
    CARET           reduce using rule 45 (primaryExpression -> NULL .)
    PIPE            reduce using rule 45 (primaryExpression -> NULL .)
    DOUBLE_AMPERSAND reduce using rule 45 (primaryExpression -> NULL .)
    QUESTION        reduce using rule 45 (primaryExpression -> NULL .)
    DOUBLE_PIPE     reduce using rule 45 (primaryExpression -> NULL .)
    ASSIGN          reduce using rule 45 (primaryExpression -> NULL .)
    EQ_LEFT         reduce using rule 45 (primaryExpression -> NULL .)
    EQ_RIGHT        reduce using rule 45 (primaryExpression -> NULL .)
    EQ_PLUS         reduce using rule 45 (primaryExpression -> NULL .)
    EQ_MINUS        reduce using rule 45 (primaryExpression -> NULL .)
    EQ_TIMES        reduce using rule 45 (primaryExpression -> NULL .)
    EQ_MODULO       reduce using rule 45 (primaryExpression -> NULL .)
    EQ_AND_BIT      reduce using rule 45 (primaryExpression -> NULL .)
    EQ_DIV          reduce using rule 45 (primaryExpression -> NULL .)
    EQ_OR_BIT       reduce using rule 45 (primaryExpression -> NULL .)
    EQ_XOR_BIT      reduce using rule 45 (primaryExpression -> NULL .)
    RBRACKET        reduce using rule 45 (primaryExpression -> NULL .)
    RANGE           reduce using rule 45 (primaryExpression -> NULL .)
    LESS            reduce using rule 45 (primaryExpression -> NULL .)
    LESS_EQ         reduce using rule 45 (primaryExpression -> NULL .)
    GREATER         reduce using rule 45 (primaryExpression -> NULL .)
    GREATER_EQ      reduce using rule 45 (primaryExpression -> NULL .)
    IS_EQ_DIFF      reduce using rule 45 (primaryExpression -> NULL .)
    NOT_EQ_DIFF     reduce using rule 45 (primaryExpression -> NULL .)
    LESS_EQ_DIFF    reduce using rule 45 (primaryExpression -> NULL .)
    LESS_DIFF       reduce using rule 45 (primaryExpression -> NULL .)
    GREATER_EQ_DIFF reduce using rule 45 (primaryExpression -> NULL .)
    GREATER_DIFF    reduce using rule 45 (primaryExpression -> NULL .)
    RPAREN          reduce using rule 45 (primaryExpression -> NULL .)
    COMMA           reduce using rule 45 (primaryExpression -> NULL .)
    SEMICOLON       reduce using rule 45 (primaryExpression -> NULL .)
    COLON           reduce using rule 45 (primaryExpression -> NULL .)
    IDENTIFIER      reduce using rule 45 (primaryExpression -> NULL .)
    CONST           reduce using rule 45 (primaryExpression -> NULL .)
    IMMUTABLE       reduce using rule 45 (primaryExpression -> NULL .)
    RBRACE          reduce using rule 45 (primaryExpression -> NULL .)
    THIS            reduce using rule 45 (primaryExpression -> NULL .)
    BOOL            reduce using rule 45 (primaryExpression -> NULL .)
    SHORT           reduce using rule 45 (primaryExpression -> NULL .)
    USHORT          reduce using rule 45 (primaryExpression -> NULL .)
    INT             reduce using rule 45 (primaryExpression -> NULL .)
    UINT            reduce using rule 45 (primaryExpression -> NULL .)
    LONG            reduce using rule 45 (primaryExpression -> NULL .)
    ULONG           reduce using rule 45 (primaryExpression -> NULL .)
    CHAR            reduce using rule 45 (primaryExpression -> NULL .)
    FLOAT           reduce using rule 45 (primaryExpression -> NULL .)
    TYPEOF          reduce using rule 45 (primaryExpression -> NULL .)


state 234

    (377) cmpExpression -> shiftExpression .
    (381) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (382) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression
    (383) equalExpression -> shiftExpression . IS_EQ shiftExpression
    (384) equalExpression -> shiftExpression . NOT_EQ shiftExpression
    (385) relExpression -> shiftExpression .

  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for IS_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for CARET resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PIPE resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for QUESTION resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for POWER resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TIMES resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DIV resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MODULO resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TILDE resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RANGE resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for COLON resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for BOOL resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for SHORT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for USHORT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for INT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for UINT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for ULONG resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for CHAR resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for FLOAT resolved using rule 377 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 377 (cmpExpression -> shiftExpression .)
    AMPERSAND       reduce using rule 377 (cmpExpression -> shiftExpression .)
    CARET           reduce using rule 377 (cmpExpression -> shiftExpression .)
    PIPE            reduce using rule 377 (cmpExpression -> shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 377 (cmpExpression -> shiftExpression .)
    QUESTION        reduce using rule 377 (cmpExpression -> shiftExpression .)
    DOUBLE_PIPE     reduce using rule 377 (cmpExpression -> shiftExpression .)
    ASSIGN          reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_LEFT         reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_RIGHT        reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_PLUS         reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_MINUS        reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_TIMES        reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_MODULO       reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_AND_BIT      reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_DIV          reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_OR_BIT       reduce using rule 377 (cmpExpression -> shiftExpression .)
    EQ_XOR_BIT      reduce using rule 377 (cmpExpression -> shiftExpression .)
    RPAREN          reduce using rule 377 (cmpExpression -> shiftExpression .)
    COMMA           reduce using rule 377 (cmpExpression -> shiftExpression .)
    COLON           reduce using rule 377 (cmpExpression -> shiftExpression .)
    RBRACKET        reduce using rule 377 (cmpExpression -> shiftExpression .)
    IDENTIFIER      reduce using rule 377 (cmpExpression -> shiftExpression .)
    CONST           reduce using rule 377 (cmpExpression -> shiftExpression .)
    IMMUTABLE       reduce using rule 377 (cmpExpression -> shiftExpression .)
    RBRACE          reduce using rule 377 (cmpExpression -> shiftExpression .)
    THIS            reduce using rule 377 (cmpExpression -> shiftExpression .)
    BOOL            reduce using rule 377 (cmpExpression -> shiftExpression .)
    SHORT           reduce using rule 377 (cmpExpression -> shiftExpression .)
    USHORT          reduce using rule 377 (cmpExpression -> shiftExpression .)
    INT             reduce using rule 377 (cmpExpression -> shiftExpression .)
    UINT            reduce using rule 377 (cmpExpression -> shiftExpression .)
    LONG            reduce using rule 377 (cmpExpression -> shiftExpression .)
    ULONG           reduce using rule 377 (cmpExpression -> shiftExpression .)
    CHAR            reduce using rule 377 (cmpExpression -> shiftExpression .)
    FLOAT           reduce using rule 377 (cmpExpression -> shiftExpression .)
    TYPEOF          reduce using rule 377 (cmpExpression -> shiftExpression .)
    SEMICOLON       reduce using rule 377 (cmpExpression -> shiftExpression .)
    RANGE           reduce using rule 377 (cmpExpression -> shiftExpression .)
    DOT             reduce using rule 377 (cmpExpression -> shiftExpression .)
    PLUS_PLUS       reduce using rule 377 (cmpExpression -> shiftExpression .)
    MINUS_MINUS     reduce using rule 377 (cmpExpression -> shiftExpression .)
    LBRACKET        reduce using rule 377 (cmpExpression -> shiftExpression .)
    LPAREN          reduce using rule 377 (cmpExpression -> shiftExpression .)
    POWER           reduce using rule 377 (cmpExpression -> shiftExpression .)
    TIMES           reduce using rule 377 (cmpExpression -> shiftExpression .)
    DIV             reduce using rule 377 (cmpExpression -> shiftExpression .)
    MODULO          reduce using rule 377 (cmpExpression -> shiftExpression .)
    PLUS            reduce using rule 377 (cmpExpression -> shiftExpression .)
    MINUS           reduce using rule 377 (cmpExpression -> shiftExpression .)
    TILDE           reduce using rule 377 (cmpExpression -> shiftExpression .)
    LESS            reduce using rule 377 (cmpExpression -> shiftExpression .)
    LESS_EQ         reduce using rule 377 (cmpExpression -> shiftExpression .)
    GREATER         reduce using rule 377 (cmpExpression -> shiftExpression .)
    GREATER_EQ      reduce using rule 377 (cmpExpression -> shiftExpression .)
    IS_EQ_DIFF      reduce using rule 377 (cmpExpression -> shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 377 (cmpExpression -> shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 377 (cmpExpression -> shiftExpression .)
    LESS_DIFF       reduce using rule 377 (cmpExpression -> shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 377 (cmpExpression -> shiftExpression .)
    GREATER_DIFF    reduce using rule 377 (cmpExpression -> shiftExpression .)
    RIGHT_SHIFT     shift and go to state 416
    LEFT_SHIFT      shift and go to state 415
    IS_EQ           shift and go to state 414
    NOT_EQ          shift and go to state 417

  ! RIGHT_SHIFT     [ reduce using rule 377 (cmpExpression -> shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 377 (cmpExpression -> shiftExpression .) ]
  ! IS_EQ           [ reduce using rule 377 (cmpExpression -> shiftExpression .) ]
  ! NOT_EQ          [ reduce using rule 377 (cmpExpression -> shiftExpression .) ]
  ! LESS            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! LESS_EQ         [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! GREATER         [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! GREATER_EQ      [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! IS_EQ_DIFF      [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! LESS_DIFF       [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! GREATER_DIFF    [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! AMPERSAND       [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! CARET           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! PIPE            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! QUESTION        [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! ASSIGN          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_LEFT         [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_RIGHT        [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_PLUS         [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_MINUS        [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_TIMES        [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_MODULO       [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_AND_BIT      [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_DIV          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_OR_BIT       [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! EQ_XOR_BIT      [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! COMMA           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! RPAREN          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! DOT             [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! LBRACKET        [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! LPAREN          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! POWER           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! TIMES           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! DIV             [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! MODULO          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! PLUS            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! MINUS           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! TILDE           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! RIGHT_SHIFT     [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! IS_EQ           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! NOT_EQ          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! RBRACKET        [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! RANGE           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! SEMICOLON       [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! COLON           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! IDENTIFIER      [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! CONST           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! IMMUTABLE       [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! RBRACE          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! THIS            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! BOOL            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! SHORT           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! USHORT          [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! INT             [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! UINT            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! LONG            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! ULONG           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! CHAR            [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! FLOAT           [ reduce using rule 385 (relExpression -> shiftExpression .) ]
  ! TYPEOF          [ reduce using rule 385 (relExpression -> shiftExpression .) ]


state 235

    (369) andAndExpression -> orExpression .
    (372) orExpression -> orExpression . PIPE xorExpression

  ! shift/reduce conflict for PIPE resolved as shift
    DOUBLE_AMPERSAND reduce using rule 369 (andAndExpression -> orExpression .)
    QUESTION        reduce using rule 369 (andAndExpression -> orExpression .)
    DOUBLE_PIPE     reduce using rule 369 (andAndExpression -> orExpression .)
    ASSIGN          reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_LEFT         reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_RIGHT        reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_PLUS         reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_MINUS        reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_TIMES        reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_MODULO       reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_AND_BIT      reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_DIV          reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_OR_BIT       reduce using rule 369 (andAndExpression -> orExpression .)
    EQ_XOR_BIT      reduce using rule 369 (andAndExpression -> orExpression .)
    SEMICOLON       reduce using rule 369 (andAndExpression -> orExpression .)
    COMMA           reduce using rule 369 (andAndExpression -> orExpression .)
    COLON           reduce using rule 369 (andAndExpression -> orExpression .)
    RBRACKET        reduce using rule 369 (andAndExpression -> orExpression .)
    DOT             reduce using rule 369 (andAndExpression -> orExpression .)
    PLUS_PLUS       reduce using rule 369 (andAndExpression -> orExpression .)
    MINUS_MINUS     reduce using rule 369 (andAndExpression -> orExpression .)
    LBRACKET        reduce using rule 369 (andAndExpression -> orExpression .)
    LPAREN          reduce using rule 369 (andAndExpression -> orExpression .)
    POWER           reduce using rule 369 (andAndExpression -> orExpression .)
    TIMES           reduce using rule 369 (andAndExpression -> orExpression .)
    DIV             reduce using rule 369 (andAndExpression -> orExpression .)
    MODULO          reduce using rule 369 (andAndExpression -> orExpression .)
    PLUS            reduce using rule 369 (andAndExpression -> orExpression .)
    MINUS           reduce using rule 369 (andAndExpression -> orExpression .)
    TILDE           reduce using rule 369 (andAndExpression -> orExpression .)
    RIGHT_SHIFT     reduce using rule 369 (andAndExpression -> orExpression .)
    LEFT_SHIFT      reduce using rule 369 (andAndExpression -> orExpression .)
    IS_EQ           reduce using rule 369 (andAndExpression -> orExpression .)
    NOT_EQ          reduce using rule 369 (andAndExpression -> orExpression .)
    AMPERSAND       reduce using rule 369 (andAndExpression -> orExpression .)
    CARET           reduce using rule 369 (andAndExpression -> orExpression .)
    RPAREN          reduce using rule 369 (andAndExpression -> orExpression .)
    LESS            reduce using rule 369 (andAndExpression -> orExpression .)
    LESS_EQ         reduce using rule 369 (andAndExpression -> orExpression .)
    GREATER         reduce using rule 369 (andAndExpression -> orExpression .)
    GREATER_EQ      reduce using rule 369 (andAndExpression -> orExpression .)
    IS_EQ_DIFF      reduce using rule 369 (andAndExpression -> orExpression .)
    NOT_EQ_DIFF     reduce using rule 369 (andAndExpression -> orExpression .)
    LESS_EQ_DIFF    reduce using rule 369 (andAndExpression -> orExpression .)
    LESS_DIFF       reduce using rule 369 (andAndExpression -> orExpression .)
    GREATER_EQ_DIFF reduce using rule 369 (andAndExpression -> orExpression .)
    GREATER_DIFF    reduce using rule 369 (andAndExpression -> orExpression .)
    RANGE           reduce using rule 369 (andAndExpression -> orExpression .)
    IDENTIFIER      reduce using rule 369 (andAndExpression -> orExpression .)
    CONST           reduce using rule 369 (andAndExpression -> orExpression .)
    IMMUTABLE       reduce using rule 369 (andAndExpression -> orExpression .)
    RBRACE          reduce using rule 369 (andAndExpression -> orExpression .)
    THIS            reduce using rule 369 (andAndExpression -> orExpression .)
    BOOL            reduce using rule 369 (andAndExpression -> orExpression .)
    SHORT           reduce using rule 369 (andAndExpression -> orExpression .)
    USHORT          reduce using rule 369 (andAndExpression -> orExpression .)
    INT             reduce using rule 369 (andAndExpression -> orExpression .)
    UINT            reduce using rule 369 (andAndExpression -> orExpression .)
    LONG            reduce using rule 369 (andAndExpression -> orExpression .)
    ULONG           reduce using rule 369 (andAndExpression -> orExpression .)
    CHAR            reduce using rule 369 (andAndExpression -> orExpression .)
    FLOAT           reduce using rule 369 (andAndExpression -> orExpression .)
    TYPEOF          reduce using rule 369 (andAndExpression -> orExpression .)
    PIPE            shift and go to state 418

  ! PIPE            [ reduce using rule 369 (andAndExpression -> orExpression .) ]


state 236

    (378) cmpExpression -> equalExpression .

    AMPERSAND       reduce using rule 378 (cmpExpression -> equalExpression .)
    CARET           reduce using rule 378 (cmpExpression -> equalExpression .)
    PIPE            reduce using rule 378 (cmpExpression -> equalExpression .)
    DOUBLE_AMPERSAND reduce using rule 378 (cmpExpression -> equalExpression .)
    QUESTION        reduce using rule 378 (cmpExpression -> equalExpression .)
    DOUBLE_PIPE     reduce using rule 378 (cmpExpression -> equalExpression .)
    ASSIGN          reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_LEFT         reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_RIGHT        reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_PLUS         reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_MINUS        reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_TIMES        reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_MODULO       reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_AND_BIT      reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_DIV          reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_OR_BIT       reduce using rule 378 (cmpExpression -> equalExpression .)
    EQ_XOR_BIT      reduce using rule 378 (cmpExpression -> equalExpression .)
    RPAREN          reduce using rule 378 (cmpExpression -> equalExpression .)
    COMMA           reduce using rule 378 (cmpExpression -> equalExpression .)
    COLON           reduce using rule 378 (cmpExpression -> equalExpression .)
    RBRACKET        reduce using rule 378 (cmpExpression -> equalExpression .)
    IDENTIFIER      reduce using rule 378 (cmpExpression -> equalExpression .)
    CONST           reduce using rule 378 (cmpExpression -> equalExpression .)
    IMMUTABLE       reduce using rule 378 (cmpExpression -> equalExpression .)
    RBRACE          reduce using rule 378 (cmpExpression -> equalExpression .)
    THIS            reduce using rule 378 (cmpExpression -> equalExpression .)
    BOOL            reduce using rule 378 (cmpExpression -> equalExpression .)
    SHORT           reduce using rule 378 (cmpExpression -> equalExpression .)
    USHORT          reduce using rule 378 (cmpExpression -> equalExpression .)
    INT             reduce using rule 378 (cmpExpression -> equalExpression .)
    UINT            reduce using rule 378 (cmpExpression -> equalExpression .)
    LONG            reduce using rule 378 (cmpExpression -> equalExpression .)
    ULONG           reduce using rule 378 (cmpExpression -> equalExpression .)
    CHAR            reduce using rule 378 (cmpExpression -> equalExpression .)
    FLOAT           reduce using rule 378 (cmpExpression -> equalExpression .)
    TYPEOF          reduce using rule 378 (cmpExpression -> equalExpression .)
    SEMICOLON       reduce using rule 378 (cmpExpression -> equalExpression .)
    RANGE           reduce using rule 378 (cmpExpression -> equalExpression .)
    DOT             reduce using rule 378 (cmpExpression -> equalExpression .)
    PLUS_PLUS       reduce using rule 378 (cmpExpression -> equalExpression .)
    MINUS_MINUS     reduce using rule 378 (cmpExpression -> equalExpression .)
    LBRACKET        reduce using rule 378 (cmpExpression -> equalExpression .)
    LPAREN          reduce using rule 378 (cmpExpression -> equalExpression .)
    POWER           reduce using rule 378 (cmpExpression -> equalExpression .)
    TIMES           reduce using rule 378 (cmpExpression -> equalExpression .)
    DIV             reduce using rule 378 (cmpExpression -> equalExpression .)
    MODULO          reduce using rule 378 (cmpExpression -> equalExpression .)
    PLUS            reduce using rule 378 (cmpExpression -> equalExpression .)
    MINUS           reduce using rule 378 (cmpExpression -> equalExpression .)
    TILDE           reduce using rule 378 (cmpExpression -> equalExpression .)
    RIGHT_SHIFT     reduce using rule 378 (cmpExpression -> equalExpression .)
    LEFT_SHIFT      reduce using rule 378 (cmpExpression -> equalExpression .)
    IS_EQ           reduce using rule 378 (cmpExpression -> equalExpression .)
    NOT_EQ          reduce using rule 378 (cmpExpression -> equalExpression .)
    LESS            reduce using rule 378 (cmpExpression -> equalExpression .)
    LESS_EQ         reduce using rule 378 (cmpExpression -> equalExpression .)
    GREATER         reduce using rule 378 (cmpExpression -> equalExpression .)
    GREATER_EQ      reduce using rule 378 (cmpExpression -> equalExpression .)
    IS_EQ_DIFF      reduce using rule 378 (cmpExpression -> equalExpression .)
    NOT_EQ_DIFF     reduce using rule 378 (cmpExpression -> equalExpression .)
    LESS_EQ_DIFF    reduce using rule 378 (cmpExpression -> equalExpression .)
    LESS_DIFF       reduce using rule 378 (cmpExpression -> equalExpression .)
    GREATER_EQ_DIFF reduce using rule 378 (cmpExpression -> equalExpression .)
    GREATER_DIFF    reduce using rule 378 (cmpExpression -> equalExpression .)


state 237

    (341) functionBody -> blockStatement .

    DOT             reduce using rule 341 (functionBody -> blockStatement .)
    PLUS_PLUS       reduce using rule 341 (functionBody -> blockStatement .)
    MINUS_MINUS     reduce using rule 341 (functionBody -> blockStatement .)
    LBRACKET        reduce using rule 341 (functionBody -> blockStatement .)
    LPAREN          reduce using rule 341 (functionBody -> blockStatement .)
    POWER           reduce using rule 341 (functionBody -> blockStatement .)
    TIMES           reduce using rule 341 (functionBody -> blockStatement .)
    DIV             reduce using rule 341 (functionBody -> blockStatement .)
    MODULO          reduce using rule 341 (functionBody -> blockStatement .)
    PLUS            reduce using rule 341 (functionBody -> blockStatement .)
    MINUS           reduce using rule 341 (functionBody -> blockStatement .)
    TILDE           reduce using rule 341 (functionBody -> blockStatement .)
    RIGHT_SHIFT     reduce using rule 341 (functionBody -> blockStatement .)
    LEFT_SHIFT      reduce using rule 341 (functionBody -> blockStatement .)
    IS_EQ           reduce using rule 341 (functionBody -> blockStatement .)
    NOT_EQ          reduce using rule 341 (functionBody -> blockStatement .)
    AMPERSAND       reduce using rule 341 (functionBody -> blockStatement .)
    CARET           reduce using rule 341 (functionBody -> blockStatement .)
    PIPE            reduce using rule 341 (functionBody -> blockStatement .)
    DOUBLE_AMPERSAND reduce using rule 341 (functionBody -> blockStatement .)
    QUESTION        reduce using rule 341 (functionBody -> blockStatement .)
    DOUBLE_PIPE     reduce using rule 341 (functionBody -> blockStatement .)
    ASSIGN          reduce using rule 341 (functionBody -> blockStatement .)
    EQ_LEFT         reduce using rule 341 (functionBody -> blockStatement .)
    EQ_RIGHT        reduce using rule 341 (functionBody -> blockStatement .)
    EQ_PLUS         reduce using rule 341 (functionBody -> blockStatement .)
    EQ_MINUS        reduce using rule 341 (functionBody -> blockStatement .)
    EQ_TIMES        reduce using rule 341 (functionBody -> blockStatement .)
    EQ_MODULO       reduce using rule 341 (functionBody -> blockStatement .)
    EQ_AND_BIT      reduce using rule 341 (functionBody -> blockStatement .)
    EQ_DIV          reduce using rule 341 (functionBody -> blockStatement .)
    EQ_OR_BIT       reduce using rule 341 (functionBody -> blockStatement .)
    EQ_XOR_BIT      reduce using rule 341 (functionBody -> blockStatement .)
    RPAREN          reduce using rule 341 (functionBody -> blockStatement .)
    LESS            reduce using rule 341 (functionBody -> blockStatement .)
    LESS_EQ         reduce using rule 341 (functionBody -> blockStatement .)
    GREATER         reduce using rule 341 (functionBody -> blockStatement .)
    GREATER_EQ      reduce using rule 341 (functionBody -> blockStatement .)
    IS_EQ_DIFF      reduce using rule 341 (functionBody -> blockStatement .)
    NOT_EQ_DIFF     reduce using rule 341 (functionBody -> blockStatement .)
    LESS_EQ_DIFF    reduce using rule 341 (functionBody -> blockStatement .)
    LESS_DIFF       reduce using rule 341 (functionBody -> blockStatement .)
    GREATER_EQ_DIFF reduce using rule 341 (functionBody -> blockStatement .)
    GREATER_DIFF    reduce using rule 341 (functionBody -> blockStatement .)
    RBRACKET        reduce using rule 341 (functionBody -> blockStatement .)
    RANGE           reduce using rule 341 (functionBody -> blockStatement .)
    COMMA           reduce using rule 341 (functionBody -> blockStatement .)
    SEMICOLON       reduce using rule 341 (functionBody -> blockStatement .)
    COLON           reduce using rule 341 (functionBody -> blockStatement .)
    IDENTIFIER      reduce using rule 341 (functionBody -> blockStatement .)
    CONST           reduce using rule 341 (functionBody -> blockStatement .)
    IMMUTABLE       reduce using rule 341 (functionBody -> blockStatement .)
    RBRACE          reduce using rule 341 (functionBody -> blockStatement .)
    THIS            reduce using rule 341 (functionBody -> blockStatement .)
    BOOL            reduce using rule 341 (functionBody -> blockStatement .)
    SHORT           reduce using rule 341 (functionBody -> blockStatement .)
    USHORT          reduce using rule 341 (functionBody -> blockStatement .)
    INT             reduce using rule 341 (functionBody -> blockStatement .)
    UINT            reduce using rule 341 (functionBody -> blockStatement .)
    LONG            reduce using rule 341 (functionBody -> blockStatement .)
    ULONG           reduce using rule 341 (functionBody -> blockStatement .)
    CHAR            reduce using rule 341 (functionBody -> blockStatement .)
    FLOAT           reduce using rule 341 (functionBody -> blockStatement .)
    TYPEOF          reduce using rule 341 (functionBody -> blockStatement .)
    PRIVATE         reduce using rule 341 (functionBody -> blockStatement .)
    PROTECTED       reduce using rule 341 (functionBody -> blockStatement .)
    PUBLIC          reduce using rule 341 (functionBody -> blockStatement .)
    STATIC          reduce using rule 341 (functionBody -> blockStatement .)
    EXTERN          reduce using rule 341 (functionBody -> blockStatement .)
    FINAL           reduce using rule 341 (functionBody -> blockStatement .)
    AUTO            reduce using rule 341 (functionBody -> blockStatement .)
    ALIAS           reduce using rule 341 (functionBody -> blockStatement .)
    ENUM            reduce using rule 341 (functionBody -> blockStatement .)
    CLASS           reduce using rule 341 (functionBody -> blockStatement .)
    IMPORT          reduce using rule 341 (functionBody -> blockStatement .)
    UNION           reduce using rule 341 (functionBody -> blockStatement .)
    MIXIN           reduce using rule 341 (functionBody -> blockStatement .)
    DOUBLE          reduce using rule 341 (functionBody -> blockStatement .)
    $end            reduce using rule 341 (functionBody -> blockStatement .)
    CASE            reduce using rule 341 (functionBody -> blockStatement .)
    DEFAULT         reduce using rule 341 (functionBody -> blockStatement .)
    LBRACE          reduce using rule 341 (functionBody -> blockStatement .)
    IF              reduce using rule 341 (functionBody -> blockStatement .)
    WHILE           reduce using rule 341 (functionBody -> blockStatement .)
    DO              reduce using rule 341 (functionBody -> blockStatement .)
    FOR             reduce using rule 341 (functionBody -> blockStatement .)
    FOREACH         reduce using rule 341 (functionBody -> blockStatement .)
    FOREACH_REVERSE reduce using rule 341 (functionBody -> blockStatement .)
    SWITCH          reduce using rule 341 (functionBody -> blockStatement .)
    CONTINUE        reduce using rule 341 (functionBody -> blockStatement .)
    BREAK           reduce using rule 341 (functionBody -> blockStatement .)
    RETURN          reduce using rule 341 (functionBody -> blockStatement .)
    GOTO            reduce using rule 341 (functionBody -> blockStatement .)
    WITH            reduce using rule 341 (functionBody -> blockStatement .)
    UAMPERSAND      reduce using rule 341 (functionBody -> blockStatement .)
    EXCLAMATION     reduce using rule 341 (functionBody -> blockStatement .)
    UTIMES          reduce using rule 341 (functionBody -> blockStatement .)
    UPLUS           reduce using rule 341 (functionBody -> blockStatement .)
    UMINUS          reduce using rule 341 (functionBody -> blockStatement .)
    DOLLAR          reduce using rule 341 (functionBody -> blockStatement .)
    NULL            reduce using rule 341 (functionBody -> blockStatement .)
    TRUE            reduce using rule 341 (functionBody -> blockStatement .)
    FALSE           reduce using rule 341 (functionBody -> blockStatement .)
    INUMBER         reduce using rule 341 (functionBody -> blockStatement .)
    DNUMBER         reduce using rule 341 (functionBody -> blockStatement .)
    LIT_CHAR        reduce using rule 341 (functionBody -> blockStatement .)
    NEW             reduce using rule 341 (functionBody -> blockStatement .)
    DELETE          reduce using rule 341 (functionBody -> blockStatement .)
    CAST            reduce using rule 341 (functionBody -> blockStatement .)
    FUNCTION        reduce using rule 341 (functionBody -> blockStatement .)
    LIT_STR         reduce using rule 341 (functionBody -> blockStatement .)
    ELSE            reduce using rule 341 (functionBody -> blockStatement .)


state 238

    (380) shiftExpression -> addExpression .
    (6) addExpression -> addExpression . PLUS mulExpression
    (7) addExpression -> addExpression . MINUS mulExpression
    (8) addExpression -> addExpression . TILDE mulExpression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
    RIGHT_SHIFT     reduce using rule 380 (shiftExpression -> addExpression .)
    LEFT_SHIFT      reduce using rule 380 (shiftExpression -> addExpression .)
    IS_EQ           reduce using rule 380 (shiftExpression -> addExpression .)
    NOT_EQ          reduce using rule 380 (shiftExpression -> addExpression .)
    AMPERSAND       reduce using rule 380 (shiftExpression -> addExpression .)
    CARET           reduce using rule 380 (shiftExpression -> addExpression .)
    PIPE            reduce using rule 380 (shiftExpression -> addExpression .)
    DOUBLE_AMPERSAND reduce using rule 380 (shiftExpression -> addExpression .)
    QUESTION        reduce using rule 380 (shiftExpression -> addExpression .)
    DOUBLE_PIPE     reduce using rule 380 (shiftExpression -> addExpression .)
    ASSIGN          reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_LEFT         reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_RIGHT        reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_PLUS         reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_MINUS        reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_TIMES        reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_MODULO       reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_AND_BIT      reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_DIV          reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_OR_BIT       reduce using rule 380 (shiftExpression -> addExpression .)
    EQ_XOR_BIT      reduce using rule 380 (shiftExpression -> addExpression .)
    RPAREN          reduce using rule 380 (shiftExpression -> addExpression .)
    COMMA           reduce using rule 380 (shiftExpression -> addExpression .)
    LESS            reduce using rule 380 (shiftExpression -> addExpression .)
    LESS_EQ         reduce using rule 380 (shiftExpression -> addExpression .)
    GREATER         reduce using rule 380 (shiftExpression -> addExpression .)
    GREATER_EQ      reduce using rule 380 (shiftExpression -> addExpression .)
    IS_EQ_DIFF      reduce using rule 380 (shiftExpression -> addExpression .)
    NOT_EQ_DIFF     reduce using rule 380 (shiftExpression -> addExpression .)
    LESS_EQ_DIFF    reduce using rule 380 (shiftExpression -> addExpression .)
    LESS_DIFF       reduce using rule 380 (shiftExpression -> addExpression .)
    GREATER_EQ_DIFF reduce using rule 380 (shiftExpression -> addExpression .)
    GREATER_DIFF    reduce using rule 380 (shiftExpression -> addExpression .)
    SEMICOLON       reduce using rule 380 (shiftExpression -> addExpression .)
    RBRACKET        reduce using rule 380 (shiftExpression -> addExpression .)
    RANGE           reduce using rule 380 (shiftExpression -> addExpression .)
    COLON           reduce using rule 380 (shiftExpression -> addExpression .)
    DOT             reduce using rule 380 (shiftExpression -> addExpression .)
    PLUS_PLUS       reduce using rule 380 (shiftExpression -> addExpression .)
    MINUS_MINUS     reduce using rule 380 (shiftExpression -> addExpression .)
    LBRACKET        reduce using rule 380 (shiftExpression -> addExpression .)
    LPAREN          reduce using rule 380 (shiftExpression -> addExpression .)
    POWER           reduce using rule 380 (shiftExpression -> addExpression .)
    TIMES           reduce using rule 380 (shiftExpression -> addExpression .)
    DIV             reduce using rule 380 (shiftExpression -> addExpression .)
    MODULO          reduce using rule 380 (shiftExpression -> addExpression .)
    IDENTIFIER      reduce using rule 380 (shiftExpression -> addExpression .)
    CONST           reduce using rule 380 (shiftExpression -> addExpression .)
    IMMUTABLE       reduce using rule 380 (shiftExpression -> addExpression .)
    RBRACE          reduce using rule 380 (shiftExpression -> addExpression .)
    THIS            reduce using rule 380 (shiftExpression -> addExpression .)
    BOOL            reduce using rule 380 (shiftExpression -> addExpression .)
    SHORT           reduce using rule 380 (shiftExpression -> addExpression .)
    USHORT          reduce using rule 380 (shiftExpression -> addExpression .)
    INT             reduce using rule 380 (shiftExpression -> addExpression .)
    UINT            reduce using rule 380 (shiftExpression -> addExpression .)
    LONG            reduce using rule 380 (shiftExpression -> addExpression .)
    ULONG           reduce using rule 380 (shiftExpression -> addExpression .)
    CHAR            reduce using rule 380 (shiftExpression -> addExpression .)
    FLOAT           reduce using rule 380 (shiftExpression -> addExpression .)
    TYPEOF          reduce using rule 380 (shiftExpression -> addExpression .)
    PLUS            shift and go to state 419
    MINUS           shift and go to state 420
    TILDE           shift and go to state 421

  ! PLUS            [ reduce using rule 380 (shiftExpression -> addExpression .) ]
  ! MINUS           [ reduce using rule 380 (shiftExpression -> addExpression .) ]
  ! TILDE           [ reduce using rule 380 (shiftExpression -> addExpression .) ]


state 239

    (13) powExpression -> unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    POWER           reduce using rule 13 (powExpression -> unaryExpression .)
    TIMES           reduce using rule 13 (powExpression -> unaryExpression .)
    DIV             reduce using rule 13 (powExpression -> unaryExpression .)
    MODULO          reduce using rule 13 (powExpression -> unaryExpression .)
    PLUS            reduce using rule 13 (powExpression -> unaryExpression .)
    MINUS           reduce using rule 13 (powExpression -> unaryExpression .)
    TILDE           reduce using rule 13 (powExpression -> unaryExpression .)
    RIGHT_SHIFT     reduce using rule 13 (powExpression -> unaryExpression .)
    LEFT_SHIFT      reduce using rule 13 (powExpression -> unaryExpression .)
    IS_EQ           reduce using rule 13 (powExpression -> unaryExpression .)
    NOT_EQ          reduce using rule 13 (powExpression -> unaryExpression .)
    AMPERSAND       reduce using rule 13 (powExpression -> unaryExpression .)
    CARET           reduce using rule 13 (powExpression -> unaryExpression .)
    PIPE            reduce using rule 13 (powExpression -> unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 13 (powExpression -> unaryExpression .)
    QUESTION        reduce using rule 13 (powExpression -> unaryExpression .)
    DOUBLE_PIPE     reduce using rule 13 (powExpression -> unaryExpression .)
    ASSIGN          reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_LEFT         reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_RIGHT        reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_PLUS         reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_MINUS        reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_TIMES        reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_MODULO       reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_AND_BIT      reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_DIV          reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_OR_BIT       reduce using rule 13 (powExpression -> unaryExpression .)
    EQ_XOR_BIT      reduce using rule 13 (powExpression -> unaryExpression .)
    RPAREN          reduce using rule 13 (powExpression -> unaryExpression .)
    LESS            reduce using rule 13 (powExpression -> unaryExpression .)
    LESS_EQ         reduce using rule 13 (powExpression -> unaryExpression .)
    GREATER         reduce using rule 13 (powExpression -> unaryExpression .)
    GREATER_EQ      reduce using rule 13 (powExpression -> unaryExpression .)
    IS_EQ_DIFF      reduce using rule 13 (powExpression -> unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 13 (powExpression -> unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 13 (powExpression -> unaryExpression .)
    LESS_DIFF       reduce using rule 13 (powExpression -> unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 13 (powExpression -> unaryExpression .)
    GREATER_DIFF    reduce using rule 13 (powExpression -> unaryExpression .)
    RBRACKET        reduce using rule 13 (powExpression -> unaryExpression .)
    RANGE           reduce using rule 13 (powExpression -> unaryExpression .)
    COMMA           reduce using rule 13 (powExpression -> unaryExpression .)
    SEMICOLON       reduce using rule 13 (powExpression -> unaryExpression .)
    COLON           reduce using rule 13 (powExpression -> unaryExpression .)
    IDENTIFIER      reduce using rule 13 (powExpression -> unaryExpression .)
    CONST           reduce using rule 13 (powExpression -> unaryExpression .)
    IMMUTABLE       reduce using rule 13 (powExpression -> unaryExpression .)
    RBRACE          reduce using rule 13 (powExpression -> unaryExpression .)
    THIS            reduce using rule 13 (powExpression -> unaryExpression .)
    BOOL            reduce using rule 13 (powExpression -> unaryExpression .)
    SHORT           reduce using rule 13 (powExpression -> unaryExpression .)
    USHORT          reduce using rule 13 (powExpression -> unaryExpression .)
    INT             reduce using rule 13 (powExpression -> unaryExpression .)
    UINT            reduce using rule 13 (powExpression -> unaryExpression .)
    LONG            reduce using rule 13 (powExpression -> unaryExpression .)
    ULONG           reduce using rule 13 (powExpression -> unaryExpression .)
    CHAR            reduce using rule 13 (powExpression -> unaryExpression .)
    FLOAT           reduce using rule 13 (powExpression -> unaryExpression .)
    TYPEOF          reduce using rule 13 (powExpression -> unaryExpression .)
    DOT             shift and go to state 423
    PLUS_PLUS       shift and go to state 424
    MINUS_MINUS     shift and go to state 425
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 13 (powExpression -> unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 13 (powExpression -> unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 13 (powExpression -> unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 13 (powExpression -> unaryExpression .) ]
  ! LPAREN          [ reduce using rule 13 (powExpression -> unaryExpression .) ]

    arguments                      shift and go to state 426

state 240

    (23) unaryExpression -> newExpression .

    DOT             reduce using rule 23 (unaryExpression -> newExpression .)
    PLUS_PLUS       reduce using rule 23 (unaryExpression -> newExpression .)
    MINUS_MINUS     reduce using rule 23 (unaryExpression -> newExpression .)
    LBRACKET        reduce using rule 23 (unaryExpression -> newExpression .)
    LPAREN          reduce using rule 23 (unaryExpression -> newExpression .)
    POWER           reduce using rule 23 (unaryExpression -> newExpression .)
    TIMES           reduce using rule 23 (unaryExpression -> newExpression .)
    DIV             reduce using rule 23 (unaryExpression -> newExpression .)
    MODULO          reduce using rule 23 (unaryExpression -> newExpression .)
    PLUS            reduce using rule 23 (unaryExpression -> newExpression .)
    MINUS           reduce using rule 23 (unaryExpression -> newExpression .)
    TILDE           reduce using rule 23 (unaryExpression -> newExpression .)
    RIGHT_SHIFT     reduce using rule 23 (unaryExpression -> newExpression .)
    LEFT_SHIFT      reduce using rule 23 (unaryExpression -> newExpression .)
    IS_EQ           reduce using rule 23 (unaryExpression -> newExpression .)
    NOT_EQ          reduce using rule 23 (unaryExpression -> newExpression .)
    AMPERSAND       reduce using rule 23 (unaryExpression -> newExpression .)
    CARET           reduce using rule 23 (unaryExpression -> newExpression .)
    PIPE            reduce using rule 23 (unaryExpression -> newExpression .)
    DOUBLE_AMPERSAND reduce using rule 23 (unaryExpression -> newExpression .)
    QUESTION        reduce using rule 23 (unaryExpression -> newExpression .)
    DOUBLE_PIPE     reduce using rule 23 (unaryExpression -> newExpression .)
    ASSIGN          reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_LEFT         reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_RIGHT        reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_PLUS         reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_MINUS        reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_TIMES        reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_MODULO       reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_AND_BIT      reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_DIV          reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_OR_BIT       reduce using rule 23 (unaryExpression -> newExpression .)
    EQ_XOR_BIT      reduce using rule 23 (unaryExpression -> newExpression .)
    COMMA           reduce using rule 23 (unaryExpression -> newExpression .)
    SEMICOLON       reduce using rule 23 (unaryExpression -> newExpression .)
    LESS            reduce using rule 23 (unaryExpression -> newExpression .)
    LESS_EQ         reduce using rule 23 (unaryExpression -> newExpression .)
    GREATER         reduce using rule 23 (unaryExpression -> newExpression .)
    GREATER_EQ      reduce using rule 23 (unaryExpression -> newExpression .)
    IS_EQ_DIFF      reduce using rule 23 (unaryExpression -> newExpression .)
    NOT_EQ_DIFF     reduce using rule 23 (unaryExpression -> newExpression .)
    LESS_EQ_DIFF    reduce using rule 23 (unaryExpression -> newExpression .)
    LESS_DIFF       reduce using rule 23 (unaryExpression -> newExpression .)
    GREATER_EQ_DIFF reduce using rule 23 (unaryExpression -> newExpression .)
    GREATER_DIFF    reduce using rule 23 (unaryExpression -> newExpression .)
    RPAREN          reduce using rule 23 (unaryExpression -> newExpression .)
    RBRACKET        reduce using rule 23 (unaryExpression -> newExpression .)
    COLON           reduce using rule 23 (unaryExpression -> newExpression .)
    RANGE           reduce using rule 23 (unaryExpression -> newExpression .)
    IDENTIFIER      reduce using rule 23 (unaryExpression -> newExpression .)
    CONST           reduce using rule 23 (unaryExpression -> newExpression .)
    IMMUTABLE       reduce using rule 23 (unaryExpression -> newExpression .)
    RBRACE          reduce using rule 23 (unaryExpression -> newExpression .)
    THIS            reduce using rule 23 (unaryExpression -> newExpression .)
    BOOL            reduce using rule 23 (unaryExpression -> newExpression .)
    SHORT           reduce using rule 23 (unaryExpression -> newExpression .)
    USHORT          reduce using rule 23 (unaryExpression -> newExpression .)
    INT             reduce using rule 23 (unaryExpression -> newExpression .)
    UINT            reduce using rule 23 (unaryExpression -> newExpression .)
    LONG            reduce using rule 23 (unaryExpression -> newExpression .)
    ULONG           reduce using rule 23 (unaryExpression -> newExpression .)
    CHAR            reduce using rule 23 (unaryExpression -> newExpression .)
    FLOAT           reduce using rule 23 (unaryExpression -> newExpression .)
    TYPEOF          reduce using rule 23 (unaryExpression -> newExpression .)


state 241

    (308) functionCallExpression -> symbol . arguments
    (334) arguments -> . LPAREN argumentList_question RPAREN

    LPAREN          shift and go to state 389

    arguments                      shift and go to state 427

state 242

    (43) primaryExpression -> DOLLAR .

    DOT             reduce using rule 43 (primaryExpression -> DOLLAR .)
    PLUS_PLUS       reduce using rule 43 (primaryExpression -> DOLLAR .)
    MINUS_MINUS     reduce using rule 43 (primaryExpression -> DOLLAR .)
    LBRACKET        reduce using rule 43 (primaryExpression -> DOLLAR .)
    LPAREN          reduce using rule 43 (primaryExpression -> DOLLAR .)
    POWER           reduce using rule 43 (primaryExpression -> DOLLAR .)
    TIMES           reduce using rule 43 (primaryExpression -> DOLLAR .)
    DIV             reduce using rule 43 (primaryExpression -> DOLLAR .)
    MODULO          reduce using rule 43 (primaryExpression -> DOLLAR .)
    PLUS            reduce using rule 43 (primaryExpression -> DOLLAR .)
    MINUS           reduce using rule 43 (primaryExpression -> DOLLAR .)
    TILDE           reduce using rule 43 (primaryExpression -> DOLLAR .)
    RIGHT_SHIFT     reduce using rule 43 (primaryExpression -> DOLLAR .)
    LEFT_SHIFT      reduce using rule 43 (primaryExpression -> DOLLAR .)
    IS_EQ           reduce using rule 43 (primaryExpression -> DOLLAR .)
    NOT_EQ          reduce using rule 43 (primaryExpression -> DOLLAR .)
    AMPERSAND       reduce using rule 43 (primaryExpression -> DOLLAR .)
    CARET           reduce using rule 43 (primaryExpression -> DOLLAR .)
    PIPE            reduce using rule 43 (primaryExpression -> DOLLAR .)
    DOUBLE_AMPERSAND reduce using rule 43 (primaryExpression -> DOLLAR .)
    QUESTION        reduce using rule 43 (primaryExpression -> DOLLAR .)
    DOUBLE_PIPE     reduce using rule 43 (primaryExpression -> DOLLAR .)
    ASSIGN          reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_LEFT         reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_RIGHT        reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_PLUS         reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_MINUS        reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_TIMES        reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_MODULO       reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_AND_BIT      reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_DIV          reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_OR_BIT       reduce using rule 43 (primaryExpression -> DOLLAR .)
    EQ_XOR_BIT      reduce using rule 43 (primaryExpression -> DOLLAR .)
    RBRACKET        reduce using rule 43 (primaryExpression -> DOLLAR .)
    RANGE           reduce using rule 43 (primaryExpression -> DOLLAR .)
    LESS            reduce using rule 43 (primaryExpression -> DOLLAR .)
    LESS_EQ         reduce using rule 43 (primaryExpression -> DOLLAR .)
    GREATER         reduce using rule 43 (primaryExpression -> DOLLAR .)
    GREATER_EQ      reduce using rule 43 (primaryExpression -> DOLLAR .)
    IS_EQ_DIFF      reduce using rule 43 (primaryExpression -> DOLLAR .)
    NOT_EQ_DIFF     reduce using rule 43 (primaryExpression -> DOLLAR .)
    LESS_EQ_DIFF    reduce using rule 43 (primaryExpression -> DOLLAR .)
    LESS_DIFF       reduce using rule 43 (primaryExpression -> DOLLAR .)
    GREATER_EQ_DIFF reduce using rule 43 (primaryExpression -> DOLLAR .)
    GREATER_DIFF    reduce using rule 43 (primaryExpression -> DOLLAR .)
    RPAREN          reduce using rule 43 (primaryExpression -> DOLLAR .)
    COMMA           reduce using rule 43 (primaryExpression -> DOLLAR .)
    SEMICOLON       reduce using rule 43 (primaryExpression -> DOLLAR .)
    COLON           reduce using rule 43 (primaryExpression -> DOLLAR .)
    IDENTIFIER      reduce using rule 43 (primaryExpression -> DOLLAR .)
    CONST           reduce using rule 43 (primaryExpression -> DOLLAR .)
    IMMUTABLE       reduce using rule 43 (primaryExpression -> DOLLAR .)
    RBRACE          reduce using rule 43 (primaryExpression -> DOLLAR .)
    THIS            reduce using rule 43 (primaryExpression -> DOLLAR .)
    BOOL            reduce using rule 43 (primaryExpression -> DOLLAR .)
    SHORT           reduce using rule 43 (primaryExpression -> DOLLAR .)
    USHORT          reduce using rule 43 (primaryExpression -> DOLLAR .)
    INT             reduce using rule 43 (primaryExpression -> DOLLAR .)
    UINT            reduce using rule 43 (primaryExpression -> DOLLAR .)
    LONG            reduce using rule 43 (primaryExpression -> DOLLAR .)
    ULONG           reduce using rule 43 (primaryExpression -> DOLLAR .)
    CHAR            reduce using rule 43 (primaryExpression -> DOLLAR .)
    FLOAT           reduce using rule 43 (primaryExpression -> DOLLAR .)
    TYPEOF          reduce using rule 43 (primaryExpression -> DOLLAR .)


state 243

    (28) unaryExpression -> LPAREN . type RPAREN DOT identifierOrTemplateInstance
    (39) primaryExpression -> LPAREN . expression RPAREN
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 429
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 275
    expression                     shift and go to state 428

state 244

    (25) unaryExpression -> castExpression .

    DOT             reduce using rule 25 (unaryExpression -> castExpression .)
    PLUS_PLUS       reduce using rule 25 (unaryExpression -> castExpression .)
    MINUS_MINUS     reduce using rule 25 (unaryExpression -> castExpression .)
    LBRACKET        reduce using rule 25 (unaryExpression -> castExpression .)
    LPAREN          reduce using rule 25 (unaryExpression -> castExpression .)
    POWER           reduce using rule 25 (unaryExpression -> castExpression .)
    TIMES           reduce using rule 25 (unaryExpression -> castExpression .)
    DIV             reduce using rule 25 (unaryExpression -> castExpression .)
    MODULO          reduce using rule 25 (unaryExpression -> castExpression .)
    PLUS            reduce using rule 25 (unaryExpression -> castExpression .)
    MINUS           reduce using rule 25 (unaryExpression -> castExpression .)
    TILDE           reduce using rule 25 (unaryExpression -> castExpression .)
    RIGHT_SHIFT     reduce using rule 25 (unaryExpression -> castExpression .)
    LEFT_SHIFT      reduce using rule 25 (unaryExpression -> castExpression .)
    IS_EQ           reduce using rule 25 (unaryExpression -> castExpression .)
    NOT_EQ          reduce using rule 25 (unaryExpression -> castExpression .)
    AMPERSAND       reduce using rule 25 (unaryExpression -> castExpression .)
    CARET           reduce using rule 25 (unaryExpression -> castExpression .)
    PIPE            reduce using rule 25 (unaryExpression -> castExpression .)
    DOUBLE_AMPERSAND reduce using rule 25 (unaryExpression -> castExpression .)
    QUESTION        reduce using rule 25 (unaryExpression -> castExpression .)
    DOUBLE_PIPE     reduce using rule 25 (unaryExpression -> castExpression .)
    ASSIGN          reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_LEFT         reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_RIGHT        reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_PLUS         reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_MINUS        reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_TIMES        reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_MODULO       reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_AND_BIT      reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_DIV          reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_OR_BIT       reduce using rule 25 (unaryExpression -> castExpression .)
    EQ_XOR_BIT      reduce using rule 25 (unaryExpression -> castExpression .)
    COMMA           reduce using rule 25 (unaryExpression -> castExpression .)
    SEMICOLON       reduce using rule 25 (unaryExpression -> castExpression .)
    LESS            reduce using rule 25 (unaryExpression -> castExpression .)
    LESS_EQ         reduce using rule 25 (unaryExpression -> castExpression .)
    GREATER         reduce using rule 25 (unaryExpression -> castExpression .)
    GREATER_EQ      reduce using rule 25 (unaryExpression -> castExpression .)
    IS_EQ_DIFF      reduce using rule 25 (unaryExpression -> castExpression .)
    NOT_EQ_DIFF     reduce using rule 25 (unaryExpression -> castExpression .)
    LESS_EQ_DIFF    reduce using rule 25 (unaryExpression -> castExpression .)
    LESS_DIFF       reduce using rule 25 (unaryExpression -> castExpression .)
    GREATER_EQ_DIFF reduce using rule 25 (unaryExpression -> castExpression .)
    GREATER_DIFF    reduce using rule 25 (unaryExpression -> castExpression .)
    RPAREN          reduce using rule 25 (unaryExpression -> castExpression .)
    RBRACKET        reduce using rule 25 (unaryExpression -> castExpression .)
    COLON           reduce using rule 25 (unaryExpression -> castExpression .)
    RANGE           reduce using rule 25 (unaryExpression -> castExpression .)
    IDENTIFIER      reduce using rule 25 (unaryExpression -> castExpression .)
    CONST           reduce using rule 25 (unaryExpression -> castExpression .)
    IMMUTABLE       reduce using rule 25 (unaryExpression -> castExpression .)
    RBRACE          reduce using rule 25 (unaryExpression -> castExpression .)
    THIS            reduce using rule 25 (unaryExpression -> castExpression .)
    BOOL            reduce using rule 25 (unaryExpression -> castExpression .)
    SHORT           reduce using rule 25 (unaryExpression -> castExpression .)
    USHORT          reduce using rule 25 (unaryExpression -> castExpression .)
    INT             reduce using rule 25 (unaryExpression -> castExpression .)
    UINT            reduce using rule 25 (unaryExpression -> castExpression .)
    LONG            reduce using rule 25 (unaryExpression -> castExpression .)
    ULONG           reduce using rule 25 (unaryExpression -> castExpression .)
    CHAR            reduce using rule 25 (unaryExpression -> castExpression .)
    FLOAT           reduce using rule 25 (unaryExpression -> castExpression .)
    TYPEOF          reduce using rule 25 (unaryExpression -> castExpression .)


state 245

    (40) primaryExpression -> functionLiteralExpression .

    DOT             reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    PLUS_PLUS       reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    MINUS_MINUS     reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LBRACKET        reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LPAREN          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    POWER           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    TIMES           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    DIV             reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    MODULO          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    PLUS            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    MINUS           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    TILDE           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    RIGHT_SHIFT     reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LEFT_SHIFT      reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    IS_EQ           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    NOT_EQ          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    AMPERSAND       reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    CARET           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    PIPE            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    DOUBLE_AMPERSAND reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    QUESTION        reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    DOUBLE_PIPE     reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    ASSIGN          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_LEFT         reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_RIGHT        reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_PLUS         reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_MINUS        reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_TIMES        reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_MODULO       reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_AND_BIT      reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_DIV          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_OR_BIT       reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    EQ_XOR_BIT      reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    RBRACKET        reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    RANGE           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LESS            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LESS_EQ         reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    GREATER         reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    GREATER_EQ      reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    IS_EQ_DIFF      reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    NOT_EQ_DIFF     reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LESS_EQ_DIFF    reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LESS_DIFF       reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    GREATER_EQ_DIFF reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    GREATER_DIFF    reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    RPAREN          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    COMMA           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    SEMICOLON       reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    COLON           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    IDENTIFIER      reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    CONST           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    IMMUTABLE       reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    RBRACE          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    THIS            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    BOOL            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    SHORT           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    USHORT          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    INT             reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    UINT            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    LONG            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    ULONG           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    CHAR            reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    FLOAT           reduce using rule 40 (primaryExpression -> functionLiteralExpression .)
    TYPEOF          reduce using rule 40 (primaryExpression -> functionLiteralExpression .)


state 246

    (350) LIT_STRPlus -> LIT_STR . LIT_STRPlus
    (351) LIT_STRPlus -> LIT_STR .
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR

    DOT             reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    PLUS_PLUS       reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    MINUS_MINUS     reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LBRACKET        reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LPAREN          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    POWER           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    TIMES           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    DIV             reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    MODULO          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    PLUS            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    MINUS           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    TILDE           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    RIGHT_SHIFT     reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LEFT_SHIFT      reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    IS_EQ           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    AMPERSAND       reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    CARET           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    PIPE            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_AMPERSAND reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    QUESTION        reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_PIPE     reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    ASSIGN          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_LEFT         reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_RIGHT        reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_PLUS         reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_MINUS        reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_TIMES        reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_MODULO       reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_AND_BIT      reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_DIV          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_OR_BIT       reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    EQ_XOR_BIT      reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    SEMICOLON       reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    COMMA           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LESS            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ         reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    GREATER         reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ      reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    IS_EQ_DIFF      reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ_DIFF     reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ_DIFF    reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LESS_DIFF       reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ_DIFF reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    GREATER_DIFF    reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    RPAREN          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    RBRACKET        reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    RANGE           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    COLON           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    IDENTIFIER      reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    CONST           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    IMMUTABLE       reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    RBRACE          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    THIS            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    BOOL            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    SHORT           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    USHORT          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    INT             reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    UINT            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LONG            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    ULONG           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    CHAR            reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    FLOAT           reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    TYPEOF          reduce using rule 351 (LIT_STRPlus -> LIT_STR .)
    LIT_STR         shift and go to state 246

    LIT_STRPlus                    shift and go to state 430

state 247

    (63) declaration -> attribute multipleattributes LBRACE multiple_declaration . RBRACE

    RBRACE          shift and go to state 431


state 248

    (161) destructor -> TILDE THIS LPAREN RPAREN . multiple_memberFunctionAttribute functionBody
    (162) destructor -> TILDE THIS LPAREN RPAREN . multiple_memberFunctionAttribute SEMICOLON
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    SEMICOLON       reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)

    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174
    multiple_memberFunctionAttribute shift and go to state 432

state 249

    (124) importBindings -> singleImport COLON importBind . importBindstr
    (125) importBindstr -> . COMMA importBind importBindstr
    (126) importBindstr -> . empty
    (397) empty -> .

    COMMA           shift and go to state 434
    SEMICOLON       reduce using rule 397 (empty -> .)

    empty                          shift and go to state 435
    importBindstr                  shift and go to state 433

state 250

    (122) importBind -> IDENTIFIER .
    (123) importBind -> IDENTIFIER . ASSIGN IDENTIFIER

    COMMA           reduce using rule 122 (importBind -> IDENTIFIER .)
    SEMICOLON       reduce using rule 122 (importBind -> IDENTIFIER .)
    ASSIGN          shift and go to state 436


state 251

    (118) comma_singleImport -> COMMA singleImport . comma_singleImport
    (118) comma_singleImport -> . COMMA singleImport comma_singleImport
    (119) comma_singleImport -> . empty
    (397) empty -> .

    COMMA           reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)

  ! COMMA           [ shift and go to state 126 ]

    comma_singleImport             shift and go to state 437
    empty                          shift and go to state 128

state 252

    (116) importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .

    PRIVATE         reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    PROTECTED       reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    PUBLIC          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    STATIC          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    EXTERN          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FINAL           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    AUTO            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CONST           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IMMUTABLE       reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ALIAS           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ENUM            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CLASS           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    THIS            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TILDE           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IMPORT          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UNION           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    MIXIN           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CHAR            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    INT             reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UINT            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LONG            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FLOAT           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DOUBLE          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    BOOL            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    SHORT           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    USHORT          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ULONG           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TYPEOF          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IDENTIFIER      reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    $end            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    RBRACE          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CASE            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DEFAULT         reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LBRACE          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    IF              reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    WHILE           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DO              reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FOR             reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FOREACH         reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FOREACH_REVERSE reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    SWITCH          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CONTINUE        reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    BREAK           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    RETURN          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    GOTO            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    WITH            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UAMPERSAND      reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    EXCLAMATION     reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UTIMES          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UPLUS           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    UMINUS          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    PLUS_PLUS       reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    MINUS_MINUS     reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LPAREN          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DOT             reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DOLLAR          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    NULL            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    TRUE            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FALSE           reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    INUMBER         reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DNUMBER         reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LIT_CHAR        reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    NEW             reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    DELETE          reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    CAST            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LBRACKET        reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    FUNCTION        reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    LIT_STR         reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    SEMICOLON       reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)
    ELSE            reduce using rule 116 (importDeclaration -> IMPORT singleImport comma_singleImport SEMICOLON .)


state 253

    (115) importDeclaration -> IMPORT singleImport comma_singleImport COMMA . importBindings SEMICOLON
    (124) importBindings -> . singleImport COLON importBind importBindstr
    (120) singleImport -> . IDENTIFIER ASSIGN identifierChain
    (121) singleImport -> . identifierChain
    (127) identifierChain -> . IDENTIFIER multiple_dot_identifier

    IDENTIFIER      shift and go to state 69

    importBindings                 shift and go to state 438
    singleImport                   shift and go to state 439
    identifierChain                shift and go to state 67

state 254

    (128) multiple_dot_identifier -> DOT IDENTIFIER . multiple_dot_identifier
    (128) multiple_dot_identifier -> . DOT IDENTIFIER multiple_dot_identifier
    (129) multiple_dot_identifier -> . empty
    (397) empty -> .

    DOT             shift and go to state 130
    COLON           reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)

    multiple_dot_identifier        shift and go to state 440
    empty                          shift and go to state 132

state 255

    (127) identifierChain -> IDENTIFIER . multiple_dot_identifier
    (128) multiple_dot_identifier -> . DOT IDENTIFIER multiple_dot_identifier
    (129) multiple_dot_identifier -> . empty
    (397) empty -> .

    DOT             shift and go to state 130
    COLON           reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)

    multiple_dot_identifier        shift and go to state 129
    empty                          shift and go to state 132

state 256

    (120) singleImport -> IDENTIFIER ASSIGN identifierChain .

    COLON           reduce using rule 120 (singleImport -> IDENTIFIER ASSIGN identifierChain .)
    COMMA           reduce using rule 120 (singleImport -> IDENTIFIER ASSIGN identifierChain .)
    SEMICOLON       reduce using rule 120 (singleImport -> IDENTIFIER ASSIGN identifierChain .)


state 257

    (149) functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute . SEMICOLON
    (150) functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute . functionBody
    (341) functionBody -> . blockStatement
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 442
    LBRACE          shift and go to state 207

    functionBody                   shift and go to state 441
    blockStatement                 shift and go to state 237

state 258

    (211) baseClass -> type2 .

    COMMA           reduce using rule 211 (baseClass -> type2 .)
    LBRACE          reduce using rule 211 (baseClass -> type2 .)


state 259

    (212) baseClassList -> baseClass . comma_baseclass_multiple
    (213) comma_baseclass_multiple -> . COMMA baseClass comma_baseclass_multiple
    (214) comma_baseclass_multiple -> . empty
    (397) empty -> .

    COMMA           shift and go to state 444
    LBRACE          reduce using rule 397 (empty -> .)

    comma_baseclass_multiple       shift and go to state 443
    empty                          shift and go to state 445

state 260

    (180) classDeclaration -> CLASS IDENTIFIER COLON baseClassList . structBody
    (61) structBody -> . LBRACE multiple_declaration RBRACE

    LBRACE          shift and go to state 76

    structBody                     shift and go to state 446

state 261

    (167) anonymousEnumMember -> IDENTIFIER . ASSIGN assignExpression
    (168) anonymousEnumMember -> IDENTIFIER .

    ASSIGN          shift and go to state 447
    IDENTIFIER      reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    CONST           reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    IMMUTABLE       reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    THIS            reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    BOOL            reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    SHORT           reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    USHORT          reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    INT             reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    UINT            reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    LONG            reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    ULONG           reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    CHAR            reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    FLOAT           reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    TYPEOF          reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)
    RBRACE          reduce using rule 168 (anonymousEnumMember -> IDENTIFIER .)


state 262

    (166) anonymousEnumMember -> type . IDENTIFIER ASSIGN assignExpression

    IDENTIFIER      shift and go to state 448


state 263

    (173) anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember . multipleanonymousEnumMember RBRACE
    (171) multipleanonymousEnumMember -> . anonymousEnumMember multipleanonymousEnumMember
    (172) multipleanonymousEnumMember -> . empty
    (166) anonymousEnumMember -> . type IDENTIFIER ASSIGN assignExpression
    (167) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (168) anonymousEnumMember -> . IDENTIFIER
    (397) empty -> .
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      shift and go to state 261
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    multipleanonymousEnumMember    shift and go to state 449
    typeConstructors_quetsion      shift and go to state 42
    typeConstructors               shift and go to state 34
    type                           shift and go to state 262
    anonymousEnumMember            shift and go to state 450
    empty                          shift and go to state 451

state 264

    (163) enumBody -> LBRACE . enumMember comma_enumMember RBRACE
    (176) enumMember -> . IDENTIFIER
    (177) enumMember -> . IDENTIFIER ASSIGN assignExpression

    IDENTIFIER      shift and go to state 453

    enumMember                     shift and go to state 452

state 265

    (174) enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .

    PRIVATE         reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    PROTECTED       reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    PUBLIC          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    STATIC          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    EXTERN          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    FINAL           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    AUTO            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    CONST           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    IMMUTABLE       reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    ALIAS           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    ENUM            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    CLASS           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    THIS            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    TILDE           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    IMPORT          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    UNION           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    MIXIN           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    CHAR            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    INT             reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    UINT            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    LONG            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    FLOAT           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    DOUBLE          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    BOOL            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    SHORT           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    USHORT          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    ULONG           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    TYPEOF          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    IDENTIFIER      reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    $end            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    RBRACE          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    CASE            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    DEFAULT         reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    LBRACE          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    IF              reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    WHILE           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    DO              reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    FOR             reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    FOREACH         reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    FOREACH_REVERSE reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    SWITCH          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    CONTINUE        reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    BREAK           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    RETURN          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    GOTO            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    WITH            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    UAMPERSAND      reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    EXCLAMATION     reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    UTIMES          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    UPLUS           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    UMINUS          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    PLUS_PLUS       reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    MINUS_MINUS     reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    LPAREN          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    DOT             reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    DOLLAR          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    NULL            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    TRUE            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    FALSE           reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    INUMBER         reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    DNUMBER         reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    LIT_CHAR        reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    NEW             reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    DELETE          reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    CAST            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    LBRACKET        reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    FUNCTION        reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    LIT_STR         reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    SEMICOLON       reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)
    ELSE            reduce using rule 174 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question SEMICOLON .)


state 266

    (175) enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .

    PRIVATE         reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    PROTECTED       reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    PUBLIC          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    STATIC          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    EXTERN          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    FINAL           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    AUTO            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    CONST           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    IMMUTABLE       reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    ALIAS           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    ENUM            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    CLASS           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    THIS            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    TILDE           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    IMPORT          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    UNION           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    MIXIN           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    CHAR            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    INT             reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    UINT            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    LONG            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    FLOAT           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    DOUBLE          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    BOOL            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    SHORT           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    USHORT          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    ULONG           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    TYPEOF          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    IDENTIFIER      reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    $end            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    RBRACE          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    CASE            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    DEFAULT         reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    LBRACE          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    IF              reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    WHILE           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    DO              reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    FOR             reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    FOREACH         reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    FOREACH_REVERSE reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    SWITCH          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    CONTINUE        reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    BREAK           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    RETURN          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    GOTO            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    WITH            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    UAMPERSAND      reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    EXCLAMATION     reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    UTIMES          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    UPLUS           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    UMINUS          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    PLUS_PLUS       reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    MINUS_MINUS     reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    LPAREN          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    DOT             reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    DOLLAR          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    NULL            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    TRUE            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    FALSE           reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    INUMBER         reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    DNUMBER         reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    LIT_CHAR        reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    NEW             reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    DELETE          reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    CAST            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    LBRACKET        reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    FUNCTION        reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    LIT_STR         reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    SEMICOLON       reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)
    ELSE            reduce using rule 175 (enumDeclaration -> ENUM IDENTIFIER COMMA_TYPE_Question enumBody .)


state 267

    (61) structBody -> LBRACE multiple_declaration RBRACE .

    DOT             reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    PLUS_PLUS       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    MINUS_MINUS     reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LBRACKET        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LPAREN          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    POWER           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    TIMES           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DIV             reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    MODULO          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    PLUS            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    MINUS           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    TILDE           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    RIGHT_SHIFT     reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LEFT_SHIFT      reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    IS_EQ           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    NOT_EQ          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    AMPERSAND       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    CARET           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    PIPE            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    QUESTION        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DOUBLE_PIPE     reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    ASSIGN          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_LEFT         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_RIGHT        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_PLUS         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_MINUS        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_TIMES        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_MODULO       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_AND_BIT      reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_DIV          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_OR_BIT       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EQ_XOR_BIT      reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    RPAREN          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LESS            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LESS_EQ         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    GREATER         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    GREATER_EQ      reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    IS_EQ_DIFF      reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    NOT_EQ_DIFF     reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LESS_EQ_DIFF    reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LESS_DIFF       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    GREATER_EQ_DIFF reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    GREATER_DIFF    reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    RBRACKET        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    RANGE           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    COMMA           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    SEMICOLON       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    COLON           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    IDENTIFIER      reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    CONST           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    IMMUTABLE       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    RBRACE          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    THIS            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    BOOL            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    SHORT           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    USHORT          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    INT             reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    UINT            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LONG            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    ULONG           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    CHAR            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    FLOAT           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    TYPEOF          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    PRIVATE         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    PROTECTED       reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    PUBLIC          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    STATIC          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EXTERN          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    FINAL           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    AUTO            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    ALIAS           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    ENUM            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    CLASS           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    IMPORT          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    UNION           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    MIXIN           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DOUBLE          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    $end            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    CASE            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DEFAULT         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LBRACE          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    IF              reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    WHILE           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DO              reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    FOR             reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    FOREACH         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    FOREACH_REVERSE reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    SWITCH          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    CONTINUE        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    BREAK           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    RETURN          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    GOTO            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    WITH            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    UAMPERSAND      reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    EXCLAMATION     reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    UTIMES          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    UPLUS           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    UMINUS          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DOLLAR          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    NULL            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    TRUE            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    FALSE           reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    INUMBER         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DNUMBER         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LIT_CHAR        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    NEW             reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    DELETE          reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    CAST            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    FUNCTION        reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    LIT_STR         reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)
    ELSE            reduce using rule 61 (structBody -> LBRACE multiple_declaration RBRACE .)


state 268

    (90) CommaDeclarator -> COMMA . declarator CommaDeclarator
    (98) declarator -> . IDENTIFIER
    (99) declarator -> . IDENTIFIER ASSIGN initializer

    IDENTIFIER      shift and go to state 455

    declarator                     shift and go to state 454

state 269

    (81) variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator . SEMICOLON

    SEMICOLON       shift and go to state 456


state 270

    (91) CommaDeclarator -> empty .

    SEMICOLON       reduce using rule 91 (CommaDeclarator -> empty .)


state 271

    (82) variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN . functionBody SEMICOLON
    (99) declarator -> IDENTIFIER ASSIGN . initializer
    (341) functionBody -> . blockStatement
    (100) initializer -> . VOID
    (101) initializer -> . nonVoidInitializer
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (102) nonVoidInitializer -> . assignExpression
    (103) nonVoidInitializer -> . arrayInitializer
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (104) arrayInitializer -> . LBRACKET RBRACKET
    (105) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    VOID            shift and go to state 457
    LBRACE          shift and go to state 207
    LBRACKET        shift and go to state 458
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    initializer                    shift and go to state 460
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    blockStatement                 shift and go to state 237
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    arrayInitializer               shift and go to state 462
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    LIT_STRPlus                    shift and go to state 227
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    nonVoidInitializer             shift and go to state 459
    deleteExpression               shift and go to state 212
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 461
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 463
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 272

    (220) typeIdentifierPart_question -> DOT typeIdentifierPart .

    TIMES           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LBRACKET        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    DELEGATE        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    FUNCTION        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    IDENTIFIER      reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LBRACE          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    SEMICOLON       reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    DOT             reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LPAREN          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    RBRACKET        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    RPAREN          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    ELLIPSIS        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    ASSIGN          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    COMMA           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    PLUS_PLUS       reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    MINUS_MINUS     reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    POWER           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    DIV             reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    MODULO          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    PLUS            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    MINUS           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    TILDE           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    RIGHT_SHIFT     reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LEFT_SHIFT      reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    IS_EQ           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    NOT_EQ          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    AMPERSAND       reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    CARET           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    PIPE            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    DOUBLE_AMPERSAND reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    QUESTION        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    DOUBLE_PIPE     reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_LEFT         reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_RIGHT        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_PLUS         reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_MINUS        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_TIMES        reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_MODULO       reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_AND_BIT      reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_DIV          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_OR_BIT       reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    EQ_XOR_BIT      reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LESS            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LESS_EQ         reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    GREATER         reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    GREATER_EQ      reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    IS_EQ_DIFF      reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    NOT_EQ_DIFF     reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LESS_EQ_DIFF    reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LESS_DIFF       reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    GREATER_EQ_DIFF reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    GREATER_DIFF    reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    RANGE           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    COLON           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    CONST           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    IMMUTABLE       reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    RBRACE          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    THIS            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    BOOL            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    SHORT           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    USHORT          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    INT             reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    UINT            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    LONG            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    ULONG           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    CHAR            reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    FLOAT           reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)
    TYPEOF          reduce using rule 220 (typeIdentifierPart_question -> DOT typeIdentifierPart .)


state 273

    (232) typeSuffix -> FUNCTION parameters . multiple_memberFunctionAttribute
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    TIMES           reduce using rule 397 (empty -> .)
    LBRACKET        reduce using rule 397 (empty -> .)
    DELEGATE        reduce using rule 397 (empty -> .)
    FUNCTION        reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    DOT             reduce using rule 397 (empty -> .)
    LPAREN          reduce using rule 397 (empty -> .)
    RBRACKET        reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)
    ELLIPSIS        reduce using rule 397 (empty -> .)
    ASSIGN          reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    PLUS_PLUS       reduce using rule 397 (empty -> .)
    MINUS_MINUS     reduce using rule 397 (empty -> .)
    POWER           reduce using rule 397 (empty -> .)
    DIV             reduce using rule 397 (empty -> .)
    MODULO          reduce using rule 397 (empty -> .)
    PLUS            reduce using rule 397 (empty -> .)
    MINUS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    RIGHT_SHIFT     reduce using rule 397 (empty -> .)
    LEFT_SHIFT      reduce using rule 397 (empty -> .)
    IS_EQ           reduce using rule 397 (empty -> .)
    NOT_EQ          reduce using rule 397 (empty -> .)
    AMPERSAND       reduce using rule 397 (empty -> .)
    CARET           reduce using rule 397 (empty -> .)
    PIPE            reduce using rule 397 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 397 (empty -> .)
    QUESTION        reduce using rule 397 (empty -> .)
    DOUBLE_PIPE     reduce using rule 397 (empty -> .)
    EQ_LEFT         reduce using rule 397 (empty -> .)
    EQ_RIGHT        reduce using rule 397 (empty -> .)
    EQ_PLUS         reduce using rule 397 (empty -> .)
    EQ_MINUS        reduce using rule 397 (empty -> .)
    EQ_TIMES        reduce using rule 397 (empty -> .)
    EQ_MODULO       reduce using rule 397 (empty -> .)
    EQ_AND_BIT      reduce using rule 397 (empty -> .)
    EQ_DIV          reduce using rule 397 (empty -> .)
    EQ_OR_BIT       reduce using rule 397 (empty -> .)
    EQ_XOR_BIT      reduce using rule 397 (empty -> .)
    LESS            reduce using rule 397 (empty -> .)
    LESS_EQ         reduce using rule 397 (empty -> .)
    GREATER         reduce using rule 397 (empty -> .)
    GREATER_EQ      reduce using rule 397 (empty -> .)
    IS_EQ_DIFF      reduce using rule 397 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 397 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 397 (empty -> .)
    LESS_DIFF       reduce using rule 397 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 397 (empty -> .)
    GREATER_DIFF    reduce using rule 397 (empty -> .)
    RANGE           reduce using rule 397 (empty -> .)
    COLON           reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174
    multiple_memberFunctionAttribute shift and go to state 464

state 274

    (332) typeSuffixStar -> typeSuffix typeSuffixStar .

    IDENTIFIER      reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LBRACE          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    SEMICOLON       reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOT             reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LPAREN          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RBRACKET        reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RPAREN          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    ELLIPSIS        reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    ASSIGN          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    COMMA           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LBRACKET        reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PLUS_PLUS       reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MINUS_MINUS     reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    POWER           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TIMES           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DIV             reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MODULO          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PLUS            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MINUS           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TILDE           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IS_EQ           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    NOT_EQ          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    AMPERSAND       reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    CARET           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PIPE            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    QUESTION        reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_LEFT         reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_RIGHT        reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_PLUS         reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_MINUS        reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_TIMES        reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_MODULO       reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_DIV          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_EQ         reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER         reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_EQ      reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_DIFF       reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_DIFF    reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RANGE           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    COLON           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    CONST           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IMMUTABLE       reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RBRACE          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    THIS            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    BOOL            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    SHORT           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    USHORT          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    INT             reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    UINT            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LONG            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    ULONG           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    CHAR            reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    FLOAT           reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TYPEOF          reduce using rule 332 (typeSuffixStar -> typeSuffix typeSuffixStar .)


state 275

    (224) typeConstructors -> typeConstructor . multiple_typeConstructors
    (35) primaryExpression -> typeConstructor . LPAREN type RPAREN DOT IDENTIFIER
    (225) multiple_typeConstructors -> . typeConstructor multiple_typeConstructors
    (226) multiple_typeConstructors -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LPAREN          shift and go to state 331
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    multiple_typeConstructors      shift and go to state 60
    typeConstructor                shift and go to state 61
    empty                          shift and go to state 64

state 276

    (229) typeSuffix -> LBRACKET assignExpression . RBRACKET
    (230) typeSuffix -> LBRACKET assignExpression . RANGE assignExpression RBRACKET

    RBRACKET        shift and go to state 465
    RANGE           shift and go to state 466


state 277

    (233) type_question -> type .
    (36) primaryExpression -> type . DOT IDENTIFIER
    (37) primaryExpression -> type . arguments
    (310) functionCallExpression -> type . arguments
    (334) arguments -> . LPAREN argumentList_question RPAREN

    RBRACKET        reduce using rule 233 (type_question -> type .)
    DOT             shift and go to state 395
    LPAREN          shift and go to state 389

    arguments                      shift and go to state 394

state 278

    (234) type_question -> empty .
    (192) typeConstructors_quetsion -> empty .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 192 (typeConstructors_quetsion -> empty .)
    RBRACKET        reduce using rule 234 (type_question -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)

  ! IDENTIFIER      [ reduce using rule 234 (type_question -> empty .) ]


state 279

    (228) typeSuffix -> LBRACKET type_question . RBRACKET

    RBRACKET        shift and go to state 467


state 280

    (231) typeSuffix -> DELEGATE parameters . multiple_memberFunctionAttribute
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    TIMES           reduce using rule 397 (empty -> .)
    LBRACKET        reduce using rule 397 (empty -> .)
    DELEGATE        reduce using rule 397 (empty -> .)
    FUNCTION        reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    DOT             reduce using rule 397 (empty -> .)
    LPAREN          reduce using rule 397 (empty -> .)
    RBRACKET        reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)
    ELLIPSIS        reduce using rule 397 (empty -> .)
    ASSIGN          reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    PLUS_PLUS       reduce using rule 397 (empty -> .)
    MINUS_MINUS     reduce using rule 397 (empty -> .)
    POWER           reduce using rule 397 (empty -> .)
    DIV             reduce using rule 397 (empty -> .)
    MODULO          reduce using rule 397 (empty -> .)
    PLUS            reduce using rule 397 (empty -> .)
    MINUS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    RIGHT_SHIFT     reduce using rule 397 (empty -> .)
    LEFT_SHIFT      reduce using rule 397 (empty -> .)
    IS_EQ           reduce using rule 397 (empty -> .)
    NOT_EQ          reduce using rule 397 (empty -> .)
    AMPERSAND       reduce using rule 397 (empty -> .)
    CARET           reduce using rule 397 (empty -> .)
    PIPE            reduce using rule 397 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 397 (empty -> .)
    QUESTION        reduce using rule 397 (empty -> .)
    DOUBLE_PIPE     reduce using rule 397 (empty -> .)
    EQ_LEFT         reduce using rule 397 (empty -> .)
    EQ_RIGHT        reduce using rule 397 (empty -> .)
    EQ_PLUS         reduce using rule 397 (empty -> .)
    EQ_MINUS        reduce using rule 397 (empty -> .)
    EQ_TIMES        reduce using rule 397 (empty -> .)
    EQ_MODULO       reduce using rule 397 (empty -> .)
    EQ_AND_BIT      reduce using rule 397 (empty -> .)
    EQ_DIV          reduce using rule 397 (empty -> .)
    EQ_OR_BIT       reduce using rule 397 (empty -> .)
    EQ_XOR_BIT      reduce using rule 397 (empty -> .)
    LESS            reduce using rule 397 (empty -> .)
    LESS_EQ         reduce using rule 397 (empty -> .)
    GREATER         reduce using rule 397 (empty -> .)
    GREATER_EQ      reduce using rule 397 (empty -> .)
    IS_EQ_DIFF      reduce using rule 397 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 397 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 397 (empty -> .)
    LESS_DIFF       reduce using rule 397 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 397 (empty -> .)
    GREATER_DIFF    reduce using rule 397 (empty -> .)
    RANGE           reduce using rule 397 (empty -> .)
    COLON           reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174
    multiple_memberFunctionAttribute shift and go to state 468

state 281

    (190) typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression . RBRACKET DOT typeIdentifierPart

    RBRACKET        shift and go to state 469


state 282

    (189) typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .

    TIMES           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LBRACKET        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    DELEGATE        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    FUNCTION        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    IDENTIFIER      reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LBRACE          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    SEMICOLON       reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    DOT             reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LPAREN          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    RBRACKET        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    RPAREN          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    ELLIPSIS        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    ASSIGN          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    COMMA           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    PLUS_PLUS       reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    MINUS_MINUS     reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    POWER           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    DIV             reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    MODULO          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    PLUS            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    MINUS           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    TILDE           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    RIGHT_SHIFT     reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LEFT_SHIFT      reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    IS_EQ           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    NOT_EQ          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    AMPERSAND       reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    CARET           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    PIPE            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    DOUBLE_AMPERSAND reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    QUESTION        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    DOUBLE_PIPE     reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_LEFT         reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_RIGHT        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_PLUS         reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_MINUS        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_TIMES        reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_MODULO       reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_AND_BIT      reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_DIV          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_OR_BIT       reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    EQ_XOR_BIT      reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LESS            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LESS_EQ         reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    GREATER         reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    GREATER_EQ      reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    IS_EQ_DIFF      reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    NOT_EQ_DIFF     reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LESS_EQ_DIFF    reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LESS_DIFF       reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    GREATER_EQ_DIFF reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    GREATER_DIFF    reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    RANGE           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    COLON           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    CONST           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    IMMUTABLE       reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    RBRACE          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    THIS            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    BOOL            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    SHORT           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    USHORT          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    INT             reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    UINT            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    LONG            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    ULONG           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    CHAR            reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    FLOAT           reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)
    TYPEOF          reduce using rule 189 (typeIdentifierPart -> identifierOrTemplateInstance DOT typeIdentifierPart .)


state 283

    (217) type2 -> THIS DOT typeIdentifierPart .

    TIMES           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LBRACKET        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    DELEGATE        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    FUNCTION        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    IDENTIFIER      reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LBRACE          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    SEMICOLON       reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    DOT             reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LPAREN          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    RBRACKET        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    RPAREN          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    ELLIPSIS        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    ASSIGN          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    COMMA           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    PLUS_PLUS       reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    MINUS_MINUS     reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    POWER           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    DIV             reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    MODULO          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    PLUS            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    MINUS           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    TILDE           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    RIGHT_SHIFT     reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LEFT_SHIFT      reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    IS_EQ           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    NOT_EQ          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    AMPERSAND       reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    CARET           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    PIPE            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    DOUBLE_AMPERSAND reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    QUESTION        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    DOUBLE_PIPE     reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_LEFT         reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_RIGHT        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_PLUS         reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_MINUS        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_TIMES        reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_MODULO       reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_AND_BIT      reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_DIV          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_OR_BIT       reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    EQ_XOR_BIT      reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LESS            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LESS_EQ         reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    GREATER         reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    GREATER_EQ      reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    IS_EQ_DIFF      reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    NOT_EQ_DIFF     reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LESS_EQ_DIFF    reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LESS_DIFF       reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    GREATER_EQ_DIFF reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    GREATER_DIFF    reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    RANGE           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    COLON           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    CONST           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    IMMUTABLE       reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    RBRACE          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    THIS            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    BOOL            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    SHORT           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    USHORT          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    INT             reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    UINT            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    LONG            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    ULONG           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    CHAR            reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    FLOAT           reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)
    TYPEOF          reduce using rule 217 (type2 -> THIS DOT typeIdentifierPart .)


state 284

    (238) typeofExpression -> TYPEOF LPAREN RETURN . RPAREN

    RPAREN          shift and go to state 470


state 285

    (342) expression -> assignExpression .

    RPAREN          reduce using rule 342 (expression -> assignExpression .)
    COMMA           reduce using rule 342 (expression -> assignExpression .)
    SEMICOLON       reduce using rule 342 (expression -> assignExpression .)
    RBRACKET        reduce using rule 342 (expression -> assignExpression .)
    DOT             reduce using rule 342 (expression -> assignExpression .)
    PLUS_PLUS       reduce using rule 342 (expression -> assignExpression .)
    MINUS_MINUS     reduce using rule 342 (expression -> assignExpression .)
    LBRACKET        reduce using rule 342 (expression -> assignExpression .)
    LPAREN          reduce using rule 342 (expression -> assignExpression .)
    POWER           reduce using rule 342 (expression -> assignExpression .)
    TIMES           reduce using rule 342 (expression -> assignExpression .)
    DIV             reduce using rule 342 (expression -> assignExpression .)
    MODULO          reduce using rule 342 (expression -> assignExpression .)
    PLUS            reduce using rule 342 (expression -> assignExpression .)
    MINUS           reduce using rule 342 (expression -> assignExpression .)
    TILDE           reduce using rule 342 (expression -> assignExpression .)
    RIGHT_SHIFT     reduce using rule 342 (expression -> assignExpression .)
    LEFT_SHIFT      reduce using rule 342 (expression -> assignExpression .)
    IS_EQ           reduce using rule 342 (expression -> assignExpression .)
    NOT_EQ          reduce using rule 342 (expression -> assignExpression .)
    AMPERSAND       reduce using rule 342 (expression -> assignExpression .)
    CARET           reduce using rule 342 (expression -> assignExpression .)
    PIPE            reduce using rule 342 (expression -> assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 342 (expression -> assignExpression .)
    QUESTION        reduce using rule 342 (expression -> assignExpression .)
    DOUBLE_PIPE     reduce using rule 342 (expression -> assignExpression .)
    ASSIGN          reduce using rule 342 (expression -> assignExpression .)
    EQ_LEFT         reduce using rule 342 (expression -> assignExpression .)
    EQ_RIGHT        reduce using rule 342 (expression -> assignExpression .)
    EQ_PLUS         reduce using rule 342 (expression -> assignExpression .)
    EQ_MINUS        reduce using rule 342 (expression -> assignExpression .)
    EQ_TIMES        reduce using rule 342 (expression -> assignExpression .)
    EQ_MODULO       reduce using rule 342 (expression -> assignExpression .)
    EQ_AND_BIT      reduce using rule 342 (expression -> assignExpression .)
    EQ_DIV          reduce using rule 342 (expression -> assignExpression .)
    EQ_OR_BIT       reduce using rule 342 (expression -> assignExpression .)
    EQ_XOR_BIT      reduce using rule 342 (expression -> assignExpression .)
    LESS            reduce using rule 342 (expression -> assignExpression .)
    LESS_EQ         reduce using rule 342 (expression -> assignExpression .)
    GREATER         reduce using rule 342 (expression -> assignExpression .)
    GREATER_EQ      reduce using rule 342 (expression -> assignExpression .)
    IS_EQ_DIFF      reduce using rule 342 (expression -> assignExpression .)
    NOT_EQ_DIFF     reduce using rule 342 (expression -> assignExpression .)
    LESS_EQ_DIFF    reduce using rule 342 (expression -> assignExpression .)
    LESS_DIFF       reduce using rule 342 (expression -> assignExpression .)
    GREATER_EQ_DIFF reduce using rule 342 (expression -> assignExpression .)
    GREATER_DIFF    reduce using rule 342 (expression -> assignExpression .)
    RANGE           reduce using rule 342 (expression -> assignExpression .)
    COLON           reduce using rule 342 (expression -> assignExpression .)
    IDENTIFIER      reduce using rule 342 (expression -> assignExpression .)
    CONST           reduce using rule 342 (expression -> assignExpression .)
    IMMUTABLE       reduce using rule 342 (expression -> assignExpression .)
    RBRACE          reduce using rule 342 (expression -> assignExpression .)
    THIS            reduce using rule 342 (expression -> assignExpression .)
    BOOL            reduce using rule 342 (expression -> assignExpression .)
    SHORT           reduce using rule 342 (expression -> assignExpression .)
    USHORT          reduce using rule 342 (expression -> assignExpression .)
    INT             reduce using rule 342 (expression -> assignExpression .)
    UINT            reduce using rule 342 (expression -> assignExpression .)
    LONG            reduce using rule 342 (expression -> assignExpression .)
    ULONG           reduce using rule 342 (expression -> assignExpression .)
    CHAR            reduce using rule 342 (expression -> assignExpression .)
    FLOAT           reduce using rule 342 (expression -> assignExpression .)
    TYPEOF          reduce using rule 342 (expression -> assignExpression .)


state 286

    (237) typeofExpression -> TYPEOF LPAREN expression . RPAREN
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 471
    COMMA           shift and go to state 472


state 287

    (219) type2 -> typeConstructor LPAREN type . RPAREN

    RPAREN          shift and go to state 473


state 288

    (199) aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .

    PRIVATE         reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PROTECTED       reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PUBLIC          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    STATIC          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    EXTERN          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FINAL           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    AUTO            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CONST           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMMUTABLE       reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ALIAS           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ENUM            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CLASS           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    THIS            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TILDE           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IMPORT          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UNION           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    MIXIN           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CHAR            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    INT             reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UINT            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LONG            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FLOAT           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DOUBLE          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    BOOL            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SHORT           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    USHORT          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ULONG           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TYPEOF          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IDENTIFIER      reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    $end            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RBRACE          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CASE            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DEFAULT         reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LBRACE          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    IF              reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    WHILE           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DO              reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FOR             reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FOREACH         reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FOREACH_REVERSE reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SWITCH          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CONTINUE        reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    BREAK           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    RETURN          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    GOTO            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    WITH            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UAMPERSAND      reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    EXCLAMATION     reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UTIMES          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UPLUS           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    UMINUS          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    PLUS_PLUS       reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    MINUS_MINUS     reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LPAREN          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DOT             reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DOLLAR          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    NULL            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    TRUE            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FALSE           reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    INUMBER         reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DNUMBER         reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LIT_CHAR        reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    NEW             reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    DELETE          reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    CAST            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LBRACKET        reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    FUNCTION        reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    LIT_STR         reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    SEMICOLON       reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)
    ELSE            reduce using rule 199 (aliasThisDeclaration -> ALIAS IDENTIFIER THIS SEMICOLON .)


state 289

    (347) functionLiteralExpression -> IDENTIFIER . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 393
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 290

    (197) aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass . type
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    type                           shift and go to state 474
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34

state 291

    (198) aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression . SEMICOLON

    SEMICOLON       shift and go to state 475


state 292

    (183) aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList . SEMICOLON

    SEMICOLON       shift and go to state 476


state 293

    (184) aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER . LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON
    (185) declaratorIdentifierList -> IDENTIFIER . multiple_comma_identifer
    (186) multiple_comma_identifer -> . COMMA IDENTIFIER multiple_comma_identifer
    (187) multiple_comma_identifer -> . empty
    (397) empty -> .

    LPAREN          shift and go to state 479
    COMMA           shift and go to state 478
    SEMICOLON       reduce using rule 397 (empty -> .)

    multiple_comma_identifer       shift and go to state 477
    empty                          shift and go to state 480

state 294

    (182) aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .

    PRIVATE         reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    PROTECTED       reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    PUBLIC          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    STATIC          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    EXTERN          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FINAL           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    AUTO            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CONST           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IMMUTABLE       reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ALIAS           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ENUM            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CLASS           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    THIS            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TILDE           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IMPORT          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UNION           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    MIXIN           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CHAR            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    INT             reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UINT            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LONG            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FLOAT           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DOUBLE          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    BOOL            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    SHORT           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    USHORT          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ULONG           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TYPEOF          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IDENTIFIER      reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    $end            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    RBRACE          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CASE            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DEFAULT         reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LBRACE          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    IF              reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    WHILE           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DO              reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FOR             reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FOREACH         reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FOREACH_REVERSE reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    SWITCH          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CONTINUE        reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    BREAK           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    RETURN          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    GOTO            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    WITH            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UAMPERSAND      reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    EXCLAMATION     reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UTIMES          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UPLUS           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    UMINUS          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    PLUS_PLUS       reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    MINUS_MINUS     reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LPAREN          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DOT             reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DOLLAR          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    NULL            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    TRUE            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FALSE           reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    INUMBER         reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DNUMBER         reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LIT_CHAR        reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    NEW             reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    DELETE          reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    CAST            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LBRACKET        reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    FUNCTION        reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    LIT_STR         reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    SEMICOLON       reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)
    ELSE            reduce using rule 182 (aliasDeclaration -> ALIAS aliasInitializer comma_aliasInitializer SEMICOLON .)


state 295

    (193) comma_aliasInitializer -> COMMA aliasInitializer . comma_aliasInitializer
    (193) comma_aliasInitializer -> . COMMA aliasInitializer comma_aliasInitializer
    (194) comma_aliasInitializer -> . empty
    (397) empty -> .

    COMMA           shift and go to state 166
    SEMICOLON       reduce using rule 397 (empty -> .)

    comma_aliasInitializer         shift and go to state 481
    empty                          shift and go to state 167

state 296

    (197) aliasInitializer -> IDENTIFIER . ASSIGN multiplestorageClass type
    (198) aliasInitializer -> IDENTIFIER . ASSIGN functionLiteralExpression SEMICOLON

    ASSIGN          shift and go to state 163


state 297

    (151) constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DOUBLE          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    $end            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UAMPERSAND      reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UTIMES          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UPLUS           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    UMINUS          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    MINUS_MINUS     reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 151 (constructor -> THIS parameters multiple_memberFunctionAttribute functionBody .)


state 298

    (152) constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOUBLE          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    $end            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UAMPERSAND      reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UTIMES          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UPLUS           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    UMINUS          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    MINUS_MINUS     reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 152 (constructor -> THIS parameters multiple_memberFunctionAttribute SEMICOLON .)


state 299

    (153) constructor -> THIS parameters multiple_memberFunctionAttribute constraint . functionBody
    (154) constructor -> THIS parameters multiple_memberFunctionAttribute constraint . SEMICOLON
    (341) functionBody -> . blockStatement
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 483
    LBRACE          shift and go to state 207

    functionBody                   shift and go to state 482
    blockStatement                 shift and go to state 237

state 300

    (155) constraint -> IF . LPAREN expression RPAREN

    LPAREN          shift and go to state 484


state 301

    (156) multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .

    SEMICOLON       reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LBRACE          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    TIMES           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LBRACKET        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    DELEGATE        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    FUNCTION        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    IDENTIFIER      reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    DOT             reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LPAREN          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    RBRACKET        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    RPAREN          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    ELLIPSIS        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    ASSIGN          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    COMMA           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    PLUS_PLUS       reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    MINUS_MINUS     reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    POWER           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    DIV             reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    MODULO          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    PLUS            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    MINUS           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    TILDE           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    RIGHT_SHIFT     reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LEFT_SHIFT      reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    IS_EQ           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    NOT_EQ          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    AMPERSAND       reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    CARET           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    PIPE            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    DOUBLE_AMPERSAND reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    QUESTION        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    DOUBLE_PIPE     reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_LEFT         reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_RIGHT        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_PLUS         reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_MINUS        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_TIMES        reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_MODULO       reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_AND_BIT      reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_DIV          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_OR_BIT       reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    EQ_XOR_BIT      reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LESS            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LESS_EQ         reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    GREATER         reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    GREATER_EQ      reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    IS_EQ_DIFF      reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    NOT_EQ_DIFF     reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LESS_EQ_DIFF    reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LESS_DIFF       reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    GREATER_EQ_DIFF reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    GREATER_DIFF    reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    RANGE           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    COLON           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    CONST           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    IMMUTABLE       reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    RBRACE          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    THIS            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    BOOL            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    SHORT           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    USHORT          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    INT             reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    UINT            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    LONG            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    ULONG           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    CHAR            reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    FLOAT           reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    TYPEOF          reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)
    IF              reduce using rule 156 (multiple_memberFunctionAttribute -> memberFunctionAttribute multiple_memberFunctionAttribute .)


state 302

    (141) parameterAttributeStar -> parameterAttribute parameterAttributeStar .

    CONST           reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    IMMUTABLE       reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    THIS            reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    BOOL            reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    SHORT           reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    USHORT          reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    INT             reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    UINT            reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    LONG            reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    ULONG           reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    CHAR            reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    FLOAT           reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    TYPEOF          reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)
    IDENTIFIER      reduce using rule 141 (parameterAttributeStar -> parameterAttribute parameterAttributeStar .)


state 303

    (136) parameter -> parameterAttributeStar type . Identifier_question ELLIPSIS
    (137) parameter -> parameterAttributeStar type . Identifier_question
    (138) parameter -> parameterAttributeStar type . Identifier_question ASSIGN assignExpression
    (139) Identifier_question -> . IDENTIFIER
    (140) Identifier_question -> . empty
    (397) empty -> .

    IDENTIFIER      shift and go to state 486
    ELLIPSIS        reduce using rule 397 (empty -> .)
    ASSIGN          reduce using rule 397 (empty -> .)
    COMMA           reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)

    Identifier_question            shift and go to state 485
    empty                          shift and go to state 487

state 304

    (134) parameters -> LPAREN ELLIPSIS RPAREN .

    IMMUTABLE       reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    CONST           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    RETURN          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    SEMICOLON       reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    IF              reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LBRACE          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    RPAREN          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    TIMES           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LBRACKET        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    DELEGATE        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    FUNCTION        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    IDENTIFIER      reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    DOT             reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LPAREN          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    RBRACKET        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    ELLIPSIS        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    ASSIGN          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    COMMA           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    PLUS_PLUS       reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    MINUS_MINUS     reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    POWER           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    DIV             reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    MODULO          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    PLUS            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    MINUS           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    TILDE           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    RIGHT_SHIFT     reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LEFT_SHIFT      reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    IS_EQ           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    NOT_EQ          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    AMPERSAND       reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    CARET           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    PIPE            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    QUESTION        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    DOUBLE_PIPE     reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_LEFT         reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_RIGHT        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_PLUS         reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_MINUS        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_TIMES        reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_MODULO       reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_AND_BIT      reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_DIV          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_OR_BIT       reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    EQ_XOR_BIT      reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LESS            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LESS_EQ         reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    GREATER         reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    GREATER_EQ      reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    IS_EQ_DIFF      reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    NOT_EQ_DIFF     reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LESS_EQ_DIFF    reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LESS_DIFF       reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    GREATER_EQ_DIFF reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    GREATER_DIFF    reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    RANGE           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    COLON           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    RBRACE          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    THIS            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    BOOL            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    SHORT           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    USHORT          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    INT             reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    UINT            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    LONG            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    ULONG           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    CHAR            reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    FLOAT           reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)
    TYPEOF          reduce using rule 134 (parameters -> LPAREN ELLIPSIS RPAREN .)


state 305

    (132) parameters -> LPAREN parameter CommaParameterStar . COMMA ELLIPSIS RPAREN
    (133) parameters -> LPAREN parameter CommaParameterStar . RPAREN

    COMMA           shift and go to state 488
    RPAREN          shift and go to state 489


state 306

    (130) CommaParameterStar -> COMMA . parameter CommaParameterStar
    (136) parameter -> . parameterAttributeStar type Identifier_question ELLIPSIS
    (137) parameter -> . parameterAttributeStar type Identifier_question
    (138) parameter -> . parameterAttributeStar type Identifier_question ASSIGN assignExpression
    (141) parameterAttributeStar -> . parameterAttribute parameterAttributeStar
    (142) parameterAttributeStar -> . empty
    (143) parameterAttribute -> . typeConstructor
    (144) parameterAttribute -> . FINAL
    (145) parameterAttribute -> . AUTO
    (146) parameterAttribute -> . RETURN
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    FINAL           shift and go to state 175
    AUTO            shift and go to state 176
    RETURN          shift and go to state 179
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    parameterAttribute             shift and go to state 177
    parameterAttributeStar         shift and go to state 178
    typeConstructor                shift and go to state 182
    parameter                      shift and go to state 490
    empty                          shift and go to state 184

state 307

    (131) CommaParameterStar -> empty .

    COMMA           reduce using rule 131 (CommaParameterStar -> empty .)
    RPAREN          reduce using rule 131 (CommaParameterStar -> empty .)


state 308

    (79) comma_identifier_assign_initializer -> COMMA . autoDeclarationPart comma_identifier_assign_initializer
    (78) autoDeclarationPart -> . IDENTIFIER ASSIGN initializer

    IDENTIFIER      shift and go to state 492

    autoDeclarationPart            shift and go to state 491

state 309

    (77) autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer . SEMICOLON

    SEMICOLON       shift and go to state 493


state 310

    (80) comma_identifier_assign_initializer -> empty .

    SEMICOLON       reduce using rule 80 (comma_identifier_assign_initializer -> empty .)


state 311

    (147) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters . multiple_memberFunctionAttribute SEMICOLON
    (148) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters . multiple_memberFunctionAttribute functionBody
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    SEMICOLON       reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 494
    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174

state 312

    (78) autoDeclarationPart -> IDENTIFIER ASSIGN . initializer
    (100) initializer -> . VOID
    (101) initializer -> . nonVoidInitializer
    (102) nonVoidInitializer -> . assignExpression
    (103) nonVoidInitializer -> . arrayInitializer
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (104) arrayInitializer -> . LBRACKET RBRACKET
    (105) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    VOID            shift and go to state 457
    LBRACKET        shift and go to state 458
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    initializer                    shift and go to state 495
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    arrayInitializer               shift and go to state 462
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    LIT_STRPlus                    shift and go to state 227
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    nonVoidInitializer             shift and go to state 459
    deleteExpression               shift and go to state 212
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 461
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    ternaryExpression              shift and go to state 226
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 313

    (108) arrayLiteral -> LBRACKET argumentList_question . RBRACKET

    RBRACKET        shift and go to state 496


state 314

    (337) argumentList -> assignExpression .

    COMMA           reduce using rule 337 (argumentList -> assignExpression .)
    RPAREN          reduce using rule 337 (argumentList -> assignExpression .)
    RBRACKET        reduce using rule 337 (argumentList -> assignExpression .)


state 315

    (336) argumentList_question -> empty .
    (192) typeConstructors_quetsion -> empty .

    RBRACKET        reduce using rule 336 (argumentList_question -> empty .)
    RPAREN          reduce using rule 336 (argumentList_question -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)


state 316

    (335) argumentList_question -> argumentList .
    (338) argumentList -> argumentList . comma_assign
    (339) comma_assign -> . COMMA assignExpression comma_assign
    (340) comma_assign -> . empty
    (397) empty -> .

  ! reduce/reduce conflict for RBRACKET resolved using rule 335 (argumentList_question -> argumentList .)
  ! reduce/reduce conflict for RPAREN resolved using rule 335 (argumentList_question -> argumentList .)
    RBRACKET        reduce using rule 335 (argumentList_question -> argumentList .)
    RPAREN          reduce using rule 335 (argumentList_question -> argumentList .)
    COMMA           reduce using rule 397 (empty -> .)

  ! COMMA           [ shift and go to state 498 ]
  ! RBRACKET        [ reduce using rule 397 (empty -> .) ]
  ! RPAREN          [ reduce using rule 397 (empty -> .) ]

    comma_assign                   shift and go to state 497
    empty                          shift and go to state 499

state 317

    (16) unaryExpression -> UAMPERSAND unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    MINUS_MINUS     reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    POWER           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    TIMES           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    DIV             reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    MODULO          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    PLUS            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    MINUS           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    TILDE           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    RIGHT_SHIFT     reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    LEFT_SHIFT      reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    IS_EQ           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    NOT_EQ          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    AMPERSAND       reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    CARET           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    PIPE            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    QUESTION        reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    DOUBLE_PIPE     reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    ASSIGN          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_LEFT         reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_RIGHT        reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_PLUS         reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_MINUS        reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_TIMES        reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_MODULO       reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_AND_BIT      reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_DIV          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_OR_BIT       reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    EQ_XOR_BIT      reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    COMMA           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    SEMICOLON       reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    LESS            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    LESS_EQ         reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    GREATER         reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    GREATER_EQ      reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    IS_EQ_DIFF      reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    LESS_DIFF       reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    GREATER_DIFF    reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    RPAREN          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    RBRACKET        reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    COLON           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    RANGE           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    IDENTIFIER      reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    CONST           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    IMMUTABLE       reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    RBRACE          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    THIS            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    BOOL            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    SHORT           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    USHORT          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    INT             reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    UINT            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    LONG            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    ULONG           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    CHAR            reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    FLOAT           reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    TYPEOF          reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .) ]
  ! LPAREN          [ reduce using rule 16 (unaryExpression -> UAMPERSAND unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 318

    (388) relOperator -> LESS_EQ .

    UAMPERSAND      reduce using rule 388 (relOperator -> LESS_EQ .)
    EXCLAMATION     reduce using rule 388 (relOperator -> LESS_EQ .)
    UTIMES          reduce using rule 388 (relOperator -> LESS_EQ .)
    UPLUS           reduce using rule 388 (relOperator -> LESS_EQ .)
    UMINUS          reduce using rule 388 (relOperator -> LESS_EQ .)
    PLUS_PLUS       reduce using rule 388 (relOperator -> LESS_EQ .)
    MINUS_MINUS     reduce using rule 388 (relOperator -> LESS_EQ .)
    LPAREN          reduce using rule 388 (relOperator -> LESS_EQ .)
    DOT             reduce using rule 388 (relOperator -> LESS_EQ .)
    DOLLAR          reduce using rule 388 (relOperator -> LESS_EQ .)
    THIS            reduce using rule 388 (relOperator -> LESS_EQ .)
    NULL            reduce using rule 388 (relOperator -> LESS_EQ .)
    TRUE            reduce using rule 388 (relOperator -> LESS_EQ .)
    FALSE           reduce using rule 388 (relOperator -> LESS_EQ .)
    INUMBER         reduce using rule 388 (relOperator -> LESS_EQ .)
    DNUMBER         reduce using rule 388 (relOperator -> LESS_EQ .)
    LIT_CHAR        reduce using rule 388 (relOperator -> LESS_EQ .)
    NEW             reduce using rule 388 (relOperator -> LESS_EQ .)
    DELETE          reduce using rule 388 (relOperator -> LESS_EQ .)
    CAST            reduce using rule 388 (relOperator -> LESS_EQ .)
    IDENTIFIER      reduce using rule 388 (relOperator -> LESS_EQ .)
    CONST           reduce using rule 388 (relOperator -> LESS_EQ .)
    IMMUTABLE       reduce using rule 388 (relOperator -> LESS_EQ .)
    LBRACKET        reduce using rule 388 (relOperator -> LESS_EQ .)
    FUNCTION        reduce using rule 388 (relOperator -> LESS_EQ .)
    MIXIN           reduce using rule 388 (relOperator -> LESS_EQ .)
    IMPORT          reduce using rule 388 (relOperator -> LESS_EQ .)
    LIT_STR         reduce using rule 388 (relOperator -> LESS_EQ .)
    LBRACE          reduce using rule 388 (relOperator -> LESS_EQ .)
    BOOL            reduce using rule 388 (relOperator -> LESS_EQ .)
    SHORT           reduce using rule 388 (relOperator -> LESS_EQ .)
    USHORT          reduce using rule 388 (relOperator -> LESS_EQ .)
    INT             reduce using rule 388 (relOperator -> LESS_EQ .)
    UINT            reduce using rule 388 (relOperator -> LESS_EQ .)
    LONG            reduce using rule 388 (relOperator -> LESS_EQ .)
    ULONG           reduce using rule 388 (relOperator -> LESS_EQ .)
    CHAR            reduce using rule 388 (relOperator -> LESS_EQ .)
    FLOAT           reduce using rule 388 (relOperator -> LESS_EQ .)
    TYPEOF          reduce using rule 388 (relOperator -> LESS_EQ .)


state 319

    (395) relOperator -> GREATER_EQ_DIFF .

    UAMPERSAND      reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    EXCLAMATION     reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    UTIMES          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    UPLUS           reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    UMINUS          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    LPAREN          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    DOT             reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    DOLLAR          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    THIS            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    NULL            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    TRUE            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    FALSE           reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    INUMBER         reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    DNUMBER         reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    LIT_CHAR        reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    NEW             reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    DELETE          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    CAST            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    IDENTIFIER      reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    CONST           reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    IMMUTABLE       reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    LBRACKET        reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    FUNCTION        reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    MIXIN           reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    IMPORT          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    LIT_STR         reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    LBRACE          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    BOOL            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    SHORT           reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    USHORT          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    INT             reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    UINT            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    LONG            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    ULONG           reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    CHAR            reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    FLOAT           reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)
    TYPEOF          reduce using rule 395 (relOperator -> GREATER_EQ_DIFF .)


state 320

    (389) relOperator -> GREATER .

    UAMPERSAND      reduce using rule 389 (relOperator -> GREATER .)
    EXCLAMATION     reduce using rule 389 (relOperator -> GREATER .)
    UTIMES          reduce using rule 389 (relOperator -> GREATER .)
    UPLUS           reduce using rule 389 (relOperator -> GREATER .)
    UMINUS          reduce using rule 389 (relOperator -> GREATER .)
    PLUS_PLUS       reduce using rule 389 (relOperator -> GREATER .)
    MINUS_MINUS     reduce using rule 389 (relOperator -> GREATER .)
    LPAREN          reduce using rule 389 (relOperator -> GREATER .)
    DOT             reduce using rule 389 (relOperator -> GREATER .)
    DOLLAR          reduce using rule 389 (relOperator -> GREATER .)
    THIS            reduce using rule 389 (relOperator -> GREATER .)
    NULL            reduce using rule 389 (relOperator -> GREATER .)
    TRUE            reduce using rule 389 (relOperator -> GREATER .)
    FALSE           reduce using rule 389 (relOperator -> GREATER .)
    INUMBER         reduce using rule 389 (relOperator -> GREATER .)
    DNUMBER         reduce using rule 389 (relOperator -> GREATER .)
    LIT_CHAR        reduce using rule 389 (relOperator -> GREATER .)
    NEW             reduce using rule 389 (relOperator -> GREATER .)
    DELETE          reduce using rule 389 (relOperator -> GREATER .)
    CAST            reduce using rule 389 (relOperator -> GREATER .)
    IDENTIFIER      reduce using rule 389 (relOperator -> GREATER .)
    CONST           reduce using rule 389 (relOperator -> GREATER .)
    IMMUTABLE       reduce using rule 389 (relOperator -> GREATER .)
    LBRACKET        reduce using rule 389 (relOperator -> GREATER .)
    FUNCTION        reduce using rule 389 (relOperator -> GREATER .)
    MIXIN           reduce using rule 389 (relOperator -> GREATER .)
    IMPORT          reduce using rule 389 (relOperator -> GREATER .)
    LIT_STR         reduce using rule 389 (relOperator -> GREATER .)
    LBRACE          reduce using rule 389 (relOperator -> GREATER .)
    BOOL            reduce using rule 389 (relOperator -> GREATER .)
    SHORT           reduce using rule 389 (relOperator -> GREATER .)
    USHORT          reduce using rule 389 (relOperator -> GREATER .)
    INT             reduce using rule 389 (relOperator -> GREATER .)
    UINT            reduce using rule 389 (relOperator -> GREATER .)
    LONG            reduce using rule 389 (relOperator -> GREATER .)
    ULONG           reduce using rule 389 (relOperator -> GREATER .)
    CHAR            reduce using rule 389 (relOperator -> GREATER .)
    FLOAT           reduce using rule 389 (relOperator -> GREATER .)
    TYPEOF          reduce using rule 389 (relOperator -> GREATER .)


state 321

    (387) relOperator -> LESS .

    UAMPERSAND      reduce using rule 387 (relOperator -> LESS .)
    EXCLAMATION     reduce using rule 387 (relOperator -> LESS .)
    UTIMES          reduce using rule 387 (relOperator -> LESS .)
    UPLUS           reduce using rule 387 (relOperator -> LESS .)
    UMINUS          reduce using rule 387 (relOperator -> LESS .)
    PLUS_PLUS       reduce using rule 387 (relOperator -> LESS .)
    MINUS_MINUS     reduce using rule 387 (relOperator -> LESS .)
    LPAREN          reduce using rule 387 (relOperator -> LESS .)
    DOT             reduce using rule 387 (relOperator -> LESS .)
    DOLLAR          reduce using rule 387 (relOperator -> LESS .)
    THIS            reduce using rule 387 (relOperator -> LESS .)
    NULL            reduce using rule 387 (relOperator -> LESS .)
    TRUE            reduce using rule 387 (relOperator -> LESS .)
    FALSE           reduce using rule 387 (relOperator -> LESS .)
    INUMBER         reduce using rule 387 (relOperator -> LESS .)
    DNUMBER         reduce using rule 387 (relOperator -> LESS .)
    LIT_CHAR        reduce using rule 387 (relOperator -> LESS .)
    NEW             reduce using rule 387 (relOperator -> LESS .)
    DELETE          reduce using rule 387 (relOperator -> LESS .)
    CAST            reduce using rule 387 (relOperator -> LESS .)
    IDENTIFIER      reduce using rule 387 (relOperator -> LESS .)
    CONST           reduce using rule 387 (relOperator -> LESS .)
    IMMUTABLE       reduce using rule 387 (relOperator -> LESS .)
    LBRACKET        reduce using rule 387 (relOperator -> LESS .)
    FUNCTION        reduce using rule 387 (relOperator -> LESS .)
    MIXIN           reduce using rule 387 (relOperator -> LESS .)
    IMPORT          reduce using rule 387 (relOperator -> LESS .)
    LIT_STR         reduce using rule 387 (relOperator -> LESS .)
    LBRACE          reduce using rule 387 (relOperator -> LESS .)
    BOOL            reduce using rule 387 (relOperator -> LESS .)
    SHORT           reduce using rule 387 (relOperator -> LESS .)
    USHORT          reduce using rule 387 (relOperator -> LESS .)
    INT             reduce using rule 387 (relOperator -> LESS .)
    UINT            reduce using rule 387 (relOperator -> LESS .)
    LONG            reduce using rule 387 (relOperator -> LESS .)
    ULONG           reduce using rule 387 (relOperator -> LESS .)
    CHAR            reduce using rule 387 (relOperator -> LESS .)
    FLOAT           reduce using rule 387 (relOperator -> LESS .)
    TYPEOF          reduce using rule 387 (relOperator -> LESS .)


state 322

    (394) relOperator -> LESS_DIFF .

    UAMPERSAND      reduce using rule 394 (relOperator -> LESS_DIFF .)
    EXCLAMATION     reduce using rule 394 (relOperator -> LESS_DIFF .)
    UTIMES          reduce using rule 394 (relOperator -> LESS_DIFF .)
    UPLUS           reduce using rule 394 (relOperator -> LESS_DIFF .)
    UMINUS          reduce using rule 394 (relOperator -> LESS_DIFF .)
    PLUS_PLUS       reduce using rule 394 (relOperator -> LESS_DIFF .)
    MINUS_MINUS     reduce using rule 394 (relOperator -> LESS_DIFF .)
    LPAREN          reduce using rule 394 (relOperator -> LESS_DIFF .)
    DOT             reduce using rule 394 (relOperator -> LESS_DIFF .)
    DOLLAR          reduce using rule 394 (relOperator -> LESS_DIFF .)
    THIS            reduce using rule 394 (relOperator -> LESS_DIFF .)
    NULL            reduce using rule 394 (relOperator -> LESS_DIFF .)
    TRUE            reduce using rule 394 (relOperator -> LESS_DIFF .)
    FALSE           reduce using rule 394 (relOperator -> LESS_DIFF .)
    INUMBER         reduce using rule 394 (relOperator -> LESS_DIFF .)
    DNUMBER         reduce using rule 394 (relOperator -> LESS_DIFF .)
    LIT_CHAR        reduce using rule 394 (relOperator -> LESS_DIFF .)
    NEW             reduce using rule 394 (relOperator -> LESS_DIFF .)
    DELETE          reduce using rule 394 (relOperator -> LESS_DIFF .)
    CAST            reduce using rule 394 (relOperator -> LESS_DIFF .)
    IDENTIFIER      reduce using rule 394 (relOperator -> LESS_DIFF .)
    CONST           reduce using rule 394 (relOperator -> LESS_DIFF .)
    IMMUTABLE       reduce using rule 394 (relOperator -> LESS_DIFF .)
    LBRACKET        reduce using rule 394 (relOperator -> LESS_DIFF .)
    FUNCTION        reduce using rule 394 (relOperator -> LESS_DIFF .)
    MIXIN           reduce using rule 394 (relOperator -> LESS_DIFF .)
    IMPORT          reduce using rule 394 (relOperator -> LESS_DIFF .)
    LIT_STR         reduce using rule 394 (relOperator -> LESS_DIFF .)
    LBRACE          reduce using rule 394 (relOperator -> LESS_DIFF .)
    BOOL            reduce using rule 394 (relOperator -> LESS_DIFF .)
    SHORT           reduce using rule 394 (relOperator -> LESS_DIFF .)
    USHORT          reduce using rule 394 (relOperator -> LESS_DIFF .)
    INT             reduce using rule 394 (relOperator -> LESS_DIFF .)
    UINT            reduce using rule 394 (relOperator -> LESS_DIFF .)
    LONG            reduce using rule 394 (relOperator -> LESS_DIFF .)
    ULONG           reduce using rule 394 (relOperator -> LESS_DIFF .)
    CHAR            reduce using rule 394 (relOperator -> LESS_DIFF .)
    FLOAT           reduce using rule 394 (relOperator -> LESS_DIFF .)
    TYPEOF          reduce using rule 394 (relOperator -> LESS_DIFF .)


state 323

    (391) relOperator -> IS_EQ_DIFF .

    UAMPERSAND      reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    EXCLAMATION     reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    UTIMES          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    UPLUS           reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    UMINUS          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    LPAREN          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    DOT             reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    DOLLAR          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    THIS            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    NULL            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    TRUE            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    FALSE           reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    INUMBER         reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    DNUMBER         reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    LIT_CHAR        reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    NEW             reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    DELETE          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    CAST            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    IDENTIFIER      reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    CONST           reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    IMMUTABLE       reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    LBRACKET        reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    FUNCTION        reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    MIXIN           reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    IMPORT          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    LIT_STR         reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    LBRACE          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    BOOL            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    SHORT           reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    USHORT          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    INT             reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    UINT            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    LONG            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    ULONG           reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    CHAR            reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    FLOAT           reduce using rule 391 (relOperator -> IS_EQ_DIFF .)
    TYPEOF          reduce using rule 391 (relOperator -> IS_EQ_DIFF .)


state 324

    (390) relOperator -> GREATER_EQ .

    UAMPERSAND      reduce using rule 390 (relOperator -> GREATER_EQ .)
    EXCLAMATION     reduce using rule 390 (relOperator -> GREATER_EQ .)
    UTIMES          reduce using rule 390 (relOperator -> GREATER_EQ .)
    UPLUS           reduce using rule 390 (relOperator -> GREATER_EQ .)
    UMINUS          reduce using rule 390 (relOperator -> GREATER_EQ .)
    PLUS_PLUS       reduce using rule 390 (relOperator -> GREATER_EQ .)
    MINUS_MINUS     reduce using rule 390 (relOperator -> GREATER_EQ .)
    LPAREN          reduce using rule 390 (relOperator -> GREATER_EQ .)
    DOT             reduce using rule 390 (relOperator -> GREATER_EQ .)
    DOLLAR          reduce using rule 390 (relOperator -> GREATER_EQ .)
    THIS            reduce using rule 390 (relOperator -> GREATER_EQ .)
    NULL            reduce using rule 390 (relOperator -> GREATER_EQ .)
    TRUE            reduce using rule 390 (relOperator -> GREATER_EQ .)
    FALSE           reduce using rule 390 (relOperator -> GREATER_EQ .)
    INUMBER         reduce using rule 390 (relOperator -> GREATER_EQ .)
    DNUMBER         reduce using rule 390 (relOperator -> GREATER_EQ .)
    LIT_CHAR        reduce using rule 390 (relOperator -> GREATER_EQ .)
    NEW             reduce using rule 390 (relOperator -> GREATER_EQ .)
    DELETE          reduce using rule 390 (relOperator -> GREATER_EQ .)
    CAST            reduce using rule 390 (relOperator -> GREATER_EQ .)
    IDENTIFIER      reduce using rule 390 (relOperator -> GREATER_EQ .)
    CONST           reduce using rule 390 (relOperator -> GREATER_EQ .)
    IMMUTABLE       reduce using rule 390 (relOperator -> GREATER_EQ .)
    LBRACKET        reduce using rule 390 (relOperator -> GREATER_EQ .)
    FUNCTION        reduce using rule 390 (relOperator -> GREATER_EQ .)
    MIXIN           reduce using rule 390 (relOperator -> GREATER_EQ .)
    IMPORT          reduce using rule 390 (relOperator -> GREATER_EQ .)
    LIT_STR         reduce using rule 390 (relOperator -> GREATER_EQ .)
    LBRACE          reduce using rule 390 (relOperator -> GREATER_EQ .)
    BOOL            reduce using rule 390 (relOperator -> GREATER_EQ .)
    SHORT           reduce using rule 390 (relOperator -> GREATER_EQ .)
    USHORT          reduce using rule 390 (relOperator -> GREATER_EQ .)
    INT             reduce using rule 390 (relOperator -> GREATER_EQ .)
    UINT            reduce using rule 390 (relOperator -> GREATER_EQ .)
    LONG            reduce using rule 390 (relOperator -> GREATER_EQ .)
    ULONG           reduce using rule 390 (relOperator -> GREATER_EQ .)
    CHAR            reduce using rule 390 (relOperator -> GREATER_EQ .)
    FLOAT           reduce using rule 390 (relOperator -> GREATER_EQ .)
    TYPEOF          reduce using rule 390 (relOperator -> GREATER_EQ .)


state 325

    (392) relOperator -> NOT_EQ_DIFF .

    UAMPERSAND      reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    EXCLAMATION     reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    UTIMES          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    UPLUS           reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    UMINUS          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    LPAREN          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    DOT             reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    DOLLAR          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    THIS            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    NULL            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    TRUE            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    FALSE           reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    INUMBER         reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    DNUMBER         reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    LIT_CHAR        reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    NEW             reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    DELETE          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    CAST            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    IDENTIFIER      reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    CONST           reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    IMMUTABLE       reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    LBRACKET        reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    FUNCTION        reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    MIXIN           reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    IMPORT          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    LIT_STR         reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    LBRACE          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    BOOL            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    SHORT           reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    USHORT          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    INT             reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    UINT            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    LONG            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    ULONG           reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    CHAR            reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    FLOAT           reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)
    TYPEOF          reduce using rule 392 (relOperator -> NOT_EQ_DIFF .)


state 326

    (396) relOperator -> GREATER_DIFF .

    UAMPERSAND      reduce using rule 396 (relOperator -> GREATER_DIFF .)
    EXCLAMATION     reduce using rule 396 (relOperator -> GREATER_DIFF .)
    UTIMES          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    UPLUS           reduce using rule 396 (relOperator -> GREATER_DIFF .)
    UMINUS          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    PLUS_PLUS       reduce using rule 396 (relOperator -> GREATER_DIFF .)
    MINUS_MINUS     reduce using rule 396 (relOperator -> GREATER_DIFF .)
    LPAREN          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    DOT             reduce using rule 396 (relOperator -> GREATER_DIFF .)
    DOLLAR          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    THIS            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    NULL            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    TRUE            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    FALSE           reduce using rule 396 (relOperator -> GREATER_DIFF .)
    INUMBER         reduce using rule 396 (relOperator -> GREATER_DIFF .)
    DNUMBER         reduce using rule 396 (relOperator -> GREATER_DIFF .)
    LIT_CHAR        reduce using rule 396 (relOperator -> GREATER_DIFF .)
    NEW             reduce using rule 396 (relOperator -> GREATER_DIFF .)
    DELETE          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    CAST            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    IDENTIFIER      reduce using rule 396 (relOperator -> GREATER_DIFF .)
    CONST           reduce using rule 396 (relOperator -> GREATER_DIFF .)
    IMMUTABLE       reduce using rule 396 (relOperator -> GREATER_DIFF .)
    LBRACKET        reduce using rule 396 (relOperator -> GREATER_DIFF .)
    FUNCTION        reduce using rule 396 (relOperator -> GREATER_DIFF .)
    MIXIN           reduce using rule 396 (relOperator -> GREATER_DIFF .)
    IMPORT          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    LIT_STR         reduce using rule 396 (relOperator -> GREATER_DIFF .)
    LBRACE          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    BOOL            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    SHORT           reduce using rule 396 (relOperator -> GREATER_DIFF .)
    USHORT          reduce using rule 396 (relOperator -> GREATER_DIFF .)
    INT             reduce using rule 396 (relOperator -> GREATER_DIFF .)
    UINT            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    LONG            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    ULONG           reduce using rule 396 (relOperator -> GREATER_DIFF .)
    CHAR            reduce using rule 396 (relOperator -> GREATER_DIFF .)
    FLOAT           reduce using rule 396 (relOperator -> GREATER_DIFF .)
    TYPEOF          reduce using rule 396 (relOperator -> GREATER_DIFF .)


state 327

    (393) relOperator -> LESS_EQ_DIFF .

    UAMPERSAND      reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    EXCLAMATION     reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    UTIMES          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    UPLUS           reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    UMINUS          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    LPAREN          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    DOT             reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    DOLLAR          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    THIS            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    NULL            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    TRUE            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    FALSE           reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    INUMBER         reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    DNUMBER         reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    LIT_CHAR        reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    NEW             reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    DELETE          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    CAST            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    IDENTIFIER      reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    CONST           reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    IMMUTABLE       reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    LBRACKET        reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    FUNCTION        reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    MIXIN           reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    IMPORT          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    LIT_STR         reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    LBRACE          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    BOOL            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    SHORT           reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    USHORT          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    INT             reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    UINT            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    LONG            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    ULONG           reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    CHAR            reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    FLOAT           reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)
    TYPEOF          reduce using rule 393 (relOperator -> LESS_EQ_DIFF .)


state 328

    (386) relExpression -> relExpression relOperator . shiftExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    shiftExpression                shift and go to state 500
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 329

    (19) unaryExpression -> UPLUS unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    MINUS_MINUS     reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    POWER           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    TIMES           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    DIV             reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    MODULO          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    PLUS            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    MINUS           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    TILDE           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    IS_EQ           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    NOT_EQ          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    AMPERSAND       reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    CARET           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    PIPE            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    QUESTION        reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    ASSIGN          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_LEFT         reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_RIGHT        reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_PLUS         reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_MINUS        reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_TIMES        reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_MODULO       reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_DIV          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    COMMA           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    SEMICOLON       reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    LESS            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    LESS_EQ         reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    GREATER         reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    GREATER_EQ      reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    LESS_DIFF       reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    GREATER_DIFF    reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    RPAREN          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    RBRACKET        reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    COLON           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    RANGE           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    IDENTIFIER      reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    CONST           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    IMMUTABLE       reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    RBRACE          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    THIS            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    BOOL            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    SHORT           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    USHORT          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    INT             reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    UINT            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    LONG            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    ULONG           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    CHAR            reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    FLOAT           reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    TYPEOF          reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .) ]
  ! LPAREN          [ reduce using rule 19 (unaryExpression -> UPLUS unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 330

    (314) identifierOrTemplateChain -> identifierOrTemplateChain DOT . identifierOrTemplateInstance
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    identifierOrTemplateInstance   shift and go to state 501

state 331

    (35) primaryExpression -> typeConstructor LPAREN . type RPAREN DOT IDENTIFIER
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructors_quetsion      shift and go to state 42
    typeConstructor                shift and go to state 137
    type                           shift and go to state 502
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34

state 332

    (302) deleteExpression -> DELETE unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    POWER           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    TIMES           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    DIV             reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    MODULO          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    PLUS            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    MINUS           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    TILDE           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    RIGHT_SHIFT     reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    LEFT_SHIFT      reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    IS_EQ           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    NOT_EQ          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    AMPERSAND       reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    CARET           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    PIPE            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    QUESTION        reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    DOUBLE_PIPE     reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    ASSIGN          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_LEFT         reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_RIGHT        reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_PLUS         reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_MINUS        reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_TIMES        reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_MODULO       reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_AND_BIT      reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_DIV          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_OR_BIT       reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    EQ_XOR_BIT      reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    COLON           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    COMMA           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    RBRACKET        reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    LESS            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    LESS_EQ         reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    GREATER         reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    GREATER_EQ      reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    IS_EQ_DIFF      reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    LESS_DIFF       reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    GREATER_DIFF    reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    RPAREN          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    RANGE           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    SEMICOLON       reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    IDENTIFIER      reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    CONST           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    IMMUTABLE       reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    RBRACE          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    THIS            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    BOOL            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    SHORT           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    USHORT          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    INT             reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    UINT            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    LONG            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    ULONG           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    CHAR            reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    FLOAT           reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    TYPEOF          reduce using rule 302 (deleteExpression -> DELETE unaryExpression .)
    DOT             shift and go to state 423
    PLUS_PLUS       shift and go to state 424
    MINUS_MINUS     shift and go to state 425
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 302 (deleteExpression -> DELETE unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 302 (deleteExpression -> DELETE unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 302 (deleteExpression -> DELETE unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 302 (deleteExpression -> DELETE unaryExpression .) ]
  ! LPAREN          [ reduce using rule 302 (deleteExpression -> DELETE unaryExpression .) ]

    arguments                      shift and go to state 426

state 333

    (370) andAndExpression -> andAndExpression DOUBLE_AMPERSAND . orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 503
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 334

    (11) mulExpression -> mulExpression DIV . powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 504
    typeConstructor                shift and go to state 196

state 335

    (12) mulExpression -> mulExpression MODULO . powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 505
    typeConstructor                shift and go to state 196

state 336

    (10) mulExpression -> mulExpression TIMES . powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 506
    typeConstructor                shift and go to state 196

state 337

    (22) unaryExpression -> MINUS_MINUS unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    MINUS_MINUS     reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    POWER           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    TIMES           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DIV             reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    MODULO          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    PLUS            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    MINUS           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    TILDE           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    IS_EQ           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    NOT_EQ          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    AMPERSAND       reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    CARET           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    PIPE            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    QUESTION        reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    ASSIGN          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_LEFT         reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_RIGHT        reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_PLUS         reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_MINUS        reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_TIMES        reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_MODULO       reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_DIV          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    COMMA           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    SEMICOLON       reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS_EQ         reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER         reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER_EQ      reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS_DIFF       reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER_DIFF    reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RPAREN          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RBRACKET        reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    COLON           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RANGE           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    IDENTIFIER      reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    CONST           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    IMMUTABLE       reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RBRACE          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    THIS            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    BOOL            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    SHORT           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    USHORT          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    INT             reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    UINT            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LONG            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    ULONG           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    CHAR            reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    FLOAT           reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    TYPEOF          reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .) ]
  ! LPAREN          [ reduce using rule 22 (unaryExpression -> MINUS_MINUS unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 338

    (344) functionLiteralExpression -> FUNCTION functionBody .

    DOT             reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    PLUS_PLUS       reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    MINUS_MINUS     reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LBRACKET        reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LPAREN          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    POWER           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    TIMES           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    DIV             reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    MODULO          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    PLUS            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    MINUS           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    TILDE           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    RIGHT_SHIFT     reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LEFT_SHIFT      reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    IS_EQ           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    NOT_EQ          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    AMPERSAND       reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    CARET           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    PIPE            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    DOUBLE_AMPERSAND reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    QUESTION        reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    DOUBLE_PIPE     reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    ASSIGN          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_LEFT         reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_RIGHT        reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_PLUS         reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_MINUS        reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_TIMES        reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_MODULO       reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_AND_BIT      reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_DIV          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_OR_BIT       reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_XOR_BIT      reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    RPAREN          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_EQ         reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER         reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_EQ      reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    IS_EQ_DIFF      reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    NOT_EQ_DIFF     reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_EQ_DIFF    reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_DIFF       reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_EQ_DIFF reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_DIFF    reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    RBRACKET        reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    RANGE           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    COMMA           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    SEMICOLON       reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    COLON           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    IDENTIFIER      reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    CONST           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    IMMUTABLE       reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    RBRACE          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    THIS            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    BOOL            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    SHORT           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    USHORT          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    INT             reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    UINT            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    LONG            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    ULONG           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    CHAR            reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    FLOAT           reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)
    TYPEOF          reduce using rule 344 (functionLiteralExpression -> FUNCTION functionBody .)


state 339

    (345) functionLiteralExpression -> FUNCTION type . functionBody
    (341) functionBody -> . blockStatement
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    LBRACE          shift and go to state 207

    functionBody                   shift and go to state 507
    blockStatement                 shift and go to state 237

state 340

    (374) xorExpression -> xorExpression CARET . andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    shiftExpression                shift and go to state 234
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 508
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 341

    (348) mixinExpression -> MIXIN LPAREN assignExpression RPAREN .

    DOT             reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LBRACKET        reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LPAREN          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    POWER           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TIMES           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DIV             reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MODULO          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PLUS            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MINUS           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TILDE           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IS_EQ           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    NOT_EQ          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    AMPERSAND       reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    CARET           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PIPE            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    QUESTION        reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    ASSIGN          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_LEFT         reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_PLUS         reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_MINUS        reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_TIMES        reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_MODULO       reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_DIV          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RPAREN          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_EQ         reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER         reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_EQ      reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IS_EQ_DIFF      reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    NOT_EQ_DIFF     reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_EQ_DIFF    reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_DIFF       reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_EQ_DIFF reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_DIFF    reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RBRACKET        reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RANGE           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    COMMA           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    SEMICOLON       reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    COLON           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IDENTIFIER      reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    CONST           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IMMUTABLE       reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RBRACE          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    THIS            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    BOOL            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    SHORT           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    USHORT          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    INT             reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    UINT            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LONG            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    ULONG           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    CHAR            reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    FLOAT           reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TYPEOF          reduce using rule 348 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)


state 342

    (244) statementNoCaseNoDefault -> forStatement .

    PRIVATE         reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    PROTECTED       reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    PUBLIC          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    STATIC          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    EXTERN          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    FINAL           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    AUTO            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    CONST           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    IMMUTABLE       reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    CASE            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    DEFAULT         reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    IDENTIFIER      reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    LBRACE          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    IF              reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    WHILE           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    DO              reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    FOR             reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    FOREACH         reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    FOREACH_REVERSE reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    SWITCH          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    CONTINUE        reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    BREAK           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    RETURN          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    GOTO            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    WITH            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    UAMPERSAND      reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    EXCLAMATION     reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    UTIMES          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    UPLUS           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    UMINUS          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    PLUS_PLUS       reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    MINUS_MINUS     reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    LPAREN          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    DOT             reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    DOLLAR          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    THIS            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    NULL            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    TRUE            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    FALSE           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    INUMBER         reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    DNUMBER         reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    LIT_CHAR        reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    NEW             reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    DELETE          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    CAST            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    LBRACKET        reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    FUNCTION        reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    MIXIN           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    IMPORT          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    LIT_STR         reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    ALIAS           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    ENUM            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    CLASS           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    TILDE           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    UNION           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    CHAR            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    INT             reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    UINT            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    LONG            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    FLOAT           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    DOUBLE          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    BOOL            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    SHORT           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    USHORT          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    ULONG           reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    TYPEOF          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    RBRACE          reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    SEMICOLON       reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)
    ELSE            reduce using rule 244 (statementNoCaseNoDefault -> forStatement .)


state 343

    (246) statementNoCaseNoDefault -> switchStatement .

    PRIVATE         reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    PROTECTED       reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    PUBLIC          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    STATIC          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    EXTERN          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    FINAL           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    AUTO            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    CONST           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    IMMUTABLE       reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    CASE            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    DEFAULT         reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    IDENTIFIER      reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    LBRACE          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    IF              reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    WHILE           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    DO              reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    FOR             reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    FOREACH         reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    FOREACH_REVERSE reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    SWITCH          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    CONTINUE        reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    BREAK           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    RETURN          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    GOTO            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    WITH            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    UAMPERSAND      reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    EXCLAMATION     reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    UTIMES          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    UPLUS           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    UMINUS          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    PLUS_PLUS       reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    MINUS_MINUS     reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    LPAREN          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    DOT             reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    DOLLAR          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    THIS            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    NULL            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    TRUE            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    FALSE           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    INUMBER         reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    DNUMBER         reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    LIT_CHAR        reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    NEW             reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    DELETE          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    CAST            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    LBRACKET        reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    FUNCTION        reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    MIXIN           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    IMPORT          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    LIT_STR         reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    ALIAS           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    ENUM            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    CLASS           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    TILDE           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    UNION           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    CHAR            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    INT             reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    UINT            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    LONG            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    FLOAT           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    DOUBLE          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    BOOL            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    SHORT           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    USHORT          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    ULONG           reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    TYPEOF          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    RBRACE          reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    SEMICOLON       reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)
    ELSE            reduce using rule 246 (statementNoCaseNoDefault -> switchStatement .)


state 344

    (240) statementNoCaseNoDefault -> blockStatement .
    (341) functionBody -> blockStatement .

  ! reduce/reduce conflict for DOT resolved using rule 240 (statementNoCaseNoDefault -> blockStatement .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 240 (statementNoCaseNoDefault -> blockStatement .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 240 (statementNoCaseNoDefault -> blockStatement .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 240 (statementNoCaseNoDefault -> blockStatement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 240 (statementNoCaseNoDefault -> blockStatement .)
  ! reduce/reduce conflict for TILDE resolved using rule 240 (statementNoCaseNoDefault -> blockStatement .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    PRIVATE         reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    PROTECTED       reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    PUBLIC          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    STATIC          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    EXTERN          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    FINAL           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    AUTO            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    CONST           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    IMMUTABLE       reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    CASE            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    DEFAULT         reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    IDENTIFIER      reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    LBRACE          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    IF              reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    WHILE           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    DO              reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    FOR             reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    FOREACH         reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    FOREACH_REVERSE reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    SWITCH          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    CONTINUE        reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    BREAK           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    RETURN          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    GOTO            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    WITH            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    UAMPERSAND      reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    EXCLAMATION     reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    UTIMES          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    UPLUS           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    UMINUS          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    PLUS_PLUS       reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    MINUS_MINUS     reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    LPAREN          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    DOT             reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    DOLLAR          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    THIS            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    NULL            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    TRUE            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    FALSE           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    INUMBER         reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    DNUMBER         reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    LIT_CHAR        reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    NEW             reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    DELETE          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    CAST            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    LBRACKET        reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    FUNCTION        reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    MIXIN           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    IMPORT          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    LIT_STR         reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    ALIAS           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    ENUM            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    CLASS           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    TILDE           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    UNION           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    CHAR            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    INT             reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    UINT            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    LONG            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    FLOAT           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    DOUBLE          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    BOOL            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    SHORT           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    USHORT          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    ULONG           reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    TYPEOF          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    RBRACE          reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    SEMICOLON       reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    ELSE            reduce using rule 240 (statementNoCaseNoDefault -> blockStatement .)
    POWER           reduce using rule 341 (functionBody -> blockStatement .)
    TIMES           reduce using rule 341 (functionBody -> blockStatement .)
    DIV             reduce using rule 341 (functionBody -> blockStatement .)
    MODULO          reduce using rule 341 (functionBody -> blockStatement .)
    PLUS            reduce using rule 341 (functionBody -> blockStatement .)
    MINUS           reduce using rule 341 (functionBody -> blockStatement .)
    RIGHT_SHIFT     reduce using rule 341 (functionBody -> blockStatement .)
    LEFT_SHIFT      reduce using rule 341 (functionBody -> blockStatement .)
    IS_EQ           reduce using rule 341 (functionBody -> blockStatement .)
    NOT_EQ          reduce using rule 341 (functionBody -> blockStatement .)
    AMPERSAND       reduce using rule 341 (functionBody -> blockStatement .)
    CARET           reduce using rule 341 (functionBody -> blockStatement .)
    PIPE            reduce using rule 341 (functionBody -> blockStatement .)
    DOUBLE_AMPERSAND reduce using rule 341 (functionBody -> blockStatement .)
    QUESTION        reduce using rule 341 (functionBody -> blockStatement .)
    DOUBLE_PIPE     reduce using rule 341 (functionBody -> blockStatement .)
    ASSIGN          reduce using rule 341 (functionBody -> blockStatement .)
    EQ_LEFT         reduce using rule 341 (functionBody -> blockStatement .)
    EQ_RIGHT        reduce using rule 341 (functionBody -> blockStatement .)
    EQ_PLUS         reduce using rule 341 (functionBody -> blockStatement .)
    EQ_MINUS        reduce using rule 341 (functionBody -> blockStatement .)
    EQ_TIMES        reduce using rule 341 (functionBody -> blockStatement .)
    EQ_MODULO       reduce using rule 341 (functionBody -> blockStatement .)
    EQ_AND_BIT      reduce using rule 341 (functionBody -> blockStatement .)
    EQ_DIV          reduce using rule 341 (functionBody -> blockStatement .)
    EQ_OR_BIT       reduce using rule 341 (functionBody -> blockStatement .)
    EQ_XOR_BIT      reduce using rule 341 (functionBody -> blockStatement .)
    COMMA           reduce using rule 341 (functionBody -> blockStatement .)
    LESS            reduce using rule 341 (functionBody -> blockStatement .)
    LESS_EQ         reduce using rule 341 (functionBody -> blockStatement .)
    GREATER         reduce using rule 341 (functionBody -> blockStatement .)
    GREATER_EQ      reduce using rule 341 (functionBody -> blockStatement .)
    IS_EQ_DIFF      reduce using rule 341 (functionBody -> blockStatement .)
    NOT_EQ_DIFF     reduce using rule 341 (functionBody -> blockStatement .)
    LESS_EQ_DIFF    reduce using rule 341 (functionBody -> blockStatement .)
    LESS_DIFF       reduce using rule 341 (functionBody -> blockStatement .)
    GREATER_EQ_DIFF reduce using rule 341 (functionBody -> blockStatement .)
    GREATER_DIFF    reduce using rule 341 (functionBody -> blockStatement .)

  ! DOT             [ reduce using rule 341 (functionBody -> blockStatement .) ]
  ! PLUS_PLUS       [ reduce using rule 341 (functionBody -> blockStatement .) ]
  ! MINUS_MINUS     [ reduce using rule 341 (functionBody -> blockStatement .) ]
  ! LBRACKET        [ reduce using rule 341 (functionBody -> blockStatement .) ]
  ! LPAREN          [ reduce using rule 341 (functionBody -> blockStatement .) ]
  ! TILDE           [ reduce using rule 341 (functionBody -> blockStatement .) ]
  ! SEMICOLON       [ reduce using rule 341 (functionBody -> blockStatement .) ]


state 345

    (277) withStatement -> WITH . LPAREN expression RPAREN statementNoCaseNoDefault

    LPAREN          shift and go to state 509


state 346

    (245) statementNoCaseNoDefault -> foreachStatement .

    PRIVATE         reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    PROTECTED       reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    PUBLIC          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    STATIC          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    EXTERN          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    FINAL           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    AUTO            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    CONST           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    IMMUTABLE       reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    CASE            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    DEFAULT         reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    IDENTIFIER      reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    LBRACE          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    IF              reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    WHILE           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    DO              reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    FOR             reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    FOREACH         reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    FOREACH_REVERSE reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    SWITCH          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    CONTINUE        reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    BREAK           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    RETURN          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    GOTO            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    WITH            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    UAMPERSAND      reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    EXCLAMATION     reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    UTIMES          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    UPLUS           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    UMINUS          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    PLUS_PLUS       reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    MINUS_MINUS     reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    LPAREN          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    DOT             reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    DOLLAR          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    THIS            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    NULL            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    TRUE            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    FALSE           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    INUMBER         reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    DNUMBER         reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    LIT_CHAR        reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    NEW             reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    DELETE          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    CAST            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    LBRACKET        reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    FUNCTION        reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    MIXIN           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    IMPORT          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    LIT_STR         reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    ALIAS           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    ENUM            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    CLASS           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    TILDE           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    UNION           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    CHAR            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    INT             reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    UINT            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    LONG            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    FLOAT           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    DOUBLE          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    BOOL            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    SHORT           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    USHORT          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    ULONG           reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    TYPEOF          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    RBRACE          reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    SEMICOLON       reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)
    ELSE            reduce using rule 245 (statementNoCaseNoDefault -> foreachStatement .)


state 347

    (293) statement -> statementNoCaseNoDefault .

    PRIVATE         reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    PROTECTED       reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    PUBLIC          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    STATIC          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    EXTERN          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    FINAL           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    AUTO            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    CONST           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    CASE            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    DEFAULT         reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    LBRACE          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    IF              reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    WHILE           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    DO              reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    FOR             reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    FOREACH         reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    SWITCH          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    CONTINUE        reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    BREAK           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    RETURN          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    GOTO            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    WITH            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    UAMPERSAND      reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    UTIMES          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    UPLUS           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    UMINUS          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    LPAREN          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    DOT             reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    DOLLAR          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    THIS            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    NULL            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    TRUE            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    FALSE           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    INUMBER         reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    DNUMBER         reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    NEW             reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    DELETE          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    CAST            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    LBRACKET        reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    FUNCTION        reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    MIXIN           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    IMPORT          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    LIT_STR         reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    ALIAS           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    ENUM            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    CLASS           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    TILDE           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    UNION           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    CHAR            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    INT             reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    UINT            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    LONG            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    FLOAT           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    DOUBLE          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    BOOL            reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    SHORT           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    USHORT          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    ULONG           reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    TYPEOF          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    RBRACE          reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    SEMICOLON       reduce using rule 293 (statement -> statementNoCaseNoDefault .)
    ELSE            reduce using rule 293 (statement -> statementNoCaseNoDefault .)


state 348

    (274) gotoStatement -> GOTO . IDENTIFIER SEMICOLON
    (275) gotoStatement -> GOTO . DEFAULT SEMICOLON
    (276) gotoStatement -> GOTO . CASE expression_question SEMICOLON

    IDENTIFIER      shift and go to state 512
    DEFAULT         shift and go to state 511
    CASE            shift and go to state 510


state 349

    (242) statementNoCaseNoDefault -> whileStatement .

    PRIVATE         reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    PROTECTED       reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    PUBLIC          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    STATIC          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    EXTERN          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    FINAL           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    AUTO            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    CONST           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    IMMUTABLE       reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    CASE            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    DEFAULT         reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    IDENTIFIER      reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    LBRACE          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    IF              reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    WHILE           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    DO              reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    FOR             reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    FOREACH         reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    FOREACH_REVERSE reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    SWITCH          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    CONTINUE        reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    BREAK           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    RETURN          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    GOTO            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    WITH            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    UAMPERSAND      reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    EXCLAMATION     reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    UTIMES          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    UPLUS           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    UMINUS          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    PLUS_PLUS       reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    MINUS_MINUS     reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    LPAREN          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    DOT             reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    DOLLAR          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    THIS            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    NULL            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    TRUE            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    FALSE           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    INUMBER         reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    DNUMBER         reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    LIT_CHAR        reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    NEW             reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    DELETE          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    CAST            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    LBRACKET        reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    FUNCTION        reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    MIXIN           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    IMPORT          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    LIT_STR         reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    ALIAS           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    ENUM            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    CLASS           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    TILDE           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    UNION           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    CHAR            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    INT             reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    UINT            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    LONG            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    FLOAT           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    DOUBLE          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    BOOL            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    SHORT           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    USHORT          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    ULONG           reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    TYPEOF          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    RBRACE          reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    SEMICOLON       reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)
    ELSE            reduce using rule 242 (statementNoCaseNoDefault -> whileStatement .)


state 350

    (262) foreachStatement -> FOREACH . LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> FOREACH . LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement

    LPAREN          shift and go to state 513


state 351

    (279) declarationsAndStatements -> declarationOrStatement . declarationOrStatementmultiple
    (280) declarationOrStatementmultiple -> . declarationOrStatement declarationOrStatementmultiple
    (281) declarationOrStatementmultiple -> . empty
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (397) empty -> .
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for UAMPERSAND resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for UTIMES resolved as shift
  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    ELSE            reduce using rule 397 (empty -> .)
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! CASE            [ reduce using rule 397 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]
  ! LBRACE          [ reduce using rule 397 (empty -> .) ]
  ! IF              [ reduce using rule 397 (empty -> .) ]
  ! WHILE           [ reduce using rule 397 (empty -> .) ]
  ! DO              [ reduce using rule 397 (empty -> .) ]
  ! FOR             [ reduce using rule 397 (empty -> .) ]
  ! FOREACH         [ reduce using rule 397 (empty -> .) ]
  ! FOREACH_REVERSE [ reduce using rule 397 (empty -> .) ]
  ! SWITCH          [ reduce using rule 397 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 397 (empty -> .) ]
  ! BREAK           [ reduce using rule 397 (empty -> .) ]
  ! RETURN          [ reduce using rule 397 (empty -> .) ]
  ! GOTO            [ reduce using rule 397 (empty -> .) ]
  ! WITH            [ reduce using rule 397 (empty -> .) ]
  ! UAMPERSAND      [ reduce using rule 397 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 397 (empty -> .) ]
  ! UTIMES          [ reduce using rule 397 (empty -> .) ]
  ! UPLUS           [ reduce using rule 397 (empty -> .) ]
  ! UMINUS          [ reduce using rule 397 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 397 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 397 (empty -> .) ]
  ! LPAREN          [ reduce using rule 397 (empty -> .) ]
  ! DOT             [ reduce using rule 397 (empty -> .) ]
  ! DOLLAR          [ reduce using rule 397 (empty -> .) ]
  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! NULL            [ reduce using rule 397 (empty -> .) ]
  ! TRUE            [ reduce using rule 397 (empty -> .) ]
  ! FALSE           [ reduce using rule 397 (empty -> .) ]
  ! INUMBER         [ reduce using rule 397 (empty -> .) ]
  ! DNUMBER         [ reduce using rule 397 (empty -> .) ]
  ! LIT_CHAR        [ reduce using rule 397 (empty -> .) ]
  ! NEW             [ reduce using rule 397 (empty -> .) ]
  ! DELETE          [ reduce using rule 397 (empty -> .) ]
  ! CAST            [ reduce using rule 397 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 397 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! LIT_STR         [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    declarationOrStatementmultiple shift and go to state 515
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 516
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 514
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 352

    (249) statementNoCaseNoDefault -> returnStatement .

    PRIVATE         reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    PROTECTED       reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    PUBLIC          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    STATIC          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    EXTERN          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    FINAL           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    AUTO            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    CONST           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    IMMUTABLE       reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    CASE            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    DEFAULT         reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    IDENTIFIER      reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    LBRACE          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    IF              reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    WHILE           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    DO              reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    FOR             reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    FOREACH         reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    FOREACH_REVERSE reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    SWITCH          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    CONTINUE        reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    BREAK           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    RETURN          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    GOTO            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    WITH            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    UAMPERSAND      reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    EXCLAMATION     reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    UTIMES          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    UPLUS           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    UMINUS          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    PLUS_PLUS       reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    MINUS_MINUS     reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    LPAREN          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    DOT             reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    DOLLAR          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    THIS            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    NULL            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    TRUE            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    FALSE           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    INUMBER         reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    DNUMBER         reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    LIT_CHAR        reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    NEW             reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    DELETE          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    CAST            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    LBRACKET        reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    FUNCTION        reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    MIXIN           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    IMPORT          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    LIT_STR         reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    ALIAS           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    ENUM            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    CLASS           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    TILDE           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    UNION           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    CHAR            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    INT             reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    UINT            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    LONG            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    FLOAT           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    DOUBLE          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    BOOL            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    SHORT           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    USHORT          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    ULONG           reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    TYPEOF          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    RBRACE          reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    SEMICOLON       reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)
    ELSE            reduce using rule 249 (statementNoCaseNoDefault -> returnStatement .)


state 353

    (252) statementNoCaseNoDefault -> expressionStatement .

    PRIVATE         reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    PROTECTED       reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    PUBLIC          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    STATIC          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    EXTERN          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    FINAL           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    AUTO            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    CONST           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    IMMUTABLE       reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    CASE            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    DEFAULT         reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    IDENTIFIER      reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    LBRACE          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    IF              reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    WHILE           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    DO              reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    FOR             reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    FOREACH         reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    FOREACH_REVERSE reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    SWITCH          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    CONTINUE        reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    BREAK           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    RETURN          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    GOTO            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    WITH            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    UAMPERSAND      reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    EXCLAMATION     reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    UTIMES          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    UPLUS           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    UMINUS          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    PLUS_PLUS       reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    MINUS_MINUS     reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    LPAREN          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    DOT             reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    DOLLAR          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    THIS            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    NULL            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    TRUE            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    FALSE           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    INUMBER         reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    DNUMBER         reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    LIT_CHAR        reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    NEW             reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    DELETE          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    CAST            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    LBRACKET        reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    FUNCTION        reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    MIXIN           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    IMPORT          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    LIT_STR         reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    ALIAS           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    ENUM            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    CLASS           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    TILDE           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    UNION           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    CHAR            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    INT             reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    UINT            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    LONG            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    FLOAT           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    DOUBLE          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    BOOL            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    SHORT           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    USHORT          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    ULONG           reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    TYPEOF          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    RBRACE          reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    SEMICOLON       reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)
    ELSE            reduce using rule 252 (statementNoCaseNoDefault -> expressionStatement .)


state 354

    (295) statement -> caseRangeStatement .

    PRIVATE         reduce using rule 295 (statement -> caseRangeStatement .)
    PROTECTED       reduce using rule 295 (statement -> caseRangeStatement .)
    PUBLIC          reduce using rule 295 (statement -> caseRangeStatement .)
    STATIC          reduce using rule 295 (statement -> caseRangeStatement .)
    EXTERN          reduce using rule 295 (statement -> caseRangeStatement .)
    FINAL           reduce using rule 295 (statement -> caseRangeStatement .)
    AUTO            reduce using rule 295 (statement -> caseRangeStatement .)
    CONST           reduce using rule 295 (statement -> caseRangeStatement .)
    IMMUTABLE       reduce using rule 295 (statement -> caseRangeStatement .)
    CASE            reduce using rule 295 (statement -> caseRangeStatement .)
    DEFAULT         reduce using rule 295 (statement -> caseRangeStatement .)
    IDENTIFIER      reduce using rule 295 (statement -> caseRangeStatement .)
    LBRACE          reduce using rule 295 (statement -> caseRangeStatement .)
    IF              reduce using rule 295 (statement -> caseRangeStatement .)
    WHILE           reduce using rule 295 (statement -> caseRangeStatement .)
    DO              reduce using rule 295 (statement -> caseRangeStatement .)
    FOR             reduce using rule 295 (statement -> caseRangeStatement .)
    FOREACH         reduce using rule 295 (statement -> caseRangeStatement .)
    FOREACH_REVERSE reduce using rule 295 (statement -> caseRangeStatement .)
    SWITCH          reduce using rule 295 (statement -> caseRangeStatement .)
    CONTINUE        reduce using rule 295 (statement -> caseRangeStatement .)
    BREAK           reduce using rule 295 (statement -> caseRangeStatement .)
    RETURN          reduce using rule 295 (statement -> caseRangeStatement .)
    GOTO            reduce using rule 295 (statement -> caseRangeStatement .)
    WITH            reduce using rule 295 (statement -> caseRangeStatement .)
    UAMPERSAND      reduce using rule 295 (statement -> caseRangeStatement .)
    EXCLAMATION     reduce using rule 295 (statement -> caseRangeStatement .)
    UTIMES          reduce using rule 295 (statement -> caseRangeStatement .)
    UPLUS           reduce using rule 295 (statement -> caseRangeStatement .)
    UMINUS          reduce using rule 295 (statement -> caseRangeStatement .)
    PLUS_PLUS       reduce using rule 295 (statement -> caseRangeStatement .)
    MINUS_MINUS     reduce using rule 295 (statement -> caseRangeStatement .)
    LPAREN          reduce using rule 295 (statement -> caseRangeStatement .)
    DOT             reduce using rule 295 (statement -> caseRangeStatement .)
    DOLLAR          reduce using rule 295 (statement -> caseRangeStatement .)
    THIS            reduce using rule 295 (statement -> caseRangeStatement .)
    NULL            reduce using rule 295 (statement -> caseRangeStatement .)
    TRUE            reduce using rule 295 (statement -> caseRangeStatement .)
    FALSE           reduce using rule 295 (statement -> caseRangeStatement .)
    INUMBER         reduce using rule 295 (statement -> caseRangeStatement .)
    DNUMBER         reduce using rule 295 (statement -> caseRangeStatement .)
    LIT_CHAR        reduce using rule 295 (statement -> caseRangeStatement .)
    NEW             reduce using rule 295 (statement -> caseRangeStatement .)
    DELETE          reduce using rule 295 (statement -> caseRangeStatement .)
    CAST            reduce using rule 295 (statement -> caseRangeStatement .)
    LBRACKET        reduce using rule 295 (statement -> caseRangeStatement .)
    FUNCTION        reduce using rule 295 (statement -> caseRangeStatement .)
    MIXIN           reduce using rule 295 (statement -> caseRangeStatement .)
    IMPORT          reduce using rule 295 (statement -> caseRangeStatement .)
    LIT_STR         reduce using rule 295 (statement -> caseRangeStatement .)
    ALIAS           reduce using rule 295 (statement -> caseRangeStatement .)
    ENUM            reduce using rule 295 (statement -> caseRangeStatement .)
    CLASS           reduce using rule 295 (statement -> caseRangeStatement .)
    TILDE           reduce using rule 295 (statement -> caseRangeStatement .)
    UNION           reduce using rule 295 (statement -> caseRangeStatement .)
    CHAR            reduce using rule 295 (statement -> caseRangeStatement .)
    INT             reduce using rule 295 (statement -> caseRangeStatement .)
    UINT            reduce using rule 295 (statement -> caseRangeStatement .)
    LONG            reduce using rule 295 (statement -> caseRangeStatement .)
    FLOAT           reduce using rule 295 (statement -> caseRangeStatement .)
    DOUBLE          reduce using rule 295 (statement -> caseRangeStatement .)
    BOOL            reduce using rule 295 (statement -> caseRangeStatement .)
    SHORT           reduce using rule 295 (statement -> caseRangeStatement .)
    USHORT          reduce using rule 295 (statement -> caseRangeStatement .)
    ULONG           reduce using rule 295 (statement -> caseRangeStatement .)
    TYPEOF          reduce using rule 295 (statement -> caseRangeStatement .)
    RBRACE          reduce using rule 295 (statement -> caseRangeStatement .)
    SEMICOLON       reduce using rule 295 (statement -> caseRangeStatement .)
    ELSE            reduce using rule 295 (statement -> caseRangeStatement .)


state 355

    (273) returnStatement -> RETURN . expression_question SEMICOLON
    (287) expression_question -> . expression
    (288) expression_question -> . empty
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    SEMICOLON       reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 519
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    expression_question            shift and go to state 517
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 518

state 356

    (247) statementNoCaseNoDefault -> continueStatement .

    PRIVATE         reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    PROTECTED       reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    PUBLIC          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    STATIC          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    EXTERN          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    FINAL           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    AUTO            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    CONST           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    IMMUTABLE       reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    CASE            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    DEFAULT         reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    IDENTIFIER      reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    LBRACE          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    IF              reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    WHILE           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    DO              reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    FOR             reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    FOREACH         reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    FOREACH_REVERSE reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    SWITCH          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    CONTINUE        reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    BREAK           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    RETURN          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    GOTO            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    WITH            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    UAMPERSAND      reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    EXCLAMATION     reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    UTIMES          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    UPLUS           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    UMINUS          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    PLUS_PLUS       reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    MINUS_MINUS     reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    LPAREN          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    DOT             reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    DOLLAR          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    THIS            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    NULL            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    TRUE            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    FALSE           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    INUMBER         reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    DNUMBER         reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    LIT_CHAR        reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    NEW             reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    DELETE          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    CAST            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    LBRACKET        reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    FUNCTION        reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    MIXIN           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    IMPORT          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    LIT_STR         reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    ALIAS           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    ENUM            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    CLASS           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    TILDE           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    UNION           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    CHAR            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    INT             reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    UINT            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    LONG            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    FLOAT           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    DOUBLE          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    BOOL            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    SHORT           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    USHORT          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    ULONG           reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    TYPEOF          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    RBRACE          reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    SEMICOLON       reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)
    ELSE            reduce using rule 247 (statementNoCaseNoDefault -> continueStatement .)


state 357

    (294) statement -> caseStatement .

    PRIVATE         reduce using rule 294 (statement -> caseStatement .)
    PROTECTED       reduce using rule 294 (statement -> caseStatement .)
    PUBLIC          reduce using rule 294 (statement -> caseStatement .)
    STATIC          reduce using rule 294 (statement -> caseStatement .)
    EXTERN          reduce using rule 294 (statement -> caseStatement .)
    FINAL           reduce using rule 294 (statement -> caseStatement .)
    AUTO            reduce using rule 294 (statement -> caseStatement .)
    CONST           reduce using rule 294 (statement -> caseStatement .)
    IMMUTABLE       reduce using rule 294 (statement -> caseStatement .)
    CASE            reduce using rule 294 (statement -> caseStatement .)
    DEFAULT         reduce using rule 294 (statement -> caseStatement .)
    IDENTIFIER      reduce using rule 294 (statement -> caseStatement .)
    LBRACE          reduce using rule 294 (statement -> caseStatement .)
    IF              reduce using rule 294 (statement -> caseStatement .)
    WHILE           reduce using rule 294 (statement -> caseStatement .)
    DO              reduce using rule 294 (statement -> caseStatement .)
    FOR             reduce using rule 294 (statement -> caseStatement .)
    FOREACH         reduce using rule 294 (statement -> caseStatement .)
    FOREACH_REVERSE reduce using rule 294 (statement -> caseStatement .)
    SWITCH          reduce using rule 294 (statement -> caseStatement .)
    CONTINUE        reduce using rule 294 (statement -> caseStatement .)
    BREAK           reduce using rule 294 (statement -> caseStatement .)
    RETURN          reduce using rule 294 (statement -> caseStatement .)
    GOTO            reduce using rule 294 (statement -> caseStatement .)
    WITH            reduce using rule 294 (statement -> caseStatement .)
    UAMPERSAND      reduce using rule 294 (statement -> caseStatement .)
    EXCLAMATION     reduce using rule 294 (statement -> caseStatement .)
    UTIMES          reduce using rule 294 (statement -> caseStatement .)
    UPLUS           reduce using rule 294 (statement -> caseStatement .)
    UMINUS          reduce using rule 294 (statement -> caseStatement .)
    PLUS_PLUS       reduce using rule 294 (statement -> caseStatement .)
    MINUS_MINUS     reduce using rule 294 (statement -> caseStatement .)
    LPAREN          reduce using rule 294 (statement -> caseStatement .)
    DOT             reduce using rule 294 (statement -> caseStatement .)
    DOLLAR          reduce using rule 294 (statement -> caseStatement .)
    THIS            reduce using rule 294 (statement -> caseStatement .)
    NULL            reduce using rule 294 (statement -> caseStatement .)
    TRUE            reduce using rule 294 (statement -> caseStatement .)
    FALSE           reduce using rule 294 (statement -> caseStatement .)
    INUMBER         reduce using rule 294 (statement -> caseStatement .)
    DNUMBER         reduce using rule 294 (statement -> caseStatement .)
    LIT_CHAR        reduce using rule 294 (statement -> caseStatement .)
    NEW             reduce using rule 294 (statement -> caseStatement .)
    DELETE          reduce using rule 294 (statement -> caseStatement .)
    CAST            reduce using rule 294 (statement -> caseStatement .)
    LBRACKET        reduce using rule 294 (statement -> caseStatement .)
    FUNCTION        reduce using rule 294 (statement -> caseStatement .)
    MIXIN           reduce using rule 294 (statement -> caseStatement .)
    IMPORT          reduce using rule 294 (statement -> caseStatement .)
    LIT_STR         reduce using rule 294 (statement -> caseStatement .)
    ALIAS           reduce using rule 294 (statement -> caseStatement .)
    ENUM            reduce using rule 294 (statement -> caseStatement .)
    CLASS           reduce using rule 294 (statement -> caseStatement .)
    TILDE           reduce using rule 294 (statement -> caseStatement .)
    UNION           reduce using rule 294 (statement -> caseStatement .)
    CHAR            reduce using rule 294 (statement -> caseStatement .)
    INT             reduce using rule 294 (statement -> caseStatement .)
    UINT            reduce using rule 294 (statement -> caseStatement .)
    LONG            reduce using rule 294 (statement -> caseStatement .)
    FLOAT           reduce using rule 294 (statement -> caseStatement .)
    DOUBLE          reduce using rule 294 (statement -> caseStatement .)
    BOOL            reduce using rule 294 (statement -> caseStatement .)
    SHORT           reduce using rule 294 (statement -> caseStatement .)
    USHORT          reduce using rule 294 (statement -> caseStatement .)
    ULONG           reduce using rule 294 (statement -> caseStatement .)
    TYPEOF          reduce using rule 294 (statement -> caseStatement .)
    RBRACE          reduce using rule 294 (statement -> caseStatement .)
    SEMICOLON       reduce using rule 294 (statement -> caseStatement .)
    ELSE            reduce using rule 294 (statement -> caseStatement .)


state 358

    (264) foreachStatement -> FOREACH_REVERSE . LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> FOREACH_REVERSE . LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement

    LPAREN          shift and go to state 520


state 359

    (241) statementNoCaseNoDefault -> ifStatement .

    PRIVATE         reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    PROTECTED       reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    PUBLIC          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    STATIC          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    EXTERN          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    FINAL           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    AUTO            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    CONST           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    IMMUTABLE       reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    CASE            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    DEFAULT         reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    IDENTIFIER      reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    LBRACE          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    IF              reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    WHILE           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    DO              reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    FOR             reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    FOREACH         reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    FOREACH_REVERSE reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    SWITCH          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    CONTINUE        reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    BREAK           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    RETURN          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    GOTO            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    WITH            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    UAMPERSAND      reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    EXCLAMATION     reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    UTIMES          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    UPLUS           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    UMINUS          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    PLUS_PLUS       reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    MINUS_MINUS     reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    LPAREN          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    DOT             reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    DOLLAR          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    THIS            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    NULL            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    TRUE            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    FALSE           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    INUMBER         reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    DNUMBER         reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    LIT_CHAR        reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    NEW             reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    DELETE          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    CAST            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    LBRACKET        reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    FUNCTION        reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    MIXIN           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    IMPORT          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    LIT_STR         reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    ALIAS           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    ENUM            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    CLASS           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    TILDE           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    UNION           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    CHAR            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    INT             reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    UINT            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    LONG            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    FLOAT           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    DOUBLE          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    BOOL            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    SHORT           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    USHORT          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    ULONG           reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    TYPEOF          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    RBRACE          reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    SEMICOLON       reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)
    ELSE            reduce using rule 241 (statementNoCaseNoDefault -> ifStatement .)


state 360

    (260) forStatement -> FOR . LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> FOR . LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement

    LPAREN          shift and go to state 521


state 361

    (251) statementNoCaseNoDefault -> withStatement .

    PRIVATE         reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    PROTECTED       reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    PUBLIC          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    STATIC          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    EXTERN          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    FINAL           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    AUTO            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    CONST           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    IMMUTABLE       reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    CASE            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    DEFAULT         reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    IDENTIFIER      reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    LBRACE          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    IF              reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    WHILE           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    DO              reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    FOR             reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    FOREACH         reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    FOREACH_REVERSE reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    SWITCH          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    CONTINUE        reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    BREAK           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    RETURN          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    GOTO            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    WITH            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    UAMPERSAND      reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    EXCLAMATION     reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    UTIMES          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    UPLUS           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    UMINUS          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    PLUS_PLUS       reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    MINUS_MINUS     reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    LPAREN          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    DOT             reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    DOLLAR          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    THIS            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    NULL            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    TRUE            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    FALSE           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    INUMBER         reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    DNUMBER         reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    LIT_CHAR        reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    NEW             reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    DELETE          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    CAST            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    LBRACKET        reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    FUNCTION        reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    MIXIN           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    IMPORT          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    LIT_STR         reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    ALIAS           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    ENUM            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    CLASS           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    TILDE           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    UNION           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    CHAR            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    INT             reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    UINT            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    LONG            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    FLOAT           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    DOUBLE          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    BOOL            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    SHORT           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    USHORT          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    ULONG           reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    TYPEOF          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    RBRACE          reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    SEMICOLON       reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)
    ELSE            reduce using rule 251 (statementNoCaseNoDefault -> withStatement .)


state 362

    (239) statementNoCaseNoDefault -> labeledStatement .

    PRIVATE         reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    PROTECTED       reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    PUBLIC          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    STATIC          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    EXTERN          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    FINAL           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    AUTO            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    CONST           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    IMMUTABLE       reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    CASE            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    DEFAULT         reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    IDENTIFIER      reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    LBRACE          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    IF              reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    WHILE           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    DO              reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    FOR             reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    FOREACH         reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    FOREACH_REVERSE reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    SWITCH          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    CONTINUE        reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    BREAK           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    RETURN          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    GOTO            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    WITH            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    UAMPERSAND      reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    EXCLAMATION     reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    UTIMES          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    UPLUS           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    UMINUS          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    PLUS_PLUS       reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    MINUS_MINUS     reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    LPAREN          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    DOT             reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    DOLLAR          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    THIS            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    NULL            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    TRUE            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    FALSE           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    INUMBER         reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    DNUMBER         reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    LIT_CHAR        reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    NEW             reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    DELETE          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    CAST            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    LBRACKET        reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    FUNCTION        reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    MIXIN           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    IMPORT          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    LIT_STR         reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    ALIAS           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    ENUM            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    CLASS           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    TILDE           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    UNION           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    CHAR            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    INT             reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    UINT            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    LONG            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    FLOAT           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    DOUBLE          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    BOOL            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    SHORT           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    USHORT          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    ULONG           reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    TYPEOF          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    RBRACE          reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    SEMICOLON       reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)
    ELSE            reduce using rule 239 (statementNoCaseNoDefault -> labeledStatement .)


state 363

    (267) continueStatement -> CONTINUE . SEMICOLON
    (268) continueStatement -> CONTINUE . IDENTIFIER SEMICOLON

    SEMICOLON       shift and go to state 523
    IDENTIFIER      shift and go to state 522


state 364

    (278) expressionStatement -> expression . SEMICOLON
    (343) expression -> expression . COMMA assignExpression

    SEMICOLON       shift and go to state 524
    COMMA           shift and go to state 472


state 365

    (259) doStatement -> DO . statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    continueStatement              shift and go to state 356
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    newExpression                  shift and go to state 240
    statementNoCaseNoDefault       shift and go to state 525
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 139
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 366

    (297) defaultStatement -> DEFAULT . COLON declarationsAndStatements

    COLON           shift and go to state 526


state 367

    (258) whileStatement -> WHILE . LPAREN expression RPAREN declarationOrStatement

    LPAREN          shift and go to state 527


state 368

    (301) caseStatement -> CASE . argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> CASE . assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (337) argumentList -> . assignExpression
    (338) argumentList -> . argumentList comma_assign
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    argumentList                   shift and go to state 529
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    indexExpression                shift and go to state 203
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 528
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    typeConstructor                shift and go to state 196
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229

state 369

    (243) statementNoCaseNoDefault -> doStatement .

    PRIVATE         reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    PROTECTED       reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    PUBLIC          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    STATIC          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    EXTERN          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    FINAL           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    AUTO            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    CONST           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    IMMUTABLE       reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    CASE            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    DEFAULT         reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    IDENTIFIER      reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    LBRACE          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    IF              reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    WHILE           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    DO              reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    FOR             reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    FOREACH         reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    FOREACH_REVERSE reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    SWITCH          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    CONTINUE        reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    BREAK           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    RETURN          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    GOTO            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    WITH            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    UAMPERSAND      reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    EXCLAMATION     reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    UTIMES          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    UPLUS           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    UMINUS          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    PLUS_PLUS       reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    MINUS_MINUS     reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    LPAREN          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    DOT             reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    DOLLAR          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    THIS            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    NULL            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    TRUE            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    FALSE           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    INUMBER         reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    DNUMBER         reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    LIT_CHAR        reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    NEW             reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    DELETE          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    CAST            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    LBRACKET        reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    FUNCTION        reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    MIXIN           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    IMPORT          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    LIT_STR         reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    ALIAS           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    ENUM            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    CLASS           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    TILDE           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    UNION           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    CHAR            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    INT             reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    UINT            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    LONG            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    FLOAT           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    DOUBLE          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    BOOL            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    SHORT           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    USHORT          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    ULONG           reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    TYPEOF          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    RBRACE          reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    SEMICOLON       reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)
    ELSE            reduce using rule 243 (statementNoCaseNoDefault -> doStatement .)


state 370

    (266) switchStatement -> SWITCH . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 530


state 371

    (283) declarationOrStatement -> statement .

    PRIVATE         reduce using rule 283 (declarationOrStatement -> statement .)
    PROTECTED       reduce using rule 283 (declarationOrStatement -> statement .)
    PUBLIC          reduce using rule 283 (declarationOrStatement -> statement .)
    STATIC          reduce using rule 283 (declarationOrStatement -> statement .)
    EXTERN          reduce using rule 283 (declarationOrStatement -> statement .)
    FINAL           reduce using rule 283 (declarationOrStatement -> statement .)
    AUTO            reduce using rule 283 (declarationOrStatement -> statement .)
    CONST           reduce using rule 283 (declarationOrStatement -> statement .)
    IMMUTABLE       reduce using rule 283 (declarationOrStatement -> statement .)
    CASE            reduce using rule 283 (declarationOrStatement -> statement .)
    DEFAULT         reduce using rule 283 (declarationOrStatement -> statement .)
    IDENTIFIER      reduce using rule 283 (declarationOrStatement -> statement .)
    LBRACE          reduce using rule 283 (declarationOrStatement -> statement .)
    IF              reduce using rule 283 (declarationOrStatement -> statement .)
    WHILE           reduce using rule 283 (declarationOrStatement -> statement .)
    DO              reduce using rule 283 (declarationOrStatement -> statement .)
    FOR             reduce using rule 283 (declarationOrStatement -> statement .)
    FOREACH         reduce using rule 283 (declarationOrStatement -> statement .)
    FOREACH_REVERSE reduce using rule 283 (declarationOrStatement -> statement .)
    SWITCH          reduce using rule 283 (declarationOrStatement -> statement .)
    CONTINUE        reduce using rule 283 (declarationOrStatement -> statement .)
    BREAK           reduce using rule 283 (declarationOrStatement -> statement .)
    RETURN          reduce using rule 283 (declarationOrStatement -> statement .)
    GOTO            reduce using rule 283 (declarationOrStatement -> statement .)
    WITH            reduce using rule 283 (declarationOrStatement -> statement .)
    UAMPERSAND      reduce using rule 283 (declarationOrStatement -> statement .)
    EXCLAMATION     reduce using rule 283 (declarationOrStatement -> statement .)
    UTIMES          reduce using rule 283 (declarationOrStatement -> statement .)
    UPLUS           reduce using rule 283 (declarationOrStatement -> statement .)
    UMINUS          reduce using rule 283 (declarationOrStatement -> statement .)
    PLUS_PLUS       reduce using rule 283 (declarationOrStatement -> statement .)
    MINUS_MINUS     reduce using rule 283 (declarationOrStatement -> statement .)
    LPAREN          reduce using rule 283 (declarationOrStatement -> statement .)
    DOT             reduce using rule 283 (declarationOrStatement -> statement .)
    DOLLAR          reduce using rule 283 (declarationOrStatement -> statement .)
    THIS            reduce using rule 283 (declarationOrStatement -> statement .)
    NULL            reduce using rule 283 (declarationOrStatement -> statement .)
    TRUE            reduce using rule 283 (declarationOrStatement -> statement .)
    FALSE           reduce using rule 283 (declarationOrStatement -> statement .)
    INUMBER         reduce using rule 283 (declarationOrStatement -> statement .)
    DNUMBER         reduce using rule 283 (declarationOrStatement -> statement .)
    LIT_CHAR        reduce using rule 283 (declarationOrStatement -> statement .)
    NEW             reduce using rule 283 (declarationOrStatement -> statement .)
    DELETE          reduce using rule 283 (declarationOrStatement -> statement .)
    CAST            reduce using rule 283 (declarationOrStatement -> statement .)
    LBRACKET        reduce using rule 283 (declarationOrStatement -> statement .)
    FUNCTION        reduce using rule 283 (declarationOrStatement -> statement .)
    MIXIN           reduce using rule 283 (declarationOrStatement -> statement .)
    IMPORT          reduce using rule 283 (declarationOrStatement -> statement .)
    LIT_STR         reduce using rule 283 (declarationOrStatement -> statement .)
    ALIAS           reduce using rule 283 (declarationOrStatement -> statement .)
    ENUM            reduce using rule 283 (declarationOrStatement -> statement .)
    CLASS           reduce using rule 283 (declarationOrStatement -> statement .)
    TILDE           reduce using rule 283 (declarationOrStatement -> statement .)
    UNION           reduce using rule 283 (declarationOrStatement -> statement .)
    CHAR            reduce using rule 283 (declarationOrStatement -> statement .)
    INT             reduce using rule 283 (declarationOrStatement -> statement .)
    UINT            reduce using rule 283 (declarationOrStatement -> statement .)
    LONG            reduce using rule 283 (declarationOrStatement -> statement .)
    FLOAT           reduce using rule 283 (declarationOrStatement -> statement .)
    DOUBLE          reduce using rule 283 (declarationOrStatement -> statement .)
    BOOL            reduce using rule 283 (declarationOrStatement -> statement .)
    SHORT           reduce using rule 283 (declarationOrStatement -> statement .)
    USHORT          reduce using rule 283 (declarationOrStatement -> statement .)
    ULONG           reduce using rule 283 (declarationOrStatement -> statement .)
    TYPEOF          reduce using rule 283 (declarationOrStatement -> statement .)
    RBRACE          reduce using rule 283 (declarationOrStatement -> statement .)
    SEMICOLON       reduce using rule 283 (declarationOrStatement -> statement .)
    ELSE            reduce using rule 283 (declarationOrStatement -> statement .)


state 372

    (253) labeledStatement -> IDENTIFIER . COLON declarationOrStatement_question
    (315) identifierOrTemplateInstance -> IDENTIFIER .
    (347) functionLiteralExpression -> IDENTIFIER . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    COLON           shift and go to state 531
    POWER           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TIMES           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    MINUS           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    CARET           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    SEMICOLON       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! DOT             [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! MINUS_MINUS     [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 315 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 393
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 373

    (201) multipleattributes -> empty .
    (192) typeConstructors_quetsion -> empty .

  ! reduce/reduce conflict for THIS resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 192 (typeConstructors_quetsion -> empty .)
    ALIAS           reduce using rule 201 (multipleattributes -> empty .)
    ENUM            reduce using rule 201 (multipleattributes -> empty .)
    CLASS           reduce using rule 201 (multipleattributes -> empty .)
    TILDE           reduce using rule 201 (multipleattributes -> empty .)
    IMPORT          reduce using rule 201 (multipleattributes -> empty .)
    UNION           reduce using rule 201 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 201 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 201 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 201 (multipleattributes -> empty .)
    STATIC          reduce using rule 201 (multipleattributes -> empty .)
    EXTERN          reduce using rule 201 (multipleattributes -> empty .)
    FINAL           reduce using rule 201 (multipleattributes -> empty .)
    AUTO            reduce using rule 201 (multipleattributes -> empty .)
    MIXIN           reduce using rule 201 (multipleattributes -> empty .)
    DOUBLE          reduce using rule 201 (multipleattributes -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)

  ! THIS            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! CONST           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! CHAR            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! INT             [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! UINT            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! LONG            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! FLOAT           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! BOOL            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! SHORT           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! USHORT          [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! ULONG           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! TYPEOF          [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 201 (multipleattributes -> empty .) ]


state 374

    (282) declarationOrStatement -> declaration .

    PRIVATE         reduce using rule 282 (declarationOrStatement -> declaration .)
    PROTECTED       reduce using rule 282 (declarationOrStatement -> declaration .)
    PUBLIC          reduce using rule 282 (declarationOrStatement -> declaration .)
    STATIC          reduce using rule 282 (declarationOrStatement -> declaration .)
    EXTERN          reduce using rule 282 (declarationOrStatement -> declaration .)
    FINAL           reduce using rule 282 (declarationOrStatement -> declaration .)
    AUTO            reduce using rule 282 (declarationOrStatement -> declaration .)
    CONST           reduce using rule 282 (declarationOrStatement -> declaration .)
    IMMUTABLE       reduce using rule 282 (declarationOrStatement -> declaration .)
    CASE            reduce using rule 282 (declarationOrStatement -> declaration .)
    DEFAULT         reduce using rule 282 (declarationOrStatement -> declaration .)
    IDENTIFIER      reduce using rule 282 (declarationOrStatement -> declaration .)
    LBRACE          reduce using rule 282 (declarationOrStatement -> declaration .)
    IF              reduce using rule 282 (declarationOrStatement -> declaration .)
    WHILE           reduce using rule 282 (declarationOrStatement -> declaration .)
    DO              reduce using rule 282 (declarationOrStatement -> declaration .)
    FOR             reduce using rule 282 (declarationOrStatement -> declaration .)
    FOREACH         reduce using rule 282 (declarationOrStatement -> declaration .)
    FOREACH_REVERSE reduce using rule 282 (declarationOrStatement -> declaration .)
    SWITCH          reduce using rule 282 (declarationOrStatement -> declaration .)
    CONTINUE        reduce using rule 282 (declarationOrStatement -> declaration .)
    BREAK           reduce using rule 282 (declarationOrStatement -> declaration .)
    RETURN          reduce using rule 282 (declarationOrStatement -> declaration .)
    GOTO            reduce using rule 282 (declarationOrStatement -> declaration .)
    WITH            reduce using rule 282 (declarationOrStatement -> declaration .)
    UAMPERSAND      reduce using rule 282 (declarationOrStatement -> declaration .)
    EXCLAMATION     reduce using rule 282 (declarationOrStatement -> declaration .)
    UTIMES          reduce using rule 282 (declarationOrStatement -> declaration .)
    UPLUS           reduce using rule 282 (declarationOrStatement -> declaration .)
    UMINUS          reduce using rule 282 (declarationOrStatement -> declaration .)
    PLUS_PLUS       reduce using rule 282 (declarationOrStatement -> declaration .)
    MINUS_MINUS     reduce using rule 282 (declarationOrStatement -> declaration .)
    LPAREN          reduce using rule 282 (declarationOrStatement -> declaration .)
    DOT             reduce using rule 282 (declarationOrStatement -> declaration .)
    DOLLAR          reduce using rule 282 (declarationOrStatement -> declaration .)
    THIS            reduce using rule 282 (declarationOrStatement -> declaration .)
    NULL            reduce using rule 282 (declarationOrStatement -> declaration .)
    TRUE            reduce using rule 282 (declarationOrStatement -> declaration .)
    FALSE           reduce using rule 282 (declarationOrStatement -> declaration .)
    INUMBER         reduce using rule 282 (declarationOrStatement -> declaration .)
    DNUMBER         reduce using rule 282 (declarationOrStatement -> declaration .)
    LIT_CHAR        reduce using rule 282 (declarationOrStatement -> declaration .)
    NEW             reduce using rule 282 (declarationOrStatement -> declaration .)
    DELETE          reduce using rule 282 (declarationOrStatement -> declaration .)
    CAST            reduce using rule 282 (declarationOrStatement -> declaration .)
    LBRACKET        reduce using rule 282 (declarationOrStatement -> declaration .)
    FUNCTION        reduce using rule 282 (declarationOrStatement -> declaration .)
    MIXIN           reduce using rule 282 (declarationOrStatement -> declaration .)
    IMPORT          reduce using rule 282 (declarationOrStatement -> declaration .)
    LIT_STR         reduce using rule 282 (declarationOrStatement -> declaration .)
    ALIAS           reduce using rule 282 (declarationOrStatement -> declaration .)
    ENUM            reduce using rule 282 (declarationOrStatement -> declaration .)
    CLASS           reduce using rule 282 (declarationOrStatement -> declaration .)
    TILDE           reduce using rule 282 (declarationOrStatement -> declaration .)
    UNION           reduce using rule 282 (declarationOrStatement -> declaration .)
    CHAR            reduce using rule 282 (declarationOrStatement -> declaration .)
    INT             reduce using rule 282 (declarationOrStatement -> declaration .)
    UINT            reduce using rule 282 (declarationOrStatement -> declaration .)
    LONG            reduce using rule 282 (declarationOrStatement -> declaration .)
    FLOAT           reduce using rule 282 (declarationOrStatement -> declaration .)
    DOUBLE          reduce using rule 282 (declarationOrStatement -> declaration .)
    BOOL            reduce using rule 282 (declarationOrStatement -> declaration .)
    SHORT           reduce using rule 282 (declarationOrStatement -> declaration .)
    USHORT          reduce using rule 282 (declarationOrStatement -> declaration .)
    ULONG           reduce using rule 282 (declarationOrStatement -> declaration .)
    TYPEOF          reduce using rule 282 (declarationOrStatement -> declaration .)
    RBRACE          reduce using rule 282 (declarationOrStatement -> declaration .)
    SEMICOLON       reduce using rule 282 (declarationOrStatement -> declaration .)
    ELSE            reduce using rule 282 (declarationOrStatement -> declaration .)


state 375

    (271) breakStatement -> BREAK . SEMICOLON
    (272) breakStatement -> BREAK . IDENTIFIER SEMICOLON

    SEMICOLON       shift and go to state 533
    IDENTIFIER      shift and go to state 532


state 376

    (248) statementNoCaseNoDefault -> breakStatement .

    PRIVATE         reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    PROTECTED       reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    PUBLIC          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    STATIC          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    EXTERN          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    FINAL           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    AUTO            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    CONST           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    IMMUTABLE       reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    CASE            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    DEFAULT         reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    IDENTIFIER      reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    LBRACE          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    IF              reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    WHILE           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    DO              reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    FOR             reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    FOREACH         reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    FOREACH_REVERSE reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    SWITCH          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    CONTINUE        reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    BREAK           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    RETURN          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    GOTO            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    WITH            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    UAMPERSAND      reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    EXCLAMATION     reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    UTIMES          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    UPLUS           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    UMINUS          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    PLUS_PLUS       reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    MINUS_MINUS     reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    LPAREN          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    DOT             reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    DOLLAR          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    THIS            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    NULL            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    TRUE            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    FALSE           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    INUMBER         reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    DNUMBER         reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    LIT_CHAR        reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    NEW             reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    DELETE          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    CAST            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    LBRACKET        reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    FUNCTION        reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    MIXIN           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    IMPORT          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    LIT_STR         reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    ALIAS           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    ENUM            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    CLASS           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    TILDE           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    UNION           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    CHAR            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    INT             reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    UINT            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    LONG            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    FLOAT           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    DOUBLE          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    BOOL            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    SHORT           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    USHORT          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    ULONG           reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    TYPEOF          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    RBRACE          reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    SEMICOLON       reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)
    ELSE            reduce using rule 248 (statementNoCaseNoDefault -> breakStatement .)


state 377

    (250) statementNoCaseNoDefault -> gotoStatement .

    PRIVATE         reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    PROTECTED       reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    PUBLIC          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    STATIC          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    EXTERN          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    FINAL           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    AUTO            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    CONST           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    IMMUTABLE       reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    CASE            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    DEFAULT         reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    IDENTIFIER      reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    LBRACE          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    IF              reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    WHILE           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    DO              reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    FOR             reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    FOREACH         reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    FOREACH_REVERSE reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    SWITCH          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    CONTINUE        reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    BREAK           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    RETURN          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    GOTO            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    WITH            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    UAMPERSAND      reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    EXCLAMATION     reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    UTIMES          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    UPLUS           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    UMINUS          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    PLUS_PLUS       reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    MINUS_MINUS     reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    LPAREN          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    DOT             reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    DOLLAR          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    THIS            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    NULL            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    TRUE            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    FALSE           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    INUMBER         reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    DNUMBER         reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    LIT_CHAR        reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    NEW             reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    DELETE          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    CAST            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    LBRACKET        reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    FUNCTION        reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    MIXIN           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    IMPORT          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    LIT_STR         reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    ALIAS           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    ENUM            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    CLASS           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    TILDE           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    UNION           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    CHAR            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    INT             reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    UINT            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    LONG            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    FLOAT           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    DOUBLE          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    BOOL            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    SHORT           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    USHORT          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    ULONG           reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    TYPEOF          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    RBRACE          reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    SEMICOLON       reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)
    ELSE            reduce using rule 250 (statementNoCaseNoDefault -> gotoStatement .)


state 378

    (296) statement -> defaultStatement .

    PRIVATE         reduce using rule 296 (statement -> defaultStatement .)
    PROTECTED       reduce using rule 296 (statement -> defaultStatement .)
    PUBLIC          reduce using rule 296 (statement -> defaultStatement .)
    STATIC          reduce using rule 296 (statement -> defaultStatement .)
    EXTERN          reduce using rule 296 (statement -> defaultStatement .)
    FINAL           reduce using rule 296 (statement -> defaultStatement .)
    AUTO            reduce using rule 296 (statement -> defaultStatement .)
    CONST           reduce using rule 296 (statement -> defaultStatement .)
    IMMUTABLE       reduce using rule 296 (statement -> defaultStatement .)
    CASE            reduce using rule 296 (statement -> defaultStatement .)
    DEFAULT         reduce using rule 296 (statement -> defaultStatement .)
    IDENTIFIER      reduce using rule 296 (statement -> defaultStatement .)
    LBRACE          reduce using rule 296 (statement -> defaultStatement .)
    IF              reduce using rule 296 (statement -> defaultStatement .)
    WHILE           reduce using rule 296 (statement -> defaultStatement .)
    DO              reduce using rule 296 (statement -> defaultStatement .)
    FOR             reduce using rule 296 (statement -> defaultStatement .)
    FOREACH         reduce using rule 296 (statement -> defaultStatement .)
    FOREACH_REVERSE reduce using rule 296 (statement -> defaultStatement .)
    SWITCH          reduce using rule 296 (statement -> defaultStatement .)
    CONTINUE        reduce using rule 296 (statement -> defaultStatement .)
    BREAK           reduce using rule 296 (statement -> defaultStatement .)
    RETURN          reduce using rule 296 (statement -> defaultStatement .)
    GOTO            reduce using rule 296 (statement -> defaultStatement .)
    WITH            reduce using rule 296 (statement -> defaultStatement .)
    UAMPERSAND      reduce using rule 296 (statement -> defaultStatement .)
    EXCLAMATION     reduce using rule 296 (statement -> defaultStatement .)
    UTIMES          reduce using rule 296 (statement -> defaultStatement .)
    UPLUS           reduce using rule 296 (statement -> defaultStatement .)
    UMINUS          reduce using rule 296 (statement -> defaultStatement .)
    PLUS_PLUS       reduce using rule 296 (statement -> defaultStatement .)
    MINUS_MINUS     reduce using rule 296 (statement -> defaultStatement .)
    LPAREN          reduce using rule 296 (statement -> defaultStatement .)
    DOT             reduce using rule 296 (statement -> defaultStatement .)
    DOLLAR          reduce using rule 296 (statement -> defaultStatement .)
    THIS            reduce using rule 296 (statement -> defaultStatement .)
    NULL            reduce using rule 296 (statement -> defaultStatement .)
    TRUE            reduce using rule 296 (statement -> defaultStatement .)
    FALSE           reduce using rule 296 (statement -> defaultStatement .)
    INUMBER         reduce using rule 296 (statement -> defaultStatement .)
    DNUMBER         reduce using rule 296 (statement -> defaultStatement .)
    LIT_CHAR        reduce using rule 296 (statement -> defaultStatement .)
    NEW             reduce using rule 296 (statement -> defaultStatement .)
    DELETE          reduce using rule 296 (statement -> defaultStatement .)
    CAST            reduce using rule 296 (statement -> defaultStatement .)
    LBRACKET        reduce using rule 296 (statement -> defaultStatement .)
    FUNCTION        reduce using rule 296 (statement -> defaultStatement .)
    MIXIN           reduce using rule 296 (statement -> defaultStatement .)
    IMPORT          reduce using rule 296 (statement -> defaultStatement .)
    LIT_STR         reduce using rule 296 (statement -> defaultStatement .)
    ALIAS           reduce using rule 296 (statement -> defaultStatement .)
    ENUM            reduce using rule 296 (statement -> defaultStatement .)
    CLASS           reduce using rule 296 (statement -> defaultStatement .)
    TILDE           reduce using rule 296 (statement -> defaultStatement .)
    UNION           reduce using rule 296 (statement -> defaultStatement .)
    CHAR            reduce using rule 296 (statement -> defaultStatement .)
    INT             reduce using rule 296 (statement -> defaultStatement .)
    UINT            reduce using rule 296 (statement -> defaultStatement .)
    LONG            reduce using rule 296 (statement -> defaultStatement .)
    FLOAT           reduce using rule 296 (statement -> defaultStatement .)
    DOUBLE          reduce using rule 296 (statement -> defaultStatement .)
    BOOL            reduce using rule 296 (statement -> defaultStatement .)
    SHORT           reduce using rule 296 (statement -> defaultStatement .)
    USHORT          reduce using rule 296 (statement -> defaultStatement .)
    ULONG           reduce using rule 296 (statement -> defaultStatement .)
    TYPEOF          reduce using rule 296 (statement -> defaultStatement .)
    RBRACE          reduce using rule 296 (statement -> defaultStatement .)
    SEMICOLON       reduce using rule 296 (statement -> defaultStatement .)
    ELSE            reduce using rule 296 (statement -> defaultStatement .)


state 379

    (254) blockStatement -> LBRACE RBRACE .

    WHILE           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DOT             reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    PLUS_PLUS       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    MINUS_MINUS     reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    POWER           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    TIMES           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DIV             reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    MODULO          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    PLUS            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    MINUS           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    TILDE           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    RIGHT_SHIFT     reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LEFT_SHIFT      reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    IS_EQ           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    NOT_EQ          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    AMPERSAND       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    CARET           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    PIPE            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    QUESTION        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DOUBLE_PIPE     reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    ASSIGN          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_LEFT         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_RIGHT        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_PLUS         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_MINUS        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_TIMES        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_MODULO       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_AND_BIT      reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_DIV          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_OR_BIT       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EQ_XOR_BIT      reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    COMMA           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LESS            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LESS_EQ         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    GREATER         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    GREATER_EQ      reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    IS_EQ_DIFF      reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    NOT_EQ_DIFF     reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LESS_EQ_DIFF    reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LESS_DIFF       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    GREATER_EQ_DIFF reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    GREATER_DIFF    reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    PRIVATE         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    PROTECTED       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    PUBLIC          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    STATIC          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EXTERN          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    FINAL           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    AUTO            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    CONST           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    IMMUTABLE       reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    CASE            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DEFAULT         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    IF              reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DO              reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    FOR             reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    FOREACH         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    FOREACH_REVERSE reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    SWITCH          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    CONTINUE        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    BREAK           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    RETURN          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    GOTO            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    WITH            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    UAMPERSAND      reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    EXCLAMATION     reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    UTIMES          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    UPLUS           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    UMINUS          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DOLLAR          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    THIS            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    NULL            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    TRUE            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    FALSE           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    INUMBER         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DNUMBER         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LIT_CHAR        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    NEW             reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DELETE          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    CAST            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    MIXIN           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    IMPORT          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LIT_STR         reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    ALIAS           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    ENUM            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    CLASS           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    UNION           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    CHAR            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    INT             reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    UINT            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    LONG            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    FLOAT           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    DOUBLE          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    BOOL            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    SHORT           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    USHORT          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    ULONG           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    TYPEOF          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    ELSE            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    RPAREN          reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    RANGE           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    COLON           reduce using rule 254 (blockStatement -> LBRACE RBRACE .)
    $end            reduce using rule 254 (blockStatement -> LBRACE RBRACE .)


state 380

    (255) blockStatement -> LBRACE declarationsAndStatements . RBRACE

    RBRACE          shift and go to state 534


state 381

    (256) ifStatement -> IF . LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> IF . LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement

    LPAREN          shift and go to state 535


state 382

    (21) unaryExpression -> PLUS_PLUS unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    MINUS_MINUS     reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    POWER           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TIMES           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DIV             reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    MODULO          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    PLUS            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    MINUS           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TILDE           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IS_EQ           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    NOT_EQ          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    AMPERSAND       reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    CARET           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    PIPE            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    QUESTION        reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    ASSIGN          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_LEFT         reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_RIGHT        reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_PLUS         reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_MINUS        reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_TIMES        reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_MODULO       reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_DIV          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    COMMA           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    SEMICOLON       reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_EQ         reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER         reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_EQ      reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_DIFF       reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_DIFF    reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RPAREN          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RBRACKET        reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    COLON           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RANGE           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IDENTIFIER      reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    CONST           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IMMUTABLE       reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RBRACE          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    THIS            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    BOOL            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    SHORT           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    USHORT          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    INT             reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    UINT            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LONG            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    ULONG           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    CHAR            reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    FLOAT           reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TYPEOF          reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! LPAREN          [ reduce using rule 21 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 383

    (376) andExpression -> andExpression AMPERSAND . cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    shiftExpression                shift and go to state 234
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 536
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 384

    (17) unaryExpression -> EXCLAMATION unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    MINUS_MINUS     reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    POWER           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    TIMES           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    DIV             reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    MODULO          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    PLUS            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    MINUS           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    TILDE           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    RIGHT_SHIFT     reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    LEFT_SHIFT      reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    IS_EQ           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    NOT_EQ          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    AMPERSAND       reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    CARET           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    PIPE            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    QUESTION        reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOUBLE_PIPE     reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    ASSIGN          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_LEFT         reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_RIGHT        reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_PLUS         reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_MINUS        reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_TIMES        reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_MODULO       reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_AND_BIT      reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_DIV          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_OR_BIT       reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_XOR_BIT      reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    COMMA           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    SEMICOLON       reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_EQ         reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER         reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_EQ      reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    IS_EQ_DIFF      reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_DIFF       reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_DIFF    reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    RPAREN          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    RBRACKET        reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    COLON           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    RANGE           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    IDENTIFIER      reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    CONST           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    IMMUTABLE       reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    RBRACE          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    THIS            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    BOOL            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    SHORT           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    USHORT          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    INT             reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    UINT            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    LONG            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    ULONG           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    CHAR            reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    FLOAT           reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    TYPEOF          reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! LPAREN          [ reduce using rule 17 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 385

    (57) arguments_question -> arguments .

    CLASS           reduce using rule 57 (arguments_question -> arguments .)
    THIS            reduce using rule 57 (arguments_question -> arguments .)
    BOOL            reduce using rule 57 (arguments_question -> arguments .)
    SHORT           reduce using rule 57 (arguments_question -> arguments .)
    USHORT          reduce using rule 57 (arguments_question -> arguments .)
    INT             reduce using rule 57 (arguments_question -> arguments .)
    UINT            reduce using rule 57 (arguments_question -> arguments .)
    LONG            reduce using rule 57 (arguments_question -> arguments .)
    ULONG           reduce using rule 57 (arguments_question -> arguments .)
    CHAR            reduce using rule 57 (arguments_question -> arguments .)
    FLOAT           reduce using rule 57 (arguments_question -> arguments .)
    TYPEOF          reduce using rule 57 (arguments_question -> arguments .)
    CONST           reduce using rule 57 (arguments_question -> arguments .)
    IMMUTABLE       reduce using rule 57 (arguments_question -> arguments .)
    IDENTIFIER      reduce using rule 57 (arguments_question -> arguments .)
    LBRACE          reduce using rule 57 (arguments_question -> arguments .)


state 386

    (52) newExpression -> NEW type .
    (53) newExpression -> NEW type . LBRACKET assignExpression RBRACKET
    (54) newExpression -> NEW type . arguments
    (334) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 52 (newExpression -> NEW type .)
    PLUS_PLUS       reduce using rule 52 (newExpression -> NEW type .)
    MINUS_MINUS     reduce using rule 52 (newExpression -> NEW type .)
    POWER           reduce using rule 52 (newExpression -> NEW type .)
    TIMES           reduce using rule 52 (newExpression -> NEW type .)
    DIV             reduce using rule 52 (newExpression -> NEW type .)
    MODULO          reduce using rule 52 (newExpression -> NEW type .)
    PLUS            reduce using rule 52 (newExpression -> NEW type .)
    MINUS           reduce using rule 52 (newExpression -> NEW type .)
    TILDE           reduce using rule 52 (newExpression -> NEW type .)
    RIGHT_SHIFT     reduce using rule 52 (newExpression -> NEW type .)
    LEFT_SHIFT      reduce using rule 52 (newExpression -> NEW type .)
    IS_EQ           reduce using rule 52 (newExpression -> NEW type .)
    NOT_EQ          reduce using rule 52 (newExpression -> NEW type .)
    AMPERSAND       reduce using rule 52 (newExpression -> NEW type .)
    CARET           reduce using rule 52 (newExpression -> NEW type .)
    PIPE            reduce using rule 52 (newExpression -> NEW type .)
    DOUBLE_AMPERSAND reduce using rule 52 (newExpression -> NEW type .)
    QUESTION        reduce using rule 52 (newExpression -> NEW type .)
    DOUBLE_PIPE     reduce using rule 52 (newExpression -> NEW type .)
    ASSIGN          reduce using rule 52 (newExpression -> NEW type .)
    EQ_LEFT         reduce using rule 52 (newExpression -> NEW type .)
    EQ_RIGHT        reduce using rule 52 (newExpression -> NEW type .)
    EQ_PLUS         reduce using rule 52 (newExpression -> NEW type .)
    EQ_MINUS        reduce using rule 52 (newExpression -> NEW type .)
    EQ_TIMES        reduce using rule 52 (newExpression -> NEW type .)
    EQ_MODULO       reduce using rule 52 (newExpression -> NEW type .)
    EQ_AND_BIT      reduce using rule 52 (newExpression -> NEW type .)
    EQ_DIV          reduce using rule 52 (newExpression -> NEW type .)
    EQ_OR_BIT       reduce using rule 52 (newExpression -> NEW type .)
    EQ_XOR_BIT      reduce using rule 52 (newExpression -> NEW type .)
    RBRACKET        reduce using rule 52 (newExpression -> NEW type .)
    COMMA           reduce using rule 52 (newExpression -> NEW type .)
    LESS            reduce using rule 52 (newExpression -> NEW type .)
    LESS_EQ         reduce using rule 52 (newExpression -> NEW type .)
    GREATER         reduce using rule 52 (newExpression -> NEW type .)
    GREATER_EQ      reduce using rule 52 (newExpression -> NEW type .)
    IS_EQ_DIFF      reduce using rule 52 (newExpression -> NEW type .)
    NOT_EQ_DIFF     reduce using rule 52 (newExpression -> NEW type .)
    LESS_EQ_DIFF    reduce using rule 52 (newExpression -> NEW type .)
    LESS_DIFF       reduce using rule 52 (newExpression -> NEW type .)
    GREATER_EQ_DIFF reduce using rule 52 (newExpression -> NEW type .)
    GREATER_DIFF    reduce using rule 52 (newExpression -> NEW type .)
    SEMICOLON       reduce using rule 52 (newExpression -> NEW type .)
    RPAREN          reduce using rule 52 (newExpression -> NEW type .)
    RANGE           reduce using rule 52 (newExpression -> NEW type .)
    COLON           reduce using rule 52 (newExpression -> NEW type .)
    IDENTIFIER      reduce using rule 52 (newExpression -> NEW type .)
    CONST           reduce using rule 52 (newExpression -> NEW type .)
    IMMUTABLE       reduce using rule 52 (newExpression -> NEW type .)
    RBRACE          reduce using rule 52 (newExpression -> NEW type .)
    THIS            reduce using rule 52 (newExpression -> NEW type .)
    BOOL            reduce using rule 52 (newExpression -> NEW type .)
    SHORT           reduce using rule 52 (newExpression -> NEW type .)
    USHORT          reduce using rule 52 (newExpression -> NEW type .)
    INT             reduce using rule 52 (newExpression -> NEW type .)
    UINT            reduce using rule 52 (newExpression -> NEW type .)
    LONG            reduce using rule 52 (newExpression -> NEW type .)
    ULONG           reduce using rule 52 (newExpression -> NEW type .)
    CHAR            reduce using rule 52 (newExpression -> NEW type .)
    FLOAT           reduce using rule 52 (newExpression -> NEW type .)
    TYPEOF          reduce using rule 52 (newExpression -> NEW type .)
    LBRACKET        shift and go to state 537
    LPAREN          shift and go to state 389

  ! LBRACKET        [ reduce using rule 52 (newExpression -> NEW type .) ]
  ! LPAREN          [ reduce using rule 52 (newExpression -> NEW type .) ]

    arguments                      shift and go to state 538

state 387

    (58) arguments_question -> empty .
    (192) typeConstructors_quetsion -> empty .

    CLASS           reduce using rule 58 (arguments_question -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)


state 388

    (56) newAnonClassExpression -> NEW arguments_question . CLASS arguments_question baseClassList_question structBody

    CLASS           shift and go to state 539


state 389

    (334) arguments -> LPAREN . argumentList_question RPAREN
    (335) argumentList_question -> . argumentList
    (336) argumentList_question -> . empty
    (337) argumentList -> . assignExpression
    (338) argumentList -> . argumentList comma_assign
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RPAREN          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    argumentList                   shift and go to state 316
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    argumentList_question          shift and go to state 540
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 315
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    identifierOrTemplateInstance   shift and go to state 217
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 314
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    typeConstructor                shift and go to state 196
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229

state 390

    (34) primaryExpression -> DOT identifierOrTemplateInstance .
    (313) identifierOrTemplateChain -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LPAREN resolved using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOT             reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    POWER           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    CONST           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IMMUTABLE       reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RBRACE          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    THIS            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    BOOL            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    SHORT           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    USHORT          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    INT             reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    UINT            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LONG            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    ULONG           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    CHAR            reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    FLOAT           reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)
    TYPEOF          reduce using rule 34 (primaryExpression -> DOT identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 313 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]
  ! LPAREN          [ reduce using rule 313 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]


state 391

    (311) symbol -> DOT identifierOrTemplateChain .
    (314) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

    LPAREN          reduce using rule 311 (symbol -> DOT identifierOrTemplateChain .)
    DOT             shift and go to state 330


state 392

    (303) castExpression -> CAST LPAREN . RPAREN unaryExpression
    (304) castExpression -> CAST LPAREN . type RPAREN unaryExpression
    (305) castExpression -> CAST LPAREN . castQualifier RPAREN unaryExpression
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (306) castQualifier -> . CONST
    (307) castQualifier -> . IMMUTABLE
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RPAREN          shift and go to state 541
    CONST           shift and go to state 542
    IMMUTABLE       shift and go to state 545
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    typeConstructors_quetsion      shift and go to state 42
    castQualifier                  shift and go to state 543
    typeConstructors               shift and go to state 34
    type                           shift and go to state 544
    empty                          shift and go to state 139

state 393

    (347) functionLiteralExpression -> IDENTIFIER assignExpression .

    DOT             reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PLUS_PLUS       reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MINUS_MINUS     reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LBRACKET        reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LPAREN          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    POWER           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TIMES           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DIV             reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MODULO          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PLUS            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MINUS           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TILDE           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RIGHT_SHIFT     reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LEFT_SHIFT      reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IS_EQ           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    NOT_EQ          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    AMPERSAND       reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    CARET           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PIPE            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    QUESTION        reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DOUBLE_PIPE     reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    ASSIGN          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_LEFT         reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_RIGHT        reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_PLUS         reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_MINUS        reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_TIMES        reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_MODULO       reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_AND_BIT      reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_DIV          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_OR_BIT       reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_XOR_BIT      reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RPAREN          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_EQ         reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER         reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_EQ      reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IS_EQ_DIFF      reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    NOT_EQ_DIFF     reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_EQ_DIFF    reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_DIFF       reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_EQ_DIFF reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_DIFF    reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RBRACKET        reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RANGE           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    COMMA           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    SEMICOLON       reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    COLON           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IDENTIFIER      reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    CONST           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IMMUTABLE       reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RBRACE          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    THIS            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    BOOL            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    SHORT           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    USHORT          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    INT             reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    UINT            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LONG            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    ULONG           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    CHAR            reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    FLOAT           reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TYPEOF          reduce using rule 347 (functionLiteralExpression -> IDENTIFIER assignExpression .)


state 394

    (37) primaryExpression -> type arguments .
    (310) functionCallExpression -> type arguments .

  ! reduce/reduce conflict for DOT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LPAREN resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for POWER resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for DIV resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for MODULO resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for TILDE resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for CARET resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for PIPE resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for QUESTION resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for COMMA resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for COLON resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RANGE resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for CONST resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for THIS resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for BOOL resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for SHORT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for USHORT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for INT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for UINT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LONG resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for ULONG resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for CHAR resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for FLOAT resolved using rule 37 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 37 (primaryExpression -> type arguments .)
    DOT             reduce using rule 37 (primaryExpression -> type arguments .)
    PLUS_PLUS       reduce using rule 37 (primaryExpression -> type arguments .)
    MINUS_MINUS     reduce using rule 37 (primaryExpression -> type arguments .)
    LBRACKET        reduce using rule 37 (primaryExpression -> type arguments .)
    LPAREN          reduce using rule 37 (primaryExpression -> type arguments .)
    POWER           reduce using rule 37 (primaryExpression -> type arguments .)
    TIMES           reduce using rule 37 (primaryExpression -> type arguments .)
    DIV             reduce using rule 37 (primaryExpression -> type arguments .)
    MODULO          reduce using rule 37 (primaryExpression -> type arguments .)
    PLUS            reduce using rule 37 (primaryExpression -> type arguments .)
    MINUS           reduce using rule 37 (primaryExpression -> type arguments .)
    TILDE           reduce using rule 37 (primaryExpression -> type arguments .)
    RIGHT_SHIFT     reduce using rule 37 (primaryExpression -> type arguments .)
    LEFT_SHIFT      reduce using rule 37 (primaryExpression -> type arguments .)
    IS_EQ           reduce using rule 37 (primaryExpression -> type arguments .)
    NOT_EQ          reduce using rule 37 (primaryExpression -> type arguments .)
    AMPERSAND       reduce using rule 37 (primaryExpression -> type arguments .)
    CARET           reduce using rule 37 (primaryExpression -> type arguments .)
    PIPE            reduce using rule 37 (primaryExpression -> type arguments .)
    DOUBLE_AMPERSAND reduce using rule 37 (primaryExpression -> type arguments .)
    QUESTION        reduce using rule 37 (primaryExpression -> type arguments .)
    DOUBLE_PIPE     reduce using rule 37 (primaryExpression -> type arguments .)
    ASSIGN          reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_LEFT         reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_RIGHT        reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_PLUS         reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_MINUS        reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_TIMES        reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_MODULO       reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_AND_BIT      reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_DIV          reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_OR_BIT       reduce using rule 37 (primaryExpression -> type arguments .)
    EQ_XOR_BIT      reduce using rule 37 (primaryExpression -> type arguments .)
    RBRACKET        reduce using rule 37 (primaryExpression -> type arguments .)
    RANGE           reduce using rule 37 (primaryExpression -> type arguments .)
    LESS            reduce using rule 37 (primaryExpression -> type arguments .)
    LESS_EQ         reduce using rule 37 (primaryExpression -> type arguments .)
    GREATER         reduce using rule 37 (primaryExpression -> type arguments .)
    GREATER_EQ      reduce using rule 37 (primaryExpression -> type arguments .)
    IS_EQ_DIFF      reduce using rule 37 (primaryExpression -> type arguments .)
    NOT_EQ_DIFF     reduce using rule 37 (primaryExpression -> type arguments .)
    LESS_EQ_DIFF    reduce using rule 37 (primaryExpression -> type arguments .)
    LESS_DIFF       reduce using rule 37 (primaryExpression -> type arguments .)
    GREATER_EQ_DIFF reduce using rule 37 (primaryExpression -> type arguments .)
    GREATER_DIFF    reduce using rule 37 (primaryExpression -> type arguments .)
    RPAREN          reduce using rule 37 (primaryExpression -> type arguments .)
    COMMA           reduce using rule 37 (primaryExpression -> type arguments .)
    SEMICOLON       reduce using rule 37 (primaryExpression -> type arguments .)
    COLON           reduce using rule 37 (primaryExpression -> type arguments .)
    IDENTIFIER      reduce using rule 37 (primaryExpression -> type arguments .)
    CONST           reduce using rule 37 (primaryExpression -> type arguments .)
    IMMUTABLE       reduce using rule 37 (primaryExpression -> type arguments .)
    RBRACE          reduce using rule 37 (primaryExpression -> type arguments .)
    THIS            reduce using rule 37 (primaryExpression -> type arguments .)
    BOOL            reduce using rule 37 (primaryExpression -> type arguments .)
    SHORT           reduce using rule 37 (primaryExpression -> type arguments .)
    USHORT          reduce using rule 37 (primaryExpression -> type arguments .)
    INT             reduce using rule 37 (primaryExpression -> type arguments .)
    UINT            reduce using rule 37 (primaryExpression -> type arguments .)
    LONG            reduce using rule 37 (primaryExpression -> type arguments .)
    ULONG           reduce using rule 37 (primaryExpression -> type arguments .)
    CHAR            reduce using rule 37 (primaryExpression -> type arguments .)
    FLOAT           reduce using rule 37 (primaryExpression -> type arguments .)
    TYPEOF          reduce using rule 37 (primaryExpression -> type arguments .)

  ! DOT             [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! PLUS_PLUS       [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! MINUS_MINUS     [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LBRACKET        [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LPAREN          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! POWER           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! TIMES           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! DIV             [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! MODULO          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! PLUS            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! MINUS           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! TILDE           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! RIGHT_SHIFT     [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LEFT_SHIFT      [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! IS_EQ           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! NOT_EQ          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! AMPERSAND       [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! CARET           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! PIPE            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! QUESTION        [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! DOUBLE_PIPE     [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! ASSIGN          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_LEFT         [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_RIGHT        [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_PLUS         [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_MINUS        [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_TIMES        [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_MODULO       [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_AND_BIT      [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_DIV          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_OR_BIT       [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! EQ_XOR_BIT      [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! RBRACKET        [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LESS            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LESS_EQ         [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! GREATER         [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! GREATER_EQ      [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! IS_EQ_DIFF      [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LESS_DIFF       [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! GREATER_DIFF    [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! RPAREN          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! COMMA           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! COLON           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! SEMICOLON       [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! RANGE           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! IDENTIFIER      [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! CONST           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! IMMUTABLE       [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! RBRACE          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! THIS            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! BOOL            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! SHORT           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! USHORT          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! INT             [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! UINT            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! LONG            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! ULONG           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! CHAR            [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! FLOAT           [ reduce using rule 310 (functionCallExpression -> type arguments .) ]
  ! TYPEOF          [ reduce using rule 310 (functionCallExpression -> type arguments .) ]


state 395

    (36) primaryExpression -> type DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 546


state 396

    (365) ternaryExpression -> orOrExpression QUESTION . expression COLON ternaryExpression
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 547

state 397

    (368) orOrExpression -> orOrExpression DOUBLE_PIPE . andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 548
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 398

    (349) importExpression -> IMPORT LBRACKET . assignExpression RBRACKET
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 549
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 399

    (356) assignOperator -> EQ_RIGHT .

    UAMPERSAND      reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    EXCLAMATION     reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    UTIMES          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    UPLUS           reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    UMINUS          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    PLUS_PLUS       reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    MINUS_MINUS     reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    LPAREN          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    DOT             reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    DOLLAR          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    THIS            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    NULL            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    TRUE            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    FALSE           reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    INUMBER         reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    DNUMBER         reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    LIT_CHAR        reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    NEW             reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    DELETE          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    CAST            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    IDENTIFIER      reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    CONST           reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    IMMUTABLE       reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    LBRACKET        reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    FUNCTION        reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    MIXIN           reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    IMPORT          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    LIT_STR         reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    LBRACE          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    BOOL            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    SHORT           reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    USHORT          reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    INT             reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    UINT            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    LONG            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    ULONG           reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    CHAR            reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    FLOAT           reduce using rule 356 (assignOperator -> EQ_RIGHT .)
    TYPEOF          reduce using rule 356 (assignOperator -> EQ_RIGHT .)


state 400

    (361) assignOperator -> EQ_AND_BIT .

    UAMPERSAND      reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    EXCLAMATION     reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    UTIMES          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    UPLUS           reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    UMINUS          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    PLUS_PLUS       reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    MINUS_MINUS     reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    LPAREN          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    DOT             reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    DOLLAR          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    THIS            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    NULL            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    TRUE            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    FALSE           reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    INUMBER         reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    DNUMBER         reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    LIT_CHAR        reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    NEW             reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    DELETE          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    CAST            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    IDENTIFIER      reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    CONST           reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    IMMUTABLE       reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    LBRACKET        reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    FUNCTION        reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    MIXIN           reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    IMPORT          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    LIT_STR         reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    LBRACE          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    BOOL            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    SHORT           reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    USHORT          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    INT             reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    UINT            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    LONG            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    ULONG           reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    CHAR            reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    FLOAT           reduce using rule 361 (assignOperator -> EQ_AND_BIT .)
    TYPEOF          reduce using rule 361 (assignOperator -> EQ_AND_BIT .)


state 401

    (363) assignOperator -> EQ_OR_BIT .

    UAMPERSAND      reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    EXCLAMATION     reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    UTIMES          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    UPLUS           reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    UMINUS          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    PLUS_PLUS       reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    MINUS_MINUS     reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    LPAREN          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    DOT             reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    DOLLAR          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    THIS            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    NULL            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    TRUE            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    FALSE           reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    INUMBER         reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    DNUMBER         reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    LIT_CHAR        reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    NEW             reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    DELETE          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    CAST            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    IDENTIFIER      reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    CONST           reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    IMMUTABLE       reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    LBRACKET        reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    FUNCTION        reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    MIXIN           reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    IMPORT          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    LIT_STR         reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    LBRACE          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    BOOL            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    SHORT           reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    USHORT          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    INT             reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    UINT            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    LONG            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    ULONG           reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    CHAR            reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    FLOAT           reduce using rule 363 (assignOperator -> EQ_OR_BIT .)
    TYPEOF          reduce using rule 363 (assignOperator -> EQ_OR_BIT .)


state 402

    (357) assignOperator -> EQ_PLUS .

    UAMPERSAND      reduce using rule 357 (assignOperator -> EQ_PLUS .)
    EXCLAMATION     reduce using rule 357 (assignOperator -> EQ_PLUS .)
    UTIMES          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    UPLUS           reduce using rule 357 (assignOperator -> EQ_PLUS .)
    UMINUS          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    PLUS_PLUS       reduce using rule 357 (assignOperator -> EQ_PLUS .)
    MINUS_MINUS     reduce using rule 357 (assignOperator -> EQ_PLUS .)
    LPAREN          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    DOT             reduce using rule 357 (assignOperator -> EQ_PLUS .)
    DOLLAR          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    THIS            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    NULL            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    TRUE            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    FALSE           reduce using rule 357 (assignOperator -> EQ_PLUS .)
    INUMBER         reduce using rule 357 (assignOperator -> EQ_PLUS .)
    DNUMBER         reduce using rule 357 (assignOperator -> EQ_PLUS .)
    LIT_CHAR        reduce using rule 357 (assignOperator -> EQ_PLUS .)
    NEW             reduce using rule 357 (assignOperator -> EQ_PLUS .)
    DELETE          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    CAST            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    IDENTIFIER      reduce using rule 357 (assignOperator -> EQ_PLUS .)
    CONST           reduce using rule 357 (assignOperator -> EQ_PLUS .)
    IMMUTABLE       reduce using rule 357 (assignOperator -> EQ_PLUS .)
    LBRACKET        reduce using rule 357 (assignOperator -> EQ_PLUS .)
    FUNCTION        reduce using rule 357 (assignOperator -> EQ_PLUS .)
    MIXIN           reduce using rule 357 (assignOperator -> EQ_PLUS .)
    IMPORT          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    LIT_STR         reduce using rule 357 (assignOperator -> EQ_PLUS .)
    LBRACE          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    BOOL            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    SHORT           reduce using rule 357 (assignOperator -> EQ_PLUS .)
    USHORT          reduce using rule 357 (assignOperator -> EQ_PLUS .)
    INT             reduce using rule 357 (assignOperator -> EQ_PLUS .)
    UINT            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    LONG            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    ULONG           reduce using rule 357 (assignOperator -> EQ_PLUS .)
    CHAR            reduce using rule 357 (assignOperator -> EQ_PLUS .)
    FLOAT           reduce using rule 357 (assignOperator -> EQ_PLUS .)
    TYPEOF          reduce using rule 357 (assignOperator -> EQ_PLUS .)


state 403

    (362) assignOperator -> EQ_DIV .

    UAMPERSAND      reduce using rule 362 (assignOperator -> EQ_DIV .)
    EXCLAMATION     reduce using rule 362 (assignOperator -> EQ_DIV .)
    UTIMES          reduce using rule 362 (assignOperator -> EQ_DIV .)
    UPLUS           reduce using rule 362 (assignOperator -> EQ_DIV .)
    UMINUS          reduce using rule 362 (assignOperator -> EQ_DIV .)
    PLUS_PLUS       reduce using rule 362 (assignOperator -> EQ_DIV .)
    MINUS_MINUS     reduce using rule 362 (assignOperator -> EQ_DIV .)
    LPAREN          reduce using rule 362 (assignOperator -> EQ_DIV .)
    DOT             reduce using rule 362 (assignOperator -> EQ_DIV .)
    DOLLAR          reduce using rule 362 (assignOperator -> EQ_DIV .)
    THIS            reduce using rule 362 (assignOperator -> EQ_DIV .)
    NULL            reduce using rule 362 (assignOperator -> EQ_DIV .)
    TRUE            reduce using rule 362 (assignOperator -> EQ_DIV .)
    FALSE           reduce using rule 362 (assignOperator -> EQ_DIV .)
    INUMBER         reduce using rule 362 (assignOperator -> EQ_DIV .)
    DNUMBER         reduce using rule 362 (assignOperator -> EQ_DIV .)
    LIT_CHAR        reduce using rule 362 (assignOperator -> EQ_DIV .)
    NEW             reduce using rule 362 (assignOperator -> EQ_DIV .)
    DELETE          reduce using rule 362 (assignOperator -> EQ_DIV .)
    CAST            reduce using rule 362 (assignOperator -> EQ_DIV .)
    IDENTIFIER      reduce using rule 362 (assignOperator -> EQ_DIV .)
    CONST           reduce using rule 362 (assignOperator -> EQ_DIV .)
    IMMUTABLE       reduce using rule 362 (assignOperator -> EQ_DIV .)
    LBRACKET        reduce using rule 362 (assignOperator -> EQ_DIV .)
    FUNCTION        reduce using rule 362 (assignOperator -> EQ_DIV .)
    MIXIN           reduce using rule 362 (assignOperator -> EQ_DIV .)
    IMPORT          reduce using rule 362 (assignOperator -> EQ_DIV .)
    LIT_STR         reduce using rule 362 (assignOperator -> EQ_DIV .)
    LBRACE          reduce using rule 362 (assignOperator -> EQ_DIV .)
    BOOL            reduce using rule 362 (assignOperator -> EQ_DIV .)
    SHORT           reduce using rule 362 (assignOperator -> EQ_DIV .)
    USHORT          reduce using rule 362 (assignOperator -> EQ_DIV .)
    INT             reduce using rule 362 (assignOperator -> EQ_DIV .)
    UINT            reduce using rule 362 (assignOperator -> EQ_DIV .)
    LONG            reduce using rule 362 (assignOperator -> EQ_DIV .)
    ULONG           reduce using rule 362 (assignOperator -> EQ_DIV .)
    CHAR            reduce using rule 362 (assignOperator -> EQ_DIV .)
    FLOAT           reduce using rule 362 (assignOperator -> EQ_DIV .)
    TYPEOF          reduce using rule 362 (assignOperator -> EQ_DIV .)


state 404

    (364) assignOperator -> EQ_XOR_BIT .

    UAMPERSAND      reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    EXCLAMATION     reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    UTIMES          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    UPLUS           reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    UMINUS          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    PLUS_PLUS       reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    MINUS_MINUS     reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    LPAREN          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    DOT             reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    DOLLAR          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    THIS            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    NULL            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    TRUE            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    FALSE           reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    INUMBER         reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    DNUMBER         reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    LIT_CHAR        reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    NEW             reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    DELETE          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    CAST            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    IDENTIFIER      reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    CONST           reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    IMMUTABLE       reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    LBRACKET        reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    FUNCTION        reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    MIXIN           reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    IMPORT          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    LIT_STR         reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    LBRACE          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    BOOL            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    SHORT           reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    USHORT          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    INT             reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    UINT            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    LONG            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    ULONG           reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    CHAR            reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    FLOAT           reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)
    TYPEOF          reduce using rule 364 (assignOperator -> EQ_XOR_BIT .)


state 405

    (354) assignOperator -> ASSIGN .

    UAMPERSAND      reduce using rule 354 (assignOperator -> ASSIGN .)
    EXCLAMATION     reduce using rule 354 (assignOperator -> ASSIGN .)
    UTIMES          reduce using rule 354 (assignOperator -> ASSIGN .)
    UPLUS           reduce using rule 354 (assignOperator -> ASSIGN .)
    UMINUS          reduce using rule 354 (assignOperator -> ASSIGN .)
    PLUS_PLUS       reduce using rule 354 (assignOperator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 354 (assignOperator -> ASSIGN .)
    LPAREN          reduce using rule 354 (assignOperator -> ASSIGN .)
    DOT             reduce using rule 354 (assignOperator -> ASSIGN .)
    DOLLAR          reduce using rule 354 (assignOperator -> ASSIGN .)
    THIS            reduce using rule 354 (assignOperator -> ASSIGN .)
    NULL            reduce using rule 354 (assignOperator -> ASSIGN .)
    TRUE            reduce using rule 354 (assignOperator -> ASSIGN .)
    FALSE           reduce using rule 354 (assignOperator -> ASSIGN .)
    INUMBER         reduce using rule 354 (assignOperator -> ASSIGN .)
    DNUMBER         reduce using rule 354 (assignOperator -> ASSIGN .)
    LIT_CHAR        reduce using rule 354 (assignOperator -> ASSIGN .)
    NEW             reduce using rule 354 (assignOperator -> ASSIGN .)
    DELETE          reduce using rule 354 (assignOperator -> ASSIGN .)
    CAST            reduce using rule 354 (assignOperator -> ASSIGN .)
    IDENTIFIER      reduce using rule 354 (assignOperator -> ASSIGN .)
    CONST           reduce using rule 354 (assignOperator -> ASSIGN .)
    IMMUTABLE       reduce using rule 354 (assignOperator -> ASSIGN .)
    LBRACKET        reduce using rule 354 (assignOperator -> ASSIGN .)
    FUNCTION        reduce using rule 354 (assignOperator -> ASSIGN .)
    MIXIN           reduce using rule 354 (assignOperator -> ASSIGN .)
    IMPORT          reduce using rule 354 (assignOperator -> ASSIGN .)
    LIT_STR         reduce using rule 354 (assignOperator -> ASSIGN .)
    LBRACE          reduce using rule 354 (assignOperator -> ASSIGN .)
    BOOL            reduce using rule 354 (assignOperator -> ASSIGN .)
    SHORT           reduce using rule 354 (assignOperator -> ASSIGN .)
    USHORT          reduce using rule 354 (assignOperator -> ASSIGN .)
    INT             reduce using rule 354 (assignOperator -> ASSIGN .)
    UINT            reduce using rule 354 (assignOperator -> ASSIGN .)
    LONG            reduce using rule 354 (assignOperator -> ASSIGN .)
    ULONG           reduce using rule 354 (assignOperator -> ASSIGN .)
    CHAR            reduce using rule 354 (assignOperator -> ASSIGN .)
    FLOAT           reduce using rule 354 (assignOperator -> ASSIGN .)
    TYPEOF          reduce using rule 354 (assignOperator -> ASSIGN .)


state 406

    (355) assignOperator -> EQ_LEFT .

    UAMPERSAND      reduce using rule 355 (assignOperator -> EQ_LEFT .)
    EXCLAMATION     reduce using rule 355 (assignOperator -> EQ_LEFT .)
    UTIMES          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    UPLUS           reduce using rule 355 (assignOperator -> EQ_LEFT .)
    UMINUS          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    PLUS_PLUS       reduce using rule 355 (assignOperator -> EQ_LEFT .)
    MINUS_MINUS     reduce using rule 355 (assignOperator -> EQ_LEFT .)
    LPAREN          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    DOT             reduce using rule 355 (assignOperator -> EQ_LEFT .)
    DOLLAR          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    THIS            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    NULL            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    TRUE            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    FALSE           reduce using rule 355 (assignOperator -> EQ_LEFT .)
    INUMBER         reduce using rule 355 (assignOperator -> EQ_LEFT .)
    DNUMBER         reduce using rule 355 (assignOperator -> EQ_LEFT .)
    LIT_CHAR        reduce using rule 355 (assignOperator -> EQ_LEFT .)
    NEW             reduce using rule 355 (assignOperator -> EQ_LEFT .)
    DELETE          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    CAST            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    IDENTIFIER      reduce using rule 355 (assignOperator -> EQ_LEFT .)
    CONST           reduce using rule 355 (assignOperator -> EQ_LEFT .)
    IMMUTABLE       reduce using rule 355 (assignOperator -> EQ_LEFT .)
    LBRACKET        reduce using rule 355 (assignOperator -> EQ_LEFT .)
    FUNCTION        reduce using rule 355 (assignOperator -> EQ_LEFT .)
    MIXIN           reduce using rule 355 (assignOperator -> EQ_LEFT .)
    IMPORT          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    LIT_STR         reduce using rule 355 (assignOperator -> EQ_LEFT .)
    LBRACE          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    BOOL            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    SHORT           reduce using rule 355 (assignOperator -> EQ_LEFT .)
    USHORT          reduce using rule 355 (assignOperator -> EQ_LEFT .)
    INT             reduce using rule 355 (assignOperator -> EQ_LEFT .)
    UINT            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    LONG            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    ULONG           reduce using rule 355 (assignOperator -> EQ_LEFT .)
    CHAR            reduce using rule 355 (assignOperator -> EQ_LEFT .)
    FLOAT           reduce using rule 355 (assignOperator -> EQ_LEFT .)
    TYPEOF          reduce using rule 355 (assignOperator -> EQ_LEFT .)


state 407

    (360) assignOperator -> EQ_MODULO .

    UAMPERSAND      reduce using rule 360 (assignOperator -> EQ_MODULO .)
    EXCLAMATION     reduce using rule 360 (assignOperator -> EQ_MODULO .)
    UTIMES          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    UPLUS           reduce using rule 360 (assignOperator -> EQ_MODULO .)
    UMINUS          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    PLUS_PLUS       reduce using rule 360 (assignOperator -> EQ_MODULO .)
    MINUS_MINUS     reduce using rule 360 (assignOperator -> EQ_MODULO .)
    LPAREN          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    DOT             reduce using rule 360 (assignOperator -> EQ_MODULO .)
    DOLLAR          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    THIS            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    NULL            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    TRUE            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    FALSE           reduce using rule 360 (assignOperator -> EQ_MODULO .)
    INUMBER         reduce using rule 360 (assignOperator -> EQ_MODULO .)
    DNUMBER         reduce using rule 360 (assignOperator -> EQ_MODULO .)
    LIT_CHAR        reduce using rule 360 (assignOperator -> EQ_MODULO .)
    NEW             reduce using rule 360 (assignOperator -> EQ_MODULO .)
    DELETE          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    CAST            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    IDENTIFIER      reduce using rule 360 (assignOperator -> EQ_MODULO .)
    CONST           reduce using rule 360 (assignOperator -> EQ_MODULO .)
    IMMUTABLE       reduce using rule 360 (assignOperator -> EQ_MODULO .)
    LBRACKET        reduce using rule 360 (assignOperator -> EQ_MODULO .)
    FUNCTION        reduce using rule 360 (assignOperator -> EQ_MODULO .)
    MIXIN           reduce using rule 360 (assignOperator -> EQ_MODULO .)
    IMPORT          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    LIT_STR         reduce using rule 360 (assignOperator -> EQ_MODULO .)
    LBRACE          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    BOOL            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    SHORT           reduce using rule 360 (assignOperator -> EQ_MODULO .)
    USHORT          reduce using rule 360 (assignOperator -> EQ_MODULO .)
    INT             reduce using rule 360 (assignOperator -> EQ_MODULO .)
    UINT            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    LONG            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    ULONG           reduce using rule 360 (assignOperator -> EQ_MODULO .)
    CHAR            reduce using rule 360 (assignOperator -> EQ_MODULO .)
    FLOAT           reduce using rule 360 (assignOperator -> EQ_MODULO .)
    TYPEOF          reduce using rule 360 (assignOperator -> EQ_MODULO .)


state 408

    (358) assignOperator -> EQ_MINUS .

    UAMPERSAND      reduce using rule 358 (assignOperator -> EQ_MINUS .)
    EXCLAMATION     reduce using rule 358 (assignOperator -> EQ_MINUS .)
    UTIMES          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    UPLUS           reduce using rule 358 (assignOperator -> EQ_MINUS .)
    UMINUS          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    PLUS_PLUS       reduce using rule 358 (assignOperator -> EQ_MINUS .)
    MINUS_MINUS     reduce using rule 358 (assignOperator -> EQ_MINUS .)
    LPAREN          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    DOT             reduce using rule 358 (assignOperator -> EQ_MINUS .)
    DOLLAR          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    THIS            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    NULL            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    TRUE            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    FALSE           reduce using rule 358 (assignOperator -> EQ_MINUS .)
    INUMBER         reduce using rule 358 (assignOperator -> EQ_MINUS .)
    DNUMBER         reduce using rule 358 (assignOperator -> EQ_MINUS .)
    LIT_CHAR        reduce using rule 358 (assignOperator -> EQ_MINUS .)
    NEW             reduce using rule 358 (assignOperator -> EQ_MINUS .)
    DELETE          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    CAST            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    IDENTIFIER      reduce using rule 358 (assignOperator -> EQ_MINUS .)
    CONST           reduce using rule 358 (assignOperator -> EQ_MINUS .)
    IMMUTABLE       reduce using rule 358 (assignOperator -> EQ_MINUS .)
    LBRACKET        reduce using rule 358 (assignOperator -> EQ_MINUS .)
    FUNCTION        reduce using rule 358 (assignOperator -> EQ_MINUS .)
    MIXIN           reduce using rule 358 (assignOperator -> EQ_MINUS .)
    IMPORT          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    LIT_STR         reduce using rule 358 (assignOperator -> EQ_MINUS .)
    LBRACE          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    BOOL            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    SHORT           reduce using rule 358 (assignOperator -> EQ_MINUS .)
    USHORT          reduce using rule 358 (assignOperator -> EQ_MINUS .)
    INT             reduce using rule 358 (assignOperator -> EQ_MINUS .)
    UINT            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    LONG            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    ULONG           reduce using rule 358 (assignOperator -> EQ_MINUS .)
    CHAR            reduce using rule 358 (assignOperator -> EQ_MINUS .)
    FLOAT           reduce using rule 358 (assignOperator -> EQ_MINUS .)
    TYPEOF          reduce using rule 358 (assignOperator -> EQ_MINUS .)


state 409

    (353) assignExpression -> ternaryExpression assignOperator . expression
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 550

state 410

    (359) assignOperator -> EQ_TIMES .

    UAMPERSAND      reduce using rule 359 (assignOperator -> EQ_TIMES .)
    EXCLAMATION     reduce using rule 359 (assignOperator -> EQ_TIMES .)
    UTIMES          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    UPLUS           reduce using rule 359 (assignOperator -> EQ_TIMES .)
    UMINUS          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    PLUS_PLUS       reduce using rule 359 (assignOperator -> EQ_TIMES .)
    MINUS_MINUS     reduce using rule 359 (assignOperator -> EQ_TIMES .)
    LPAREN          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    DOT             reduce using rule 359 (assignOperator -> EQ_TIMES .)
    DOLLAR          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    THIS            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    NULL            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    TRUE            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    FALSE           reduce using rule 359 (assignOperator -> EQ_TIMES .)
    INUMBER         reduce using rule 359 (assignOperator -> EQ_TIMES .)
    DNUMBER         reduce using rule 359 (assignOperator -> EQ_TIMES .)
    LIT_CHAR        reduce using rule 359 (assignOperator -> EQ_TIMES .)
    NEW             reduce using rule 359 (assignOperator -> EQ_TIMES .)
    DELETE          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    CAST            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    IDENTIFIER      reduce using rule 359 (assignOperator -> EQ_TIMES .)
    CONST           reduce using rule 359 (assignOperator -> EQ_TIMES .)
    IMMUTABLE       reduce using rule 359 (assignOperator -> EQ_TIMES .)
    LBRACKET        reduce using rule 359 (assignOperator -> EQ_TIMES .)
    FUNCTION        reduce using rule 359 (assignOperator -> EQ_TIMES .)
    MIXIN           reduce using rule 359 (assignOperator -> EQ_TIMES .)
    IMPORT          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    LIT_STR         reduce using rule 359 (assignOperator -> EQ_TIMES .)
    LBRACE          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    BOOL            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    SHORT           reduce using rule 359 (assignOperator -> EQ_TIMES .)
    USHORT          reduce using rule 359 (assignOperator -> EQ_TIMES .)
    INT             reduce using rule 359 (assignOperator -> EQ_TIMES .)
    UINT            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    LONG            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    ULONG           reduce using rule 359 (assignOperator -> EQ_TIMES .)
    CHAR            reduce using rule 359 (assignOperator -> EQ_TIMES .)
    FLOAT           reduce using rule 359 (assignOperator -> EQ_TIMES .)
    TYPEOF          reduce using rule 359 (assignOperator -> EQ_TIMES .)


state 411

    (14) powExpression -> powExpression POWER . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 551
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 412

    (18) unaryExpression -> UTIMES unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    MINUS_MINUS     reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    POWER           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    TIMES           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    DIV             reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    MODULO          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    PLUS            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    MINUS           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    TILDE           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    RIGHT_SHIFT     reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    LEFT_SHIFT      reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    IS_EQ           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    NOT_EQ          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    AMPERSAND       reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    CARET           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    PIPE            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    QUESTION        reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    DOUBLE_PIPE     reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    ASSIGN          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_LEFT         reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_RIGHT        reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_PLUS         reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_MINUS        reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_TIMES        reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_MODULO       reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_AND_BIT      reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_DIV          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_OR_BIT       reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    EQ_XOR_BIT      reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    COMMA           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    SEMICOLON       reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    LESS            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    LESS_EQ         reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    GREATER         reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    GREATER_EQ      reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    IS_EQ_DIFF      reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    LESS_DIFF       reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    GREATER_DIFF    reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    RPAREN          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    RBRACKET        reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    COLON           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    RANGE           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    IDENTIFIER      reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    CONST           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    IMMUTABLE       reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    RBRACE          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    THIS            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    BOOL            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    SHORT           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    USHORT          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    INT             reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    UINT            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    LONG            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    ULONG           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    CHAR            reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    FLOAT           reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    TYPEOF          reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .) ]
  ! LPAREN          [ reduce using rule 18 (unaryExpression -> UTIMES unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 413

    (20) unaryExpression -> UMINUS unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    MINUS_MINUS     reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    POWER           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    TIMES           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    DIV             reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    MODULO          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    PLUS            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    MINUS           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    TILDE           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    IS_EQ           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    NOT_EQ          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    AMPERSAND       reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    CARET           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    PIPE            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    QUESTION        reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    ASSIGN          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_LEFT         reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_RIGHT        reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_PLUS         reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_MINUS        reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_TIMES        reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_MODULO       reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_DIV          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    COMMA           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    SEMICOLON       reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    LESS            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    LESS_EQ         reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    GREATER         reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    GREATER_EQ      reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    LESS_DIFF       reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    GREATER_DIFF    reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    RPAREN          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    RBRACKET        reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    COLON           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    RANGE           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    IDENTIFIER      reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    CONST           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    IMMUTABLE       reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    RBRACE          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    THIS            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    BOOL            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    SHORT           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    USHORT          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    INT             reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    UINT            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    LONG            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    ULONG           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    CHAR            reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    FLOAT           reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    TYPEOF          reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .) ]
  ! LPAREN          [ reduce using rule 20 (unaryExpression -> UMINUS unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 414

    (383) equalExpression -> shiftExpression IS_EQ . shiftExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    shiftExpression                shift and go to state 552
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 415

    (382) shiftExpression -> shiftExpression LEFT_SHIFT . addExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 553
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 416

    (381) shiftExpression -> shiftExpression RIGHT_SHIFT . addExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 554
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 417

    (384) equalExpression -> shiftExpression NOT_EQ . shiftExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    shiftExpression                shift and go to state 555
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 418

    (372) orExpression -> orExpression PIPE . xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 556
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 419

    (6) addExpression -> addExpression PLUS . mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 557
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 420

    (7) addExpression -> addExpression MINUS . mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 558
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 421

    (8) addExpression -> addExpression TILDE . mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 559
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 422

    (316) indexExpression -> unaryExpression LBRACKET . RBRACKET
    (317) indexExpression -> unaryExpression LBRACKET . index comma_index RBRACKET
    (320) index -> . assignExpression
    (321) index -> . assignExpression RANGE assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    RBRACKET        shift and go to state 562
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    orOrExpression                 shift and go to state 220
    shiftExpression                shift and go to state 234
    index                          shift and go to state 560
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 561
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 423

    (29) unaryExpression -> unaryExpression DOT . newExpression
    (30) unaryExpression -> unaryExpression DOT . identifierOrTemplateInstance
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody

    NEW             shift and go to state 213
    IDENTIFIER      shift and go to state 93

    newExpression                  shift and go to state 563
    newAnonClassExpression         shift and go to state 205
    identifierOrTemplateInstance   shift and go to state 564

state 424

    (31) unaryExpression -> unaryExpression PLUS_PLUS .

    DOT             reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LBRACKET        reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LPAREN          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    POWER           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TIMES           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DIV             reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MODULO          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PLUS            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MINUS           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TILDE           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RIGHT_SHIFT     reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LEFT_SHIFT      reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IS_EQ           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    NOT_EQ          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    AMPERSAND       reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    CARET           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PIPE            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    QUESTION        reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DOUBLE_PIPE     reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    ASSIGN          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_LEFT         reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_RIGHT        reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_PLUS         reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_MINUS        reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_TIMES        reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_MODULO       reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_AND_BIT      reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_DIV          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_OR_BIT       reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_XOR_BIT      reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    COMMA           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    SEMICOLON       reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_EQ         reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER         reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_EQ      reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IS_EQ_DIFF      reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    NOT_EQ_DIFF     reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_EQ_DIFF    reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_DIFF       reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_EQ_DIFF reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_DIFF    reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RPAREN          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RBRACKET        reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    COLON           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RANGE           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IDENTIFIER      reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    CONST           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IMMUTABLE       reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RBRACE          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    THIS            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    BOOL            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    SHORT           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    USHORT          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    INT             reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    UINT            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LONG            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    ULONG           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    CHAR            reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    FLOAT           reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TYPEOF          reduce using rule 31 (unaryExpression -> unaryExpression PLUS_PLUS .)


state 425

    (32) unaryExpression -> unaryExpression MINUS_MINUS .

    DOT             reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LBRACKET        reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LPAREN          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    POWER           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    TIMES           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    DIV             reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    MODULO          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    PLUS            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    MINUS           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    TILDE           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RIGHT_SHIFT     reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LEFT_SHIFT      reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    IS_EQ           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    NOT_EQ          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    AMPERSAND       reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    CARET           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    PIPE            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    QUESTION        reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    DOUBLE_PIPE     reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    ASSIGN          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_LEFT         reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_RIGHT        reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_PLUS         reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_MINUS        reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_TIMES        reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_MODULO       reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_AND_BIT      reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_DIV          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_OR_BIT       reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_XOR_BIT      reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    COMMA           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    SEMICOLON       reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS_EQ         reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER         reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER_EQ      reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    IS_EQ_DIFF      reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    NOT_EQ_DIFF     reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS_EQ_DIFF    reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS_DIFF       reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER_EQ_DIFF reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER_DIFF    reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RPAREN          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RBRACKET        reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    COLON           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RANGE           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    IDENTIFIER      reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    CONST           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    IMMUTABLE       reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RBRACE          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    THIS            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    BOOL            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    SHORT           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    USHORT          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    INT             reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    UINT            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LONG            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    ULONG           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    CHAR            reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    FLOAT           reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)
    TYPEOF          reduce using rule 32 (unaryExpression -> unaryExpression MINUS_MINUS .)


state 426

    (309) functionCallExpression -> unaryExpression arguments .

    DOT             reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    PLUS_PLUS       reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    MINUS_MINUS     reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LBRACKET        reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LPAREN          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    POWER           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    TIMES           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    DIV             reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    MODULO          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    PLUS            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    MINUS           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    TILDE           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    RIGHT_SHIFT     reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LEFT_SHIFT      reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    IS_EQ           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    NOT_EQ          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    AMPERSAND       reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    CARET           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    PIPE            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    DOUBLE_AMPERSAND reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    QUESTION        reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    DOUBLE_PIPE     reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    ASSIGN          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_LEFT         reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_RIGHT        reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_PLUS         reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_MINUS        reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_TIMES        reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_MODULO       reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_AND_BIT      reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_DIV          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_OR_BIT       reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    EQ_XOR_BIT      reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    RBRACKET        reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LESS            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LESS_EQ         reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    GREATER         reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    GREATER_EQ      reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    IS_EQ_DIFF      reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    NOT_EQ_DIFF     reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LESS_EQ_DIFF    reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LESS_DIFF       reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    GREATER_EQ_DIFF reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    GREATER_DIFF    reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    RPAREN          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    COMMA           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    COLON           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    SEMICOLON       reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    RANGE           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    IDENTIFIER      reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    CONST           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    IMMUTABLE       reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    RBRACE          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    THIS            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    BOOL            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    SHORT           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    USHORT          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    INT             reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    UINT            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    LONG            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    ULONG           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    CHAR            reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    FLOAT           reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)
    TYPEOF          reduce using rule 309 (functionCallExpression -> unaryExpression arguments .)


state 427

    (308) functionCallExpression -> symbol arguments .

    DOT             reduce using rule 308 (functionCallExpression -> symbol arguments .)
    PLUS_PLUS       reduce using rule 308 (functionCallExpression -> symbol arguments .)
    MINUS_MINUS     reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LBRACKET        reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LPAREN          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    POWER           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    TIMES           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    DIV             reduce using rule 308 (functionCallExpression -> symbol arguments .)
    MODULO          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    PLUS            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    MINUS           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    TILDE           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    RIGHT_SHIFT     reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LEFT_SHIFT      reduce using rule 308 (functionCallExpression -> symbol arguments .)
    IS_EQ           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    NOT_EQ          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    AMPERSAND       reduce using rule 308 (functionCallExpression -> symbol arguments .)
    CARET           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    PIPE            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    DOUBLE_AMPERSAND reduce using rule 308 (functionCallExpression -> symbol arguments .)
    QUESTION        reduce using rule 308 (functionCallExpression -> symbol arguments .)
    DOUBLE_PIPE     reduce using rule 308 (functionCallExpression -> symbol arguments .)
    ASSIGN          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_LEFT         reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_RIGHT        reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_PLUS         reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_MINUS        reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_TIMES        reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_MODULO       reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_AND_BIT      reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_DIV          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_OR_BIT       reduce using rule 308 (functionCallExpression -> symbol arguments .)
    EQ_XOR_BIT      reduce using rule 308 (functionCallExpression -> symbol arguments .)
    RBRACKET        reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LESS            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LESS_EQ         reduce using rule 308 (functionCallExpression -> symbol arguments .)
    GREATER         reduce using rule 308 (functionCallExpression -> symbol arguments .)
    GREATER_EQ      reduce using rule 308 (functionCallExpression -> symbol arguments .)
    IS_EQ_DIFF      reduce using rule 308 (functionCallExpression -> symbol arguments .)
    NOT_EQ_DIFF     reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LESS_EQ_DIFF    reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LESS_DIFF       reduce using rule 308 (functionCallExpression -> symbol arguments .)
    GREATER_EQ_DIFF reduce using rule 308 (functionCallExpression -> symbol arguments .)
    GREATER_DIFF    reduce using rule 308 (functionCallExpression -> symbol arguments .)
    RPAREN          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    COMMA           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    COLON           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    SEMICOLON       reduce using rule 308 (functionCallExpression -> symbol arguments .)
    RANGE           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    IDENTIFIER      reduce using rule 308 (functionCallExpression -> symbol arguments .)
    CONST           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    IMMUTABLE       reduce using rule 308 (functionCallExpression -> symbol arguments .)
    RBRACE          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    THIS            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    BOOL            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    SHORT           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    USHORT          reduce using rule 308 (functionCallExpression -> symbol arguments .)
    INT             reduce using rule 308 (functionCallExpression -> symbol arguments .)
    UINT            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    LONG            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    ULONG           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    CHAR            reduce using rule 308 (functionCallExpression -> symbol arguments .)
    FLOAT           reduce using rule 308 (functionCallExpression -> symbol arguments .)
    TYPEOF          reduce using rule 308 (functionCallExpression -> symbol arguments .)


state 428

    (39) primaryExpression -> LPAREN expression . RPAREN
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 565
    COMMA           shift and go to state 472


state 429

    (28) unaryExpression -> LPAREN type . RPAREN DOT identifierOrTemplateInstance
    (36) primaryExpression -> type . DOT IDENTIFIER
    (37) primaryExpression -> type . arguments
    (310) functionCallExpression -> type . arguments
    (334) arguments -> . LPAREN argumentList_question RPAREN

    RPAREN          shift and go to state 566
    DOT             shift and go to state 395
    LPAREN          shift and go to state 389

    arguments                      shift and go to state 394

state 430

    (350) LIT_STRPlus -> LIT_STR LIT_STRPlus .

    DOT             reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LBRACKET        reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LPAREN          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    POWER           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TIMES           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DIV             reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MODULO          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TILDE           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    AMPERSAND       reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    CARET           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PIPE            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    QUESTION        reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    ASSIGN          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_LEFT         reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_PLUS         reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MINUS        reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_TIMES        reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MODULO       reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_DIV          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    SEMICOLON       reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COMMA           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ         reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER         reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ      reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ_DIFF      reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ_DIFF     reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ_DIFF    reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_DIFF       reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ_DIFF reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_DIFF    reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RPAREN          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACKET        reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RANGE           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COLON           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IDENTIFIER      reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    CONST           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IMMUTABLE       reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACE          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    THIS            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    BOOL            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    SHORT           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    USHORT          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    INT             reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    UINT            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LONG            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    ULONG           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    CHAR            reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    FLOAT           reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TYPEOF          reduce using rule 350 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)


state 431

    (63) declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .

    PRIVATE         reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PROTECTED       reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PUBLIC          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    STATIC          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    EXTERN          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FINAL           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    AUTO            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CONST           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IMMUTABLE       reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CASE            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DEFAULT         reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IDENTIFIER      reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LBRACE          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IF              reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    WHILE           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DO              reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FOR             reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FOREACH         reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FOREACH_REVERSE reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    SWITCH          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CONTINUE        reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    BREAK           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    RETURN          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    GOTO            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    WITH            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UAMPERSAND      reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    EXCLAMATION     reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UTIMES          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UPLUS           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UMINUS          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    PLUS_PLUS       reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    MINUS_MINUS     reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LPAREN          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DOT             reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DOLLAR          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    THIS            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    NULL            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TRUE            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FALSE           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    INUMBER         reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DNUMBER         reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LIT_CHAR        reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    NEW             reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DELETE          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CAST            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LBRACKET        reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FUNCTION        reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    MIXIN           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    IMPORT          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LIT_STR         reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ALIAS           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ENUM            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CLASS           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TILDE           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UNION           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    CHAR            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    INT             reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    UINT            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    LONG            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    FLOAT           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    DOUBLE          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    BOOL            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    SHORT           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    USHORT          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ULONG           reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    TYPEOF          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    RBRACE          reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    SEMICOLON       reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    ELSE            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)
    $end            reduce using rule 63 (declaration -> attribute multipleattributes LBRACE multiple_declaration RBRACE .)


state 432

    (161) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute . functionBody
    (162) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute . SEMICOLON
    (341) functionBody -> . blockStatement
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 568
    LBRACE          shift and go to state 207

    functionBody                   shift and go to state 567
    blockStatement                 shift and go to state 237

state 433

    (124) importBindings -> singleImport COLON importBind importBindstr .

    SEMICOLON       reduce using rule 124 (importBindings -> singleImport COLON importBind importBindstr .)


state 434

    (125) importBindstr -> COMMA . importBind importBindstr
    (122) importBind -> . IDENTIFIER
    (123) importBind -> . IDENTIFIER ASSIGN IDENTIFIER

    IDENTIFIER      shift and go to state 250

    importBind                     shift and go to state 569

state 435

    (126) importBindstr -> empty .

    SEMICOLON       reduce using rule 126 (importBindstr -> empty .)


state 436

    (123) importBind -> IDENTIFIER ASSIGN . IDENTIFIER

    IDENTIFIER      shift and go to state 570


state 437

    (118) comma_singleImport -> COMMA singleImport comma_singleImport .

    COMMA           reduce using rule 118 (comma_singleImport -> COMMA singleImport comma_singleImport .)
    SEMICOLON       reduce using rule 118 (comma_singleImport -> COMMA singleImport comma_singleImport .)


state 438

    (115) importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings . SEMICOLON

    SEMICOLON       shift and go to state 571


state 439

    (124) importBindings -> singleImport . COLON importBind importBindstr

    COLON           shift and go to state 125


state 440

    (128) multiple_dot_identifier -> DOT IDENTIFIER multiple_dot_identifier .

    COLON           reduce using rule 128 (multiple_dot_identifier -> DOT IDENTIFIER multiple_dot_identifier .)
    COMMA           reduce using rule 128 (multiple_dot_identifier -> DOT IDENTIFIER multiple_dot_identifier .)
    SEMICOLON       reduce using rule 128 (multiple_dot_identifier -> DOT IDENTIFIER multiple_dot_identifier .)


state 441

    (150) functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOUBLE          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    $end            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UAMPERSAND      reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UTIMES          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UPLUS           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UMINUS          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MINUS_MINUS     reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 150 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)


state 442

    (149) functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOUBLE          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    $end            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UAMPERSAND      reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UTIMES          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UPLUS           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UMINUS          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MINUS_MINUS     reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 149 (functionDeclaration -> type IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)


state 443

    (212) baseClassList -> baseClass comma_baseclass_multiple .

    LBRACE          reduce using rule 212 (baseClassList -> baseClass comma_baseclass_multiple .)


state 444

    (213) comma_baseclass_multiple -> COMMA . baseClass comma_baseclass_multiple
    (211) baseClass -> . type2
    (215) type2 -> . builtinType
    (216) type2 -> . typeIdentifierPart
    (217) type2 -> . THIS DOT typeIdentifierPart
    (218) type2 -> . typeofExpression typeIdentifierPart_question
    (219) type2 -> . typeConstructor LPAREN type RPAREN
    (323) builtinType -> . BOOL
    (324) builtinType -> . SHORT
    (325) builtinType -> . USHORT
    (326) builtinType -> . INT
    (327) builtinType -> . UINT
    (328) builtinType -> . LONG
    (329) builtinType -> . ULONG
    (330) builtinType -> . CHAR
    (331) builtinType -> . FLOAT
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (237) typeofExpression -> . TYPEOF LPAREN expression RPAREN
    (238) typeofExpression -> . TYPEOF LPAREN RETURN RPAREN
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    THIS            shift and go to state 97
    BOOL            shift and go to state 101
    SHORT           shift and go to state 86
    USHORT          shift and go to state 98
    INT             shift and go to state 100
    UINT            shift and go to state 96
    LONG            shift and go to state 91
    ULONG           shift and go to state 90
    CHAR            shift and go to state 87
    FLOAT           shift and go to state 99
    TYPEOF          shift and go to state 102
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 93

    builtinType                    shift and go to state 94
    typeIdentifierPart             shift and go to state 95
    typeofExpression               shift and go to state 88
    identifierOrTemplateInstance   shift and go to state 92
    typeConstructor                shift and go to state 103
    baseClass                      shift and go to state 572
    type2                          shift and go to state 258

state 445

    (214) comma_baseclass_multiple -> empty .

    LBRACE          reduce using rule 214 (comma_baseclass_multiple -> empty .)


state 446

    (180) classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .

    PRIVATE         reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    PROTECTED       reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    PUBLIC          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    STATIC          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    EXTERN          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FINAL           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    AUTO            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CONST           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IMMUTABLE       reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ALIAS           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ENUM            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CLASS           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    THIS            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TILDE           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IMPORT          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UNION           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    MIXIN           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CHAR            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    INT             reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UINT            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LONG            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FLOAT           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DOUBLE          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    BOOL            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    SHORT           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    USHORT          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ULONG           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TYPEOF          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IDENTIFIER      reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    $end            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    RBRACE          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CASE            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DEFAULT         reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LBRACE          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    IF              reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    WHILE           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DO              reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FOR             reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FOREACH         reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FOREACH_REVERSE reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    SWITCH          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CONTINUE        reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    BREAK           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    RETURN          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    GOTO            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    WITH            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UAMPERSAND      reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    EXCLAMATION     reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UTIMES          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UPLUS           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    UMINUS          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    PLUS_PLUS       reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    MINUS_MINUS     reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LPAREN          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DOT             reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DOLLAR          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    NULL            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    TRUE            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FALSE           reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    INUMBER         reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DNUMBER         reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LIT_CHAR        reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    NEW             reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    DELETE          reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    CAST            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LBRACKET        reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    FUNCTION        reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    LIT_STR         reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    SEMICOLON       reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)
    ELSE            reduce using rule 180 (classDeclaration -> CLASS IDENTIFIER COLON baseClassList structBody .)


state 447

    (167) anonymousEnumMember -> IDENTIFIER ASSIGN . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 573
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 448

    (166) anonymousEnumMember -> type IDENTIFIER . ASSIGN assignExpression

    ASSIGN          shift and go to state 574


state 449

    (173) anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember . RBRACE

    RBRACE          shift and go to state 575


state 450

    (171) multipleanonymousEnumMember -> anonymousEnumMember . multipleanonymousEnumMember
    (171) multipleanonymousEnumMember -> . anonymousEnumMember multipleanonymousEnumMember
    (172) multipleanonymousEnumMember -> . empty
    (166) anonymousEnumMember -> . type IDENTIFIER ASSIGN assignExpression
    (167) anonymousEnumMember -> . IDENTIFIER ASSIGN assignExpression
    (168) anonymousEnumMember -> . IDENTIFIER
    (397) empty -> .
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      shift and go to state 261
    RBRACE          reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    multipleanonymousEnumMember    shift and go to state 576
    typeConstructors_quetsion      shift and go to state 42
    typeConstructors               shift and go to state 34
    type                           shift and go to state 262
    anonymousEnumMember            shift and go to state 450
    empty                          shift and go to state 451

state 451

    (172) multipleanonymousEnumMember -> empty .
    (192) typeConstructors_quetsion -> empty .

    RBRACE          reduce using rule 172 (multipleanonymousEnumMember -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)


state 452

    (163) enumBody -> LBRACE enumMember . comma_enumMember RBRACE
    (164) comma_enumMember -> . COMMA enumMember comma_enumMember
    (165) comma_enumMember -> . empty
    (397) empty -> .

    COMMA           shift and go to state 578
    RBRACE          reduce using rule 397 (empty -> .)

    comma_enumMember               shift and go to state 577
    empty                          shift and go to state 579

state 453

    (176) enumMember -> IDENTIFIER .
    (177) enumMember -> IDENTIFIER . ASSIGN assignExpression

    COMMA           reduce using rule 176 (enumMember -> IDENTIFIER .)
    RBRACE          reduce using rule 176 (enumMember -> IDENTIFIER .)
    ASSIGN          shift and go to state 580


state 454

    (90) CommaDeclarator -> COMMA declarator . CommaDeclarator
    (90) CommaDeclarator -> . COMMA declarator CommaDeclarator
    (91) CommaDeclarator -> . empty
    (397) empty -> .

    COMMA           shift and go to state 268
    SEMICOLON       reduce using rule 397 (empty -> .)

    CommaDeclarator                shift and go to state 581
    empty                          shift and go to state 270

state 455

    (98) declarator -> IDENTIFIER .
    (99) declarator -> IDENTIFIER . ASSIGN initializer

    COMMA           reduce using rule 98 (declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 98 (declarator -> IDENTIFIER .)
    ASSIGN          shift and go to state 582


state 456

    (81) variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .

    PRIVATE         reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    PROTECTED       reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    PUBLIC          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    STATIC          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    EXTERN          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    FINAL           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    AUTO            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    CONST           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    IMMUTABLE       reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    ALIAS           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    ENUM            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    CLASS           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    THIS            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    TILDE           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    IMPORT          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    UNION           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    MIXIN           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    CHAR            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    INT             reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    UINT            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    LONG            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    FLOAT           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    DOUBLE          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    BOOL            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    SHORT           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    USHORT          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    ULONG           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    TYPEOF          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    IDENTIFIER      reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    $end            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    RBRACE          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    CASE            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    DEFAULT         reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    LBRACE          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    IF              reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    WHILE           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    DO              reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    FOR             reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    FOREACH         reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    FOREACH_REVERSE reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    SWITCH          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    CONTINUE        reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    BREAK           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    RETURN          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    GOTO            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    WITH            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    UAMPERSAND      reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    EXCLAMATION     reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    UTIMES          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    UPLUS           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    UMINUS          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    PLUS_PLUS       reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    MINUS_MINUS     reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    LPAREN          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    DOT             reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    DOLLAR          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    NULL            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    TRUE            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    FALSE           reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    INUMBER         reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    DNUMBER         reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    LIT_CHAR        reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    NEW             reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    DELETE          reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    CAST            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    LBRACKET        reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    FUNCTION        reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    LIT_STR         reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    SEMICOLON       reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)
    ELSE            reduce using rule 81 (variableDeclaration -> multiplestorageClass BasicTypeX declarator CommaDeclarator SEMICOLON .)


state 457

    (100) initializer -> VOID .

    COMMA           reduce using rule 100 (initializer -> VOID .)
    SEMICOLON       reduce using rule 100 (initializer -> VOID .)


state 458

    (104) arrayInitializer -> LBRACKET . RBRACKET
    (105) arrayInitializer -> LBRACKET . arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (108) arrayLiteral -> LBRACKET . argumentList_question RBRACKET
    (109) arrayMemberInitialization -> . assignExpression COLON nonVoidInitializer
    (110) arrayMemberInitialization -> . nonVoidInitializer
    (335) argumentList_question -> . argumentList
    (336) argumentList_question -> . empty
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (102) nonVoidInitializer -> . assignExpression
    (103) nonVoidInitializer -> . arrayInitializer
    (337) argumentList -> . assignExpression
    (338) argumentList -> . argumentList comma_assign
    (397) empty -> .
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (104) arrayInitializer -> . LBRACKET RBRACKET
    (105) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for RBRACKET resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RBRACKET        shift and go to state 586
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACKET        shift and go to state 458
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! RBRACKET        [ reduce using rule 397 (empty -> .) ]
  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    argumentList                   shift and go to state 316
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    arrayInitializer               shift and go to state 462
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    argumentList_question          shift and go to state 313
    addExpression                  shift and go to state 238
    arrayMemberInitialization      shift and go to state 584
    empty                          shift and go to state 315
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    LIT_STRPlus                    shift and go to state 227
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    nonVoidInitializer             shift and go to state 583
    identifierOrTemplateInstance   shift and go to state 217
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 585
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    typeConstructor                shift and go to state 196
    ternaryExpression              shift and go to state 226
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229

state 459

    (101) initializer -> nonVoidInitializer .

    COMMA           reduce using rule 101 (initializer -> nonVoidInitializer .)
    SEMICOLON       reduce using rule 101 (initializer -> nonVoidInitializer .)


state 460

    (99) declarator -> IDENTIFIER ASSIGN initializer .

    COMMA           reduce using rule 99 (declarator -> IDENTIFIER ASSIGN initializer .)
    SEMICOLON       reduce using rule 99 (declarator -> IDENTIFIER ASSIGN initializer .)


state 461

    (102) nonVoidInitializer -> assignExpression .

    COMMA           reduce using rule 102 (nonVoidInitializer -> assignExpression .)
    SEMICOLON       reduce using rule 102 (nonVoidInitializer -> assignExpression .)
    RBRACKET        reduce using rule 102 (nonVoidInitializer -> assignExpression .)


state 462

    (103) nonVoidInitializer -> arrayInitializer .

    COMMA           reduce using rule 103 (nonVoidInitializer -> arrayInitializer .)
    SEMICOLON       reduce using rule 103 (nonVoidInitializer -> arrayInitializer .)
    RBRACKET        reduce using rule 103 (nonVoidInitializer -> arrayInitializer .)


state 463

    (82) variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody . SEMICOLON
    (346) functionLiteralExpression -> functionBody .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 587
    DOT             reduce using rule 346 (functionLiteralExpression -> functionBody .)
    PLUS_PLUS       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    MINUS_MINUS     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LBRACKET        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LPAREN          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    POWER           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    TIMES           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    DIV             reduce using rule 346 (functionLiteralExpression -> functionBody .)
    MODULO          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    PLUS            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    MINUS           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    TILDE           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    RIGHT_SHIFT     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LEFT_SHIFT      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    IS_EQ           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    NOT_EQ          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    AMPERSAND       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    CARET           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    PIPE            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    DOUBLE_AMPERSAND reduce using rule 346 (functionLiteralExpression -> functionBody .)
    QUESTION        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    DOUBLE_PIPE     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    ASSIGN          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_LEFT         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_RIGHT        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_PLUS         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_MINUS        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_TIMES        reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_MODULO       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_AND_BIT      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_DIV          reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_OR_BIT       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    EQ_XOR_BIT      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    COMMA           reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS            reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS_EQ         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER         reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER_EQ      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    IS_EQ_DIFF      reduce using rule 346 (functionLiteralExpression -> functionBody .)
    NOT_EQ_DIFF     reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS_EQ_DIFF    reduce using rule 346 (functionLiteralExpression -> functionBody .)
    LESS_DIFF       reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER_EQ_DIFF reduce using rule 346 (functionLiteralExpression -> functionBody .)
    GREATER_DIFF    reduce using rule 346 (functionLiteralExpression -> functionBody .)

  ! SEMICOLON       [ reduce using rule 346 (functionLiteralExpression -> functionBody .) ]


state 464

    (232) typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .

    TIMES           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LBRACKET        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    DELEGATE        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    FUNCTION        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    IDENTIFIER      reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LBRACE          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    SEMICOLON       reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    DOT             reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LPAREN          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    RBRACKET        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    RPAREN          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    ELLIPSIS        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    ASSIGN          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    COMMA           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    PLUS_PLUS       reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    MINUS_MINUS     reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    POWER           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    DIV             reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    MODULO          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    PLUS            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    MINUS           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    TILDE           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    RIGHT_SHIFT     reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LEFT_SHIFT      reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    IS_EQ           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    NOT_EQ          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    AMPERSAND       reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    CARET           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    PIPE            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    DOUBLE_AMPERSAND reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    QUESTION        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    DOUBLE_PIPE     reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_LEFT         reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_RIGHT        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_PLUS         reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_MINUS        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_TIMES        reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_MODULO       reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_AND_BIT      reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_DIV          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_OR_BIT       reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    EQ_XOR_BIT      reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LESS            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LESS_EQ         reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    GREATER         reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    GREATER_EQ      reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    IS_EQ_DIFF      reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    NOT_EQ_DIFF     reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LESS_EQ_DIFF    reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LESS_DIFF       reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    GREATER_EQ_DIFF reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    GREATER_DIFF    reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    RANGE           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    COLON           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    CONST           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    IMMUTABLE       reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    RBRACE          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    THIS            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    BOOL            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    SHORT           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    USHORT          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    INT             reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    UINT            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    LONG            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    ULONG           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    CHAR            reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    FLOAT           reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)
    TYPEOF          reduce using rule 232 (typeSuffix -> FUNCTION parameters multiple_memberFunctionAttribute .)


state 465

    (229) typeSuffix -> LBRACKET assignExpression RBRACKET .

    TIMES           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DELEGATE        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    FUNCTION        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LBRACE          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DOT             reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    POWER           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    CONST           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    IMMUTABLE       reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    RBRACE          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    THIS            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    BOOL            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    SHORT           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    USHORT          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    INT             reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    UINT            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    LONG            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    ULONG           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    CHAR            reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    FLOAT           reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)
    TYPEOF          reduce using rule 229 (typeSuffix -> LBRACKET assignExpression RBRACKET .)


state 466

    (230) typeSuffix -> LBRACKET assignExpression RANGE . assignExpression RBRACKET
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 588
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 467

    (228) typeSuffix -> LBRACKET type_question RBRACKET .

    TIMES           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LBRACKET        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    DELEGATE        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    FUNCTION        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    IDENTIFIER      reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LBRACE          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    SEMICOLON       reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    DOT             reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LPAREN          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    RBRACKET        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    RPAREN          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    ELLIPSIS        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    ASSIGN          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    COMMA           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    PLUS_PLUS       reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    MINUS_MINUS     reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    POWER           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    DIV             reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    MODULO          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    PLUS            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    MINUS           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    TILDE           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    RIGHT_SHIFT     reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LEFT_SHIFT      reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    IS_EQ           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    NOT_EQ          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    AMPERSAND       reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    CARET           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    PIPE            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    QUESTION        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    DOUBLE_PIPE     reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_LEFT         reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_RIGHT        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_PLUS         reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_MINUS        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_TIMES        reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_MODULO       reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_AND_BIT      reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_DIV          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_OR_BIT       reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    EQ_XOR_BIT      reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LESS            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LESS_EQ         reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    GREATER         reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    GREATER_EQ      reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    IS_EQ_DIFF      reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LESS_DIFF       reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    GREATER_DIFF    reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    RANGE           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    COLON           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    CONST           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    IMMUTABLE       reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    RBRACE          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    THIS            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    BOOL            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    SHORT           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    USHORT          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    INT             reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    UINT            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    LONG            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    ULONG           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    CHAR            reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    FLOAT           reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)
    TYPEOF          reduce using rule 228 (typeSuffix -> LBRACKET type_question RBRACKET .)


state 468

    (231) typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .

    TIMES           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LBRACKET        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    DELEGATE        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    FUNCTION        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    IDENTIFIER      reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LBRACE          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    SEMICOLON       reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    DOT             reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LPAREN          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    RBRACKET        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    RPAREN          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    ELLIPSIS        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    ASSIGN          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    COMMA           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    PLUS_PLUS       reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    MINUS_MINUS     reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    POWER           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    DIV             reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    MODULO          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    PLUS            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    MINUS           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    TILDE           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    RIGHT_SHIFT     reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LEFT_SHIFT      reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    IS_EQ           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    NOT_EQ          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    AMPERSAND       reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    CARET           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    PIPE            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    DOUBLE_AMPERSAND reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    QUESTION        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    DOUBLE_PIPE     reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_LEFT         reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_RIGHT        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_PLUS         reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_MINUS        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_TIMES        reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_MODULO       reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_AND_BIT      reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_DIV          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_OR_BIT       reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    EQ_XOR_BIT      reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LESS            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LESS_EQ         reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    GREATER         reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    GREATER_EQ      reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    IS_EQ_DIFF      reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    NOT_EQ_DIFF     reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LESS_EQ_DIFF    reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LESS_DIFF       reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    GREATER_EQ_DIFF reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    GREATER_DIFF    reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    RANGE           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    COLON           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    CONST           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    IMMUTABLE       reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    RBRACE          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    THIS            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    BOOL            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    SHORT           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    USHORT          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    INT             reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    UINT            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    LONG            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    ULONG           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    CHAR            reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    FLOAT           reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)
    TYPEOF          reduce using rule 231 (typeSuffix -> DELEGATE parameters multiple_memberFunctionAttribute .)


state 469

    (190) typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET . DOT typeIdentifierPart

    DOT             shift and go to state 589


state 470

    (238) typeofExpression -> TYPEOF LPAREN RETURN RPAREN .

    DOT             reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    COMMA           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LBRACE          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    TIMES           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LBRACKET        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    DELEGATE        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    FUNCTION        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    IDENTIFIER      reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    SEMICOLON       reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LPAREN          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    RBRACKET        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    RPAREN          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    ELLIPSIS        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    ASSIGN          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    PLUS_PLUS       reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    MINUS_MINUS     reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    POWER           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    DIV             reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    MODULO          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    PLUS            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    MINUS           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    TILDE           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    RIGHT_SHIFT     reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LEFT_SHIFT      reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    IS_EQ           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    NOT_EQ          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    AMPERSAND       reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    CARET           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    PIPE            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    QUESTION        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    DOUBLE_PIPE     reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_LEFT         reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_RIGHT        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_PLUS         reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_MINUS        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_TIMES        reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_MODULO       reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_AND_BIT      reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_DIV          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_OR_BIT       reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    EQ_XOR_BIT      reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LESS            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LESS_EQ         reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER         reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER_EQ      reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    IS_EQ_DIFF      reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    NOT_EQ_DIFF     reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LESS_EQ_DIFF    reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LESS_DIFF       reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER_EQ_DIFF reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    GREATER_DIFF    reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    RANGE           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    COLON           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    CONST           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    IMMUTABLE       reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    RBRACE          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    THIS            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    BOOL            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    SHORT           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    USHORT          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    INT             reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    UINT            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    LONG            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    ULONG           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    CHAR            reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    FLOAT           reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)
    TYPEOF          reduce using rule 238 (typeofExpression -> TYPEOF LPAREN RETURN RPAREN .)


state 471

    (237) typeofExpression -> TYPEOF LPAREN expression RPAREN .

    DOT             reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    COMMA           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LBRACE          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    TIMES           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    DELEGATE        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LPAREN          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    RPAREN          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    ELLIPSIS        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    PLUS_PLUS       reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    MINUS_MINUS     reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    POWER           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    DIV             reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    MODULO          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    PLUS            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    MINUS           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    TILDE           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LEFT_SHIFT      reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    CARET           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    PIPE            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    QUESTION        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_LEFT         reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_RIGHT        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_TIMES        reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_MODULO       reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_AND_BIT      reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_DIV          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_OR_BIT       reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LESS            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    GREATER         reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    IS_EQ_DIFF      reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    NOT_EQ_DIFF     reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LESS_EQ_DIFF    reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LESS_DIFF       reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    GREATER_EQ_DIFF reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    GREATER_DIFF    reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    RANGE           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    COLON           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    CONST           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    IMMUTABLE       reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    RBRACE          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    THIS            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    BOOL            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    SHORT           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    USHORT          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    INT             reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    UINT            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    LONG            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    ULONG           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    CHAR            reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    FLOAT           reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)
    TYPEOF          reduce using rule 237 (typeofExpression -> TYPEOF LPAREN expression RPAREN .)


state 472

    (343) expression -> expression COMMA . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 590
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 473

    (219) type2 -> typeConstructor LPAREN type RPAREN .

    TIMES           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LBRACKET        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    DELEGATE        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    FUNCTION        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    IDENTIFIER      reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LBRACE          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    SEMICOLON       reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    DOT             reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LPAREN          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    RBRACKET        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    RPAREN          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    ELLIPSIS        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    ASSIGN          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    COMMA           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    PLUS_PLUS       reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    MINUS_MINUS     reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    POWER           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    DIV             reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    MODULO          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    PLUS            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    MINUS           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    TILDE           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    RIGHT_SHIFT     reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LEFT_SHIFT      reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    IS_EQ           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    NOT_EQ          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    AMPERSAND       reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    CARET           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    PIPE            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    QUESTION        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    DOUBLE_PIPE     reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_LEFT         reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_RIGHT        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_PLUS         reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_MINUS        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_TIMES        reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_MODULO       reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_AND_BIT      reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_DIV          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_OR_BIT       reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    EQ_XOR_BIT      reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LESS            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LESS_EQ         reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    GREATER         reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    GREATER_EQ      reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    IS_EQ_DIFF      reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    NOT_EQ_DIFF     reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LESS_EQ_DIFF    reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LESS_DIFF       reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    GREATER_EQ_DIFF reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    GREATER_DIFF    reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    RANGE           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    COLON           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    CONST           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    IMMUTABLE       reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    RBRACE          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    THIS            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    BOOL            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    SHORT           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    USHORT          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    INT             reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    UINT            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    LONG            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    ULONG           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    CHAR            reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    FLOAT           reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)
    TYPEOF          reduce using rule 219 (type2 -> typeConstructor LPAREN type RPAREN .)


state 474

    (197) aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type .

    COMMA           reduce using rule 197 (aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type .)
    SEMICOLON       reduce using rule 197 (aliasInitializer -> IDENTIFIER ASSIGN multiplestorageClass type .)


state 475

    (198) aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON .

    COMMA           reduce using rule 198 (aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON .)
    SEMICOLON       reduce using rule 198 (aliasInitializer -> IDENTIFIER ASSIGN functionLiteralExpression SEMICOLON .)


state 476

    (183) aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .

    PRIVATE         reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    PROTECTED       reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    PUBLIC          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    STATIC          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    EXTERN          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    FINAL           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    AUTO            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    CONST           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    IMMUTABLE       reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    ALIAS           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    ENUM            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    CLASS           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    THIS            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    TILDE           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    IMPORT          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    UNION           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    MIXIN           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    CHAR            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    INT             reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    UINT            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    LONG            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    FLOAT           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    DOUBLE          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    BOOL            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    SHORT           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    USHORT          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    ULONG           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    TYPEOF          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    IDENTIFIER      reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    $end            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    RBRACE          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    CASE            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    DEFAULT         reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    LBRACE          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    IF              reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    WHILE           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    DO              reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    FOR             reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    FOREACH         reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    FOREACH_REVERSE reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    SWITCH          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    CONTINUE        reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    BREAK           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    RETURN          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    GOTO            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    WITH            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    UAMPERSAND      reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    EXCLAMATION     reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    UTIMES          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    UPLUS           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    UMINUS          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    PLUS_PLUS       reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    MINUS_MINUS     reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    LPAREN          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    DOT             reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    DOLLAR          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    NULL            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    TRUE            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    FALSE           reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    INUMBER         reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    DNUMBER         reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    LIT_CHAR        reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    NEW             reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    DELETE          reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    CAST            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    LBRACKET        reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    FUNCTION        reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    LIT_STR         reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    SEMICOLON       reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)
    ELSE            reduce using rule 183 (aliasDeclaration -> ALIAS multiplestorageClass type declaratorIdentifierList SEMICOLON .)


state 477

    (185) declaratorIdentifierList -> IDENTIFIER multiple_comma_identifer .

    SEMICOLON       reduce using rule 185 (declaratorIdentifierList -> IDENTIFIER multiple_comma_identifer .)


state 478

    (186) multiple_comma_identifer -> COMMA . IDENTIFIER multiple_comma_identifer

    IDENTIFIER      shift and go to state 591


state 479

    (184) aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN . parameters RPAREN multiple_memberFunctionAttribute SEMICOLON
    (132) parameters -> . LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN
    (133) parameters -> . LPAREN parameter CommaParameterStar RPAREN
    (134) parameters -> . LPAREN ELLIPSIS RPAREN
    (135) parameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 117

    parameters                     shift and go to state 592

state 480

    (187) multiple_comma_identifer -> empty .

    SEMICOLON       reduce using rule 187 (multiple_comma_identifer -> empty .)


state 481

    (193) comma_aliasInitializer -> COMMA aliasInitializer comma_aliasInitializer .

    SEMICOLON       reduce using rule 193 (comma_aliasInitializer -> COMMA aliasInitializer comma_aliasInitializer .)


state 482

    (153) constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .

    PRIVATE         reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    PROTECTED       reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    PUBLIC          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    STATIC          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    EXTERN          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FINAL           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    AUTO            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CONST           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IMMUTABLE       reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ALIAS           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ENUM            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CLASS           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    THIS            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TILDE           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IMPORT          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UNION           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    MIXIN           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CHAR            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    INT             reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UINT            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LONG            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FLOAT           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DOUBLE          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    BOOL            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    SHORT           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    USHORT          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ULONG           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TYPEOF          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IDENTIFIER      reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    $end            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    RBRACE          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CASE            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DEFAULT         reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LBRACE          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    IF              reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    WHILE           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DO              reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FOR             reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FOREACH         reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FOREACH_REVERSE reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    SWITCH          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CONTINUE        reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    BREAK           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    RETURN          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    GOTO            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    WITH            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UAMPERSAND      reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    EXCLAMATION     reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UTIMES          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UPLUS           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    UMINUS          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    PLUS_PLUS       reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    MINUS_MINUS     reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LPAREN          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DOT             reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DOLLAR          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    NULL            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    TRUE            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FALSE           reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    INUMBER         reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DNUMBER         reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LIT_CHAR        reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    NEW             reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    DELETE          reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    CAST            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LBRACKET        reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    FUNCTION        reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    LIT_STR         reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    SEMICOLON       reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)
    ELSE            reduce using rule 153 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint functionBody .)


state 483

    (154) constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .

    PRIVATE         reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    PROTECTED       reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    PUBLIC          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    STATIC          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    EXTERN          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FINAL           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    AUTO            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CONST           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IMMUTABLE       reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ALIAS           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ENUM            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CLASS           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    THIS            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TILDE           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IMPORT          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UNION           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    MIXIN           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CHAR            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    INT             reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UINT            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LONG            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FLOAT           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DOUBLE          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    BOOL            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    SHORT           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    USHORT          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ULONG           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TYPEOF          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IDENTIFIER      reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    $end            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    RBRACE          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CASE            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DEFAULT         reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LBRACE          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    IF              reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    WHILE           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DO              reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FOR             reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FOREACH         reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FOREACH_REVERSE reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    SWITCH          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CONTINUE        reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    BREAK           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    RETURN          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    GOTO            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    WITH            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UAMPERSAND      reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    EXCLAMATION     reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UTIMES          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UPLUS           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    UMINUS          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    PLUS_PLUS       reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    MINUS_MINUS     reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LPAREN          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DOT             reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DOLLAR          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    NULL            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    TRUE            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FALSE           reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    INUMBER         reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DNUMBER         reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LIT_CHAR        reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    NEW             reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    DELETE          reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    CAST            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LBRACKET        reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    FUNCTION        reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    LIT_STR         reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    SEMICOLON       reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)
    ELSE            reduce using rule 154 (constructor -> THIS parameters multiple_memberFunctionAttribute constraint SEMICOLON .)


state 484

    (155) constraint -> IF LPAREN . expression RPAREN
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 593

state 485

    (136) parameter -> parameterAttributeStar type Identifier_question . ELLIPSIS
    (137) parameter -> parameterAttributeStar type Identifier_question .
    (138) parameter -> parameterAttributeStar type Identifier_question . ASSIGN assignExpression

    ELLIPSIS        shift and go to state 595
    COMMA           reduce using rule 137 (parameter -> parameterAttributeStar type Identifier_question .)
    RPAREN          reduce using rule 137 (parameter -> parameterAttributeStar type Identifier_question .)
    ASSIGN          shift and go to state 594


state 486

    (139) Identifier_question -> IDENTIFIER .

    ELLIPSIS        reduce using rule 139 (Identifier_question -> IDENTIFIER .)
    ASSIGN          reduce using rule 139 (Identifier_question -> IDENTIFIER .)
    COMMA           reduce using rule 139 (Identifier_question -> IDENTIFIER .)
    RPAREN          reduce using rule 139 (Identifier_question -> IDENTIFIER .)


state 487

    (140) Identifier_question -> empty .

    ELLIPSIS        reduce using rule 140 (Identifier_question -> empty .)
    ASSIGN          reduce using rule 140 (Identifier_question -> empty .)
    COMMA           reduce using rule 140 (Identifier_question -> empty .)
    RPAREN          reduce using rule 140 (Identifier_question -> empty .)


state 488

    (132) parameters -> LPAREN parameter CommaParameterStar COMMA . ELLIPSIS RPAREN

    ELLIPSIS        shift and go to state 596


state 489

    (133) parameters -> LPAREN parameter CommaParameterStar RPAREN .

    IMMUTABLE       reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    CONST           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    RETURN          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    SEMICOLON       reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    IF              reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LBRACE          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    RPAREN          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    TIMES           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LBRACKET        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    DELEGATE        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    FUNCTION        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    IDENTIFIER      reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    DOT             reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LPAREN          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    RBRACKET        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    ELLIPSIS        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    ASSIGN          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    COMMA           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    PLUS_PLUS       reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    MINUS_MINUS     reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    POWER           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    DIV             reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    MODULO          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    PLUS            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    MINUS           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    TILDE           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    RIGHT_SHIFT     reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LEFT_SHIFT      reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    IS_EQ           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    NOT_EQ          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    AMPERSAND       reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    CARET           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    PIPE            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    QUESTION        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    DOUBLE_PIPE     reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_LEFT         reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_RIGHT        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_PLUS         reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_MINUS        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_TIMES        reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_MODULO       reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_AND_BIT      reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_DIV          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_OR_BIT       reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    EQ_XOR_BIT      reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LESS            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LESS_EQ         reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    GREATER         reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    GREATER_EQ      reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    IS_EQ_DIFF      reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    NOT_EQ_DIFF     reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LESS_EQ_DIFF    reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LESS_DIFF       reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    GREATER_EQ_DIFF reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    GREATER_DIFF    reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    RANGE           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    COLON           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    RBRACE          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    THIS            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    BOOL            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    SHORT           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    USHORT          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    INT             reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    UINT            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    LONG            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    ULONG           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    CHAR            reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    FLOAT           reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)
    TYPEOF          reduce using rule 133 (parameters -> LPAREN parameter CommaParameterStar RPAREN .)


state 490

    (130) CommaParameterStar -> COMMA parameter . CommaParameterStar
    (130) CommaParameterStar -> . COMMA parameter CommaParameterStar
    (131) CommaParameterStar -> . empty
    (397) empty -> .

    COMMA           reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)

  ! COMMA           [ shift and go to state 306 ]

    CommaParameterStar             shift and go to state 597
    empty                          shift and go to state 307

state 491

    (79) comma_identifier_assign_initializer -> COMMA autoDeclarationPart . comma_identifier_assign_initializer
    (79) comma_identifier_assign_initializer -> . COMMA autoDeclarationPart comma_identifier_assign_initializer
    (80) comma_identifier_assign_initializer -> . empty
    (397) empty -> .

    COMMA           shift and go to state 308
    SEMICOLON       reduce using rule 397 (empty -> .)

    comma_identifier_assign_initializer shift and go to state 598
    empty                          shift and go to state 310

state 492

    (78) autoDeclarationPart -> IDENTIFIER . ASSIGN initializer

    ASSIGN          shift and go to state 312


state 493

    (77) autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .

    PRIVATE         reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    PROTECTED       reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    PUBLIC          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    STATIC          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    EXTERN          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    FINAL           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    AUTO            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    CONST           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    IMMUTABLE       reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    ALIAS           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    ENUM            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    CLASS           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    THIS            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    TILDE           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    IMPORT          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    UNION           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    MIXIN           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    CHAR            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    INT             reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    UINT            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    LONG            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    FLOAT           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    DOUBLE          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    BOOL            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    SHORT           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    USHORT          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    ULONG           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    TYPEOF          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    IDENTIFIER      reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    $end            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    RBRACE          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    CASE            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    DEFAULT         reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    LBRACE          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    IF              reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    WHILE           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    DO              reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    FOR             reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    FOREACH         reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    FOREACH_REVERSE reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    SWITCH          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    CONTINUE        reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    BREAK           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    RETURN          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    GOTO            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    WITH            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    UAMPERSAND      reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    EXCLAMATION     reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    UTIMES          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    UPLUS           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    UMINUS          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    PLUS_PLUS       reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    MINUS_MINUS     reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    LPAREN          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    DOT             reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    DOLLAR          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    NULL            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    TRUE            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    FALSE           reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    INUMBER         reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    DNUMBER         reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    LIT_CHAR        reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    NEW             reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    DELETE          reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    CAST            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    LBRACKET        reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    FUNCTION        reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    LIT_STR         reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    SEMICOLON       reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)
    ELSE            reduce using rule 77 (autoDeclaration -> storageClass multiplestorageClass autoDeclarationPart comma_identifier_assign_initializer SEMICOLON .)


state 494

    (147) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute . SEMICOLON
    (148) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute . functionBody
    (341) functionBody -> . blockStatement
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

    SEMICOLON       shift and go to state 600
    LBRACE          shift and go to state 207

    functionBody                   shift and go to state 599
    blockStatement                 shift and go to state 237

state 495

    (78) autoDeclarationPart -> IDENTIFIER ASSIGN initializer .

    COMMA           reduce using rule 78 (autoDeclarationPart -> IDENTIFIER ASSIGN initializer .)
    SEMICOLON       reduce using rule 78 (autoDeclarationPart -> IDENTIFIER ASSIGN initializer .)


state 496

    (108) arrayLiteral -> LBRACKET argumentList_question RBRACKET .

    DOT             reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    PLUS_PLUS       reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    MINUS_MINUS     reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LBRACKET        reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LPAREN          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    POWER           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    TIMES           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    DIV             reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    MODULO          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    PLUS            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    MINUS           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    TILDE           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RIGHT_SHIFT     reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LEFT_SHIFT      reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    IS_EQ           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    NOT_EQ          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    AMPERSAND       reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    CARET           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    PIPE            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    QUESTION        reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    DOUBLE_PIPE     reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    ASSIGN          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_LEFT         reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_RIGHT        reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_PLUS         reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_MINUS        reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_TIMES        reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_MODULO       reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_AND_BIT      reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_DIV          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_OR_BIT       reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_XOR_BIT      reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RPAREN          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    COMMA           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS_EQ         reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER         reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER_EQ      reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    IS_EQ_DIFF      reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS_DIFF       reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER_DIFF    reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RBRACKET        reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    SEMICOLON       reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RANGE           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    COLON           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    IDENTIFIER      reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    CONST           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    IMMUTABLE       reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RBRACE          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    THIS            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    BOOL            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    SHORT           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    USHORT          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    INT             reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    UINT            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LONG            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    ULONG           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    CHAR            reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    FLOAT           reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    TYPEOF          reduce using rule 108 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)


state 497

    (338) argumentList -> argumentList comma_assign .

    COLON           reduce using rule 338 (argumentList -> argumentList comma_assign .)
    COMMA           reduce using rule 338 (argumentList -> argumentList comma_assign .)
    RPAREN          reduce using rule 338 (argumentList -> argumentList comma_assign .)
    RBRACKET        reduce using rule 338 (argumentList -> argumentList comma_assign .)


state 498

    (339) comma_assign -> COMMA . assignExpression comma_assign
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 601
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    typeConstructor                shift and go to state 196
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229

state 499

    (340) comma_assign -> empty .

    COMMA           reduce using rule 340 (comma_assign -> empty .)
    RBRACKET        reduce using rule 340 (comma_assign -> empty .)
    RPAREN          reduce using rule 340 (comma_assign -> empty .)
    COLON           reduce using rule 340 (comma_assign -> empty .)


state 500

    (386) relExpression -> relExpression relOperator shiftExpression .
    (381) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (382) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression

  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
    LESS            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_EQ         reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER         reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_EQ      reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    IS_EQ_DIFF      reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_DIFF       reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_DIFF    reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    AMPERSAND       reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    CARET           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    PIPE            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    QUESTION        reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    DOUBLE_PIPE     reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    ASSIGN          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_LEFT         reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_RIGHT        reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_PLUS         reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_MINUS        reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_TIMES        reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_MODULO       reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_AND_BIT      reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_DIV          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_OR_BIT       reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_XOR_BIT      reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    COMMA           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    RPAREN          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    DOT             reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    PLUS_PLUS       reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    MINUS_MINUS     reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    LBRACKET        reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    LPAREN          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    POWER           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    TIMES           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    DIV             reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    MODULO          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    PLUS            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    MINUS           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    TILDE           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    IS_EQ           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    NOT_EQ          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    RBRACKET        reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    RANGE           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    SEMICOLON       reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    COLON           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    IDENTIFIER      reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    CONST           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    IMMUTABLE       reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    RBRACE          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    THIS            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    BOOL            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    SHORT           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    USHORT          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    INT             reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    UINT            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    LONG            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    ULONG           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    CHAR            reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    FLOAT           reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    TYPEOF          reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .)
    RIGHT_SHIFT     shift and go to state 416
    LEFT_SHIFT      shift and go to state 415

  ! RIGHT_SHIFT     [ reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 386 (relExpression -> relExpression relOperator shiftExpression .) ]


state 501

    (314) identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .

    DOT             reduce using rule 314 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 314 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)


state 502

    (35) primaryExpression -> typeConstructor LPAREN type . RPAREN DOT IDENTIFIER

    RPAREN          shift and go to state 602


state 503

    (370) andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .
    (372) orExpression -> orExpression . PIPE xorExpression

    DOUBLE_AMPERSAND reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    QUESTION        reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DOUBLE_PIPE     reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    ASSIGN          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_LEFT         reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_RIGHT        reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_PLUS         reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_MINUS        reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_TIMES        reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_MODULO       reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_AND_BIT      reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_DIV          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_OR_BIT       reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_XOR_BIT      reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    SEMICOLON       reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    COMMA           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    COLON           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RBRACKET        reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DOT             reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PLUS_PLUS       reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MINUS_MINUS     reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LBRACKET        reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LPAREN          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    POWER           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TIMES           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DIV             reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MODULO          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PLUS            reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MINUS           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TILDE           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RIGHT_SHIFT     reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LEFT_SHIFT      reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IS_EQ           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    NOT_EQ          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    AMPERSAND       reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    CARET           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RPAREN          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS            reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_EQ         reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER         reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_EQ      reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IS_EQ_DIFF      reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    NOT_EQ_DIFF     reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_EQ_DIFF    reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_DIFF       reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_EQ_DIFF reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_DIFF    reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RANGE           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IDENTIFIER      reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    CONST           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IMMUTABLE       reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RBRACE          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    THIS            reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    BOOL            reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    SHORT           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    USHORT          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    INT             reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    UINT            reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LONG            reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    ULONG           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    CHAR            reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    FLOAT           reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TYPEOF          reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PIPE            shift and go to state 418

  ! PIPE            [ reduce using rule 370 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .) ]


state 504

    (11) mulExpression -> mulExpression DIV powExpression .
    (14) powExpression -> powExpression . POWER unaryExpression

    TIMES           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    DIV             reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    MODULO          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    PLUS            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    MINUS           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    TILDE           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    RIGHT_SHIFT     reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LEFT_SHIFT      reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    IS_EQ           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    NOT_EQ          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    AMPERSAND       reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    CARET           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    PIPE            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    DOUBLE_AMPERSAND reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    QUESTION        reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    DOUBLE_PIPE     reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    ASSIGN          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_LEFT         reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_RIGHT        reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_PLUS         reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_MINUS        reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_TIMES        reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_MODULO       reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_AND_BIT      reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_DIV          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_OR_BIT       reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    EQ_XOR_BIT      reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    COMMA           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    RPAREN          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LESS            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LESS_EQ         reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    GREATER         reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    GREATER_EQ      reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    IS_EQ_DIFF      reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    NOT_EQ_DIFF     reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LESS_EQ_DIFF    reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LESS_DIFF       reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    GREATER_EQ_DIFF reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    GREATER_DIFF    reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    SEMICOLON       reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    RBRACKET        reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    COLON           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    DOT             reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    PLUS_PLUS       reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    MINUS_MINUS     reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LBRACKET        reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LPAREN          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    RANGE           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    IDENTIFIER      reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    CONST           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    IMMUTABLE       reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    RBRACE          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    THIS            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    BOOL            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    SHORT           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    USHORT          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    INT             reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    UINT            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    LONG            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    ULONG           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    CHAR            reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    FLOAT           reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    TYPEOF          reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .)
    POWER           shift and go to state 411

  ! POWER           [ reduce using rule 11 (mulExpression -> mulExpression DIV powExpression .) ]


state 505

    (12) mulExpression -> mulExpression MODULO powExpression .
    (14) powExpression -> powExpression . POWER unaryExpression

    TIMES           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    DIV             reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    MODULO          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    PLUS            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    MINUS           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    TILDE           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    RIGHT_SHIFT     reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LEFT_SHIFT      reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    IS_EQ           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    NOT_EQ          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    AMPERSAND       reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    CARET           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    PIPE            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    DOUBLE_AMPERSAND reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    QUESTION        reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    DOUBLE_PIPE     reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    ASSIGN          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_LEFT         reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_RIGHT        reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_PLUS         reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_MINUS        reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_TIMES        reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_MODULO       reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_AND_BIT      reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_DIV          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_OR_BIT       reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_XOR_BIT      reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    COMMA           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    RPAREN          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LESS            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LESS_EQ         reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER         reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER_EQ      reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    IS_EQ_DIFF      reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    NOT_EQ_DIFF     reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LESS_EQ_DIFF    reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LESS_DIFF       reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER_EQ_DIFF reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER_DIFF    reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    SEMICOLON       reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    RBRACKET        reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    COLON           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    DOT             reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    PLUS_PLUS       reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    MINUS_MINUS     reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LBRACKET        reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LPAREN          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    RANGE           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    IDENTIFIER      reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    CONST           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    IMMUTABLE       reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    RBRACE          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    THIS            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    BOOL            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    SHORT           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    USHORT          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    INT             reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    UINT            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    LONG            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    ULONG           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    CHAR            reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    FLOAT           reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    TYPEOF          reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .)
    POWER           shift and go to state 411

  ! POWER           [ reduce using rule 12 (mulExpression -> mulExpression MODULO powExpression .) ]


state 506

    (10) mulExpression -> mulExpression TIMES powExpression .
    (14) powExpression -> powExpression . POWER unaryExpression

    TIMES           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    DIV             reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    MODULO          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    PLUS            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    MINUS           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    TILDE           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    RIGHT_SHIFT     reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LEFT_SHIFT      reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    IS_EQ           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    NOT_EQ          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    AMPERSAND       reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    CARET           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    PIPE            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    DOUBLE_AMPERSAND reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    QUESTION        reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    DOUBLE_PIPE     reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    ASSIGN          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_LEFT         reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_RIGHT        reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_PLUS         reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_MINUS        reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_TIMES        reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_MODULO       reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_AND_BIT      reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_DIV          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_OR_BIT       reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_XOR_BIT      reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    COMMA           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    RPAREN          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LESS            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LESS_EQ         reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER         reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER_EQ      reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    IS_EQ_DIFF      reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    NOT_EQ_DIFF     reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LESS_EQ_DIFF    reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LESS_DIFF       reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER_EQ_DIFF reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER_DIFF    reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    SEMICOLON       reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    RBRACKET        reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    COLON           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    DOT             reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    PLUS_PLUS       reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    MINUS_MINUS     reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LBRACKET        reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LPAREN          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    RANGE           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    IDENTIFIER      reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    CONST           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    IMMUTABLE       reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    RBRACE          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    THIS            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    BOOL            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    SHORT           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    USHORT          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    INT             reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    UINT            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    LONG            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    ULONG           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    CHAR            reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    FLOAT           reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    TYPEOF          reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .)
    POWER           shift and go to state 411

  ! POWER           [ reduce using rule 10 (mulExpression -> mulExpression TIMES powExpression .) ]


state 507

    (345) functionLiteralExpression -> FUNCTION type functionBody .

    DOT             reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    PLUS_PLUS       reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    MINUS_MINUS     reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LBRACKET        reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LPAREN          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    POWER           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    TIMES           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    DIV             reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    MODULO          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    PLUS            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    MINUS           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    TILDE           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    RIGHT_SHIFT     reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LEFT_SHIFT      reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    IS_EQ           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    NOT_EQ          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    AMPERSAND       reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    CARET           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    PIPE            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    DOUBLE_AMPERSAND reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    QUESTION        reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    DOUBLE_PIPE     reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    ASSIGN          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_LEFT         reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_RIGHT        reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_PLUS         reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_MINUS        reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_TIMES        reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_MODULO       reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_AND_BIT      reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_DIV          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_OR_BIT       reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_XOR_BIT      reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    RPAREN          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS_EQ         reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER         reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER_EQ      reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    IS_EQ_DIFF      reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    NOT_EQ_DIFF     reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS_EQ_DIFF    reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS_DIFF       reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER_EQ_DIFF reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER_DIFF    reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    RBRACKET        reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    RANGE           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    COMMA           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    SEMICOLON       reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    COLON           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    IDENTIFIER      reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    CONST           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    IMMUTABLE       reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    RBRACE          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    THIS            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    BOOL            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    SHORT           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    USHORT          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    INT             reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    UINT            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    LONG            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    ULONG           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    CHAR            reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    FLOAT           reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)
    TYPEOF          reduce using rule 345 (functionLiteralExpression -> FUNCTION type functionBody .)


state 508

    (374) xorExpression -> xorExpression CARET andExpression .
    (376) andExpression -> andExpression . AMPERSAND cmpExpression

    CARET           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    PIPE            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    DOUBLE_AMPERSAND reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    QUESTION        reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    DOUBLE_PIPE     reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    ASSIGN          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_LEFT         reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_RIGHT        reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_PLUS         reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_MINUS        reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_TIMES        reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_MODULO       reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_AND_BIT      reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_DIV          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_OR_BIT       reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    EQ_XOR_BIT      reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    SEMICOLON       reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    COMMA           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    RPAREN          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    DOT             reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    PLUS_PLUS       reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    MINUS_MINUS     reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LBRACKET        reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LPAREN          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    POWER           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    TIMES           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    DIV             reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    MODULO          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    PLUS            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    MINUS           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    TILDE           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    RIGHT_SHIFT     reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LEFT_SHIFT      reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    IS_EQ           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    NOT_EQ          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LESS            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LESS_EQ         reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    GREATER         reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_EQ      reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    IS_EQ_DIFF      reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    NOT_EQ_DIFF     reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LESS_EQ_DIFF    reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LESS_DIFF       reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_EQ_DIFF reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_DIFF    reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    RBRACKET        reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    RANGE           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    COLON           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    IDENTIFIER      reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    CONST           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    IMMUTABLE       reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    RBRACE          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    THIS            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    BOOL            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    SHORT           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    USHORT          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    INT             reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    UINT            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    LONG            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    ULONG           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    CHAR            reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    FLOAT           reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    TYPEOF          reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .)
    AMPERSAND       shift and go to state 383

  ! AMPERSAND       [ reduce using rule 374 (xorExpression -> xorExpression CARET andExpression .) ]


state 509

    (277) withStatement -> WITH LPAREN . expression RPAREN statementNoCaseNoDefault
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 603
    addExpression                  shift and go to state 238

state 510

    (276) gotoStatement -> GOTO CASE . expression_question SEMICOLON
    (287) expression_question -> . expression
    (288) expression_question -> . empty
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    SEMICOLON       reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 519
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    expression_question            shift and go to state 604
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 518

state 511

    (275) gotoStatement -> GOTO DEFAULT . SEMICOLON

    SEMICOLON       shift and go to state 605


state 512

    (274) gotoStatement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 606


state 513

    (262) foreachStatement -> FOREACH LPAREN . foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> FOREACH LPAREN . foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (289) foreachTypeList -> . foreachType foreachType_multiple
    (292) foreachType -> . typeConstructorStar type_question IDENTIFIER
    (299) typeConstructorStar -> . typeConstructor typeConstructorStar
    (300) typeConstructorStar -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    foreachType                    shift and go to state 608
    foreachTypeList                shift and go to state 609
    typeConstructor                shift and go to state 607
    empty                          shift and go to state 610
    typeConstructorStar            shift and go to state 611

state 514

    (280) declarationOrStatementmultiple -> declarationOrStatement . declarationOrStatementmultiple
    (280) declarationOrStatementmultiple -> . declarationOrStatement declarationOrStatementmultiple
    (281) declarationOrStatementmultiple -> . empty
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (397) empty -> .
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for UAMPERSAND resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for UTIMES resolved as shift
  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    ELSE            reduce using rule 397 (empty -> .)
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! CASE            [ reduce using rule 397 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]
  ! LBRACE          [ reduce using rule 397 (empty -> .) ]
  ! IF              [ reduce using rule 397 (empty -> .) ]
  ! WHILE           [ reduce using rule 397 (empty -> .) ]
  ! DO              [ reduce using rule 397 (empty -> .) ]
  ! FOR             [ reduce using rule 397 (empty -> .) ]
  ! FOREACH         [ reduce using rule 397 (empty -> .) ]
  ! FOREACH_REVERSE [ reduce using rule 397 (empty -> .) ]
  ! SWITCH          [ reduce using rule 397 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 397 (empty -> .) ]
  ! BREAK           [ reduce using rule 397 (empty -> .) ]
  ! RETURN          [ reduce using rule 397 (empty -> .) ]
  ! GOTO            [ reduce using rule 397 (empty -> .) ]
  ! WITH            [ reduce using rule 397 (empty -> .) ]
  ! UAMPERSAND      [ reduce using rule 397 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 397 (empty -> .) ]
  ! UTIMES          [ reduce using rule 397 (empty -> .) ]
  ! UPLUS           [ reduce using rule 397 (empty -> .) ]
  ! UMINUS          [ reduce using rule 397 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 397 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 397 (empty -> .) ]
  ! LPAREN          [ reduce using rule 397 (empty -> .) ]
  ! DOT             [ reduce using rule 397 (empty -> .) ]
  ! DOLLAR          [ reduce using rule 397 (empty -> .) ]
  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! NULL            [ reduce using rule 397 (empty -> .) ]
  ! TRUE            [ reduce using rule 397 (empty -> .) ]
  ! FALSE           [ reduce using rule 397 (empty -> .) ]
  ! INUMBER         [ reduce using rule 397 (empty -> .) ]
  ! DNUMBER         [ reduce using rule 397 (empty -> .) ]
  ! LIT_CHAR        [ reduce using rule 397 (empty -> .) ]
  ! NEW             [ reduce using rule 397 (empty -> .) ]
  ! DELETE          [ reduce using rule 397 (empty -> .) ]
  ! CAST            [ reduce using rule 397 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 397 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! LIT_STR         [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    declarationOrStatementmultiple shift and go to state 612
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 516
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 514
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 515

    (279) declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .

    RBRACE          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    PRIVATE         reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    PROTECTED       reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    PUBLIC          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    STATIC          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    EXTERN          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    FINAL           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    AUTO            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    CONST           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    IMMUTABLE       reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    CASE            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    DEFAULT         reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    IDENTIFIER      reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    LBRACE          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    IF              reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    WHILE           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    DO              reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    FOR             reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    FOREACH         reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    FOREACH_REVERSE reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    SWITCH          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    CONTINUE        reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    BREAK           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    RETURN          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    GOTO            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    WITH            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    UAMPERSAND      reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    EXCLAMATION     reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    UTIMES          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    UPLUS           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    UMINUS          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    PLUS_PLUS       reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    MINUS_MINUS     reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    LPAREN          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    DOT             reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    DOLLAR          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    THIS            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    NULL            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    TRUE            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    FALSE           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    INUMBER         reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    DNUMBER         reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    LIT_CHAR        reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    NEW             reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    DELETE          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    CAST            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    LBRACKET        reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    FUNCTION        reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    MIXIN           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    IMPORT          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    LIT_STR         reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    ALIAS           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    ENUM            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    CLASS           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    TILDE           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    UNION           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    CHAR            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    INT             reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    UINT            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    LONG            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    FLOAT           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    DOUBLE          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    BOOL            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    SHORT           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    USHORT          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    ULONG           reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    TYPEOF          reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    SEMICOLON       reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)
    ELSE            reduce using rule 279 (declarationsAndStatements -> declarationOrStatement declarationOrStatementmultiple .)


state 516

    (281) declarationOrStatementmultiple -> empty .
    (201) multipleattributes -> empty .
    (192) typeConstructors_quetsion -> empty .

  ! reduce/reduce conflict for ALIAS resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for ENUM resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for CLASS resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for THIS resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for TILDE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for IMPORT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for UNION resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for STATIC resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for EXTERN resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for FINAL resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for AUTO resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for MIXIN resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for THIS resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 192 (typeConstructors_quetsion -> empty .)
    CASE            reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    DEFAULT         reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    LBRACE          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    IF              reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    WHILE           reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    DO              reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    FOR             reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    FOREACH         reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    FOREACH_REVERSE reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    SWITCH          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    CONTINUE        reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    BREAK           reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    RETURN          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    GOTO            reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    WITH            reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    UAMPERSAND      reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    EXCLAMATION     reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    UTIMES          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    UPLUS           reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    UMINUS          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    PLUS_PLUS       reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    MINUS_MINUS     reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    LPAREN          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    DOT             reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    DOLLAR          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    NULL            reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    TRUE            reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    FALSE           reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    INUMBER         reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    DNUMBER         reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    LIT_CHAR        reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    NEW             reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    DELETE          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    CAST            reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    LBRACKET        reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    FUNCTION        reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    LIT_STR         reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    RBRACE          reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    SEMICOLON       reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    ELSE            reduce using rule 281 (declarationOrStatementmultiple -> empty .)
    ALIAS           reduce using rule 201 (multipleattributes -> empty .)
    ENUM            reduce using rule 201 (multipleattributes -> empty .)
    CLASS           reduce using rule 201 (multipleattributes -> empty .)
    TILDE           reduce using rule 201 (multipleattributes -> empty .)
    IMPORT          reduce using rule 201 (multipleattributes -> empty .)
    UNION           reduce using rule 201 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 201 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 201 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 201 (multipleattributes -> empty .)
    STATIC          reduce using rule 201 (multipleattributes -> empty .)
    EXTERN          reduce using rule 201 (multipleattributes -> empty .)
    FINAL           reduce using rule 201 (multipleattributes -> empty .)
    AUTO            reduce using rule 201 (multipleattributes -> empty .)
    MIXIN           reduce using rule 201 (multipleattributes -> empty .)
    DOUBLE          reduce using rule 201 (multipleattributes -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)

  ! PRIVATE         [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! PROTECTED       [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! PUBLIC          [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! STATIC          [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! EXTERN          [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! FINAL           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! AUTO            [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! CONST           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! THIS            [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! MIXIN           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! IMPORT          [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! ALIAS           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! ENUM            [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! CLASS           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! TILDE           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! UNION           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! CHAR            [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! INT             [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! UINT            [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! LONG            [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! FLOAT           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! DOUBLE          [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! BOOL            [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! SHORT           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! USHORT          [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! ULONG           [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! TYPEOF          [ reduce using rule 281 (declarationOrStatementmultiple -> empty .) ]
  ! THIS            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! CONST           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! CHAR            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! INT             [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! UINT            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! LONG            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! FLOAT           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! BOOL            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! SHORT           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! USHORT          [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! ULONG           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! TYPEOF          [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 201 (multipleattributes -> empty .) ]


state 517

    (273) returnStatement -> RETURN expression_question . SEMICOLON

    SEMICOLON       shift and go to state 613


state 518

    (287) expression_question -> expression .
    (343) expression -> expression . COMMA assignExpression

    SEMICOLON       reduce using rule 287 (expression_question -> expression .)
    RPAREN          reduce using rule 287 (expression_question -> expression .)
    COMMA           shift and go to state 472


state 519

    (288) expression_question -> empty .
    (192) typeConstructors_quetsion -> empty .

    SEMICOLON       reduce using rule 288 (expression_question -> empty .)
    RPAREN          reduce using rule 288 (expression_question -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)


state 520

    (264) foreachStatement -> FOREACH_REVERSE LPAREN . foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> FOREACH_REVERSE LPAREN . foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (289) foreachTypeList -> . foreachType foreachType_multiple
    (292) foreachType -> . typeConstructorStar type_question IDENTIFIER
    (299) typeConstructorStar -> . typeConstructor typeConstructorStar
    (300) typeConstructorStar -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    foreachType                    shift and go to state 614
    foreachTypeList                shift and go to state 615
    typeConstructor                shift and go to state 607
    empty                          shift and go to state 610
    typeConstructorStar            shift and go to state 611

state 521

    (260) forStatement -> FOR LPAREN . declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> FOR LPAREN . statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (397) empty -> .
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statementNoCaseNoDefault       shift and go to state 616
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 617
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 522

    (268) continueStatement -> CONTINUE IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 618


state 523

    (267) continueStatement -> CONTINUE SEMICOLON .

    PRIVATE         reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    PROTECTED       reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    PUBLIC          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    STATIC          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    EXTERN          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    FINAL           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    AUTO            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    IMMUTABLE       reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    FOREACH_REVERSE reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    WITH            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    UAMPERSAND      reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    EXCLAMATION     reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    UTIMES          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    UPLUS           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    UMINUS          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    PLUS_PLUS       reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    MINUS_MINUS     reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    DOT             reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    DOLLAR          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    INUMBER         reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    DNUMBER         reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    LIT_CHAR        reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    DELETE          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    CAST            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    LBRACKET        reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    MIXIN           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    IMPORT          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    LIT_STR         reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    ALIAS           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    CLASS           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    TILDE           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    UNION           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    UINT            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    USHORT          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    ULONG           reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    TYPEOF          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 267 (continueStatement -> CONTINUE SEMICOLON .)


state 524

    (278) expressionStatement -> expression SEMICOLON .

    PRIVATE         reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    PROTECTED       reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    PUBLIC          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    STATIC          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    EXTERN          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    FINAL           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    AUTO            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    CONST           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    IMMUTABLE       reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    CASE            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    LBRACE          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    IF              reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    WHILE           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    DO              reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    FOR             reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    FOREACH         reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    FOREACH_REVERSE reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    SWITCH          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    BREAK           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    RETURN          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    GOTO            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    WITH            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    UAMPERSAND      reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    EXCLAMATION     reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    UTIMES          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    UPLUS           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    UMINUS          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    LPAREN          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    DOT             reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    DOLLAR          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    THIS            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    NULL            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    TRUE            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    FALSE           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    INUMBER         reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    DNUMBER         reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    LIT_CHAR        reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    NEW             reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    DELETE          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    CAST            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    LBRACKET        reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    MIXIN           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    IMPORT          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    LIT_STR         reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    ALIAS           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    ENUM            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    CLASS           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    TILDE           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    UNION           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    CHAR            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    INT             reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    UINT            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    LONG            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    FLOAT           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    BOOL            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    SHORT           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    USHORT          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    ULONG           reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    TYPEOF          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    RBRACE          reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 278 (expressionStatement -> expression SEMICOLON .)
    ELSE            reduce using rule 278 (expressionStatement -> expression SEMICOLON .)


state 525

    (259) doStatement -> DO statementNoCaseNoDefault . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 619


state 526

    (297) defaultStatement -> DEFAULT COLON . declarationsAndStatements
    (279) declarationsAndStatements -> . declarationOrStatement declarationOrStatementmultiple
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    declarationsAndStatements      shift and go to state 620
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 351
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 527

    (258) whileStatement -> WHILE LPAREN . expression RPAREN declarationOrStatement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 621

state 528

    (298) caseRangeStatement -> CASE assignExpression . COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (337) argumentList -> assignExpression .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 622
    COMMA           reduce using rule 337 (argumentList -> assignExpression .)

  ! COLON           [ reduce using rule 337 (argumentList -> assignExpression .) ]


state 529

    (301) caseStatement -> CASE argumentList . COLON declarationsAndStatements
    (338) argumentList -> argumentList . comma_assign
    (339) comma_assign -> . COMMA assignExpression comma_assign
    (340) comma_assign -> . empty
    (397) empty -> .

  ! shift/reduce conflict for COLON resolved as shift
    COLON           shift and go to state 623
    COMMA           reduce using rule 397 (empty -> .)

  ! COMMA           [ shift and go to state 498 ]
  ! COLON           [ reduce using rule 397 (empty -> .) ]

    comma_assign                   shift and go to state 497
    empty                          shift and go to state 499

state 530

    (266) switchStatement -> SWITCH LPAREN . expression RPAREN statement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    blockStatement                 shift and go to state 237
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 624

state 531

    (253) labeledStatement -> IDENTIFIER COLON . declarationOrStatement_question
    (269) declarationOrStatement_question -> . declarationOrStatement
    (270) declarationOrStatement_question -> . empty
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (397) empty -> .
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for FOREACH_REVERSE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for UAMPERSAND resolved as shift
  ! shift/reduce conflict for EXCLAMATION resolved as shift
  ! shift/reduce conflict for UTIMES resolved as shift
  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for DOLLAR resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for INUMBER resolved as shift
  ! shift/reduce conflict for DNUMBER resolved as shift
  ! shift/reduce conflict for LIT_CHAR resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for DELETE resolved as shift
  ! shift/reduce conflict for CAST resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for LIT_STR resolved as shift
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    RBRACE          reduce using rule 397 (empty -> .)
    SEMICOLON       reduce using rule 397 (empty -> .)
    ELSE            reduce using rule 397 (empty -> .)
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! CASE            [ reduce using rule 397 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]
  ! LBRACE          [ reduce using rule 397 (empty -> .) ]
  ! IF              [ reduce using rule 397 (empty -> .) ]
  ! WHILE           [ reduce using rule 397 (empty -> .) ]
  ! DO              [ reduce using rule 397 (empty -> .) ]
  ! FOR             [ reduce using rule 397 (empty -> .) ]
  ! FOREACH         [ reduce using rule 397 (empty -> .) ]
  ! FOREACH_REVERSE [ reduce using rule 397 (empty -> .) ]
  ! SWITCH          [ reduce using rule 397 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 397 (empty -> .) ]
  ! BREAK           [ reduce using rule 397 (empty -> .) ]
  ! RETURN          [ reduce using rule 397 (empty -> .) ]
  ! GOTO            [ reduce using rule 397 (empty -> .) ]
  ! WITH            [ reduce using rule 397 (empty -> .) ]
  ! UAMPERSAND      [ reduce using rule 397 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 397 (empty -> .) ]
  ! UTIMES          [ reduce using rule 397 (empty -> .) ]
  ! UPLUS           [ reduce using rule 397 (empty -> .) ]
  ! UMINUS          [ reduce using rule 397 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 397 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 397 (empty -> .) ]
  ! LPAREN          [ reduce using rule 397 (empty -> .) ]
  ! DOT             [ reduce using rule 397 (empty -> .) ]
  ! DOLLAR          [ reduce using rule 397 (empty -> .) ]
  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! NULL            [ reduce using rule 397 (empty -> .) ]
  ! TRUE            [ reduce using rule 397 (empty -> .) ]
  ! FALSE           [ reduce using rule 397 (empty -> .) ]
  ! INUMBER         [ reduce using rule 397 (empty -> .) ]
  ! DNUMBER         [ reduce using rule 397 (empty -> .) ]
  ! LIT_CHAR        [ reduce using rule 397 (empty -> .) ]
  ! NEW             [ reduce using rule 397 (empty -> .) ]
  ! DELETE          [ reduce using rule 397 (empty -> .) ]
  ! CAST            [ reduce using rule 397 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 397 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! LIT_STR         [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    declarationOrStatement_question shift and go to state 625
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 627
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 626
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 532

    (272) breakStatement -> BREAK IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 628


state 533

    (271) breakStatement -> BREAK SEMICOLON .

    PRIVATE         reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    PROTECTED       reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    PUBLIC          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    STATIC          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    EXTERN          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    FINAL           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    AUTO            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    CONST           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    IMMUTABLE       reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    CASE            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    IF              reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    DO              reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    FOREACH_REVERSE reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    WITH            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    UAMPERSAND      reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    EXCLAMATION     reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    UTIMES          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    UPLUS           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    UMINUS          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    PLUS_PLUS       reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    MINUS_MINUS     reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    DOT             reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    DOLLAR          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    THIS            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    NULL            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    INUMBER         reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    DNUMBER         reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    LIT_CHAR        reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    NEW             reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    DELETE          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    CAST            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    LBRACKET        reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    MIXIN           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    IMPORT          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    LIT_STR         reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    ALIAS           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    CLASS           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    TILDE           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    UNION           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    INT             reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    UINT            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    LONG            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    USHORT          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    ULONG           reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    TYPEOF          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 271 (breakStatement -> BREAK SEMICOLON .)


state 534

    (255) blockStatement -> LBRACE declarationsAndStatements RBRACE .

    WHILE           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOT             reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PLUS_PLUS       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    MINUS_MINUS     reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LBRACKET        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LPAREN          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    POWER           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TIMES           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DIV             reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    MODULO          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PLUS            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    MINUS           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TILDE           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RIGHT_SHIFT     reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LEFT_SHIFT      reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IS_EQ           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NOT_EQ          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    AMPERSAND       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CARET           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PIPE            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOUBLE_AMPERSAND reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    QUESTION        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOUBLE_PIPE     reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ASSIGN          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_LEFT         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_RIGHT        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_PLUS         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_MINUS        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_TIMES        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_MODULO       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_AND_BIT      reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_DIV          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_OR_BIT       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EQ_XOR_BIT      reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    SEMICOLON       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    COMMA           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS_EQ         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER_EQ      reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IS_EQ_DIFF      reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NOT_EQ_DIFF     reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS_EQ_DIFF    reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LESS_DIFF       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER_EQ_DIFF reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GREATER_DIFF    reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PRIVATE         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PROTECTED       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    PUBLIC          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    STATIC          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EXTERN          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FINAL           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    AUTO            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CONST           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IMMUTABLE       reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CASE            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DEFAULT         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IDENTIFIER      reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LBRACE          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IF              reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DO              reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FOR             reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FOREACH         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FOREACH_REVERSE reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    SWITCH          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CONTINUE        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    BREAK           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RETURN          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    GOTO            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    WITH            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UAMPERSAND      reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    EXCLAMATION     reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UTIMES          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UPLUS           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UMINUS          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOLLAR          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    THIS            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NULL            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TRUE            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FALSE           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    INUMBER         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DNUMBER         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LIT_CHAR        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    NEW             reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DELETE          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CAST            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FUNCTION        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    MIXIN           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    IMPORT          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LIT_STR         reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ALIAS           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ENUM            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CLASS           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UNION           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    CHAR            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    INT             reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    UINT            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    LONG            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    FLOAT           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    DOUBLE          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    BOOL            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    SHORT           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    USHORT          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ULONG           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    TYPEOF          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RBRACE          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    ELSE            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RPAREN          reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RBRACKET        reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    RANGE           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    COLON           reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)
    $end            reduce using rule 255 (blockStatement -> LBRACE declarationsAndStatements RBRACE .)


state 535

    (256) ifStatement -> IF LPAREN . ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> IF LPAREN . ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (284) ifCondition -> . AUTO IDENTIFIER ASSIGN expression
    (285) ifCondition -> . type IDENTIFIER ASSIGN expression
    (286) ifCondition -> . expression
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    AUTO            shift and go to state 629
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    ifCondition                    shift and go to state 631
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 632
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 275
    expression                     shift and go to state 630

state 536

    (376) andExpression -> andExpression AMPERSAND cmpExpression .

    AMPERSAND       reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    CARET           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PIPE            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    QUESTION        reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOUBLE_PIPE     reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    ASSIGN          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_LEFT         reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_RIGHT        reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_PLUS         reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_MINUS        reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_TIMES        reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_MODULO       reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_AND_BIT      reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_DIV          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_OR_BIT       reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_XOR_BIT      reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    COMMA           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RPAREN          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    SEMICOLON       reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RBRACKET        reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOT             reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PLUS_PLUS       reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MINUS_MINUS     reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LBRACKET        reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LPAREN          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    POWER           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TIMES           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DIV             reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MODULO          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PLUS            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MINUS           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TILDE           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RIGHT_SHIFT     reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LEFT_SHIFT      reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IS_EQ           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    NOT_EQ          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_EQ         reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER         reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_EQ      reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IS_EQ_DIFF      reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    NOT_EQ_DIFF     reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_EQ_DIFF    reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_DIFF       reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_EQ_DIFF reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_DIFF    reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RANGE           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    COLON           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IDENTIFIER      reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    CONST           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IMMUTABLE       reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RBRACE          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    THIS            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    BOOL            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    SHORT           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    USHORT          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    INT             reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    UINT            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LONG            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    ULONG           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    CHAR            reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    FLOAT           reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TYPEOF          reduce using rule 376 (andExpression -> andExpression AMPERSAND cmpExpression .)


state 537

    (53) newExpression -> NEW type LBRACKET . assignExpression RBRACKET
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 633
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 538

    (54) newExpression -> NEW type arguments .

    DOT             reduce using rule 54 (newExpression -> NEW type arguments .)
    PLUS_PLUS       reduce using rule 54 (newExpression -> NEW type arguments .)
    MINUS_MINUS     reduce using rule 54 (newExpression -> NEW type arguments .)
    LBRACKET        reduce using rule 54 (newExpression -> NEW type arguments .)
    LPAREN          reduce using rule 54 (newExpression -> NEW type arguments .)
    POWER           reduce using rule 54 (newExpression -> NEW type arguments .)
    TIMES           reduce using rule 54 (newExpression -> NEW type arguments .)
    DIV             reduce using rule 54 (newExpression -> NEW type arguments .)
    MODULO          reduce using rule 54 (newExpression -> NEW type arguments .)
    PLUS            reduce using rule 54 (newExpression -> NEW type arguments .)
    MINUS           reduce using rule 54 (newExpression -> NEW type arguments .)
    TILDE           reduce using rule 54 (newExpression -> NEW type arguments .)
    RIGHT_SHIFT     reduce using rule 54 (newExpression -> NEW type arguments .)
    LEFT_SHIFT      reduce using rule 54 (newExpression -> NEW type arguments .)
    IS_EQ           reduce using rule 54 (newExpression -> NEW type arguments .)
    NOT_EQ          reduce using rule 54 (newExpression -> NEW type arguments .)
    AMPERSAND       reduce using rule 54 (newExpression -> NEW type arguments .)
    CARET           reduce using rule 54 (newExpression -> NEW type arguments .)
    PIPE            reduce using rule 54 (newExpression -> NEW type arguments .)
    DOUBLE_AMPERSAND reduce using rule 54 (newExpression -> NEW type arguments .)
    QUESTION        reduce using rule 54 (newExpression -> NEW type arguments .)
    DOUBLE_PIPE     reduce using rule 54 (newExpression -> NEW type arguments .)
    ASSIGN          reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_LEFT         reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_RIGHT        reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_PLUS         reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_MINUS        reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_TIMES        reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_MODULO       reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_AND_BIT      reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_DIV          reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_OR_BIT       reduce using rule 54 (newExpression -> NEW type arguments .)
    EQ_XOR_BIT      reduce using rule 54 (newExpression -> NEW type arguments .)
    RBRACKET        reduce using rule 54 (newExpression -> NEW type arguments .)
    COMMA           reduce using rule 54 (newExpression -> NEW type arguments .)
    LESS            reduce using rule 54 (newExpression -> NEW type arguments .)
    LESS_EQ         reduce using rule 54 (newExpression -> NEW type arguments .)
    GREATER         reduce using rule 54 (newExpression -> NEW type arguments .)
    GREATER_EQ      reduce using rule 54 (newExpression -> NEW type arguments .)
    IS_EQ_DIFF      reduce using rule 54 (newExpression -> NEW type arguments .)
    NOT_EQ_DIFF     reduce using rule 54 (newExpression -> NEW type arguments .)
    LESS_EQ_DIFF    reduce using rule 54 (newExpression -> NEW type arguments .)
    LESS_DIFF       reduce using rule 54 (newExpression -> NEW type arguments .)
    GREATER_EQ_DIFF reduce using rule 54 (newExpression -> NEW type arguments .)
    GREATER_DIFF    reduce using rule 54 (newExpression -> NEW type arguments .)
    SEMICOLON       reduce using rule 54 (newExpression -> NEW type arguments .)
    RPAREN          reduce using rule 54 (newExpression -> NEW type arguments .)
    RANGE           reduce using rule 54 (newExpression -> NEW type arguments .)
    COLON           reduce using rule 54 (newExpression -> NEW type arguments .)
    IDENTIFIER      reduce using rule 54 (newExpression -> NEW type arguments .)
    CONST           reduce using rule 54 (newExpression -> NEW type arguments .)
    IMMUTABLE       reduce using rule 54 (newExpression -> NEW type arguments .)
    RBRACE          reduce using rule 54 (newExpression -> NEW type arguments .)
    THIS            reduce using rule 54 (newExpression -> NEW type arguments .)
    BOOL            reduce using rule 54 (newExpression -> NEW type arguments .)
    SHORT           reduce using rule 54 (newExpression -> NEW type arguments .)
    USHORT          reduce using rule 54 (newExpression -> NEW type arguments .)
    INT             reduce using rule 54 (newExpression -> NEW type arguments .)
    UINT            reduce using rule 54 (newExpression -> NEW type arguments .)
    LONG            reduce using rule 54 (newExpression -> NEW type arguments .)
    ULONG           reduce using rule 54 (newExpression -> NEW type arguments .)
    CHAR            reduce using rule 54 (newExpression -> NEW type arguments .)
    FLOAT           reduce using rule 54 (newExpression -> NEW type arguments .)
    TYPEOF          reduce using rule 54 (newExpression -> NEW type arguments .)


state 539

    (56) newAnonClassExpression -> NEW arguments_question CLASS . arguments_question baseClassList_question structBody
    (57) arguments_question -> . arguments
    (58) arguments_question -> . empty
    (334) arguments -> . LPAREN argumentList_question RPAREN
    (397) empty -> .

    LPAREN          shift and go to state 389
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           reduce using rule 397 (empty -> .)
    IMMUTABLE       reduce using rule 397 (empty -> .)
    IDENTIFIER      reduce using rule 397 (empty -> .)
    LBRACE          reduce using rule 397 (empty -> .)

    arguments_question             shift and go to state 634
    arguments                      shift and go to state 385
    empty                          shift and go to state 635

state 540

    (334) arguments -> LPAREN argumentList_question . RPAREN

    RPAREN          shift and go to state 636


state 541

    (303) castExpression -> CAST LPAREN RPAREN . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 637
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 542

    (306) castQualifier -> CONST .
    (222) typeConstructor -> CONST .

    RPAREN          reduce using rule 306 (castQualifier -> CONST .)
    CONST           reduce using rule 222 (typeConstructor -> CONST .)
    IMMUTABLE       reduce using rule 222 (typeConstructor -> CONST .)
    THIS            reduce using rule 222 (typeConstructor -> CONST .)
    BOOL            reduce using rule 222 (typeConstructor -> CONST .)
    SHORT           reduce using rule 222 (typeConstructor -> CONST .)
    USHORT          reduce using rule 222 (typeConstructor -> CONST .)
    INT             reduce using rule 222 (typeConstructor -> CONST .)
    UINT            reduce using rule 222 (typeConstructor -> CONST .)
    LONG            reduce using rule 222 (typeConstructor -> CONST .)
    ULONG           reduce using rule 222 (typeConstructor -> CONST .)
    CHAR            reduce using rule 222 (typeConstructor -> CONST .)
    FLOAT           reduce using rule 222 (typeConstructor -> CONST .)
    TYPEOF          reduce using rule 222 (typeConstructor -> CONST .)
    IDENTIFIER      reduce using rule 222 (typeConstructor -> CONST .)


state 543

    (305) castExpression -> CAST LPAREN castQualifier . RPAREN unaryExpression

    RPAREN          shift and go to state 638


state 544

    (304) castExpression -> CAST LPAREN type . RPAREN unaryExpression

    RPAREN          shift and go to state 639


state 545

    (307) castQualifier -> IMMUTABLE .
    (223) typeConstructor -> IMMUTABLE .

    RPAREN          reduce using rule 307 (castQualifier -> IMMUTABLE .)
    CONST           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    THIS            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    BOOL            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    SHORT           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    USHORT          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    INT             reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    UINT            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    LONG            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    ULONG           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    CHAR            reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    FLOAT           reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    TYPEOF          reduce using rule 223 (typeConstructor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 223 (typeConstructor -> IMMUTABLE .)


state 546

    (36) primaryExpression -> type DOT IDENTIFIER .

    DOT             reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LBRACKET        reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LPAREN          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    POWER           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    TIMES           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    DIV             reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    MODULO          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    PLUS            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    MINUS           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    TILDE           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    IS_EQ           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    CARET           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    PIPE            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    QUESTION        reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    ASSIGN          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    RBRACKET        reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    RANGE           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LESS            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER         reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_DIFF       reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_DIFF    reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    RPAREN          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    COMMA           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    COLON           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    CONST           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    IMMUTABLE       reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    RBRACE          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    THIS            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    BOOL            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    SHORT           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    USHORT          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    INT             reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    UINT            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    LONG            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    ULONG           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    CHAR            reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    FLOAT           reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)
    TYPEOF          reduce using rule 36 (primaryExpression -> type DOT IDENTIFIER .)


state 547

    (365) ternaryExpression -> orOrExpression QUESTION expression . COLON ternaryExpression
    (343) expression -> expression . COMMA assignExpression

    COLON           shift and go to state 640
    COMMA           shift and go to state 472


state 548

    (368) orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .
    (370) andAndExpression -> andAndExpression . DOUBLE_AMPERSAND orExpression

    QUESTION        reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOUBLE_PIPE     reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    ASSIGN          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_LEFT         reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_RIGHT        reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_PLUS         reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_MINUS        reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_TIMES        reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_MODULO       reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_AND_BIT      reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_DIV          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_OR_BIT       reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_XOR_BIT      reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    COMMA           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    SEMICOLON       reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RBRACKET        reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RPAREN          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IDENTIFIER      reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    CONST           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IMMUTABLE       reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RBRACE          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    THIS            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    BOOL            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    SHORT           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    USHORT          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    INT             reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    UINT            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LONG            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    ULONG           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    CHAR            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    FLOAT           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TYPEOF          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RANGE           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    COLON           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOT             reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PLUS_PLUS       reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MINUS_MINUS     reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LBRACKET        reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LPAREN          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    POWER           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TIMES           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DIV             reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MODULO          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PLUS            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MINUS           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TILDE           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RIGHT_SHIFT     reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LEFT_SHIFT      reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IS_EQ           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    NOT_EQ          reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    AMPERSAND       reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    CARET           reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PIPE            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS            reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_EQ         reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER         reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_EQ      reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IS_EQ_DIFF      reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    NOT_EQ_DIFF     reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_EQ_DIFF    reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_DIFF       reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_EQ_DIFF reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_DIFF    reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 333

  ! DOUBLE_AMPERSAND [ reduce using rule 368 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .) ]


state 549

    (349) importExpression -> IMPORT LBRACKET assignExpression . RBRACKET

    RBRACKET        shift and go to state 641


state 550

    (353) assignExpression -> ternaryExpression assignOperator expression .
    (343) expression -> expression . COMMA assignExpression

  ! shift/reduce conflict for COMMA resolved as shift
    DOT             reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    PLUS_PLUS       reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    MINUS_MINUS     reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LBRACKET        reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LPAREN          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    POWER           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    TIMES           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    DIV             reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    MODULO          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    PLUS            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    MINUS           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    TILDE           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    RIGHT_SHIFT     reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LEFT_SHIFT      reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    IS_EQ           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    NOT_EQ          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    AMPERSAND       reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    CARET           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    PIPE            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    DOUBLE_AMPERSAND reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    QUESTION        reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    DOUBLE_PIPE     reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    ASSIGN          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_LEFT         reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_RIGHT        reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_PLUS         reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_MINUS        reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_TIMES        reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_MODULO       reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_AND_BIT      reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_DIV          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_OR_BIT       reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_XOR_BIT      reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    RPAREN          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_EQ         reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER         reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_EQ      reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    IS_EQ_DIFF      reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    NOT_EQ_DIFF     reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_EQ_DIFF    reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_DIFF       reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_EQ_DIFF reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_DIFF    reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    RBRACKET        reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    RANGE           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    SEMICOLON       reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    COLON           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    IDENTIFIER      reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    CONST           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    IMMUTABLE       reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    RBRACE          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    THIS            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    BOOL            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    SHORT           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    USHORT          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    INT             reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    UINT            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    LONG            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    ULONG           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    CHAR            reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    FLOAT           reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    TYPEOF          reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .)
    COMMA           shift and go to state 472

  ! COMMA           [ reduce using rule 353 (assignExpression -> ternaryExpression assignOperator expression .) ]


state 551

    (14) powExpression -> powExpression POWER unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

    PLUS_PLUS       reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    MINUS_MINUS     reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    POWER           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    TIMES           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    DIV             reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    MODULO          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    PLUS            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    MINUS           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    TILDE           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    RIGHT_SHIFT     reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    LEFT_SHIFT      reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    IS_EQ           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    NOT_EQ          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    AMPERSAND       reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    CARET           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    PIPE            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    QUESTION        reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    DOUBLE_PIPE     reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    ASSIGN          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_LEFT         reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_RIGHT        reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_PLUS         reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_MINUS        reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_TIMES        reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_MODULO       reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_AND_BIT      reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_DIV          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_OR_BIT       reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    EQ_XOR_BIT      reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    RPAREN          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    LESS            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    LESS_EQ         reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    GREATER         reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    GREATER_EQ      reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    IS_EQ_DIFF      reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    LESS_DIFF       reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    GREATER_DIFF    reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    RBRACKET        reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    RANGE           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    COMMA           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    SEMICOLON       reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    COLON           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    IDENTIFIER      reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    CONST           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    IMMUTABLE       reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    RBRACE          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    THIS            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    BOOL            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    SHORT           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    USHORT          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    INT             reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    UINT            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    LONG            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    ULONG           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    CHAR            reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    FLOAT           reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    TYPEOF          reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .)
    DOT             shift and go to state 423
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .) ]
  ! LPAREN          [ reduce using rule 14 (powExpression -> powExpression POWER unaryExpression .) ]
  ! PLUS_PLUS       [ shift and go to state 424 ]
  ! MINUS_MINUS     [ shift and go to state 425 ]

    arguments                      shift and go to state 426

state 552

    (383) equalExpression -> shiftExpression IS_EQ shiftExpression .
    (381) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (382) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression

    AMPERSAND       reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    CARET           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PIPE            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    QUESTION        reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOUBLE_PIPE     reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    ASSIGN          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_LEFT         reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_RIGHT        reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_PLUS         reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_MINUS        reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_TIMES        reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_MODULO       reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_AND_BIT      reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_DIV          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_OR_BIT       reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_XOR_BIT      reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RPAREN          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    COMMA           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    COLON           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    SEMICOLON       reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RBRACKET        reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RANGE           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RBRACE          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOT             reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PLUS_PLUS       reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MINUS_MINUS     reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LBRACKET        reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LPAREN          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    POWER           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TIMES           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DIV             reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MODULO          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PLUS            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MINUS           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TILDE           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IS_EQ           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    NOT_EQ          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_EQ         reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER         reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_EQ      reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IS_EQ_DIFF      reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_DIFF       reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_DIFF    reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IDENTIFIER      reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    CONST           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IMMUTABLE       reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    THIS            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    BOOL            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    SHORT           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    USHORT          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    INT             reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    UINT            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LONG            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    ULONG           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    CHAR            reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    FLOAT           reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TYPEOF          reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RIGHT_SHIFT     shift and go to state 416
    LEFT_SHIFT      shift and go to state 415

  ! RIGHT_SHIFT     [ reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 383 (equalExpression -> shiftExpression IS_EQ shiftExpression .) ]


state 553

    (382) shiftExpression -> shiftExpression LEFT_SHIFT addExpression .
    (6) addExpression -> addExpression . PLUS mulExpression
    (7) addExpression -> addExpression . MINUS mulExpression
    (8) addExpression -> addExpression . TILDE mulExpression

    RIGHT_SHIFT     reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LEFT_SHIFT      reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IS_EQ           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    NOT_EQ          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    AMPERSAND       reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    CARET           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PIPE            reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOUBLE_AMPERSAND reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    QUESTION        reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOUBLE_PIPE     reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    ASSIGN          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_LEFT         reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_RIGHT        reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_PLUS         reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_MINUS        reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_TIMES        reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_MODULO       reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_AND_BIT      reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_DIV          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_OR_BIT       reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_XOR_BIT      reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RPAREN          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    COMMA           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS            reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_EQ         reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER         reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_EQ      reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IS_EQ_DIFF      reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    NOT_EQ_DIFF     reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_EQ_DIFF    reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_DIFF       reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_EQ_DIFF reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_DIFF    reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    SEMICOLON       reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RBRACKET        reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RANGE           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    COLON           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOT             reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PLUS_PLUS       reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    MINUS_MINUS     reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LBRACKET        reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LPAREN          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    POWER           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    TIMES           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DIV             reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    MODULO          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IDENTIFIER      reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    CONST           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IMMUTABLE       reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RBRACE          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    THIS            reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    BOOL            reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    SHORT           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    USHORT          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    INT             reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    UINT            reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LONG            reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    ULONG           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    CHAR            reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    FLOAT           reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    TYPEOF          reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PLUS            shift and go to state 419
    MINUS           shift and go to state 420
    TILDE           shift and go to state 421

  ! PLUS            [ reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]
  ! MINUS           [ reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]
  ! TILDE           [ reduce using rule 382 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]


state 554

    (381) shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .
    (6) addExpression -> addExpression . PLUS mulExpression
    (7) addExpression -> addExpression . MINUS mulExpression
    (8) addExpression -> addExpression . TILDE mulExpression

    RIGHT_SHIFT     reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LEFT_SHIFT      reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IS_EQ           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    NOT_EQ          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    AMPERSAND       reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    CARET           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PIPE            reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOUBLE_AMPERSAND reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    QUESTION        reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOUBLE_PIPE     reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    ASSIGN          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_LEFT         reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_RIGHT        reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_PLUS         reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_MINUS        reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_TIMES        reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_MODULO       reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_AND_BIT      reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_DIV          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_OR_BIT       reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_XOR_BIT      reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RPAREN          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    COMMA           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS            reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_EQ         reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER         reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_EQ      reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IS_EQ_DIFF      reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    NOT_EQ_DIFF     reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_EQ_DIFF    reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_DIFF       reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_EQ_DIFF reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_DIFF    reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    SEMICOLON       reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RBRACKET        reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RANGE           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    COLON           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOT             reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PLUS_PLUS       reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    MINUS_MINUS     reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LBRACKET        reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LPAREN          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    POWER           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    TIMES           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DIV             reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    MODULO          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IDENTIFIER      reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    CONST           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IMMUTABLE       reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RBRACE          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    THIS            reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    BOOL            reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    SHORT           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    USHORT          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    INT             reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    UINT            reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LONG            reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    ULONG           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    CHAR            reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    FLOAT           reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    TYPEOF          reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PLUS            shift and go to state 419
    MINUS           shift and go to state 420
    TILDE           shift and go to state 421

  ! PLUS            [ reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]
  ! MINUS           [ reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]
  ! TILDE           [ reduce using rule 381 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]


state 555

    (384) equalExpression -> shiftExpression NOT_EQ shiftExpression .
    (381) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (382) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression

    AMPERSAND       reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    CARET           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PIPE            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    QUESTION        reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOUBLE_PIPE     reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    ASSIGN          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_LEFT         reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_RIGHT        reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_PLUS         reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_MINUS        reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_TIMES        reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_MODULO       reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_AND_BIT      reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_DIV          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_OR_BIT       reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_XOR_BIT      reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RPAREN          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    COMMA           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    COLON           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    SEMICOLON       reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RBRACKET        reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RANGE           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RBRACE          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOT             reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PLUS_PLUS       reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MINUS_MINUS     reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LBRACKET        reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LPAREN          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    POWER           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TIMES           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DIV             reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MODULO          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PLUS            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MINUS           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TILDE           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IS_EQ           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    NOT_EQ          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_EQ         reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER         reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_EQ      reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IS_EQ_DIFF      reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_DIFF       reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_DIFF    reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IDENTIFIER      reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    CONST           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IMMUTABLE       reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    THIS            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    BOOL            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    SHORT           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    USHORT          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    INT             reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    UINT            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LONG            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    ULONG           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    CHAR            reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    FLOAT           reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TYPEOF          reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RIGHT_SHIFT     shift and go to state 416
    LEFT_SHIFT      shift and go to state 415

  ! RIGHT_SHIFT     [ reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 384 (equalExpression -> shiftExpression NOT_EQ shiftExpression .) ]


state 556

    (372) orExpression -> orExpression PIPE xorExpression .
    (374) xorExpression -> xorExpression . CARET andExpression

    PIPE            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    DOUBLE_AMPERSAND reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    QUESTION        reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    DOUBLE_PIPE     reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    ASSIGN          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_LEFT         reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_RIGHT        reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_PLUS         reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_MINUS        reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_TIMES        reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_MODULO       reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_AND_BIT      reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_DIV          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_OR_BIT       reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    EQ_XOR_BIT      reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    SEMICOLON       reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    COMMA           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    DOT             reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    PLUS_PLUS       reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    MINUS_MINUS     reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LBRACKET        reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LPAREN          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    POWER           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    TIMES           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    DIV             reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    MODULO          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    PLUS            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    MINUS           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    TILDE           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    RIGHT_SHIFT     reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LEFT_SHIFT      reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    IS_EQ           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    NOT_EQ          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    AMPERSAND       reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    RPAREN          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LESS            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LESS_EQ         reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    GREATER         reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_EQ      reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    IS_EQ_DIFF      reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    NOT_EQ_DIFF     reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LESS_EQ_DIFF    reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LESS_DIFF       reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_EQ_DIFF reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_DIFF    reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    RBRACKET        reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    RANGE           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    COLON           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    IDENTIFIER      reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    CONST           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    IMMUTABLE       reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    RBRACE          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    THIS            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    BOOL            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    SHORT           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    USHORT          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    INT             reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    UINT            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    LONG            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    ULONG           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    CHAR            reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    FLOAT           reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    TYPEOF          reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .)
    CARET           shift and go to state 340

  ! CARET           [ reduce using rule 372 (orExpression -> orExpression PIPE xorExpression .) ]


state 557

    (6) addExpression -> addExpression PLUS mulExpression .
    (10) mulExpression -> mulExpression . TIMES powExpression
    (11) mulExpression -> mulExpression . DIV powExpression
    (12) mulExpression -> mulExpression . MODULO powExpression

    PLUS            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    MINUS           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    TILDE           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    RIGHT_SHIFT     reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LEFT_SHIFT      reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    IS_EQ           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    NOT_EQ          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    AMPERSAND       reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    CARET           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    PIPE            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    QUESTION        reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    DOUBLE_PIPE     reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    ASSIGN          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_LEFT         reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_RIGHT        reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_PLUS         reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_MINUS        reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_TIMES        reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_MODULO       reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_AND_BIT      reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_DIV          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_OR_BIT       reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    EQ_XOR_BIT      reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    RBRACKET        reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LESS            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LESS_EQ         reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    GREATER         reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_EQ      reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    IS_EQ_DIFF      reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    NOT_EQ_DIFF     reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LESS_EQ_DIFF    reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LESS_DIFF       reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_EQ_DIFF reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_DIFF    reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    SEMICOLON       reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    COMMA           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    RPAREN          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    COLON           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    DOT             reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    PLUS_PLUS       reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    MINUS_MINUS     reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LBRACKET        reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LPAREN          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    POWER           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    RANGE           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    IDENTIFIER      reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    CONST           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    IMMUTABLE       reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    RBRACE          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    THIS            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    BOOL            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    SHORT           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    USHORT          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    INT             reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    UINT            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    LONG            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    ULONG           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    CHAR            reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    FLOAT           reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    TYPEOF          reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .)
    TIMES           shift and go to state 336
    DIV             shift and go to state 334
    MODULO          shift and go to state 335

  ! TIMES           [ reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .) ]
  ! DIV             [ reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .) ]
  ! MODULO          [ reduce using rule 6 (addExpression -> addExpression PLUS mulExpression .) ]


state 558

    (7) addExpression -> addExpression MINUS mulExpression .
    (10) mulExpression -> mulExpression . TIMES powExpression
    (11) mulExpression -> mulExpression . DIV powExpression
    (12) mulExpression -> mulExpression . MODULO powExpression

    PLUS            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    MINUS           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    TILDE           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    RIGHT_SHIFT     reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LEFT_SHIFT      reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    IS_EQ           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    NOT_EQ          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    AMPERSAND       reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    CARET           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    PIPE            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    QUESTION        reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    DOUBLE_PIPE     reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    ASSIGN          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_LEFT         reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_RIGHT        reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_PLUS         reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_MINUS        reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_TIMES        reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_MODULO       reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_AND_BIT      reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_DIV          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_OR_BIT       reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    EQ_XOR_BIT      reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    RBRACKET        reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LESS            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LESS_EQ         reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    GREATER         reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_EQ      reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    IS_EQ_DIFF      reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    NOT_EQ_DIFF     reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LESS_EQ_DIFF    reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LESS_DIFF       reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_EQ_DIFF reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_DIFF    reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    SEMICOLON       reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    COMMA           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    RPAREN          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    COLON           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    DOT             reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    PLUS_PLUS       reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    MINUS_MINUS     reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LBRACKET        reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LPAREN          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    POWER           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    RANGE           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    IDENTIFIER      reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    CONST           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    IMMUTABLE       reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    RBRACE          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    THIS            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    BOOL            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    SHORT           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    USHORT          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    INT             reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    UINT            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    LONG            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    ULONG           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    CHAR            reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    FLOAT           reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    TYPEOF          reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .)
    TIMES           shift and go to state 336
    DIV             shift and go to state 334
    MODULO          shift and go to state 335

  ! TIMES           [ reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .) ]
  ! DIV             [ reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .) ]
  ! MODULO          [ reduce using rule 7 (addExpression -> addExpression MINUS mulExpression .) ]


state 559

    (8) addExpression -> addExpression TILDE mulExpression .
    (10) mulExpression -> mulExpression . TIMES powExpression
    (11) mulExpression -> mulExpression . DIV powExpression
    (12) mulExpression -> mulExpression . MODULO powExpression

    PLUS            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    MINUS           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    TILDE           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    RIGHT_SHIFT     reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LEFT_SHIFT      reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    IS_EQ           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    NOT_EQ          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    AMPERSAND       reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    CARET           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    PIPE            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    QUESTION        reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    DOUBLE_PIPE     reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    ASSIGN          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_LEFT         reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_RIGHT        reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_PLUS         reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_MINUS        reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_TIMES        reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_MODULO       reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_AND_BIT      reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_DIV          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_OR_BIT       reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    EQ_XOR_BIT      reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    RBRACKET        reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LESS            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LESS_EQ         reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    GREATER         reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_EQ      reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    IS_EQ_DIFF      reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    NOT_EQ_DIFF     reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LESS_EQ_DIFF    reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LESS_DIFF       reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_EQ_DIFF reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_DIFF    reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    SEMICOLON       reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    COMMA           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    RPAREN          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    COLON           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    DOT             reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    PLUS_PLUS       reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    MINUS_MINUS     reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LBRACKET        reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LPAREN          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    POWER           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    RANGE           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    IDENTIFIER      reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    CONST           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    IMMUTABLE       reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    RBRACE          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    THIS            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    BOOL            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    SHORT           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    USHORT          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    INT             reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    UINT            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    LONG            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    ULONG           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    CHAR            reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    FLOAT           reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    TYPEOF          reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .)
    TIMES           shift and go to state 336
    DIV             shift and go to state 334
    MODULO          shift and go to state 335

  ! TIMES           [ reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .) ]
  ! DIV             [ reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .) ]
  ! MODULO          [ reduce using rule 8 (addExpression -> addExpression TILDE mulExpression .) ]


state 560

    (317) indexExpression -> unaryExpression LBRACKET index . comma_index RBRACKET
    (318) comma_index -> . COMMA index comma_index
    (319) comma_index -> . empty
    (397) empty -> .

    COMMA           shift and go to state 642
    RBRACKET        reduce using rule 397 (empty -> .)

    comma_index                    shift and go to state 643
    empty                          shift and go to state 644

state 561

    (320) index -> assignExpression .
    (321) index -> assignExpression . RANGE assignExpression

    COMMA           reduce using rule 320 (index -> assignExpression .)
    RBRACKET        reduce using rule 320 (index -> assignExpression .)
    RANGE           shift and go to state 645


state 562

    (316) indexExpression -> unaryExpression LBRACKET RBRACKET .

    DOT             reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MINUS_MINUS     reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LPAREN          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    POWER           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TIMES           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DIV             reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MODULO          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PLUS            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MINUS           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TILDE           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    CARET           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PIPE            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    QUESTION        reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RPAREN          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER         reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IS_EQ_DIFF      reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_DIFF       reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_DIFF    reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RANGE           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    COMMA           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    COLON           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    CONST           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IMMUTABLE       reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RBRACE          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    THIS            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    BOOL            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    SHORT           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    USHORT          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    INT             reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    UINT            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LONG            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    ULONG           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    CHAR            reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    FLOAT           reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TYPEOF          reduce using rule 316 (indexExpression -> unaryExpression LBRACKET RBRACKET .)


state 563

    (29) unaryExpression -> unaryExpression DOT newExpression .

    DOT             reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    PLUS_PLUS       reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    MINUS_MINUS     reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LBRACKET        reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LPAREN          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    POWER           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    TIMES           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    DIV             reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    MODULO          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    PLUS            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    MINUS           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    TILDE           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    RIGHT_SHIFT     reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LEFT_SHIFT      reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    IS_EQ           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    NOT_EQ          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    AMPERSAND       reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    CARET           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    PIPE            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    DOUBLE_AMPERSAND reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    QUESTION        reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    DOUBLE_PIPE     reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    ASSIGN          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_LEFT         reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_RIGHT        reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_PLUS         reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_MINUS        reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_TIMES        reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_MODULO       reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_AND_BIT      reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_DIV          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_OR_BIT       reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_XOR_BIT      reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    COMMA           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    SEMICOLON       reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_EQ         reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER         reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_EQ      reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    IS_EQ_DIFF      reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    NOT_EQ_DIFF     reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_EQ_DIFF    reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_DIFF       reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_EQ_DIFF reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_DIFF    reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    RPAREN          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    RBRACKET        reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    COLON           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    RANGE           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    IDENTIFIER      reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    CONST           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    IMMUTABLE       reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    RBRACE          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    THIS            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    BOOL            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    SHORT           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    USHORT          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    INT             reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    UINT            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    LONG            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    ULONG           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    CHAR            reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    FLOAT           reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)
    TYPEOF          reduce using rule 29 (unaryExpression -> unaryExpression DOT newExpression .)


state 564

    (30) unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .

    DOT             reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    POWER           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    CONST           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    IMMUTABLE       reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RBRACE          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    THIS            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    BOOL            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    SHORT           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    USHORT          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    INT             reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    UINT            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LONG            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    ULONG           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    CHAR            reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    FLOAT           reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    TYPEOF          reduce using rule 30 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)


state 565

    (39) primaryExpression -> LPAREN expression RPAREN .

    DOT             reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    PLUS_PLUS       reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    MINUS_MINUS     reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LEFT_SHIFT      reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    CARET           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    PIPE            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    QUESTION        reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_LEFT         reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_RIGHT        reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_TIMES        reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_MODULO       reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_AND_BIT      reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_DIV          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_OR_BIT       reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    IS_EQ_DIFF      reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    NOT_EQ_DIFF     reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_EQ_DIFF    reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_DIFF       reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_EQ_DIFF reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_DIFF    reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    IMMUTABLE       reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    THIS            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    BOOL            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    SHORT           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    USHORT          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    INT             reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    UINT            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    ULONG           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)
    TYPEOF          reduce using rule 39 (primaryExpression -> LPAREN expression RPAREN .)


state 566

    (28) unaryExpression -> LPAREN type RPAREN . DOT identifierOrTemplateInstance

    DOT             shift and go to state 646


state 567

    (161) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DOUBLE          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    $end            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UAMPERSAND      reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UTIMES          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UPLUS           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    UMINUS          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    MINUS_MINUS     reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 161 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute functionBody .)


state 568

    (162) destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOUBLE          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    $end            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UAMPERSAND      reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UTIMES          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UPLUS           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UMINUS          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    MINUS_MINUS     reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 162 (destructor -> TILDE THIS LPAREN RPAREN multiple_memberFunctionAttribute SEMICOLON .)


state 569

    (125) importBindstr -> COMMA importBind . importBindstr
    (125) importBindstr -> . COMMA importBind importBindstr
    (126) importBindstr -> . empty
    (397) empty -> .

    COMMA           shift and go to state 434
    SEMICOLON       reduce using rule 397 (empty -> .)

    empty                          shift and go to state 435
    importBindstr                  shift and go to state 647

state 570

    (123) importBind -> IDENTIFIER ASSIGN IDENTIFIER .

    COMMA           reduce using rule 123 (importBind -> IDENTIFIER ASSIGN IDENTIFIER .)
    SEMICOLON       reduce using rule 123 (importBind -> IDENTIFIER ASSIGN IDENTIFIER .)


state 571

    (115) importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .

    PRIVATE         reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    PROTECTED       reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    PUBLIC          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    STATIC          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    EXTERN          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FINAL           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    AUTO            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CONST           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IMMUTABLE       reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ALIAS           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ENUM            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CLASS           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    THIS            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TILDE           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IMPORT          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UNION           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    MIXIN           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CHAR            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    INT             reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UINT            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LONG            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FLOAT           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DOUBLE          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    BOOL            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    SHORT           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    USHORT          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ULONG           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TYPEOF          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IDENTIFIER      reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    $end            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    RBRACE          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CASE            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DEFAULT         reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LBRACE          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    IF              reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    WHILE           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DO              reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FOR             reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FOREACH         reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FOREACH_REVERSE reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    SWITCH          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CONTINUE        reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    BREAK           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    RETURN          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    GOTO            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    WITH            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UAMPERSAND      reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    EXCLAMATION     reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UTIMES          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UPLUS           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    UMINUS          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    PLUS_PLUS       reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    MINUS_MINUS     reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LPAREN          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DOT             reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DOLLAR          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    NULL            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    TRUE            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FALSE           reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    INUMBER         reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DNUMBER         reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LIT_CHAR        reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    NEW             reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    DELETE          reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    CAST            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LBRACKET        reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    FUNCTION        reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    LIT_STR         reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    SEMICOLON       reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)
    ELSE            reduce using rule 115 (importDeclaration -> IMPORT singleImport comma_singleImport COMMA importBindings SEMICOLON .)


state 572

    (213) comma_baseclass_multiple -> COMMA baseClass . comma_baseclass_multiple
    (213) comma_baseclass_multiple -> . COMMA baseClass comma_baseclass_multiple
    (214) comma_baseclass_multiple -> . empty
    (397) empty -> .

    COMMA           shift and go to state 444
    LBRACE          reduce using rule 397 (empty -> .)

    comma_baseclass_multiple       shift and go to state 648
    empty                          shift and go to state 445

state 573

    (167) anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .

    IDENTIFIER      reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    CONST           reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    IMMUTABLE       reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    THIS            reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    BOOL            reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    SHORT           reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    USHORT          reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    INT             reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    UINT            reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    LONG            reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    ULONG           reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    CHAR            reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    FLOAT           reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    TYPEOF          reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)
    RBRACE          reduce using rule 167 (anonymousEnumMember -> IDENTIFIER ASSIGN assignExpression .)


state 574

    (166) anonymousEnumMember -> type IDENTIFIER ASSIGN . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 649
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 575

    (173) anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .

    PRIVATE         reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PROTECTED       reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PUBLIC          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    STATIC          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    EXTERN          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FINAL           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    AUTO            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CONST           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IMMUTABLE       reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ALIAS           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ENUM            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CLASS           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    THIS            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TILDE           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IMPORT          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UNION           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    MIXIN           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CHAR            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    INT             reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UINT            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LONG            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FLOAT           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DOUBLE          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    BOOL            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SHORT           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    USHORT          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ULONG           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TYPEOF          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IDENTIFIER      reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    $end            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RBRACE          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CASE            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DEFAULT         reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LBRACE          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    IF              reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    WHILE           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DO              reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOR             reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOREACH         reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FOREACH_REVERSE reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SWITCH          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CONTINUE        reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    BREAK           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    RETURN          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    GOTO            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    WITH            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UAMPERSAND      reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    EXCLAMATION     reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UTIMES          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UPLUS           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    UMINUS          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    PLUS_PLUS       reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    MINUS_MINUS     reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LPAREN          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DOT             reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DOLLAR          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    NULL            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    TRUE            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FALSE           reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    INUMBER         reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DNUMBER         reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LIT_CHAR        reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    NEW             reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    DELETE          reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    CAST            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LBRACKET        reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    FUNCTION        reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    LIT_STR         reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    SEMICOLON       reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)
    ELSE            reduce using rule 173 (anonymousEnumDeclaration -> ENUM COMMA_TYPE_Question LBRACE anonymousEnumMember multipleanonymousEnumMember RBRACE .)


state 576

    (171) multipleanonymousEnumMember -> anonymousEnumMember multipleanonymousEnumMember .

    RBRACE          reduce using rule 171 (multipleanonymousEnumMember -> anonymousEnumMember multipleanonymousEnumMember .)


state 577

    (163) enumBody -> LBRACE enumMember comma_enumMember . RBRACE

    RBRACE          shift and go to state 650


state 578

    (164) comma_enumMember -> COMMA . enumMember comma_enumMember
    (176) enumMember -> . IDENTIFIER
    (177) enumMember -> . IDENTIFIER ASSIGN assignExpression

    IDENTIFIER      shift and go to state 453

    enumMember                     shift and go to state 651

state 579

    (165) comma_enumMember -> empty .

    RBRACE          reduce using rule 165 (comma_enumMember -> empty .)


state 580

    (177) enumMember -> IDENTIFIER ASSIGN . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 652
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 581

    (90) CommaDeclarator -> COMMA declarator CommaDeclarator .

    SEMICOLON       reduce using rule 90 (CommaDeclarator -> COMMA declarator CommaDeclarator .)


state 582

    (99) declarator -> IDENTIFIER ASSIGN . initializer
    (100) initializer -> . VOID
    (101) initializer -> . nonVoidInitializer
    (102) nonVoidInitializer -> . assignExpression
    (103) nonVoidInitializer -> . arrayInitializer
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (104) arrayInitializer -> . LBRACKET RBRACKET
    (105) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    VOID            shift and go to state 457
    LBRACKET        shift and go to state 458
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    initializer                    shift and go to state 460
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    arrayInitializer               shift and go to state 462
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    LIT_STRPlus                    shift and go to state 227
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    nonVoidInitializer             shift and go to state 459
    deleteExpression               shift and go to state 212
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 461
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    ternaryExpression              shift and go to state 226
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 583

    (110) arrayMemberInitialization -> nonVoidInitializer .

    COMMA           reduce using rule 110 (arrayMemberInitialization -> nonVoidInitializer .)
    RBRACKET        reduce using rule 110 (arrayMemberInitialization -> nonVoidInitializer .)


state 584

    (105) arrayInitializer -> LBRACKET arrayMemberInitialization . comma_arrayMemberInitialization RBRACKET
    (106) comma_arrayMemberInitialization -> . COMMA arrayMemberInitialization comma_arrayMemberInitialization
    (107) comma_arrayMemberInitialization -> . empty
    (397) empty -> .

    COMMA           shift and go to state 654
    RBRACKET        reduce using rule 397 (empty -> .)

    empty                          shift and go to state 655
    comma_arrayMemberInitialization shift and go to state 653

state 585

    (109) arrayMemberInitialization -> assignExpression . COLON nonVoidInitializer
    (102) nonVoidInitializer -> assignExpression .
    (337) argumentList -> assignExpression .

  ! reduce/reduce conflict for COMMA resolved using rule 102 (nonVoidInitializer -> assignExpression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 102 (nonVoidInitializer -> assignExpression .)
    COLON           shift and go to state 656
    COMMA           reduce using rule 102 (nonVoidInitializer -> assignExpression .)
    RBRACKET        reduce using rule 102 (nonVoidInitializer -> assignExpression .)

  ! COMMA           [ reduce using rule 337 (argumentList -> assignExpression .) ]
  ! RBRACKET        [ reduce using rule 337 (argumentList -> assignExpression .) ]


state 586

    (104) arrayInitializer -> LBRACKET RBRACKET .

    COMMA           reduce using rule 104 (arrayInitializer -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 104 (arrayInitializer -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 104 (arrayInitializer -> LBRACKET RBRACKET .)


state 587

    (82) variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .

    PRIVATE         reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    PROTECTED       reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    PUBLIC          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    STATIC          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    EXTERN          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FINAL           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    AUTO            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CONST           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IMMUTABLE       reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ALIAS           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ENUM            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CLASS           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    THIS            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TILDE           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IMPORT          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UNION           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    MIXIN           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CHAR            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    INT             reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UINT            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LONG            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FLOAT           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DOUBLE          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    BOOL            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    SHORT           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    USHORT          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ULONG           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TYPEOF          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IDENTIFIER      reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    $end            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    RBRACE          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CASE            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DEFAULT         reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LBRACE          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    IF              reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    WHILE           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DO              reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FOR             reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FOREACH         reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FOREACH_REVERSE reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    SWITCH          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CONTINUE        reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    BREAK           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    RETURN          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    GOTO            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    WITH            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UAMPERSAND      reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    EXCLAMATION     reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UTIMES          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UPLUS           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    UMINUS          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    PLUS_PLUS       reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    MINUS_MINUS     reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LPAREN          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DOT             reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DOLLAR          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    NULL            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    TRUE            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FALSE           reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    INUMBER         reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DNUMBER         reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LIT_CHAR        reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    NEW             reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    DELETE          reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    CAST            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LBRACKET        reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    FUNCTION        reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    LIT_STR         reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    SEMICOLON       reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)
    ELSE            reduce using rule 82 (variableDeclaration -> multiplestorageClass BasicTypeX IDENTIFIER ASSIGN functionBody SEMICOLON .)


state 588

    (230) typeSuffix -> LBRACKET assignExpression RANGE assignExpression . RBRACKET

    RBRACKET        shift and go to state 657


state 589

    (190) typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT . typeIdentifierPart
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    typeIdentifierPart             shift and go to state 658
    identifierOrTemplateInstance   shift and go to state 92

state 590

    (343) expression -> expression COMMA assignExpression .

    RPAREN          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    COMMA           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    SEMICOLON       reduce using rule 343 (expression -> expression COMMA assignExpression .)
    RBRACKET        reduce using rule 343 (expression -> expression COMMA assignExpression .)
    DOT             reduce using rule 343 (expression -> expression COMMA assignExpression .)
    PLUS_PLUS       reduce using rule 343 (expression -> expression COMMA assignExpression .)
    MINUS_MINUS     reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LBRACKET        reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LPAREN          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    POWER           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    TIMES           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    DIV             reduce using rule 343 (expression -> expression COMMA assignExpression .)
    MODULO          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    PLUS            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    MINUS           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    TILDE           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    RIGHT_SHIFT     reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LEFT_SHIFT      reduce using rule 343 (expression -> expression COMMA assignExpression .)
    IS_EQ           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    NOT_EQ          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    AMPERSAND       reduce using rule 343 (expression -> expression COMMA assignExpression .)
    CARET           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    PIPE            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 343 (expression -> expression COMMA assignExpression .)
    QUESTION        reduce using rule 343 (expression -> expression COMMA assignExpression .)
    DOUBLE_PIPE     reduce using rule 343 (expression -> expression COMMA assignExpression .)
    ASSIGN          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_LEFT         reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_RIGHT        reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_PLUS         reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_MINUS        reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_TIMES        reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_MODULO       reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_AND_BIT      reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_DIV          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_OR_BIT       reduce using rule 343 (expression -> expression COMMA assignExpression .)
    EQ_XOR_BIT      reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LESS            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LESS_EQ         reduce using rule 343 (expression -> expression COMMA assignExpression .)
    GREATER         reduce using rule 343 (expression -> expression COMMA assignExpression .)
    GREATER_EQ      reduce using rule 343 (expression -> expression COMMA assignExpression .)
    IS_EQ_DIFF      reduce using rule 343 (expression -> expression COMMA assignExpression .)
    NOT_EQ_DIFF     reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LESS_EQ_DIFF    reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LESS_DIFF       reduce using rule 343 (expression -> expression COMMA assignExpression .)
    GREATER_EQ_DIFF reduce using rule 343 (expression -> expression COMMA assignExpression .)
    GREATER_DIFF    reduce using rule 343 (expression -> expression COMMA assignExpression .)
    RANGE           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    COLON           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    IDENTIFIER      reduce using rule 343 (expression -> expression COMMA assignExpression .)
    CONST           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    IMMUTABLE       reduce using rule 343 (expression -> expression COMMA assignExpression .)
    RBRACE          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    THIS            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    BOOL            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    SHORT           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    USHORT          reduce using rule 343 (expression -> expression COMMA assignExpression .)
    INT             reduce using rule 343 (expression -> expression COMMA assignExpression .)
    UINT            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    LONG            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    ULONG           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    CHAR            reduce using rule 343 (expression -> expression COMMA assignExpression .)
    FLOAT           reduce using rule 343 (expression -> expression COMMA assignExpression .)
    TYPEOF          reduce using rule 343 (expression -> expression COMMA assignExpression .)


state 591

    (186) multiple_comma_identifer -> COMMA IDENTIFIER . multiple_comma_identifer
    (186) multiple_comma_identifer -> . COMMA IDENTIFIER multiple_comma_identifer
    (187) multiple_comma_identifer -> . empty
    (397) empty -> .

    COMMA           shift and go to state 478
    SEMICOLON       reduce using rule 397 (empty -> .)

    empty                          shift and go to state 480
    multiple_comma_identifer       shift and go to state 659

state 592

    (184) aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters . RPAREN multiple_memberFunctionAttribute SEMICOLON

    RPAREN          shift and go to state 660


state 593

    (155) constraint -> IF LPAREN expression . RPAREN
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 661
    COMMA           shift and go to state 472


state 594

    (138) parameter -> parameterAttributeStar type Identifier_question ASSIGN . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 662
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 595

    (136) parameter -> parameterAttributeStar type Identifier_question ELLIPSIS .

    COMMA           reduce using rule 136 (parameter -> parameterAttributeStar type Identifier_question ELLIPSIS .)
    RPAREN          reduce using rule 136 (parameter -> parameterAttributeStar type Identifier_question ELLIPSIS .)


state 596

    (132) parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS . RPAREN

    RPAREN          shift and go to state 663


state 597

    (130) CommaParameterStar -> COMMA parameter CommaParameterStar .

    COMMA           reduce using rule 130 (CommaParameterStar -> COMMA parameter CommaParameterStar .)
    RPAREN          reduce using rule 130 (CommaParameterStar -> COMMA parameter CommaParameterStar .)


state 598

    (79) comma_identifier_assign_initializer -> COMMA autoDeclarationPart comma_identifier_assign_initializer .

    SEMICOLON       reduce using rule 79 (comma_identifier_assign_initializer -> COMMA autoDeclarationPart comma_identifier_assign_initializer .)


state 599

    (148) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .

    PRIVATE         reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PROTECTED       reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PUBLIC          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    STATIC          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXTERN          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FINAL           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    AUTO            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONST           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMMUTABLE       reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ALIAS           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ENUM            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CLASS           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    THIS            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TILDE           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IMPORT          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UNION           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MIXIN           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CHAR            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INT             reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UINT            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LONG            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FLOAT           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOUBLE          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BOOL            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SHORT           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    USHORT          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ULONG           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TYPEOF          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IDENTIFIER      reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    $end            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RBRACE          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CASE            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DEFAULT         reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACE          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    IF              reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WHILE           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DO              reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOR             reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH         reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FOREACH_REVERSE reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SWITCH          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CONTINUE        reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    BREAK           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    RETURN          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    GOTO            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    WITH            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UAMPERSAND      reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    EXCLAMATION     reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UTIMES          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UPLUS           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    UMINUS          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    PLUS_PLUS       reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    MINUS_MINUS     reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LPAREN          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOT             reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DOLLAR          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NULL            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    TRUE            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FALSE           reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    INUMBER         reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DNUMBER         reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_CHAR        reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    NEW             reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    DELETE          reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    CAST            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LBRACKET        reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    FUNCTION        reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    LIT_STR         reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    SEMICOLON       reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)
    ELSE            reduce using rule 148 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute functionBody .)


state 600

    (147) functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOUBLE          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    $end            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UAMPERSAND      reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UTIMES          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UPLUS           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    UMINUS          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    MINUS_MINUS     reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 147 (functionDeclaration -> storageClass multiplestorageClass IDENTIFIER parameters multiple_memberFunctionAttribute SEMICOLON .)


state 601

    (339) comma_assign -> COMMA assignExpression . comma_assign
    (339) comma_assign -> . COMMA assignExpression comma_assign
    (340) comma_assign -> . empty
    (397) empty -> .

    COMMA           reduce using rule 397 (empty -> .)
    RBRACKET        reduce using rule 397 (empty -> .)
    RPAREN          reduce using rule 397 (empty -> .)
    COLON           reduce using rule 397 (empty -> .)

  ! COMMA           [ shift and go to state 498 ]

    comma_assign                   shift and go to state 664
    empty                          shift and go to state 499

state 602

    (35) primaryExpression -> typeConstructor LPAREN type RPAREN . DOT IDENTIFIER

    DOT             shift and go to state 665


state 603

    (277) withStatement -> WITH LPAREN expression . RPAREN statementNoCaseNoDefault
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 666
    COMMA           shift and go to state 472


state 604

    (276) gotoStatement -> GOTO CASE expression_question . SEMICOLON

    SEMICOLON       shift and go to state 667


state 605

    (275) gotoStatement -> GOTO DEFAULT SEMICOLON .

    PRIVATE         reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PROTECTED       reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PUBLIC          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    STATIC          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXTERN          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FINAL           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    AUTO            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONST           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMMUTABLE       reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CASE            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DEFAULT         reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IDENTIFIER      reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACE          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IF              reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    WHILE           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DO              reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOR             reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH         reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FOREACH_REVERSE reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    SWITCH          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CONTINUE        reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    BREAK           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    RETURN          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    GOTO            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    WITH            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UAMPERSAND      reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    EXCLAMATION     reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UTIMES          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UPLUS           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UMINUS          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    PLUS_PLUS       reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    MINUS_MINUS     reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LPAREN          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOT             reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOLLAR          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    THIS            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    NULL            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TRUE            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FALSE           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    INUMBER         reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DNUMBER         reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_CHAR        reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    NEW             reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DELETE          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CAST            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LBRACKET        reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FUNCTION        reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    MIXIN           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    IMPORT          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LIT_STR         reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ALIAS           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ENUM            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CLASS           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TILDE           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UNION           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    CHAR            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    INT             reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    UINT            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    LONG            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    FLOAT           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    DOUBLE          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    BOOL            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    SHORT           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    USHORT          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ULONG           reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    TYPEOF          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    RBRACE          reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    SEMICOLON       reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)
    ELSE            reduce using rule 275 (gotoStatement -> GOTO DEFAULT SEMICOLON .)


state 606

    (274) gotoStatement -> GOTO IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UTIMES          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    INT             reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 274 (gotoStatement -> GOTO IDENTIFIER SEMICOLON .)


state 607

    (299) typeConstructorStar -> typeConstructor . typeConstructorStar
    (299) typeConstructorStar -> . typeConstructor typeConstructorStar
    (300) typeConstructorStar -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 607
    empty                          shift and go to state 610
    typeConstructorStar            shift and go to state 668

state 608

    (263) foreachStatement -> FOREACH LPAREN foreachType . SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (289) foreachTypeList -> foreachType . foreachType_multiple
    (290) foreachType_multiple -> . COMMA foreachType foreachType_multiple
    (291) foreachType_multiple -> . empty
    (397) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 669
    COMMA           shift and go to state 670

  ! SEMICOLON       [ reduce using rule 397 (empty -> .) ]

    empty                          shift and go to state 672
    foreachType_multiple           shift and go to state 671

state 609

    (262) foreachStatement -> FOREACH LPAREN foreachTypeList . SEMICOLON expression RPAREN declarationOrStatement

    SEMICOLON       shift and go to state 673


state 610

    (300) typeConstructorStar -> empty .

    CONST           reduce using rule 300 (typeConstructorStar -> empty .)
    IMMUTABLE       reduce using rule 300 (typeConstructorStar -> empty .)
    IDENTIFIER      reduce using rule 300 (typeConstructorStar -> empty .)
    THIS            reduce using rule 300 (typeConstructorStar -> empty .)
    BOOL            reduce using rule 300 (typeConstructorStar -> empty .)
    SHORT           reduce using rule 300 (typeConstructorStar -> empty .)
    USHORT          reduce using rule 300 (typeConstructorStar -> empty .)
    INT             reduce using rule 300 (typeConstructorStar -> empty .)
    UINT            reduce using rule 300 (typeConstructorStar -> empty .)
    LONG            reduce using rule 300 (typeConstructorStar -> empty .)
    ULONG           reduce using rule 300 (typeConstructorStar -> empty .)
    CHAR            reduce using rule 300 (typeConstructorStar -> empty .)
    FLOAT           reduce using rule 300 (typeConstructorStar -> empty .)
    TYPEOF          reduce using rule 300 (typeConstructorStar -> empty .)


state 611

    (292) foreachType -> typeConstructorStar . type_question IDENTIFIER
    (233) type_question -> . type
    (234) type_question -> . empty
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (397) empty -> .
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    IDENTIFIER      reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    typeConstructor                shift and go to state 137
    typeConstructors               shift and go to state 34
    type_question                  shift and go to state 674
    typeConstructors_quetsion      shift and go to state 42
    type                           shift and go to state 675
    empty                          shift and go to state 278

state 612

    (280) declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .

    PRIVATE         reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    PROTECTED       reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    PUBLIC          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    STATIC          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    EXTERN          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    FINAL           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    AUTO            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    CONST           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    IMMUTABLE       reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    CASE            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    DEFAULT         reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    IDENTIFIER      reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    LBRACE          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    IF              reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    WHILE           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    DO              reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    FOR             reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    FOREACH         reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    FOREACH_REVERSE reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    SWITCH          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    CONTINUE        reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    BREAK           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    RETURN          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    GOTO            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    WITH            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    UAMPERSAND      reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    EXCLAMATION     reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    UTIMES          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    UPLUS           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    UMINUS          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    PLUS_PLUS       reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    MINUS_MINUS     reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    LPAREN          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    DOT             reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    DOLLAR          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    THIS            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    NULL            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    TRUE            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    FALSE           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    INUMBER         reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    DNUMBER         reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    LIT_CHAR        reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    NEW             reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    DELETE          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    CAST            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    LBRACKET        reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    FUNCTION        reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    MIXIN           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    IMPORT          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    LIT_STR         reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    ALIAS           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    ENUM            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    CLASS           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    TILDE           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    UNION           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    CHAR            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    INT             reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    UINT            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    LONG            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    FLOAT           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    DOUBLE          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    BOOL            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    SHORT           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    USHORT          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    ULONG           reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    TYPEOF          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    RBRACE          reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    SEMICOLON       reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)
    ELSE            reduce using rule 280 (declarationOrStatementmultiple -> declarationOrStatement declarationOrStatementmultiple .)


state 613

    (273) returnStatement -> RETURN expression_question SEMICOLON .

    PRIVATE         reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    PROTECTED       reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    PUBLIC          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    STATIC          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    EXTERN          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    FINAL           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    AUTO            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    CONST           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    IMMUTABLE       reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    CASE            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    DEFAULT         reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    IDENTIFIER      reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    LBRACE          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    IF              reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    WHILE           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    DO              reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    FOR             reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    FOREACH         reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    FOREACH_REVERSE reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    SWITCH          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    CONTINUE        reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    BREAK           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    RETURN          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    GOTO            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    WITH            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    UAMPERSAND      reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    EXCLAMATION     reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    UTIMES          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    UPLUS           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    UMINUS          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    PLUS_PLUS       reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    MINUS_MINUS     reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    LPAREN          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    DOT             reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    DOLLAR          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    THIS            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    NULL            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    TRUE            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    FALSE           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    INUMBER         reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    DNUMBER         reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    LIT_CHAR        reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    NEW             reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    DELETE          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    CAST            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    LBRACKET        reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    FUNCTION        reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    MIXIN           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    IMPORT          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    LIT_STR         reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    ALIAS           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    ENUM            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    CLASS           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    TILDE           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    UNION           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    CHAR            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    INT             reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    UINT            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    LONG            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    FLOAT           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    DOUBLE          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    BOOL            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    SHORT           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    USHORT          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    ULONG           reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    TYPEOF          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    RBRACE          reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    SEMICOLON       reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)
    ELSE            reduce using rule 273 (returnStatement -> RETURN expression_question SEMICOLON .)


state 614

    (265) foreachStatement -> FOREACH_REVERSE LPAREN foreachType . SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (289) foreachTypeList -> foreachType . foreachType_multiple
    (290) foreachType_multiple -> . COMMA foreachType foreachType_multiple
    (291) foreachType_multiple -> . empty
    (397) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 676
    COMMA           shift and go to state 670

  ! SEMICOLON       [ reduce using rule 397 (empty -> .) ]

    empty                          shift and go to state 672
    foreachType_multiple           shift and go to state 671

state 615

    (264) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList . SEMICOLON expression RPAREN declarationOrStatement

    SEMICOLON       shift and go to state 677


state 616

    (261) forStatement -> FOR LPAREN statementNoCaseNoDefault . expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (287) expression_question -> . expression
    (288) expression_question -> . empty
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    SEMICOLON       reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    type                           shift and go to state 219
    empty                          shift and go to state 519
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    expression_question            shift and go to state 678
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 518
    addExpression                  shift and go to state 238

state 617

    (260) forStatement -> FOR LPAREN declaration . expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (287) expression_question -> . expression
    (288) expression_question -> . empty
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    SEMICOLON       reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 519
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    expression_question            shift and go to state 679
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 518

state 618

    (268) continueStatement -> CONTINUE IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IF              reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DO              reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UTIMES          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    INT             reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 268 (continueStatement -> CONTINUE IDENTIFIER SEMICOLON .)


state 619

    (259) doStatement -> DO statementNoCaseNoDefault WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 680


state 620

    (297) defaultStatement -> DEFAULT COLON declarationsAndStatements .

    PRIVATE         reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PROTECTED       reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PUBLIC          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    STATIC          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    EXTERN          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FINAL           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    AUTO            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CONST           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IMMUTABLE       reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CASE            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DEFAULT         reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IDENTIFIER      reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LBRACE          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IF              reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    WHILE           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DO              reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FOR             reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FOREACH         reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FOREACH_REVERSE reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    SWITCH          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CONTINUE        reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    BREAK           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    RETURN          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    GOTO            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    WITH            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UAMPERSAND      reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    EXCLAMATION     reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UTIMES          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UPLUS           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UMINUS          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    PLUS_PLUS       reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    MINUS_MINUS     reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LPAREN          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DOT             reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DOLLAR          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    THIS            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    NULL            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TRUE            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FALSE           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    INUMBER         reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DNUMBER         reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LIT_CHAR        reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    NEW             reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DELETE          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CAST            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LBRACKET        reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FUNCTION        reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    MIXIN           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    IMPORT          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LIT_STR         reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ALIAS           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ENUM            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CLASS           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TILDE           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UNION           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    CHAR            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    INT             reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    UINT            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    LONG            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    FLOAT           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    DOUBLE          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    BOOL            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    SHORT           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    USHORT          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ULONG           reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    TYPEOF          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    RBRACE          reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    SEMICOLON       reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)
    ELSE            reduce using rule 297 (defaultStatement -> DEFAULT COLON declarationsAndStatements .)


state 621

    (258) whileStatement -> WHILE LPAREN expression . RPAREN declarationOrStatement
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 681
    COMMA           shift and go to state 472


state 622

    (298) caseRangeStatement -> CASE assignExpression COLON . ELLIPSIS CASE assignExpression COLON declarationsAndStatements

    ELLIPSIS        shift and go to state 682


state 623

    (301) caseStatement -> CASE argumentList COLON . declarationsAndStatements
    (279) declarationsAndStatements -> . declarationOrStatement declarationOrStatementmultiple
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    declarationsAndStatements      shift and go to state 683
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 351
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 624

    (266) switchStatement -> SWITCH LPAREN expression . RPAREN statement
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 684
    COMMA           shift and go to state 472


state 625

    (253) labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .

    PRIVATE         reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    PROTECTED       reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    PUBLIC          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    STATIC          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    EXTERN          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    FINAL           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    AUTO            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    CONST           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    IMMUTABLE       reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    CASE            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    DEFAULT         reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    IDENTIFIER      reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    LBRACE          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    IF              reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    WHILE           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    DO              reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    FOR             reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    FOREACH         reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    FOREACH_REVERSE reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    SWITCH          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    CONTINUE        reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    BREAK           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    RETURN          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    GOTO            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    WITH            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    UAMPERSAND      reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    EXCLAMATION     reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    UTIMES          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    UPLUS           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    UMINUS          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    PLUS_PLUS       reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    MINUS_MINUS     reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    LPAREN          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    DOT             reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    DOLLAR          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    THIS            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    NULL            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    TRUE            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    FALSE           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    INUMBER         reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    DNUMBER         reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    LIT_CHAR        reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    NEW             reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    DELETE          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    CAST            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    LBRACKET        reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    FUNCTION        reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    MIXIN           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    IMPORT          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    LIT_STR         reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    ALIAS           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    ENUM            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    CLASS           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    TILDE           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    UNION           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    CHAR            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    INT             reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    UINT            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    LONG            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    FLOAT           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    DOUBLE          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    BOOL            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    SHORT           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    USHORT          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    ULONG           reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    TYPEOF          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    RBRACE          reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    SEMICOLON       reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)
    ELSE            reduce using rule 253 (labeledStatement -> IDENTIFIER COLON declarationOrStatement_question .)


state 626

    (269) declarationOrStatement_question -> declarationOrStatement .

    PRIVATE         reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    PROTECTED       reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    PUBLIC          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    STATIC          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    EXTERN          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    FINAL           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    AUTO            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    CONST           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    IMMUTABLE       reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    CASE            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    DEFAULT         reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    IDENTIFIER      reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    LBRACE          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    IF              reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    WHILE           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    DO              reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    FOR             reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    FOREACH         reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    SWITCH          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    CONTINUE        reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    BREAK           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    RETURN          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    GOTO            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    WITH            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    UAMPERSAND      reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    EXCLAMATION     reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    UTIMES          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    UPLUS           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    UMINUS          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    PLUS_PLUS       reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    MINUS_MINUS     reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    LPAREN          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    DOT             reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    DOLLAR          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    THIS            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    NULL            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    TRUE            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    FALSE           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    INUMBER         reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    DNUMBER         reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    LIT_CHAR        reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    NEW             reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    DELETE          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    CAST            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    LBRACKET        reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    FUNCTION        reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    MIXIN           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    IMPORT          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    LIT_STR         reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    ALIAS           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    ENUM            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    CLASS           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    TILDE           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    UNION           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    CHAR            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    INT             reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    UINT            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    LONG            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    FLOAT           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    DOUBLE          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    BOOL            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    SHORT           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    USHORT          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    ULONG           reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    TYPEOF          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    RBRACE          reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    SEMICOLON       reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)
    ELSE            reduce using rule 269 (declarationOrStatement_question -> declarationOrStatement .)


state 627

    (270) declarationOrStatement_question -> empty .
    (201) multipleattributes -> empty .
    (192) typeConstructors_quetsion -> empty .

  ! reduce/reduce conflict for ALIAS resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for ENUM resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for CLASS resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for THIS resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for TILDE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for IMPORT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for UNION resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for STATIC resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for EXTERN resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for FINAL resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for AUTO resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for MIXIN resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 201 (multipleattributes -> empty .)
  ! reduce/reduce conflict for THIS resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for BOOL resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for SHORT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for USHORT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for INT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for UINT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for LONG resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for ULONG resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for CHAR resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for FLOAT resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for CONST resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for IMMUTABLE resolved using rule 192 (typeConstructors_quetsion -> empty .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 192 (typeConstructors_quetsion -> empty .)
    CASE            reduce using rule 270 (declarationOrStatement_question -> empty .)
    DEFAULT         reduce using rule 270 (declarationOrStatement_question -> empty .)
    LBRACE          reduce using rule 270 (declarationOrStatement_question -> empty .)
    IF              reduce using rule 270 (declarationOrStatement_question -> empty .)
    WHILE           reduce using rule 270 (declarationOrStatement_question -> empty .)
    DO              reduce using rule 270 (declarationOrStatement_question -> empty .)
    FOR             reduce using rule 270 (declarationOrStatement_question -> empty .)
    FOREACH         reduce using rule 270 (declarationOrStatement_question -> empty .)
    FOREACH_REVERSE reduce using rule 270 (declarationOrStatement_question -> empty .)
    SWITCH          reduce using rule 270 (declarationOrStatement_question -> empty .)
    CONTINUE        reduce using rule 270 (declarationOrStatement_question -> empty .)
    BREAK           reduce using rule 270 (declarationOrStatement_question -> empty .)
    RETURN          reduce using rule 270 (declarationOrStatement_question -> empty .)
    GOTO            reduce using rule 270 (declarationOrStatement_question -> empty .)
    WITH            reduce using rule 270 (declarationOrStatement_question -> empty .)
    UAMPERSAND      reduce using rule 270 (declarationOrStatement_question -> empty .)
    EXCLAMATION     reduce using rule 270 (declarationOrStatement_question -> empty .)
    UTIMES          reduce using rule 270 (declarationOrStatement_question -> empty .)
    UPLUS           reduce using rule 270 (declarationOrStatement_question -> empty .)
    UMINUS          reduce using rule 270 (declarationOrStatement_question -> empty .)
    PLUS_PLUS       reduce using rule 270 (declarationOrStatement_question -> empty .)
    MINUS_MINUS     reduce using rule 270 (declarationOrStatement_question -> empty .)
    LPAREN          reduce using rule 270 (declarationOrStatement_question -> empty .)
    DOT             reduce using rule 270 (declarationOrStatement_question -> empty .)
    DOLLAR          reduce using rule 270 (declarationOrStatement_question -> empty .)
    NULL            reduce using rule 270 (declarationOrStatement_question -> empty .)
    TRUE            reduce using rule 270 (declarationOrStatement_question -> empty .)
    FALSE           reduce using rule 270 (declarationOrStatement_question -> empty .)
    INUMBER         reduce using rule 270 (declarationOrStatement_question -> empty .)
    DNUMBER         reduce using rule 270 (declarationOrStatement_question -> empty .)
    LIT_CHAR        reduce using rule 270 (declarationOrStatement_question -> empty .)
    NEW             reduce using rule 270 (declarationOrStatement_question -> empty .)
    DELETE          reduce using rule 270 (declarationOrStatement_question -> empty .)
    CAST            reduce using rule 270 (declarationOrStatement_question -> empty .)
    LBRACKET        reduce using rule 270 (declarationOrStatement_question -> empty .)
    FUNCTION        reduce using rule 270 (declarationOrStatement_question -> empty .)
    LIT_STR         reduce using rule 270 (declarationOrStatement_question -> empty .)
    RBRACE          reduce using rule 270 (declarationOrStatement_question -> empty .)
    SEMICOLON       reduce using rule 270 (declarationOrStatement_question -> empty .)
    ELSE            reduce using rule 270 (declarationOrStatement_question -> empty .)
    ALIAS           reduce using rule 201 (multipleattributes -> empty .)
    ENUM            reduce using rule 201 (multipleattributes -> empty .)
    CLASS           reduce using rule 201 (multipleattributes -> empty .)
    TILDE           reduce using rule 201 (multipleattributes -> empty .)
    IMPORT          reduce using rule 201 (multipleattributes -> empty .)
    UNION           reduce using rule 201 (multipleattributes -> empty .)
    PRIVATE         reduce using rule 201 (multipleattributes -> empty .)
    PROTECTED       reduce using rule 201 (multipleattributes -> empty .)
    PUBLIC          reduce using rule 201 (multipleattributes -> empty .)
    STATIC          reduce using rule 201 (multipleattributes -> empty .)
    EXTERN          reduce using rule 201 (multipleattributes -> empty .)
    FINAL           reduce using rule 201 (multipleattributes -> empty .)
    AUTO            reduce using rule 201 (multipleattributes -> empty .)
    MIXIN           reduce using rule 201 (multipleattributes -> empty .)
    DOUBLE          reduce using rule 201 (multipleattributes -> empty .)
    THIS            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    BOOL            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    SHORT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    USHORT          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    INT             reduce using rule 192 (typeConstructors_quetsion -> empty .)
    UINT            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    LONG            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    ULONG           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CHAR            reduce using rule 192 (typeConstructors_quetsion -> empty .)
    FLOAT           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    TYPEOF          reduce using rule 192 (typeConstructors_quetsion -> empty .)
    CONST           reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IMMUTABLE       reduce using rule 192 (typeConstructors_quetsion -> empty .)
    IDENTIFIER      reduce using rule 192 (typeConstructors_quetsion -> empty .)

  ! PRIVATE         [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! PROTECTED       [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! PUBLIC          [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! STATIC          [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! EXTERN          [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! FINAL           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! AUTO            [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! CONST           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! THIS            [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! MIXIN           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! IMPORT          [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! ALIAS           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! ENUM            [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! CLASS           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! TILDE           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! UNION           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! CHAR            [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! INT             [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! UINT            [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! LONG            [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! FLOAT           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! DOUBLE          [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! BOOL            [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! SHORT           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! USHORT          [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! ULONG           [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! TYPEOF          [ reduce using rule 270 (declarationOrStatement_question -> empty .) ]
  ! THIS            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! CONST           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! IMMUTABLE       [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! CHAR            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! INT             [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! UINT            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! LONG            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! FLOAT           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! BOOL            [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! SHORT           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! USHORT          [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! ULONG           [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! TYPEOF          [ reduce using rule 201 (multipleattributes -> empty .) ]
  ! IDENTIFIER      [ reduce using rule 201 (multipleattributes -> empty .) ]


state 628

    (272) breakStatement -> BREAK IDENTIFIER SEMICOLON .

    PRIVATE         reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PROTECTED       reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PUBLIC          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    STATIC          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    EXTERN          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FINAL           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    AUTO            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IMMUTABLE       reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LBRACE          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IF              reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DO              reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FOREACH         reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FOREACH_REVERSE reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    WITH            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UAMPERSAND      reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    EXCLAMATION     reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UTIMES          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UPLUS           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UMINUS          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DOT             reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DOLLAR          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    THIS            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    INUMBER         reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DNUMBER         reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LIT_CHAR        reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DELETE          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CAST            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LBRACKET        reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    MIXIN           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LIT_STR         reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ALIAS           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ENUM            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UNION           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    CHAR            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    INT             reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    UINT            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    LONG            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    BOOL            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    SHORT           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    USHORT          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ULONG           reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    TYPEOF          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 272 (breakStatement -> BREAK IDENTIFIER SEMICOLON .)


state 629

    (284) ifCondition -> AUTO . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 685


state 630

    (286) ifCondition -> expression .
    (343) expression -> expression . COMMA assignExpression

    RPAREN          reduce using rule 286 (ifCondition -> expression .)
    COMMA           shift and go to state 472


state 631

    (256) ifStatement -> IF LPAREN ifCondition . RPAREN declarationOrStatement
    (257) ifStatement -> IF LPAREN ifCondition . RPAREN declarationOrStatement ELSE declarationOrStatement

    RPAREN          shift and go to state 686


state 632

    (285) ifCondition -> type . IDENTIFIER ASSIGN expression
    (36) primaryExpression -> type . DOT IDENTIFIER
    (37) primaryExpression -> type . arguments
    (310) functionCallExpression -> type . arguments
    (334) arguments -> . LPAREN argumentList_question RPAREN

    IDENTIFIER      shift and go to state 687
    DOT             shift and go to state 395
    LPAREN          shift and go to state 389

    arguments                      shift and go to state 394

state 633

    (53) newExpression -> NEW type LBRACKET assignExpression . RBRACKET

    RBRACKET        shift and go to state 688


state 634

    (56) newAnonClassExpression -> NEW arguments_question CLASS arguments_question . baseClassList_question structBody
    (59) baseClassList_question -> . baseClassList
    (60) baseClassList_question -> . empty
    (212) baseClassList -> . baseClass comma_baseclass_multiple
    (397) empty -> .
    (211) baseClass -> . type2
    (215) type2 -> . builtinType
    (216) type2 -> . typeIdentifierPart
    (217) type2 -> . THIS DOT typeIdentifierPart
    (218) type2 -> . typeofExpression typeIdentifierPart_question
    (219) type2 -> . typeConstructor LPAREN type RPAREN
    (323) builtinType -> . BOOL
    (324) builtinType -> . SHORT
    (325) builtinType -> . USHORT
    (326) builtinType -> . INT
    (327) builtinType -> . UINT
    (328) builtinType -> . LONG
    (329) builtinType -> . ULONG
    (330) builtinType -> . CHAR
    (331) builtinType -> . FLOAT
    (188) typeIdentifierPart -> . identifierOrTemplateInstance
    (189) typeIdentifierPart -> . identifierOrTemplateInstance DOT typeIdentifierPart
    (190) typeIdentifierPart -> . identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart
    (237) typeofExpression -> . TYPEOF LPAREN expression RPAREN
    (238) typeofExpression -> . TYPEOF LPAREN RETURN RPAREN
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    LBRACE          reduce using rule 397 (empty -> .)
    THIS            shift and go to state 97
    BOOL            shift and go to state 101
    SHORT           shift and go to state 86
    USHORT          shift and go to state 98
    INT             shift and go to state 100
    UINT            shift and go to state 96
    LONG            shift and go to state 91
    ULONG           shift and go to state 90
    CHAR            shift and go to state 87
    FLOAT           shift and go to state 99
    TYPEOF          shift and go to state 102
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      shift and go to state 93

    builtinType                    shift and go to state 94
    baseClassList_question         shift and go to state 689
    typeIdentifierPart             shift and go to state 95
    baseClassList                  shift and go to state 691
    typeofExpression               shift and go to state 88
    identifierOrTemplateInstance   shift and go to state 92
    typeConstructor                shift and go to state 103
    baseClass                      shift and go to state 259
    empty                          shift and go to state 690
    type2                          shift and go to state 258

state 635

    (58) arguments_question -> empty .

    THIS            reduce using rule 58 (arguments_question -> empty .)
    BOOL            reduce using rule 58 (arguments_question -> empty .)
    SHORT           reduce using rule 58 (arguments_question -> empty .)
    USHORT          reduce using rule 58 (arguments_question -> empty .)
    INT             reduce using rule 58 (arguments_question -> empty .)
    UINT            reduce using rule 58 (arguments_question -> empty .)
    LONG            reduce using rule 58 (arguments_question -> empty .)
    ULONG           reduce using rule 58 (arguments_question -> empty .)
    CHAR            reduce using rule 58 (arguments_question -> empty .)
    FLOAT           reduce using rule 58 (arguments_question -> empty .)
    TYPEOF          reduce using rule 58 (arguments_question -> empty .)
    CONST           reduce using rule 58 (arguments_question -> empty .)
    IMMUTABLE       reduce using rule 58 (arguments_question -> empty .)
    IDENTIFIER      reduce using rule 58 (arguments_question -> empty .)
    LBRACE          reduce using rule 58 (arguments_question -> empty .)


state 636

    (334) arguments -> LPAREN argumentList_question RPAREN .

    DOT             reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    PLUS_PLUS       reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    MINUS_MINUS     reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LBRACKET        reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LPAREN          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    POWER           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    TIMES           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    DIV             reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    MODULO          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    PLUS            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    MINUS           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    TILDE           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    RIGHT_SHIFT     reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LEFT_SHIFT      reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    IS_EQ           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    NOT_EQ          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    AMPERSAND       reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    CARET           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    PIPE            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    QUESTION        reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    DOUBLE_PIPE     reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    ASSIGN          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_LEFT         reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_RIGHT        reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_PLUS         reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_MINUS        reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_TIMES        reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_MODULO       reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_AND_BIT      reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_DIV          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_OR_BIT       reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_XOR_BIT      reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    RPAREN          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS_EQ         reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER         reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER_EQ      reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    IS_EQ_DIFF      reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    NOT_EQ_DIFF     reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS_EQ_DIFF    reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS_DIFF       reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER_EQ_DIFF reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER_DIFF    reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    RBRACKET        reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    RANGE           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    COMMA           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    SEMICOLON       reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    COLON           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    IDENTIFIER      reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    CONST           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    IMMUTABLE       reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    RBRACE          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    THIS            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    BOOL            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    SHORT           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    USHORT          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    INT             reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    UINT            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LONG            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    ULONG           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    CHAR            reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    FLOAT           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    TYPEOF          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    LBRACE          reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)
    CLASS           reduce using rule 334 (arguments -> LPAREN argumentList_question RPAREN .)


state 637

    (303) castExpression -> CAST LPAREN RPAREN unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    POWER           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TIMES           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DIV             reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    MODULO          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    PLUS            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    MINUS           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TILDE           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IS_EQ           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    CARET           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    PIPE            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    QUESTION        reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    ASSIGN          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    COMMA           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RPAREN          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER         reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    SEMICOLON       reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RBRACKET        reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RANGE           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    COLON           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IDENTIFIER      reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    CONST           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IMMUTABLE       reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RBRACE          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    THIS            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    BOOL            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    SHORT           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    USHORT          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    INT             reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    UINT            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LONG            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    ULONG           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    CHAR            reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    FLOAT           reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TYPEOF          reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOT             shift and go to state 423
    PLUS_PLUS       shift and go to state 424
    MINUS_MINUS     shift and go to state 425
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! LPAREN          [ reduce using rule 303 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]

    arguments                      shift and go to state 426

state 638

    (305) castExpression -> CAST LPAREN castQualifier RPAREN . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 692
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 639

    (304) castExpression -> CAST LPAREN type RPAREN . unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    blockStatement                 shift and go to state 237
    identifierOrTemplateInstance   shift and go to state 217
    LIT_STRPlus                    shift and go to state 227
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    unaryExpression                shift and go to state 693
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    typeConstructor                shift and go to state 196

state 640

    (365) ternaryExpression -> orOrExpression QUESTION expression COLON . ternaryExpression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 694
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 641

    (349) importExpression -> IMPORT LBRACKET assignExpression RBRACKET .

    DOT             reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    POWER           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TIMES           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    CONST           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IMMUTABLE       reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RBRACE          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    THIS            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    BOOL            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    SHORT           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    USHORT          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    INT             reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    UINT            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LONG            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    ULONG           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    CHAR            reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    FLOAT           reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TYPEOF          reduce using rule 349 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)


state 642

    (318) comma_index -> COMMA . index comma_index
    (320) index -> . assignExpression
    (321) index -> . assignExpression RANGE assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    index                          shift and go to state 695
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 561
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 643

    (317) indexExpression -> unaryExpression LBRACKET index comma_index . RBRACKET

    RBRACKET        shift and go to state 696


state 644

    (319) comma_index -> empty .

    RBRACKET        reduce using rule 319 (comma_index -> empty .)


state 645

    (321) index -> assignExpression RANGE . assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 697
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 646

    (28) unaryExpression -> LPAREN type RPAREN DOT . identifierOrTemplateInstance
    (315) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 93

    identifierOrTemplateInstance   shift and go to state 698

state 647

    (125) importBindstr -> COMMA importBind importBindstr .

    SEMICOLON       reduce using rule 125 (importBindstr -> COMMA importBind importBindstr .)


state 648

    (213) comma_baseclass_multiple -> COMMA baseClass comma_baseclass_multiple .

    LBRACE          reduce using rule 213 (comma_baseclass_multiple -> COMMA baseClass comma_baseclass_multiple .)


state 649

    (166) anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .

    IDENTIFIER      reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    CONST           reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    IMMUTABLE       reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    THIS            reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    BOOL            reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    SHORT           reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    USHORT          reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    INT             reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    UINT            reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    LONG            reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    ULONG           reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    CHAR            reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    FLOAT           reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    TYPEOF          reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)
    RBRACE          reduce using rule 166 (anonymousEnumMember -> type IDENTIFIER ASSIGN assignExpression .)


state 650

    (163) enumBody -> LBRACE enumMember comma_enumMember RBRACE .

    PRIVATE         reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    PROTECTED       reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    PUBLIC          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    STATIC          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    EXTERN          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    FINAL           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    AUTO            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    CONST           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    IMMUTABLE       reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    ALIAS           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    ENUM            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    CLASS           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    THIS            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    TILDE           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    IMPORT          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    UNION           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    MIXIN           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    CHAR            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    INT             reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    UINT            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    LONG            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    FLOAT           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    DOUBLE          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    BOOL            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    SHORT           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    USHORT          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    ULONG           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    TYPEOF          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    IDENTIFIER      reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    $end            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    RBRACE          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    CASE            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    DEFAULT         reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    LBRACE          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    IF              reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    WHILE           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    DO              reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    FOR             reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    FOREACH         reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    FOREACH_REVERSE reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    SWITCH          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    CONTINUE        reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    BREAK           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    RETURN          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    GOTO            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    WITH            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    UAMPERSAND      reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    EXCLAMATION     reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    UTIMES          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    UPLUS           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    UMINUS          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    PLUS_PLUS       reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    MINUS_MINUS     reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    LPAREN          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    DOT             reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    DOLLAR          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    NULL            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    TRUE            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    FALSE           reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    INUMBER         reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    DNUMBER         reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    LIT_CHAR        reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    NEW             reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    DELETE          reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    CAST            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    LBRACKET        reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    FUNCTION        reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    LIT_STR         reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    SEMICOLON       reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)
    ELSE            reduce using rule 163 (enumBody -> LBRACE enumMember comma_enumMember RBRACE .)


state 651

    (164) comma_enumMember -> COMMA enumMember . comma_enumMember
    (164) comma_enumMember -> . COMMA enumMember comma_enumMember
    (165) comma_enumMember -> . empty
    (397) empty -> .

    COMMA           shift and go to state 578
    RBRACE          reduce using rule 397 (empty -> .)

    comma_enumMember               shift and go to state 699
    empty                          shift and go to state 579

state 652

    (177) enumMember -> IDENTIFIER ASSIGN assignExpression .

    COMMA           reduce using rule 177 (enumMember -> IDENTIFIER ASSIGN assignExpression .)
    RBRACE          reduce using rule 177 (enumMember -> IDENTIFIER ASSIGN assignExpression .)


state 653

    (105) arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization . RBRACKET

    RBRACKET        shift and go to state 700


state 654

    (106) comma_arrayMemberInitialization -> COMMA . arrayMemberInitialization comma_arrayMemberInitialization
    (109) arrayMemberInitialization -> . assignExpression COLON nonVoidInitializer
    (110) arrayMemberInitialization -> . nonVoidInitializer
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (102) nonVoidInitializer -> . assignExpression
    (103) nonVoidInitializer -> . arrayInitializer
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (104) arrayInitializer -> . LBRACKET RBRACKET
    (105) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACKET        shift and go to state 458
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    arrayInitializer               shift and go to state 462
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    arrayMemberInitialization      shift and go to state 701
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    LIT_STRPlus                    shift and go to state 227
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    nonVoidInitializer             shift and go to state 583
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 702
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    ternaryExpression              shift and go to state 226
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 655

    (107) comma_arrayMemberInitialization -> empty .

    RBRACKET        reduce using rule 107 (comma_arrayMemberInitialization -> empty .)


state 656

    (109) arrayMemberInitialization -> assignExpression COLON . nonVoidInitializer
    (102) nonVoidInitializer -> . assignExpression
    (103) nonVoidInitializer -> . arrayInitializer
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (104) arrayInitializer -> . LBRACKET RBRACKET
    (105) arrayInitializer -> . LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    LBRACKET        shift and go to state 458
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    arrayInitializer               shift and go to state 462
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    LIT_STRPlus                    shift and go to state 227
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    nonVoidInitializer             shift and go to state 703
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 461
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    ternaryExpression              shift and go to state 226
    type                           shift and go to state 219
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 657

    (230) typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .

    TIMES           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LBRACKET        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DELEGATE        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    FUNCTION        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LBRACE          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DOT             reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LPAREN          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RBRACKET        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RPAREN          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    ELLIPSIS        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    ASSIGN          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    COMMA           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    POWER           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DIV             reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    MODULO          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    PLUS            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    MINUS           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    TILDE           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IS_EQ           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    CARET           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    PIPE            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    QUESTION        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER         reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RANGE           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    COLON           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    CONST           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    IMMUTABLE       reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    RBRACE          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    THIS            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    BOOL            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    SHORT           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    USHORT          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    INT             reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    UINT            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    LONG            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    ULONG           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    CHAR            reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    FLOAT           reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)
    TYPEOF          reduce using rule 230 (typeSuffix -> LBRACKET assignExpression RANGE assignExpression RBRACKET .)


state 658

    (190) typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .

    TIMES           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LBRACKET        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    DELEGATE        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    FUNCTION        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    IDENTIFIER      reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LBRACE          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    SEMICOLON       reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    DOT             reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LPAREN          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    RBRACKET        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    RPAREN          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    ELLIPSIS        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    ASSIGN          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    COMMA           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    PLUS_PLUS       reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    MINUS_MINUS     reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    POWER           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    DIV             reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    MODULO          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    PLUS            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    MINUS           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    TILDE           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    RIGHT_SHIFT     reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LEFT_SHIFT      reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    IS_EQ           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    NOT_EQ          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    AMPERSAND       reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    CARET           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    PIPE            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    DOUBLE_AMPERSAND reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    QUESTION        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    DOUBLE_PIPE     reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_LEFT         reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_RIGHT        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_PLUS         reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_MINUS        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_TIMES        reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_MODULO       reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_AND_BIT      reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_DIV          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_OR_BIT       reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    EQ_XOR_BIT      reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LESS            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LESS_EQ         reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    GREATER         reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    GREATER_EQ      reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    IS_EQ_DIFF      reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    NOT_EQ_DIFF     reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LESS_EQ_DIFF    reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LESS_DIFF       reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    GREATER_EQ_DIFF reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    GREATER_DIFF    reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    RANGE           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    COLON           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    CONST           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    IMMUTABLE       reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    RBRACE          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    THIS            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    BOOL            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    SHORT           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    USHORT          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    INT             reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    UINT            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    LONG            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    ULONG           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    CHAR            reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    FLOAT           reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)
    TYPEOF          reduce using rule 190 (typeIdentifierPart -> identifierOrTemplateInstance LBRACKET assignExpression RBRACKET DOT typeIdentifierPart .)


state 659

    (186) multiple_comma_identifer -> COMMA IDENTIFIER multiple_comma_identifer .

    SEMICOLON       reduce using rule 186 (multiple_comma_identifer -> COMMA IDENTIFIER multiple_comma_identifer .)


state 660

    (184) aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN . multiple_memberFunctionAttribute SEMICOLON
    (156) multiple_memberFunctionAttribute -> . memberFunctionAttribute multiple_memberFunctionAttribute
    (157) multiple_memberFunctionAttribute -> . empty
    (158) memberFunctionAttribute -> . IMMUTABLE
    (159) memberFunctionAttribute -> . CONST
    (160) memberFunctionAttribute -> . RETURN
    (397) empty -> .

    IMMUTABLE       shift and go to state 173
    CONST           shift and go to state 169
    RETURN          shift and go to state 172
    SEMICOLON       reduce using rule 397 (empty -> .)

    multiple_memberFunctionAttribute shift and go to state 704
    memberFunctionAttribute        shift and go to state 171
    empty                          shift and go to state 174

state 661

    (155) constraint -> IF LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 155 (constraint -> IF LPAREN expression RPAREN .)
    LBRACE          reduce using rule 155 (constraint -> IF LPAREN expression RPAREN .)


state 662

    (138) parameter -> parameterAttributeStar type Identifier_question ASSIGN assignExpression .

    COMMA           reduce using rule 138 (parameter -> parameterAttributeStar type Identifier_question ASSIGN assignExpression .)
    RPAREN          reduce using rule 138 (parameter -> parameterAttributeStar type Identifier_question ASSIGN assignExpression .)


state 663

    (132) parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .

    IMMUTABLE       reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    CONST           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    RETURN          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    SEMICOLON       reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    IF              reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LBRACE          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    RPAREN          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    TIMES           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LBRACKET        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    DELEGATE        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    FUNCTION        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    IDENTIFIER      reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    DOT             reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LPAREN          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    RBRACKET        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    ELLIPSIS        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    ASSIGN          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    COMMA           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    PLUS_PLUS       reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    MINUS_MINUS     reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    POWER           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    DIV             reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    MODULO          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    PLUS            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    MINUS           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    TILDE           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    RIGHT_SHIFT     reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LEFT_SHIFT      reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    IS_EQ           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    NOT_EQ          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    AMPERSAND       reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    CARET           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    PIPE            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    QUESTION        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    DOUBLE_PIPE     reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_LEFT         reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_RIGHT        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_PLUS         reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_MINUS        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_TIMES        reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_MODULO       reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_AND_BIT      reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_DIV          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_OR_BIT       reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    EQ_XOR_BIT      reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LESS            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LESS_EQ         reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    GREATER         reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    GREATER_EQ      reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    IS_EQ_DIFF      reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    NOT_EQ_DIFF     reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LESS_EQ_DIFF    reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LESS_DIFF       reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    GREATER_EQ_DIFF reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    GREATER_DIFF    reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    RANGE           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    COLON           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    RBRACE          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    THIS            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    BOOL            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    SHORT           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    USHORT          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    INT             reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    UINT            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    LONG            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    ULONG           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    CHAR            reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    FLOAT           reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)
    TYPEOF          reduce using rule 132 (parameters -> LPAREN parameter CommaParameterStar COMMA ELLIPSIS RPAREN .)


state 664

    (339) comma_assign -> COMMA assignExpression comma_assign .

    COMMA           reduce using rule 339 (comma_assign -> COMMA assignExpression comma_assign .)
    RBRACKET        reduce using rule 339 (comma_assign -> COMMA assignExpression comma_assign .)
    RPAREN          reduce using rule 339 (comma_assign -> COMMA assignExpression comma_assign .)
    COLON           reduce using rule 339 (comma_assign -> COMMA assignExpression comma_assign .)


state 665

    (35) primaryExpression -> typeConstructor LPAREN type RPAREN DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 705


state 666

    (277) withStatement -> WITH LPAREN expression RPAREN . statementNoCaseNoDefault
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    continueStatement              shift and go to state 356
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    indexExpression                shift and go to state 203
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    newExpression                  shift and go to state 240
    statementNoCaseNoDefault       shift and go to state 706
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 139
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 667

    (276) gotoStatement -> GOTO CASE expression_question SEMICOLON .

    PRIVATE         reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    PROTECTED       reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    PUBLIC          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    STATIC          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    EXTERN          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    FINAL           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    AUTO            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    CONST           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    IMMUTABLE       reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    CASE            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    DEFAULT         reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    IDENTIFIER      reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    LBRACE          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    IF              reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    WHILE           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    DO              reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    FOR             reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    FOREACH         reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    FOREACH_REVERSE reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    SWITCH          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    CONTINUE        reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    BREAK           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    RETURN          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    GOTO            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    WITH            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    UAMPERSAND      reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    EXCLAMATION     reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    UTIMES          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    UPLUS           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    UMINUS          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    PLUS_PLUS       reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    MINUS_MINUS     reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    LPAREN          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    DOT             reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    DOLLAR          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    THIS            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    NULL            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    TRUE            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    FALSE           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    INUMBER         reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    DNUMBER         reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    LIT_CHAR        reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    NEW             reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    DELETE          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    CAST            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    LBRACKET        reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    FUNCTION        reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    MIXIN           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    IMPORT          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    LIT_STR         reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    ALIAS           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    ENUM            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    CLASS           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    TILDE           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    UNION           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    CHAR            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    INT             reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    UINT            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    LONG            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    FLOAT           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    DOUBLE          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    BOOL            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    SHORT           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    USHORT          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    ULONG           reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    TYPEOF          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    RBRACE          reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    SEMICOLON       reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)
    ELSE            reduce using rule 276 (gotoStatement -> GOTO CASE expression_question SEMICOLON .)


state 668

    (299) typeConstructorStar -> typeConstructor typeConstructorStar .

    CONST           reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    IMMUTABLE       reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    IDENTIFIER      reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    THIS            reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    BOOL            reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    SHORT           reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    USHORT          reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    INT             reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    UINT            reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    LONG            reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    ULONG           reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    CHAR            reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    FLOAT           reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)
    TYPEOF          reduce using rule 299 (typeConstructorStar -> typeConstructor typeConstructorStar .)


state 669

    (263) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON . expression RANGE expression RBRACKET declarationOrStatement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 707

state 670

    (290) foreachType_multiple -> COMMA . foreachType foreachType_multiple
    (292) foreachType -> . typeConstructorStar type_question IDENTIFIER
    (299) typeConstructorStar -> . typeConstructor typeConstructorStar
    (300) typeConstructorStar -> . empty
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (397) empty -> .

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    IDENTIFIER      reduce using rule 397 (empty -> .)
    THIS            reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]

    foreachType                    shift and go to state 708
    typeConstructor                shift and go to state 607
    empty                          shift and go to state 610
    typeConstructorStar            shift and go to state 611

state 671

    (289) foreachTypeList -> foreachType foreachType_multiple .

    SEMICOLON       reduce using rule 289 (foreachTypeList -> foreachType foreachType_multiple .)


state 672

    (291) foreachType_multiple -> empty .

    SEMICOLON       reduce using rule 291 (foreachType_multiple -> empty .)


state 673

    (262) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON . expression RPAREN declarationOrStatement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    identifierOrTemplateInstance   shift and go to state 217
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 709

state 674

    (292) foreachType -> typeConstructorStar type_question . IDENTIFIER

    IDENTIFIER      shift and go to state 710


state 675

    (233) type_question -> type .

    IDENTIFIER      reduce using rule 233 (type_question -> type .)


state 676

    (265) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON . expression RANGE expression RPAREN declarationOrStatement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 711

state 677

    (264) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON . expression RPAREN declarationOrStatement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    identifierOrTemplateInstance   shift and go to state 217
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 712

state 678

    (261) forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question . SEMICOLON expression_question RPAREN declarationOrStatement

    SEMICOLON       shift and go to state 713


state 679

    (260) forStatement -> FOR LPAREN declaration expression_question . SEMICOLON expression_question RPAREN declarationOrStatement

    SEMICOLON       shift and go to state 714


state 680

    (259) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN . expression RPAREN SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 715
    addExpression                  shift and go to state 238

state 681

    (258) whileStatement -> WHILE LPAREN expression RPAREN . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 716
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 682

    (298) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS . CASE assignExpression COLON declarationsAndStatements

    CASE            shift and go to state 717


state 683

    (301) caseStatement -> CASE argumentList COLON declarationsAndStatements .

    PRIVATE         reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PROTECTED       reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PUBLIC          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    STATIC          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    EXTERN          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FINAL           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    AUTO            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CONST           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IMMUTABLE       reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CASE            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DEFAULT         reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IDENTIFIER      reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LBRACE          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IF              reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    WHILE           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DO              reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FOR             reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FOREACH         reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FOREACH_REVERSE reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    SWITCH          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CONTINUE        reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    BREAK           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    RETURN          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    GOTO            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    WITH            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UAMPERSAND      reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    EXCLAMATION     reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UTIMES          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UPLUS           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UMINUS          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    PLUS_PLUS       reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    MINUS_MINUS     reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LPAREN          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DOT             reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DOLLAR          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    THIS            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    NULL            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TRUE            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FALSE           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    INUMBER         reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DNUMBER         reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LIT_CHAR        reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    NEW             reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DELETE          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CAST            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LBRACKET        reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FUNCTION        reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    MIXIN           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    IMPORT          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LIT_STR         reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ALIAS           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ENUM            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CLASS           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TILDE           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UNION           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    CHAR            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    INT             reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    UINT            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    LONG            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    FLOAT           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    DOUBLE          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    BOOL            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    SHORT           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    USHORT          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ULONG           reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    TYPEOF          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    RBRACE          reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    SEMICOLON       reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)
    ELSE            reduce using rule 301 (caseStatement -> CASE argumentList COLON declarationsAndStatements .)


state 684

    (266) switchStatement -> SWITCH LPAREN expression RPAREN . statement
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    continueStatement              shift and go to state 356
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    indexExpression                shift and go to state 203
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 718
    newExpression                  shift and go to state 240
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 139
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 685

    (284) ifCondition -> AUTO IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 719


state 686

    (256) ifStatement -> IF LPAREN ifCondition RPAREN . declarationOrStatement
    (257) ifStatement -> IF LPAREN ifCondition RPAREN . declarationOrStatement ELSE declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 720
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 687

    (285) ifCondition -> type IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 721


state 688

    (53) newExpression -> NEW type LBRACKET assignExpression RBRACKET .

    DOT             reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    POWER           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TIMES           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    SEMICOLON       reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IDENTIFIER      reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    CONST           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IMMUTABLE       reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RBRACE          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    THIS            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    BOOL            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    SHORT           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    USHORT          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    INT             reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    UINT            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LONG            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    ULONG           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    CHAR            reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    FLOAT           reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TYPEOF          reduce using rule 53 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)


state 689

    (56) newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question . structBody
    (61) structBody -> . LBRACE multiple_declaration RBRACE

    LBRACE          shift and go to state 76

    structBody                     shift and go to state 722

state 690

    (60) baseClassList_question -> empty .

    LBRACE          reduce using rule 60 (baseClassList_question -> empty .)


state 691

    (59) baseClassList_question -> baseClassList .

    LBRACE          reduce using rule 59 (baseClassList_question -> baseClassList .)


state 692

    (305) castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    POWER           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TIMES           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DIV             reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    MODULO          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    PLUS            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    MINUS           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TILDE           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IS_EQ           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    CARET           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    PIPE            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    QUESTION        reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    ASSIGN          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    COMMA           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RPAREN          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER         reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    SEMICOLON       reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RBRACKET        reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RANGE           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    COLON           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IDENTIFIER      reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    CONST           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IMMUTABLE       reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RBRACE          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    THIS            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    BOOL            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    SHORT           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    USHORT          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    INT             reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    UINT            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LONG            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    ULONG           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    CHAR            reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    FLOAT           reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TYPEOF          reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOT             shift and go to state 423
    PLUS_PLUS       shift and go to state 424
    MINUS_MINUS     shift and go to state 425
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! LPAREN          [ reduce using rule 305 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]

    arguments                      shift and go to state 426

state 693

    (304) castExpression -> CAST LPAREN type RPAREN unaryExpression .
    (29) unaryExpression -> unaryExpression . DOT newExpression
    (30) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (31) unaryExpression -> unaryExpression . PLUS_PLUS
    (32) unaryExpression -> unaryExpression . MINUS_MINUS
    (309) functionCallExpression -> unaryExpression . arguments
    (316) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (317) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (334) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    POWER           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TIMES           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DIV             reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    MODULO          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    PLUS            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    MINUS           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TILDE           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IS_EQ           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    CARET           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    PIPE            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    QUESTION        reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    ASSIGN          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    COMMA           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RPAREN          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER         reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    SEMICOLON       reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RBRACKET        reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RANGE           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    COLON           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IDENTIFIER      reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    CONST           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IMMUTABLE       reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RBRACE          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    THIS            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    BOOL            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    SHORT           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    USHORT          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    INT             reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    UINT            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LONG            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    ULONG           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    CHAR            reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    FLOAT           reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TYPEOF          reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOT             shift and go to state 423
    PLUS_PLUS       shift and go to state 424
    MINUS_MINUS     shift and go to state 425
    LBRACKET        shift and go to state 422
    LPAREN          shift and go to state 389

  ! DOT             [ reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! LPAREN          [ reduce using rule 304 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]

    arguments                      shift and go to state 426

state 694

    (365) ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .

    ASSIGN          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_LEFT         reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_RIGHT        reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_PLUS         reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_MINUS        reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_TIMES        reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_MODULO       reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_AND_BIT      reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_DIV          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_OR_BIT       reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_XOR_BIT      reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    COMMA           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    SEMICOLON       reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RBRACKET        reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RPAREN          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    COLON           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RANGE           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IDENTIFIER      reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    CONST           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IMMUTABLE       reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RBRACE          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    THIS            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    BOOL            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    SHORT           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    USHORT          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    INT             reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    UINT            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LONG            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    ULONG           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    CHAR            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    FLOAT           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TYPEOF          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOT             reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PLUS_PLUS       reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MINUS_MINUS     reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LBRACKET        reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LPAREN          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    POWER           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TIMES           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DIV             reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MODULO          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PLUS            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MINUS           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TILDE           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RIGHT_SHIFT     reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LEFT_SHIFT      reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IS_EQ           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    NOT_EQ          reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    AMPERSAND       reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    CARET           reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PIPE            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    QUESTION        reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOUBLE_PIPE     reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS            reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_EQ         reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER         reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_EQ      reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IS_EQ_DIFF      reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    NOT_EQ_DIFF     reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_EQ_DIFF    reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_DIFF       reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_EQ_DIFF reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_DIFF    reduce using rule 365 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)


state 695

    (318) comma_index -> COMMA index . comma_index
    (318) comma_index -> . COMMA index comma_index
    (319) comma_index -> . empty
    (397) empty -> .

    COMMA           shift and go to state 642
    RBRACKET        reduce using rule 397 (empty -> .)

    comma_index                    shift and go to state 723
    empty                          shift and go to state 644

state 696

    (317) indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .

    DOT             reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PLUS_PLUS       reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MINUS_MINUS     reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LBRACKET        reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LPAREN          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    POWER           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TIMES           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DIV             reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MODULO          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PLUS            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MINUS           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TILDE           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RIGHT_SHIFT     reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LEFT_SHIFT      reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IS_EQ           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    NOT_EQ          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    AMPERSAND       reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    CARET           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PIPE            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    QUESTION        reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DOUBLE_PIPE     reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    ASSIGN          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_LEFT         reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_RIGHT        reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_PLUS         reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_MINUS        reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_TIMES        reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_MODULO       reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_AND_BIT      reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_DIV          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_OR_BIT       reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_XOR_BIT      reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RPAREN          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_EQ         reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER         reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_EQ      reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IS_EQ_DIFF      reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_DIFF       reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_DIFF    reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RBRACKET        reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RANGE           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    COMMA           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    SEMICOLON       reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    COLON           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IDENTIFIER      reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    CONST           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IMMUTABLE       reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RBRACE          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    THIS            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    BOOL            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    SHORT           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    USHORT          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    INT             reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    UINT            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LONG            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    ULONG           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    CHAR            reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    FLOAT           reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TYPEOF          reduce using rule 317 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)


state 697

    (321) index -> assignExpression RANGE assignExpression .

    COMMA           reduce using rule 321 (index -> assignExpression RANGE assignExpression .)
    RBRACKET        reduce using rule 321 (index -> assignExpression RANGE assignExpression .)


state 698

    (28) unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .

    DOT             reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    POWER           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    SEMICOLON       reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    IDENTIFIER      reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    CONST           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    IMMUTABLE       reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RBRACE          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    THIS            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    BOOL            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    SHORT           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    USHORT          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    INT             reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    UINT            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LONG            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    ULONG           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    CHAR            reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    FLOAT           reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    TYPEOF          reduce using rule 28 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)


state 699

    (164) comma_enumMember -> COMMA enumMember comma_enumMember .

    RBRACE          reduce using rule 164 (comma_enumMember -> COMMA enumMember comma_enumMember .)


state 700

    (105) arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .

    COMMA           reduce using rule 105 (arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .)
    SEMICOLON       reduce using rule 105 (arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .)
    RBRACKET        reduce using rule 105 (arrayInitializer -> LBRACKET arrayMemberInitialization comma_arrayMemberInitialization RBRACKET .)


state 701

    (106) comma_arrayMemberInitialization -> COMMA arrayMemberInitialization . comma_arrayMemberInitialization
    (106) comma_arrayMemberInitialization -> . COMMA arrayMemberInitialization comma_arrayMemberInitialization
    (107) comma_arrayMemberInitialization -> . empty
    (397) empty -> .

    COMMA           shift and go to state 654
    RBRACKET        reduce using rule 397 (empty -> .)

    empty                          shift and go to state 655
    comma_arrayMemberInitialization shift and go to state 724

state 702

    (109) arrayMemberInitialization -> assignExpression . COLON nonVoidInitializer
    (102) nonVoidInitializer -> assignExpression .

    COLON           shift and go to state 656
    COMMA           reduce using rule 102 (nonVoidInitializer -> assignExpression .)
    RBRACKET        reduce using rule 102 (nonVoidInitializer -> assignExpression .)


state 703

    (109) arrayMemberInitialization -> assignExpression COLON nonVoidInitializer .

    COMMA           reduce using rule 109 (arrayMemberInitialization -> assignExpression COLON nonVoidInitializer .)
    RBRACKET        reduce using rule 109 (arrayMemberInitialization -> assignExpression COLON nonVoidInitializer .)


state 704

    (184) aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute . SEMICOLON

    SEMICOLON       shift and go to state 725


state 705

    (35) primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .

    DOT             reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LBRACKET        reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LPAREN          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    POWER           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TIMES           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DIV             reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MODULO          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PLUS            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MINUS           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TILDE           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IS_EQ           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    CARET           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PIPE            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    QUESTION        reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    ASSIGN          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RBRACKET        reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RANGE           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER         reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_DIFF       reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_DIFF    reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RPAREN          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    COMMA           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    COLON           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    CONST           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IMMUTABLE       reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RBRACE          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    THIS            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    BOOL            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    SHORT           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    USHORT          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    INT             reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    UINT            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LONG            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    ULONG           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    CHAR            reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    FLOAT           reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TYPEOF          reduce using rule 35 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)


state 706

    (277) withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .

    PRIVATE         reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    PROTECTED       reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    PUBLIC          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    STATIC          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    EXTERN          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    FINAL           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    AUTO            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    CONST           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    IMMUTABLE       reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    CASE            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    DEFAULT         reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    IDENTIFIER      reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    LBRACE          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    IF              reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    WHILE           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    DO              reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    FOR             reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    FOREACH         reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    FOREACH_REVERSE reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    SWITCH          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    CONTINUE        reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    BREAK           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    RETURN          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    GOTO            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    WITH            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    UAMPERSAND      reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    EXCLAMATION     reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    UTIMES          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    UPLUS           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    UMINUS          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    PLUS_PLUS       reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    MINUS_MINUS     reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    LPAREN          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    DOT             reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    DOLLAR          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    THIS            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    NULL            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    TRUE            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    FALSE           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    INUMBER         reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    DNUMBER         reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    LIT_CHAR        reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    NEW             reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    DELETE          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    CAST            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    LBRACKET        reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    FUNCTION        reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    MIXIN           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    IMPORT          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    LIT_STR         reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    ALIAS           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    ENUM            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    CLASS           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    TILDE           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    UNION           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    CHAR            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    INT             reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    UINT            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    LONG            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    FLOAT           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    DOUBLE          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    BOOL            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    SHORT           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    USHORT          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    ULONG           reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    TYPEOF          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    RBRACE          reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    SEMICOLON       reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)
    ELSE            reduce using rule 277 (withStatement -> WITH LPAREN expression RPAREN statementNoCaseNoDefault .)


state 707

    (263) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression . RANGE expression RBRACKET declarationOrStatement
    (343) expression -> expression . COMMA assignExpression

    RANGE           shift and go to state 726
    COMMA           shift and go to state 472


state 708

    (290) foreachType_multiple -> COMMA foreachType . foreachType_multiple
    (290) foreachType_multiple -> . COMMA foreachType foreachType_multiple
    (291) foreachType_multiple -> . empty
    (397) empty -> .

    COMMA           shift and go to state 670
    SEMICOLON       reduce using rule 397 (empty -> .)

    empty                          shift and go to state 672
    foreachType_multiple           shift and go to state 727

state 709

    (262) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression . RPAREN declarationOrStatement
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 728
    COMMA           shift and go to state 472


state 710

    (292) foreachType -> typeConstructorStar type_question IDENTIFIER .

    SEMICOLON       reduce using rule 292 (foreachType -> typeConstructorStar type_question IDENTIFIER .)
    COMMA           reduce using rule 292 (foreachType -> typeConstructorStar type_question IDENTIFIER .)


state 711

    (265) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression . RANGE expression RPAREN declarationOrStatement
    (343) expression -> expression . COMMA assignExpression

    RANGE           shift and go to state 729
    COMMA           shift and go to state 472


state 712

    (264) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression . RPAREN declarationOrStatement
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 730
    COMMA           shift and go to state 472


state 713

    (261) forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON . expression_question RPAREN declarationOrStatement
    (287) expression_question -> . expression
    (288) expression_question -> . empty
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RPAREN          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    type                           shift and go to state 219
    empty                          shift and go to state 519
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    expression_question            shift and go to state 731
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 518
    addExpression                  shift and go to state 238

state 714

    (260) forStatement -> FOR LPAREN declaration expression_question SEMICOLON . expression_question RPAREN declarationOrStatement
    (287) expression_question -> . expression
    (288) expression_question -> . empty
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (397) empty -> .
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    RPAREN          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    newExpression                  shift and go to state 240
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 519
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    mulExpression                  shift and go to state 200
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    expression_question            shift and go to state 732
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 518

state 715

    (259) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression . RPAREN SEMICOLON
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 733
    COMMA           shift and go to state 472


state 716

    (258) whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .

    PRIVATE         reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    IF              reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    DO              reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    UAMPERSAND      reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    UTIMES          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    UPLUS           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    UMINUS          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    MINUS_MINUS     reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    INT             reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    DOUBLE          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    RBRACE          reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 258 (whileStatement -> WHILE LPAREN expression RPAREN declarationOrStatement .)


state 717

    (298) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE . assignExpression COLON declarationsAndStatements
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    indexExpression                shift and go to state 203
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 734
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196

state 718

    (266) switchStatement -> SWITCH LPAREN expression RPAREN statement .

    UAMPERSAND      reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    EXCLAMATION     reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    UTIMES          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    UPLUS           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    UMINUS          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    PLUS_PLUS       reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    MINUS_MINUS     reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    DOT             reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    DOLLAR          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    THIS            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    NULL            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    INUMBER         reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    DNUMBER         reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    LIT_CHAR        reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    NEW             reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    DELETE          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    CAST            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    CONST           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    IMMUTABLE       reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACKET        reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    MIXIN           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    IMPORT          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    LIT_STR         reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    SHORT           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    USHORT          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    INT             reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    UINT            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    LONG            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    ULONG           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    TYPEOF          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    PRIVATE         reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    PROTECTED       reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    PUBLIC          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    STATIC          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    EXTERN          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    FINAL           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    AUTO            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    CASE            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    IF              reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    DO              reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    FOR             reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    FOREACH         reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    FOREACH_REVERSE reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    GOTO            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    WITH            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    ALIAS           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    ENUM            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    TILDE           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    UNION           reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 266 (switchStatement -> SWITCH LPAREN expression RPAREN statement .)


state 719

    (284) ifCondition -> AUTO IDENTIFIER ASSIGN . expression
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    primaryExpression              shift and go to state 225
    functionBody                   shift and go to state 223
    castExpression                 shift and go to state 244
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 735

state 720

    (256) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .
    (257) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement . ELSE declarationOrStatement

  ! shift/reduce conflict for ELSE resolved as shift
    PRIVATE         reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    STATIC          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FINAL           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    AUTO            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CONST           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CASE            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IF              reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    WHILE           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DO              reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FOR             reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    BREAK           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    RETURN          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    GOTO            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    WITH            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UAMPERSAND      reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UTIMES          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UPLUS           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UMINUS          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    MINUS_MINUS     reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DOT             reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    THIS            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    NULL            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TRUE            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FALSE           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    NEW             reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DELETE          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CAST            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ENUM            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CLASS           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TILDE           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UNION           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    CHAR            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    INT             reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    UINT            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    LONG            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    DOUBLE          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    BOOL            reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    SHORT           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    USHORT          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ULONG           reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    RBRACE          reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .)
    ELSE            shift and go to state 736

  ! ELSE            [ reduce using rule 256 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement .) ]


state 721

    (285) ifCondition -> type IDENTIFIER ASSIGN . expression
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 737

state 722

    (56) newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .

    DOT             reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    PLUS_PLUS       reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    MINUS_MINUS     reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LBRACKET        reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LPAREN          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    POWER           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    TIMES           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    DIV             reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    MODULO          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    PLUS            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    MINUS           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    TILDE           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    RIGHT_SHIFT     reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LEFT_SHIFT      reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    IS_EQ           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    NOT_EQ          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    AMPERSAND       reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    CARET           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    PIPE            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    DOUBLE_AMPERSAND reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    QUESTION        reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    DOUBLE_PIPE     reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    ASSIGN          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_LEFT         reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_RIGHT        reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_PLUS         reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_MINUS        reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_TIMES        reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_MODULO       reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_AND_BIT      reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_DIV          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_OR_BIT       reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    EQ_XOR_BIT      reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    IDENTIFIER      reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    CONST           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    IMMUTABLE       reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    RBRACE          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    THIS            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    BOOL            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    SHORT           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    USHORT          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    INT             reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    UINT            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LONG            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    ULONG           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    CHAR            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    FLOAT           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    TYPEOF          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LESS            reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LESS_EQ         reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    GREATER         reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    GREATER_EQ      reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    IS_EQ_DIFF      reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    NOT_EQ_DIFF     reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LESS_EQ_DIFF    reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    LESS_DIFF       reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    GREATER_EQ_DIFF reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    GREATER_DIFF    reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    COMMA           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    RPAREN          reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    SEMICOLON       reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    RANGE           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    RBRACKET        reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)
    COLON           reduce using rule 56 (newAnonClassExpression -> NEW arguments_question CLASS arguments_question baseClassList_question structBody .)


state 723

    (318) comma_index -> COMMA index comma_index .

    RBRACKET        reduce using rule 318 (comma_index -> COMMA index comma_index .)


state 724

    (106) comma_arrayMemberInitialization -> COMMA arrayMemberInitialization comma_arrayMemberInitialization .

    RBRACKET        reduce using rule 106 (comma_arrayMemberInitialization -> COMMA arrayMemberInitialization comma_arrayMemberInitialization .)


state 725

    (184) aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .

    PRIVATE         reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PROTECTED       reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PUBLIC          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    STATIC          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    EXTERN          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FINAL           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    AUTO            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CONST           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IMMUTABLE       reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ALIAS           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ENUM            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CLASS           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    THIS            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TILDE           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IMPORT          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UNION           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    MIXIN           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CHAR            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    INT             reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UINT            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LONG            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FLOAT           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOUBLE          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    BOOL            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SHORT           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    USHORT          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ULONG           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TYPEOF          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IDENTIFIER      reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    $end            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    RBRACE          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CASE            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DEFAULT         reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LBRACE          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    IF              reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    WHILE           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DO              reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOR             reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH         reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FOREACH_REVERSE reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SWITCH          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CONTINUE        reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    BREAK           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    RETURN          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    GOTO            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    WITH            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UAMPERSAND      reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    EXCLAMATION     reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UTIMES          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UPLUS           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    UMINUS          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    PLUS_PLUS       reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    MINUS_MINUS     reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LPAREN          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOT             reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DOLLAR          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    NULL            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    TRUE            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FALSE           reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    INUMBER         reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DNUMBER         reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LIT_CHAR        reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    NEW             reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    DELETE          reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    CAST            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LBRACKET        reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    FUNCTION        reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    LIT_STR         reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    SEMICOLON       reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)
    ELSE            reduce using rule 184 (aliasDeclaration -> ALIAS multiplestorageClass type IDENTIFIER LPAREN parameters RPAREN multiple_memberFunctionAttribute SEMICOLON .)


state 726

    (263) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE . expression RBRACKET declarationOrStatement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 738

state 727

    (290) foreachType_multiple -> COMMA foreachType foreachType_multiple .

    SEMICOLON       reduce using rule 290 (foreachType_multiple -> COMMA foreachType foreachType_multiple .)


state 728

    (262) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 739
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 729

    (265) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE . expression RPAREN declarationOrStatement
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors
    (397) empty -> .
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    IDENTIFIER      shift and go to state 218
    CONST           shift and go to state 62
    IMMUTABLE       shift and go to state 63
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    LBRACE          shift and go to state 207

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    typeConstructors_quetsion      shift and go to state 42
    functionCallExpression         shift and go to state 232
    unaryExpression                shift and go to state 239
    shiftExpression                shift and go to state 234
    xorExpression                  shift and go to state 204
    relExpression                  shift and go to state 190
    arrayLiteral                   shift and go to state 191
    mixinExpression                shift and go to state 199
    orExpression                   shift and go to state 235
    equalExpression                shift and go to state 236
    blockStatement                 shift and go to state 237
    mulExpression                  shift and go to state 200
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238
    type                           shift and go to state 219
    empty                          shift and go to state 139
    typeConstructors               shift and go to state 34
    orOrExpression                 shift and go to state 220
    indexExpression                shift and go to state 203
    newExpression                  shift and go to state 240
    symbol                         shift and go to state 241
    cmpExpression                  shift and go to state 221
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    castExpression                 shift and go to state 244
    functionBody                   shift and go to state 223
    primaryExpression              shift and go to state 225
    ternaryExpression              shift and go to state 226
    LIT_STRPlus                    shift and go to state 227
    functionLiteralExpression      shift and go to state 245
    importExpression               shift and go to state 228
    identifierOrTemplateChain      shift and go to state 195
    andExpression                  shift and go to state 210
    powExpression                  shift and go to state 229
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 740

state 730

    (264) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 741
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 731

    (261) forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question . RPAREN declarationOrStatement

    RPAREN          shift and go to state 742


state 732

    (260) forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question . RPAREN declarationOrStatement

    RPAREN          shift and go to state 743


state 733

    (259) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 744


state 734

    (298) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression . COLON declarationsAndStatements

    COLON           shift and go to state 745


state 735

    (284) ifCondition -> AUTO IDENTIFIER ASSIGN expression .
    (343) expression -> expression . COMMA assignExpression

    RPAREN          reduce using rule 284 (ifCondition -> AUTO IDENTIFIER ASSIGN expression .)
    COMMA           shift and go to state 472


state 736

    (257) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 746
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 737

    (285) ifCondition -> type IDENTIFIER ASSIGN expression .
    (343) expression -> expression . COMMA assignExpression

    RPAREN          reduce using rule 285 (ifCondition -> type IDENTIFIER ASSIGN expression .)
    COMMA           shift and go to state 472


state 738

    (263) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression . RBRACKET declarationOrStatement
    (343) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 747
    COMMA           shift and go to state 472


state 739

    (262) foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .

    PRIVATE         reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UAMPERSAND      reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UTIMES          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UPLUS           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UMINUS          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS_MINUS     reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOUBLE          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RBRACE          reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 262 (foreachStatement -> FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)


state 740

    (265) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression . RPAREN declarationOrStatement
    (343) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 748
    COMMA           shift and go to state 472


state 741

    (264) foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .

    PRIVATE         reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IF              reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DO              reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UAMPERSAND      reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UTIMES          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UPLUS           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UMINUS          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MINUS_MINUS     reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    INT             reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    DOUBLE          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    RBRACE          reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 264 (foreachStatement -> FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement .)


state 742

    (261) forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 749
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 743

    (260) forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 750
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 744

    (259) doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .

    PRIVATE         reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PROTECTED       reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PUBLIC          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    STATIC          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    EXTERN          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FINAL           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    AUTO            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CONST           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IMMUTABLE       reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FOREACH         reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FOREACH_REVERSE reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CONTINUE        reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    GOTO            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    WITH            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UAMPERSAND      reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    EXCLAMATION     reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UTIMES          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UPLUS           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UMINUS          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS_PLUS       reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS_MINUS     reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DOT             reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DOLLAR          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    THIS            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    NULL            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    INUMBER         reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DNUMBER         reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LIT_CHAR        reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    NEW             reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DELETE          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CAST            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACKET        reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    MIXIN           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LIT_STR         reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ALIAS           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ENUM            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CLASS           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TILDE           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UNION           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    UINT            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    LONG            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    SHORT           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    USHORT          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ULONG           reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    TYPEOF          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 259 (doStatement -> DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON .)


state 745

    (298) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON . declarationsAndStatements
    (279) declarationsAndStatements -> . declarationOrStatement declarationOrStatementmultiple
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    declarationsAndStatements      shift and go to state 751
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 351
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 746

    (257) ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .

    PRIVATE         reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PROTECTED       reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PUBLIC          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    STATIC          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    EXTERN          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FINAL           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    AUTO            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CONST           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IMMUTABLE       reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CASE            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DEFAULT         reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IDENTIFIER      reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LBRACE          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IF              reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    WHILE           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DO              reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FOR             reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FOREACH         reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    SWITCH          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CONTINUE        reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    BREAK           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    RETURN          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    GOTO            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    WITH            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UAMPERSAND      reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    EXCLAMATION     reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UTIMES          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UPLUS           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UMINUS          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    PLUS_PLUS       reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    MINUS_MINUS     reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LPAREN          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DOT             reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DOLLAR          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    THIS            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    NULL            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TRUE            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FALSE           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    INUMBER         reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DNUMBER         reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LIT_CHAR        reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    NEW             reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DELETE          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CAST            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LBRACKET        reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FUNCTION        reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    MIXIN           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    IMPORT          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LIT_STR         reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ALIAS           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ENUM            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CLASS           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TILDE           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UNION           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    CHAR            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    INT             reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    UINT            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    LONG            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    FLOAT           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    DOUBLE          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    BOOL            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    SHORT           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    USHORT          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ULONG           reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    TYPEOF          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    RBRACE          reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    SEMICOLON       reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)
    ELSE            reduce using rule 257 (ifStatement -> IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement .)


state 747

    (263) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 752
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 748

    (265) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN . declarationOrStatement
    (282) declarationOrStatement -> . declaration
    (283) declarationOrStatement -> . statement
    (62) declaration -> . multipleattributes declaration2
    (63) declaration -> . attribute multipleattributes LBRACE multiple_declaration RBRACE
    (293) statement -> . statementNoCaseNoDefault
    (294) statement -> . caseStatement
    (295) statement -> . caseRangeStatement
    (296) statement -> . defaultStatement
    (200) multipleattributes -> . attribute multipleattributes
    (201) multipleattributes -> . empty
    (202) attribute -> . PRIVATE
    (203) attribute -> . PROTECTED
    (204) attribute -> . PUBLIC
    (205) attribute -> . STATIC
    (206) attribute -> . EXTERN
    (207) attribute -> . FINAL
    (208) attribute -> . AUTO
    (209) attribute -> . CONST
    (210) attribute -> . IMMUTABLE
    (239) statementNoCaseNoDefault -> . labeledStatement
    (240) statementNoCaseNoDefault -> . blockStatement
    (241) statementNoCaseNoDefault -> . ifStatement
    (242) statementNoCaseNoDefault -> . whileStatement
    (243) statementNoCaseNoDefault -> . doStatement
    (244) statementNoCaseNoDefault -> . forStatement
    (245) statementNoCaseNoDefault -> . foreachStatement
    (246) statementNoCaseNoDefault -> . switchStatement
    (247) statementNoCaseNoDefault -> . continueStatement
    (248) statementNoCaseNoDefault -> . breakStatement
    (249) statementNoCaseNoDefault -> . returnStatement
    (250) statementNoCaseNoDefault -> . gotoStatement
    (251) statementNoCaseNoDefault -> . withStatement
    (252) statementNoCaseNoDefault -> . expressionStatement
    (301) caseStatement -> . CASE argumentList COLON declarationsAndStatements
    (298) caseRangeStatement -> . CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements
    (297) defaultStatement -> . DEFAULT COLON declarationsAndStatements
    (397) empty -> .
    (253) labeledStatement -> . IDENTIFIER COLON declarationOrStatement_question
    (254) blockStatement -> . LBRACE RBRACE
    (255) blockStatement -> . LBRACE declarationsAndStatements RBRACE
    (256) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement
    (257) ifStatement -> . IF LPAREN ifCondition RPAREN declarationOrStatement ELSE declarationOrStatement
    (258) whileStatement -> . WHILE LPAREN expression RPAREN declarationOrStatement
    (259) doStatement -> . DO statementNoCaseNoDefault WHILE LPAREN expression RPAREN SEMICOLON
    (260) forStatement -> . FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (261) forStatement -> . FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement
    (262) foreachStatement -> . FOREACH LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (263) foreachStatement -> . FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement
    (264) foreachStatement -> . FOREACH_REVERSE LPAREN foreachTypeList SEMICOLON expression RPAREN declarationOrStatement
    (265) foreachStatement -> . FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement
    (266) switchStatement -> . SWITCH LPAREN expression RPAREN statement
    (267) continueStatement -> . CONTINUE SEMICOLON
    (268) continueStatement -> . CONTINUE IDENTIFIER SEMICOLON
    (271) breakStatement -> . BREAK SEMICOLON
    (272) breakStatement -> . BREAK IDENTIFIER SEMICOLON
    (273) returnStatement -> . RETURN expression_question SEMICOLON
    (274) gotoStatement -> . GOTO IDENTIFIER SEMICOLON
    (275) gotoStatement -> . GOTO DEFAULT SEMICOLON
    (276) gotoStatement -> . GOTO CASE expression_question SEMICOLON
    (277) withStatement -> . WITH LPAREN expression RPAREN statementNoCaseNoDefault
    (278) expressionStatement -> . expression SEMICOLON
    (342) expression -> . assignExpression
    (343) expression -> . expression COMMA assignExpression
    (352) assignExpression -> . ternaryExpression
    (353) assignExpression -> . ternaryExpression assignOperator expression
    (365) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (366) ternaryExpression -> . orOrExpression
    (367) orOrExpression -> . andAndExpression
    (368) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (369) andAndExpression -> . orExpression
    (370) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (371) orExpression -> . xorExpression
    (372) orExpression -> . orExpression PIPE xorExpression
    (373) xorExpression -> . andExpression
    (374) xorExpression -> . xorExpression CARET andExpression
    (375) andExpression -> . cmpExpression
    (376) andExpression -> . andExpression AMPERSAND cmpExpression
    (377) cmpExpression -> . shiftExpression
    (378) cmpExpression -> . equalExpression
    (379) cmpExpression -> . relExpression
    (380) shiftExpression -> . addExpression
    (381) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (382) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (383) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (384) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (385) relExpression -> . shiftExpression
    (386) relExpression -> . relExpression relOperator shiftExpression
    (5) addExpression -> . mulExpression
    (6) addExpression -> . addExpression PLUS mulExpression
    (7) addExpression -> . addExpression MINUS mulExpression
    (8) addExpression -> . addExpression TILDE mulExpression
    (9) mulExpression -> . powExpression
    (10) mulExpression -> . mulExpression TIMES powExpression
    (11) mulExpression -> . mulExpression DIV powExpression
    (12) mulExpression -> . mulExpression MODULO powExpression
    (13) powExpression -> . unaryExpression
    (14) powExpression -> . powExpression POWER unaryExpression
    (15) unaryExpression -> . primaryExpression
    (16) unaryExpression -> . UAMPERSAND unaryExpression
    (17) unaryExpression -> . EXCLAMATION unaryExpression
    (18) unaryExpression -> . UTIMES unaryExpression
    (19) unaryExpression -> . UPLUS unaryExpression
    (20) unaryExpression -> . UMINUS unaryExpression
    (21) unaryExpression -> . PLUS_PLUS unaryExpression
    (22) unaryExpression -> . MINUS_MINUS unaryExpression
    (23) unaryExpression -> . newExpression
    (24) unaryExpression -> . deleteExpression
    (25) unaryExpression -> . castExpression
    (26) unaryExpression -> . functionCallExpression
    (27) unaryExpression -> . indexExpression
    (28) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression DOT newExpression
    (30) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (31) unaryExpression -> . unaryExpression PLUS_PLUS
    (32) unaryExpression -> . unaryExpression MINUS_MINUS
    (33) primaryExpression -> . identifierOrTemplateInstance
    (34) primaryExpression -> . DOT identifierOrTemplateInstance
    (35) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (36) primaryExpression -> . type DOT IDENTIFIER
    (37) primaryExpression -> . type arguments
    (38) primaryExpression -> . arrayLiteral
    (39) primaryExpression -> . LPAREN expression RPAREN
    (40) primaryExpression -> . functionLiteralExpression
    (41) primaryExpression -> . mixinExpression
    (42) primaryExpression -> . importExpression
    (43) primaryExpression -> . DOLLAR
    (44) primaryExpression -> . THIS
    (45) primaryExpression -> . NULL
    (46) primaryExpression -> . TRUE
    (47) primaryExpression -> . FALSE
    (48) primaryExpression -> . INUMBER
    (49) primaryExpression -> . DNUMBER
    (50) primaryExpression -> . LIT_STRPlus
    (51) primaryExpression -> . LIT_CHAR
    (52) newExpression -> . NEW type
    (53) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (54) newExpression -> . NEW type arguments
    (55) newExpression -> . newAnonClassExpression
    (302) deleteExpression -> . DELETE unaryExpression
    (303) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (304) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (305) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (308) functionCallExpression -> . symbol arguments
    (309) functionCallExpression -> . unaryExpression arguments
    (310) functionCallExpression -> . type arguments
    (316) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (317) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (315) identifierOrTemplateInstance -> . IDENTIFIER
    (222) typeConstructor -> . CONST
    (223) typeConstructor -> . IMMUTABLE
    (322) type -> . typeConstructors_quetsion type2 typeSuffixStar
    (108) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (344) functionLiteralExpression -> . FUNCTION functionBody
    (345) functionLiteralExpression -> . FUNCTION type functionBody
    (346) functionLiteralExpression -> . functionBody
    (347) functionLiteralExpression -> . IDENTIFIER assignExpression
    (348) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (349) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (350) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (351) LIT_STRPlus -> . LIT_STR
    (56) newAnonClassExpression -> . NEW arguments_question CLASS arguments_question baseClassList_question structBody
    (311) symbol -> . DOT identifierOrTemplateChain
    (312) symbol -> . identifierOrTemplateChain
    (191) typeConstructors_quetsion -> . typeConstructors
    (192) typeConstructors_quetsion -> . empty
    (341) functionBody -> . blockStatement
    (313) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (314) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (224) typeConstructors -> . typeConstructor multiple_typeConstructors

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for EXTERN resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
  ! shift/reduce conflict for AUTO resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for MIXIN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
    PRIVATE         shift and go to state 9
    PROTECTED       shift and go to state 7
    PUBLIC          shift and go to state 14
    STATIC          shift and go to state 8
    EXTERN          shift and go to state 11
    FINAL           shift and go to state 6
    AUTO            shift and go to state 2
    CONST           shift and go to state 17
    IMMUTABLE       shift and go to state 46
    CASE            shift and go to state 368
    DEFAULT         shift and go to state 366
    ALIAS           reduce using rule 397 (empty -> .)
    ENUM            reduce using rule 397 (empty -> .)
    CLASS           reduce using rule 397 (empty -> .)
    TILDE           reduce using rule 397 (empty -> .)
    UNION           reduce using rule 397 (empty -> .)
    CHAR            reduce using rule 397 (empty -> .)
    INT             reduce using rule 397 (empty -> .)
    UINT            reduce using rule 397 (empty -> .)
    LONG            reduce using rule 397 (empty -> .)
    FLOAT           reduce using rule 397 (empty -> .)
    DOUBLE          reduce using rule 397 (empty -> .)
    BOOL            reduce using rule 397 (empty -> .)
    SHORT           reduce using rule 397 (empty -> .)
    USHORT          reduce using rule 397 (empty -> .)
    ULONG           reduce using rule 397 (empty -> .)
    TYPEOF          reduce using rule 397 (empty -> .)
    IDENTIFIER      shift and go to state 372
    LBRACE          shift and go to state 207
    IF              shift and go to state 381
    WHILE           shift and go to state 367
    DO              shift and go to state 365
    FOR             shift and go to state 360
    FOREACH         shift and go to state 350
    FOREACH_REVERSE shift and go to state 358
    SWITCH          shift and go to state 370
    CONTINUE        shift and go to state 363
    BREAK           shift and go to state 375
    RETURN          shift and go to state 355
    GOTO            shift and go to state 348
    WITH            shift and go to state 345
    UAMPERSAND      shift and go to state 188
    EXCLAMATION     shift and go to state 211
    UTIMES          shift and go to state 230
    UPLUS           shift and go to state 193
    UMINUS          shift and go to state 231
    PLUS_PLUS       shift and go to state 209
    MINUS_MINUS     shift and go to state 201
    LPAREN          shift and go to state 243
    DOT             shift and go to state 214
    DOLLAR          shift and go to state 242
    THIS            shift and go to state 194
    NULL            shift and go to state 233
    TRUE            shift and go to state 189
    FALSE           shift and go to state 224
    INUMBER         shift and go to state 208
    DNUMBER         shift and go to state 192
    LIT_CHAR        shift and go to state 215
    NEW             shift and go to state 213
    DELETE          shift and go to state 197
    CAST            shift and go to state 216
    LBRACKET        shift and go to state 187
    FUNCTION        shift and go to state 202
    MIXIN           shift and go to state 50
    IMPORT          shift and go to state 222
    LIT_STR         shift and go to state 246

  ! THIS            [ reduce using rule 397 (empty -> .) ]
  ! IMPORT          [ reduce using rule 397 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 397 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 397 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 397 (empty -> .) ]
  ! STATIC          [ reduce using rule 397 (empty -> .) ]
  ! EXTERN          [ reduce using rule 397 (empty -> .) ]
  ! FINAL           [ reduce using rule 397 (empty -> .) ]
  ! AUTO            [ reduce using rule 397 (empty -> .) ]
  ! CONST           [ reduce using rule 397 (empty -> .) ]
  ! IMMUTABLE       [ reduce using rule 397 (empty -> .) ]
  ! MIXIN           [ reduce using rule 397 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 397 (empty -> .) ]

    forStatement                   shift and go to state 342
    multipleattributes             shift and go to state 4
    continueStatement              shift and go to state 356
    attribute                      shift and go to state 5
    switchStatement                shift and go to state 343
    deleteExpression               shift and go to state 212
    andAndExpression               shift and go to state 198
    functionCallExpression         shift and go to state 232
    breakStatement                 shift and go to state 376
    gotoStatement                  shift and go to state 377
    blockStatement                 shift and go to state 344
    unaryExpression                shift and go to state 239
    defaultStatement               shift and go to state 378
    caseStatement                  shift and go to state 357
    powExpression                  shift and go to state 229
    xorExpression                  shift and go to state 204
    doStatement                    shift and go to state 369
    arrayLiteral                   shift and go to state 191
    castExpression                 shift and go to state 244
    orExpression                   shift and go to state 235
    shiftExpression                shift and go to state 234
    equalExpression                shift and go to state 236
    foreachStatement               shift and go to state 346
    statement                      shift and go to state 371
    statementNoCaseNoDefault       shift and go to state 347
    type                           shift and go to state 219
    symbol                         shift and go to state 241
    empty                          shift and go to state 373
    newExpression                  shift and go to state 240
    orOrExpression                 shift and go to state 220
    mulExpression                  shift and go to state 200
    withStatement                  shift and go to state 361
    whileStatement                 shift and go to state 349
    mixinExpression                shift and go to state 199
    cmpExpression                  shift and go to state 221
    typeConstructors               shift and go to state 34
    declaration                    shift and go to state 374
    declarationOrStatement         shift and go to state 753
    returnStatement                shift and go to state 352
    newAnonClassExpression         shift and go to state 205
    assignExpression               shift and go to state 285
    ifStatement                    shift and go to state 359
    functionBody                   shift and go to state 223
    functionLiteralExpression      shift and go to state 245
    relExpression                  shift and go to state 190
    ternaryExpression              shift and go to state 226
    typeConstructors_quetsion      shift and go to state 42
    LIT_STRPlus                    shift and go to state 227
    expressionStatement            shift and go to state 353
    labeledStatement               shift and go to state 362
    importExpression               shift and go to state 228
    indexExpression                shift and go to state 203
    caseRangeStatement             shift and go to state 354
    identifierOrTemplateChain      shift and go to state 195
    primaryExpression              shift and go to state 225
    andExpression                  shift and go to state 210
    typeConstructor                shift and go to state 196
    expression                     shift and go to state 364
    identifierOrTemplateInstance   shift and go to state 217
    addExpression                  shift and go to state 238

state 749

    (261) forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .

    PRIVATE         reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    STATIC          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FINAL           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    AUTO            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CONST           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CASE            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IF              reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    WHILE           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DO              reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FOR             reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    BREAK           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    RETURN          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    GOTO            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    WITH            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UAMPERSAND      reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UTIMES          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UPLUS           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UMINUS          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    MINUS_MINUS     reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DOT             reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    THIS            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    NULL            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    TRUE            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FALSE           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    NEW             reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DELETE          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CAST            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ENUM            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CLASS           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    TILDE           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UNION           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CHAR            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    INT             reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UINT            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LONG            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DOUBLE          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    BOOL            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    SHORT           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    USHORT          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ULONG           reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    RBRACE          reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ELSE            reduce using rule 261 (forStatement -> FOR LPAREN statementNoCaseNoDefault expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)


state 750

    (260) forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .

    PRIVATE         reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    STATIC          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FINAL           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    AUTO            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CONST           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CASE            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IF              reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    WHILE           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DO              reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FOR             reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    BREAK           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    RETURN          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    GOTO            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    WITH            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UAMPERSAND      reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UTIMES          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UPLUS           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UMINUS          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    MINUS_MINUS     reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DOT             reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    THIS            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    NULL            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    TRUE            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FALSE           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    NEW             reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DELETE          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CAST            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ENUM            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CLASS           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    TILDE           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UNION           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    CHAR            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    INT             reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    UINT            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    LONG            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    DOUBLE          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    BOOL            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    SHORT           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    USHORT          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ULONG           reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    RBRACE          reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)
    ELSE            reduce using rule 260 (forStatement -> FOR LPAREN declaration expression_question SEMICOLON expression_question RPAREN declarationOrStatement .)


state 751

    (298) caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .

    PRIVATE         reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PROTECTED       reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PUBLIC          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    STATIC          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    EXTERN          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FINAL           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    AUTO            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CONST           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IMMUTABLE       reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CASE            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DEFAULT         reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IDENTIFIER      reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LBRACE          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IF              reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    WHILE           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DO              reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FOR             reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FOREACH         reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FOREACH_REVERSE reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    SWITCH          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CONTINUE        reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    BREAK           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    RETURN          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    GOTO            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    WITH            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UAMPERSAND      reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    EXCLAMATION     reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UTIMES          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UPLUS           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UMINUS          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    PLUS_PLUS       reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    MINUS_MINUS     reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LPAREN          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DOT             reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DOLLAR          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    THIS            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    NULL            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TRUE            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FALSE           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    INUMBER         reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DNUMBER         reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LIT_CHAR        reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    NEW             reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DELETE          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CAST            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LBRACKET        reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FUNCTION        reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    MIXIN           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    IMPORT          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LIT_STR         reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ALIAS           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ENUM            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CLASS           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TILDE           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UNION           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    CHAR            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    INT             reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    UINT            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    LONG            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    FLOAT           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    DOUBLE          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    BOOL            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    SHORT           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    USHORT          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ULONG           reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    TYPEOF          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    RBRACE          reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    SEMICOLON       reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)
    ELSE            reduce using rule 298 (caseRangeStatement -> CASE assignExpression COLON ELLIPSIS CASE assignExpression COLON declarationsAndStatements .)


state 752

    (263) foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .

    PRIVATE         reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PROTECTED       reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PUBLIC          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    STATIC          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    EXTERN          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FINAL           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    AUTO            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CONST           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IMMUTABLE       reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CASE            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DEFAULT         reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IDENTIFIER      reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LBRACE          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IF              reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    WHILE           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DO              reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FOR             reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FOREACH         reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    SWITCH          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CONTINUE        reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    BREAK           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    RETURN          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    GOTO            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    WITH            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UAMPERSAND      reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    EXCLAMATION     reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UTIMES          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UPLUS           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UMINUS          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    PLUS_PLUS       reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    MINUS_MINUS     reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LPAREN          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DOT             reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DOLLAR          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    THIS            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    NULL            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TRUE            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FALSE           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    INUMBER         reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DNUMBER         reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LIT_CHAR        reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    NEW             reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DELETE          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CAST            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LBRACKET        reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FUNCTION        reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    MIXIN           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    IMPORT          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LIT_STR         reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ALIAS           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ENUM            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CLASS           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TILDE           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UNION           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    CHAR            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    INT             reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    UINT            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    LONG            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    FLOAT           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    DOUBLE          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    BOOL            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    SHORT           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    USHORT          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ULONG           reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    TYPEOF          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    RBRACE          reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    SEMICOLON       reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)
    ELSE            reduce using rule 263 (foreachStatement -> FOREACH LPAREN foreachType SEMICOLON expression RANGE expression RBRACKET declarationOrStatement .)


state 753

    (265) foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .

    PRIVATE         reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PROTECTED       reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PUBLIC          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    STATIC          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    EXTERN          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FINAL           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    AUTO            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CONST           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IMMUTABLE       reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CASE            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DEFAULT         reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IDENTIFIER      reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LBRACE          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IF              reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    WHILE           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DO              reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FOR             reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FOREACH         reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FOREACH_REVERSE reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    SWITCH          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CONTINUE        reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    BREAK           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    RETURN          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    GOTO            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    WITH            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UAMPERSAND      reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    EXCLAMATION     reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UTIMES          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UPLUS           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UMINUS          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    PLUS_PLUS       reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    MINUS_MINUS     reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LPAREN          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DOT             reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DOLLAR          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    THIS            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    NULL            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TRUE            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FALSE           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    INUMBER         reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DNUMBER         reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LIT_CHAR        reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    NEW             reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DELETE          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CAST            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LBRACKET        reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FUNCTION        reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    MIXIN           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    IMPORT          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LIT_STR         reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ALIAS           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ENUM            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CLASS           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TILDE           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UNION           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    CHAR            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    INT             reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    UINT            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    LONG            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    FLOAT           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    DOUBLE          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    BOOL            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    SHORT           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    USHORT          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ULONG           reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    TYPEOF          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    RBRACE          reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    SEMICOLON       reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)
    ELSE            reduce using rule 265 (foreachStatement -> FOREACH_REVERSE LPAREN foreachType SEMICOLON expression RANGE expression RPAREN declarationOrStatement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRIVATE in state 0 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 0 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 0 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 0 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 0 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 0 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for THIS in state 4 resolved as shift
WARNING: shift/reduce conflict for CONST in state 4 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 4 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 5 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 5 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 5 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 5 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 5 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 5 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 5 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 10 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 10 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 10 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 10 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 10 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 10 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 10 resolved as shift
WARNING: shift/reduce conflict for CONST in state 10 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 10 resolved as shift
WARNING: shift/reduce conflict for CONST in state 24 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 24 resolved as shift
WARNING: shift/reduce conflict for CONST in state 24 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 24 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 36 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 43 resolved as shift
WARNING: shift/reduce conflict for CONST in state 43 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 43 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 56 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 56 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 56 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 56 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 56 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 56 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 56 resolved as shift
WARNING: shift/reduce conflict for CONST in state 56 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 56 resolved as shift
WARNING: shift/reduce conflict for CONST in state 61 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 61 resolved as shift
WARNING: shift/reduce conflict for CONST in state 72 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 72 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 76 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 76 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 76 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 76 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 76 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 76 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 76 resolved as shift
WARNING: shift/reduce conflict for CONST in state 76 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 76 resolved as shift
WARNING: shift/reduce conflict for DOT in state 92 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 92 resolved as shift
WARNING: shift/reduce conflict for CONST in state 110 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 110 resolved as shift
WARNING: shift/reduce conflict for CONST in state 113 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 113 resolved as shift
WARNING: shift/reduce conflict for CONST in state 117 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 117 resolved as shift
WARNING: shift/reduce conflict for THIS in state 119 resolved as shift
WARNING: shift/reduce conflict for CONST in state 119 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 119 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 119 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 120 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 120 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 120 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 120 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 120 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 120 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 120 resolved as shift
WARNING: shift/reduce conflict for CONST in state 120 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 120 resolved as shift
WARNING: shift/reduce conflict for CONST in state 137 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 137 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 140 resolved as shift
WARNING: shift/reduce conflict for CONST in state 140 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 140 resolved as shift
WARNING: shift/reduce conflict for CONST in state 153 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 153 resolved as shift
WARNING: shift/reduce conflict for THIS in state 153 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 153 resolved as shift
WARNING: shift/reduce conflict for THIS in state 157 resolved as shift
WARNING: shift/reduce conflict for CONST in state 157 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 157 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 157 resolved as shift
WARNING: shift/reduce conflict for THIS in state 160 resolved as shift
WARNING: shift/reduce conflict for CONST in state 160 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 160 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 160 resolved as shift
WARNING: shift/reduce conflict for CONST in state 161 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 161 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 163 resolved as shift
WARNING: shift/reduce conflict for CONST in state 163 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 163 resolved as shift
WARNING: shift/reduce conflict for CONST in state 171 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 171 resolved as shift
WARNING: shift/reduce conflict for CONST in state 177 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 177 resolved as shift
WARNING: shift/reduce conflict for CONST in state 178 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 178 resolved as shift
WARNING: shift/reduce conflict for THIS in state 187 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 187 resolved as shift
WARNING: shift/reduce conflict for CONST in state 187 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 187 resolved as shift
WARNING: shift/reduce conflict for THIS in state 188 resolved as shift
WARNING: shift/reduce conflict for CONST in state 188 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 188 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 188 resolved as shift
WARNING: shift/reduce conflict for LESS in state 190 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 190 resolved as shift
WARNING: shift/reduce conflict for IS_EQ_DIFF in state 190 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ_DIFF in state 190 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ_DIFF in state 190 resolved as shift
WARNING: shift/reduce conflict for LESS_DIFF in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ_DIFF in state 190 resolved as shift
WARNING: shift/reduce conflict for GREATER_DIFF in state 190 resolved as shift
WARNING: shift/reduce conflict for THIS in state 193 resolved as shift
WARNING: shift/reduce conflict for CONST in state 193 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 193 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 193 resolved as shift
WARNING: shift/reduce conflict for CONST in state 196 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 196 resolved as shift
WARNING: shift/reduce conflict for THIS in state 197 resolved as shift
WARNING: shift/reduce conflict for CONST in state 197 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 197 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 197 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 198 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 200 resolved as shift
WARNING: shift/reduce conflict for DIV in state 200 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 200 resolved as shift
WARNING: shift/reduce conflict for THIS in state 201 resolved as shift
WARNING: shift/reduce conflict for CONST in state 201 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 201 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 201 resolved as shift
WARNING: shift/reduce conflict for CONST in state 202 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 202 resolved as shift
WARNING: shift/reduce conflict for CARET in state 204 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 207 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 207 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 207 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 207 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 207 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 207 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 207 resolved as shift
WARNING: shift/reduce conflict for CONST in state 207 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 207 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 207 resolved as shift
WARNING: shift/reduce conflict for THIS in state 207 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 207 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 207 resolved as shift
WARNING: shift/reduce conflict for THIS in state 209 resolved as shift
WARNING: shift/reduce conflict for CONST in state 209 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 209 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 209 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 210 resolved as shift
WARNING: shift/reduce conflict for THIS in state 211 resolved as shift
WARNING: shift/reduce conflict for CONST in state 211 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 211 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 211 resolved as shift
WARNING: shift/reduce conflict for CONST in state 213 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 213 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 218 resolved as shift
WARNING: shift/reduce conflict for DOT in state 218 resolved as shift
WARNING: shift/reduce conflict for THIS in state 218 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 218 resolved as shift
WARNING: shift/reduce conflict for CONST in state 218 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 218 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 218 resolved as shift
WARNING: shift/reduce conflict for THIS in state 218 resolved as shift
WARNING: shift/reduce conflict for CONST in state 218 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 218 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 218 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_PIPE in state 220 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_LEFT in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_RIGHT in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_PLUS in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_MINUS in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_TIMES in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_MODULO in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_AND_BIT in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_DIV in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_OR_BIT in state 226 resolved as shift
WARNING: shift/reduce conflict for EQ_XOR_BIT in state 226 resolved as shift
WARNING: shift/reduce conflict for POWER in state 229 resolved as shift
WARNING: shift/reduce conflict for THIS in state 230 resolved as shift
WARNING: shift/reduce conflict for CONST in state 230 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 230 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 230 resolved as shift
WARNING: shift/reduce conflict for THIS in state 231 resolved as shift
WARNING: shift/reduce conflict for CONST in state 231 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 231 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 231 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 234 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 234 resolved as shift
WARNING: shift/reduce conflict for IS_EQ in state 234 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 234 resolved as shift
WARNING: shift/reduce conflict for PIPE in state 235 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 238 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 238 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 238 resolved as shift
WARNING: shift/reduce conflict for DOT in state 239 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 239 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 239 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 239 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 239 resolved as shift
WARNING: shift/reduce conflict for CONST in state 243 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 243 resolved as shift
WARNING: shift/reduce conflict for THIS in state 243 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 243 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 263 resolved as shift
WARNING: shift/reduce conflict for CONST in state 263 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 263 resolved as shift
WARNING: shift/reduce conflict for THIS in state 271 resolved as shift
WARNING: shift/reduce conflict for CONST in state 271 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 271 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 271 resolved as shift
WARNING: shift/reduce conflict for CONST in state 273 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 273 resolved as shift
WARNING: shift/reduce conflict for CONST in state 275 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 275 resolved as shift
WARNING: shift/reduce conflict for CONST in state 280 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 280 resolved as shift
WARNING: shift/reduce conflict for THIS in state 289 resolved as shift
WARNING: shift/reduce conflict for CONST in state 289 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 289 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 289 resolved as shift
WARNING: shift/reduce conflict for CONST in state 290 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 290 resolved as shift
WARNING: shift/reduce conflict for CONST in state 306 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 306 resolved as shift
WARNING: shift/reduce conflict for THIS in state 312 resolved as shift
WARNING: shift/reduce conflict for CONST in state 312 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 312 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 312 resolved as shift
WARNING: shift/reduce conflict for THIS in state 328 resolved as shift
WARNING: shift/reduce conflict for CONST in state 328 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 328 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 328 resolved as shift
WARNING: shift/reduce conflict for CONST in state 331 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 331 resolved as shift
WARNING: shift/reduce conflict for DOT in state 332 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 332 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 332 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 332 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 332 resolved as shift
WARNING: shift/reduce conflict for THIS in state 333 resolved as shift
WARNING: shift/reduce conflict for CONST in state 333 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 333 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 333 resolved as shift
WARNING: shift/reduce conflict for THIS in state 334 resolved as shift
WARNING: shift/reduce conflict for CONST in state 334 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 334 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 334 resolved as shift
WARNING: shift/reduce conflict for THIS in state 335 resolved as shift
WARNING: shift/reduce conflict for CONST in state 335 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 335 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 335 resolved as shift
WARNING: shift/reduce conflict for THIS in state 336 resolved as shift
WARNING: shift/reduce conflict for CONST in state 336 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 336 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 336 resolved as shift
WARNING: shift/reduce conflict for THIS in state 340 resolved as shift
WARNING: shift/reduce conflict for CONST in state 340 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 340 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 340 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 351 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 351 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 351 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 351 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 351 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 351 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 351 resolved as shift
WARNING: shift/reduce conflict for CONST in state 351 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 351 resolved as shift
WARNING: shift/reduce conflict for CASE in state 351 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 351 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 351 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 351 resolved as shift
WARNING: shift/reduce conflict for IF in state 351 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 351 resolved as shift
WARNING: shift/reduce conflict for DO in state 351 resolved as shift
WARNING: shift/reduce conflict for FOR in state 351 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 351 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 351 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 351 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 351 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 351 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 351 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 351 resolved as shift
WARNING: shift/reduce conflict for WITH in state 351 resolved as shift
WARNING: shift/reduce conflict for UAMPERSAND in state 351 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 351 resolved as shift
WARNING: shift/reduce conflict for UTIMES in state 351 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 351 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 351 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 351 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 351 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 351 resolved as shift
WARNING: shift/reduce conflict for DOT in state 351 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 351 resolved as shift
WARNING: shift/reduce conflict for THIS in state 351 resolved as shift
WARNING: shift/reduce conflict for NULL in state 351 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 351 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 351 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 351 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 351 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 351 resolved as shift
WARNING: shift/reduce conflict for NEW in state 351 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 351 resolved as shift
WARNING: shift/reduce conflict for CAST in state 351 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 351 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 351 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 351 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 351 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 351 resolved as shift
WARNING: shift/reduce conflict for THIS in state 355 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 355 resolved as shift
WARNING: shift/reduce conflict for CONST in state 355 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 355 resolved as shift
WARNING: shift/reduce conflict for THIS in state 365 resolved as shift
WARNING: shift/reduce conflict for CONST in state 365 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 365 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 365 resolved as shift
WARNING: shift/reduce conflict for THIS in state 368 resolved as shift
WARNING: shift/reduce conflict for CONST in state 368 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 368 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 368 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 372 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 372 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 372 resolved as shift
WARNING: shift/reduce conflict for DOT in state 372 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 372 resolved as shift
WARNING: shift/reduce conflict for THIS in state 372 resolved as shift
WARNING: shift/reduce conflict for CONST in state 372 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 372 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 372 resolved as shift
WARNING: shift/reduce conflict for THIS in state 383 resolved as shift
WARNING: shift/reduce conflict for CONST in state 383 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 383 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 383 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 386 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 386 resolved as shift
WARNING: shift/reduce conflict for THIS in state 389 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 389 resolved as shift
WARNING: shift/reduce conflict for CONST in state 389 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 389 resolved as shift
WARNING: shift/reduce conflict for CONST in state 392 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 392 resolved as shift
WARNING: shift/reduce conflict for THIS in state 396 resolved as shift
WARNING: shift/reduce conflict for CONST in state 396 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 396 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 396 resolved as shift
WARNING: shift/reduce conflict for THIS in state 397 resolved as shift
WARNING: shift/reduce conflict for CONST in state 397 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 397 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 397 resolved as shift
WARNING: shift/reduce conflict for THIS in state 398 resolved as shift
WARNING: shift/reduce conflict for CONST in state 398 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 398 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 398 resolved as shift
WARNING: shift/reduce conflict for THIS in state 409 resolved as shift
WARNING: shift/reduce conflict for CONST in state 409 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 409 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 409 resolved as shift
WARNING: shift/reduce conflict for THIS in state 411 resolved as shift
WARNING: shift/reduce conflict for CONST in state 411 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 411 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 411 resolved as shift
WARNING: shift/reduce conflict for THIS in state 414 resolved as shift
WARNING: shift/reduce conflict for CONST in state 414 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 414 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 414 resolved as shift
WARNING: shift/reduce conflict for THIS in state 415 resolved as shift
WARNING: shift/reduce conflict for CONST in state 415 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 415 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 415 resolved as shift
WARNING: shift/reduce conflict for THIS in state 416 resolved as shift
WARNING: shift/reduce conflict for CONST in state 416 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 416 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 416 resolved as shift
WARNING: shift/reduce conflict for THIS in state 417 resolved as shift
WARNING: shift/reduce conflict for CONST in state 417 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 417 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 417 resolved as shift
WARNING: shift/reduce conflict for THIS in state 418 resolved as shift
WARNING: shift/reduce conflict for CONST in state 418 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 418 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 418 resolved as shift
WARNING: shift/reduce conflict for THIS in state 419 resolved as shift
WARNING: shift/reduce conflict for CONST in state 419 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 419 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 419 resolved as shift
WARNING: shift/reduce conflict for THIS in state 420 resolved as shift
WARNING: shift/reduce conflict for CONST in state 420 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 420 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 420 resolved as shift
WARNING: shift/reduce conflict for THIS in state 421 resolved as shift
WARNING: shift/reduce conflict for CONST in state 421 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 421 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 421 resolved as shift
WARNING: shift/reduce conflict for THIS in state 422 resolved as shift
WARNING: shift/reduce conflict for CONST in state 422 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 422 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 422 resolved as shift
WARNING: shift/reduce conflict for THIS in state 447 resolved as shift
WARNING: shift/reduce conflict for CONST in state 447 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 447 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 447 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 450 resolved as shift
WARNING: shift/reduce conflict for CONST in state 450 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 450 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 458 resolved as shift
WARNING: shift/reduce conflict for THIS in state 458 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 458 resolved as shift
WARNING: shift/reduce conflict for CONST in state 458 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 458 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 463 resolved as shift
WARNING: shift/reduce conflict for THIS in state 466 resolved as shift
WARNING: shift/reduce conflict for CONST in state 466 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 466 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 466 resolved as shift
WARNING: shift/reduce conflict for THIS in state 472 resolved as shift
WARNING: shift/reduce conflict for CONST in state 472 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 472 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 472 resolved as shift
WARNING: shift/reduce conflict for THIS in state 484 resolved as shift
WARNING: shift/reduce conflict for CONST in state 484 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 484 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 484 resolved as shift
WARNING: shift/reduce conflict for THIS in state 498 resolved as shift
WARNING: shift/reduce conflict for CONST in state 498 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 498 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 498 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 500 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 500 resolved as shift
WARNING: shift/reduce conflict for THIS in state 509 resolved as shift
WARNING: shift/reduce conflict for CONST in state 509 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 509 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 509 resolved as shift
WARNING: shift/reduce conflict for THIS in state 510 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 510 resolved as shift
WARNING: shift/reduce conflict for CONST in state 510 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 510 resolved as shift
WARNING: shift/reduce conflict for CONST in state 513 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 513 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 514 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 514 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 514 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 514 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 514 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 514 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 514 resolved as shift
WARNING: shift/reduce conflict for CONST in state 514 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 514 resolved as shift
WARNING: shift/reduce conflict for CASE in state 514 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 514 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 514 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 514 resolved as shift
WARNING: shift/reduce conflict for IF in state 514 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 514 resolved as shift
WARNING: shift/reduce conflict for DO in state 514 resolved as shift
WARNING: shift/reduce conflict for FOR in state 514 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 514 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 514 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 514 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 514 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 514 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 514 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 514 resolved as shift
WARNING: shift/reduce conflict for WITH in state 514 resolved as shift
WARNING: shift/reduce conflict for UAMPERSAND in state 514 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 514 resolved as shift
WARNING: shift/reduce conflict for UTIMES in state 514 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 514 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 514 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 514 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 514 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 514 resolved as shift
WARNING: shift/reduce conflict for DOT in state 514 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 514 resolved as shift
WARNING: shift/reduce conflict for THIS in state 514 resolved as shift
WARNING: shift/reduce conflict for NULL in state 514 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 514 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 514 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 514 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 514 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 514 resolved as shift
WARNING: shift/reduce conflict for NEW in state 514 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 514 resolved as shift
WARNING: shift/reduce conflict for CAST in state 514 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 514 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 514 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 514 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 514 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 514 resolved as shift
WARNING: shift/reduce conflict for CONST in state 520 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 520 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 521 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 521 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 521 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 521 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 521 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 521 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 521 resolved as shift
WARNING: shift/reduce conflict for CONST in state 521 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 521 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 521 resolved as shift
WARNING: shift/reduce conflict for THIS in state 521 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 521 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 521 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 526 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 526 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 526 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 526 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 526 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 526 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 526 resolved as shift
WARNING: shift/reduce conflict for CONST in state 526 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 526 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 526 resolved as shift
WARNING: shift/reduce conflict for THIS in state 526 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 526 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 526 resolved as shift
WARNING: shift/reduce conflict for THIS in state 527 resolved as shift
WARNING: shift/reduce conflict for CONST in state 527 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 527 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 527 resolved as shift
WARNING: shift/reduce conflict for COLON in state 528 resolved as shift
WARNING: shift/reduce conflict for COLON in state 529 resolved as shift
WARNING: shift/reduce conflict for THIS in state 530 resolved as shift
WARNING: shift/reduce conflict for CONST in state 530 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 530 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 530 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 531 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 531 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 531 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 531 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 531 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 531 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 531 resolved as shift
WARNING: shift/reduce conflict for CONST in state 531 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 531 resolved as shift
WARNING: shift/reduce conflict for CASE in state 531 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 531 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 531 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 531 resolved as shift
WARNING: shift/reduce conflict for IF in state 531 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 531 resolved as shift
WARNING: shift/reduce conflict for DO in state 531 resolved as shift
WARNING: shift/reduce conflict for FOR in state 531 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 531 resolved as shift
WARNING: shift/reduce conflict for FOREACH_REVERSE in state 531 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 531 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 531 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 531 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 531 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 531 resolved as shift
WARNING: shift/reduce conflict for WITH in state 531 resolved as shift
WARNING: shift/reduce conflict for UAMPERSAND in state 531 resolved as shift
WARNING: shift/reduce conflict for EXCLAMATION in state 531 resolved as shift
WARNING: shift/reduce conflict for UTIMES in state 531 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 531 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 531 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 531 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 531 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 531 resolved as shift
WARNING: shift/reduce conflict for DOT in state 531 resolved as shift
WARNING: shift/reduce conflict for DOLLAR in state 531 resolved as shift
WARNING: shift/reduce conflict for THIS in state 531 resolved as shift
WARNING: shift/reduce conflict for NULL in state 531 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 531 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 531 resolved as shift
WARNING: shift/reduce conflict for INUMBER in state 531 resolved as shift
WARNING: shift/reduce conflict for DNUMBER in state 531 resolved as shift
WARNING: shift/reduce conflict for LIT_CHAR in state 531 resolved as shift
WARNING: shift/reduce conflict for NEW in state 531 resolved as shift
WARNING: shift/reduce conflict for DELETE in state 531 resolved as shift
WARNING: shift/reduce conflict for CAST in state 531 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 531 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 531 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 531 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 531 resolved as shift
WARNING: shift/reduce conflict for LIT_STR in state 531 resolved as shift
WARNING: shift/reduce conflict for CONST in state 535 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 535 resolved as shift
WARNING: shift/reduce conflict for THIS in state 535 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 535 resolved as shift
WARNING: shift/reduce conflict for THIS in state 537 resolved as shift
WARNING: shift/reduce conflict for CONST in state 537 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 537 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 537 resolved as shift
WARNING: shift/reduce conflict for THIS in state 541 resolved as shift
WARNING: shift/reduce conflict for CONST in state 541 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 541 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 541 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 550 resolved as shift
WARNING: shift/reduce conflict for THIS in state 574 resolved as shift
WARNING: shift/reduce conflict for CONST in state 574 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 574 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 574 resolved as shift
WARNING: shift/reduce conflict for THIS in state 580 resolved as shift
WARNING: shift/reduce conflict for CONST in state 580 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 580 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 580 resolved as shift
WARNING: shift/reduce conflict for THIS in state 582 resolved as shift
WARNING: shift/reduce conflict for CONST in state 582 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 582 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 582 resolved as shift
WARNING: shift/reduce conflict for THIS in state 594 resolved as shift
WARNING: shift/reduce conflict for CONST in state 594 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 594 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 594 resolved as shift
WARNING: shift/reduce conflict for CONST in state 607 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 607 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 608 resolved as shift
WARNING: shift/reduce conflict for CONST in state 611 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 611 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 614 resolved as shift
WARNING: shift/reduce conflict for THIS in state 616 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 616 resolved as shift
WARNING: shift/reduce conflict for CONST in state 616 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 616 resolved as shift
WARNING: shift/reduce conflict for THIS in state 617 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 617 resolved as shift
WARNING: shift/reduce conflict for CONST in state 617 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 617 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 623 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 623 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 623 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 623 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 623 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 623 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 623 resolved as shift
WARNING: shift/reduce conflict for CONST in state 623 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 623 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 623 resolved as shift
WARNING: shift/reduce conflict for THIS in state 623 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 623 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 623 resolved as shift
WARNING: shift/reduce conflict for DOT in state 637 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 637 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 637 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 637 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 637 resolved as shift
WARNING: shift/reduce conflict for THIS in state 638 resolved as shift
WARNING: shift/reduce conflict for CONST in state 638 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 638 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 638 resolved as shift
WARNING: shift/reduce conflict for THIS in state 639 resolved as shift
WARNING: shift/reduce conflict for CONST in state 639 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 639 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 639 resolved as shift
WARNING: shift/reduce conflict for THIS in state 640 resolved as shift
WARNING: shift/reduce conflict for CONST in state 640 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 640 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 640 resolved as shift
WARNING: shift/reduce conflict for THIS in state 642 resolved as shift
WARNING: shift/reduce conflict for CONST in state 642 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 642 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 642 resolved as shift
WARNING: shift/reduce conflict for THIS in state 645 resolved as shift
WARNING: shift/reduce conflict for CONST in state 645 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 645 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 645 resolved as shift
WARNING: shift/reduce conflict for THIS in state 654 resolved as shift
WARNING: shift/reduce conflict for CONST in state 654 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 654 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 654 resolved as shift
WARNING: shift/reduce conflict for THIS in state 656 resolved as shift
WARNING: shift/reduce conflict for CONST in state 656 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 656 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 656 resolved as shift
WARNING: shift/reduce conflict for THIS in state 666 resolved as shift
WARNING: shift/reduce conflict for CONST in state 666 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 666 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 666 resolved as shift
WARNING: shift/reduce conflict for THIS in state 669 resolved as shift
WARNING: shift/reduce conflict for CONST in state 669 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 669 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 669 resolved as shift
WARNING: shift/reduce conflict for CONST in state 670 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 670 resolved as shift
WARNING: shift/reduce conflict for THIS in state 673 resolved as shift
WARNING: shift/reduce conflict for CONST in state 673 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 673 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 673 resolved as shift
WARNING: shift/reduce conflict for THIS in state 676 resolved as shift
WARNING: shift/reduce conflict for CONST in state 676 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 676 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 676 resolved as shift
WARNING: shift/reduce conflict for THIS in state 677 resolved as shift
WARNING: shift/reduce conflict for CONST in state 677 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 677 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 677 resolved as shift
WARNING: shift/reduce conflict for THIS in state 680 resolved as shift
WARNING: shift/reduce conflict for CONST in state 680 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 680 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 680 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 681 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 681 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 681 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 681 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 681 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 681 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 681 resolved as shift
WARNING: shift/reduce conflict for CONST in state 681 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 681 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 681 resolved as shift
WARNING: shift/reduce conflict for THIS in state 681 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 681 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 681 resolved as shift
WARNING: shift/reduce conflict for THIS in state 684 resolved as shift
WARNING: shift/reduce conflict for CONST in state 684 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 684 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 684 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 686 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 686 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 686 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 686 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 686 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 686 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 686 resolved as shift
WARNING: shift/reduce conflict for CONST in state 686 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 686 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 686 resolved as shift
WARNING: shift/reduce conflict for THIS in state 686 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 686 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 686 resolved as shift
WARNING: shift/reduce conflict for DOT in state 692 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 692 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 692 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 692 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 692 resolved as shift
WARNING: shift/reduce conflict for DOT in state 693 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 693 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 693 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 693 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 693 resolved as shift
WARNING: shift/reduce conflict for THIS in state 713 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 713 resolved as shift
WARNING: shift/reduce conflict for CONST in state 713 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 713 resolved as shift
WARNING: shift/reduce conflict for THIS in state 714 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 714 resolved as shift
WARNING: shift/reduce conflict for CONST in state 714 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 714 resolved as shift
WARNING: shift/reduce conflict for THIS in state 717 resolved as shift
WARNING: shift/reduce conflict for CONST in state 717 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 717 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 717 resolved as shift
WARNING: shift/reduce conflict for THIS in state 719 resolved as shift
WARNING: shift/reduce conflict for CONST in state 719 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 719 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 719 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 720 resolved as shift
WARNING: shift/reduce conflict for THIS in state 721 resolved as shift
WARNING: shift/reduce conflict for CONST in state 721 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 721 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 721 resolved as shift
WARNING: shift/reduce conflict for THIS in state 726 resolved as shift
WARNING: shift/reduce conflict for CONST in state 726 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 726 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 726 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 728 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 728 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 728 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 728 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 728 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 728 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 728 resolved as shift
WARNING: shift/reduce conflict for CONST in state 728 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 728 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 728 resolved as shift
WARNING: shift/reduce conflict for THIS in state 728 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 728 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 728 resolved as shift
WARNING: shift/reduce conflict for THIS in state 729 resolved as shift
WARNING: shift/reduce conflict for CONST in state 729 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 729 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 729 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 730 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 730 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 730 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 730 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 730 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 730 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 730 resolved as shift
WARNING: shift/reduce conflict for CONST in state 730 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 730 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 730 resolved as shift
WARNING: shift/reduce conflict for THIS in state 730 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 730 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 730 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 736 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 736 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 736 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 736 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 736 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 736 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 736 resolved as shift
WARNING: shift/reduce conflict for CONST in state 736 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 736 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 736 resolved as shift
WARNING: shift/reduce conflict for THIS in state 736 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 736 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 736 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 742 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 742 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 742 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 742 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 742 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 742 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 742 resolved as shift
WARNING: shift/reduce conflict for CONST in state 742 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 742 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 742 resolved as shift
WARNING: shift/reduce conflict for THIS in state 742 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 742 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 742 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 743 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 743 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 743 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 743 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 743 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 743 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 743 resolved as shift
WARNING: shift/reduce conflict for CONST in state 743 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 743 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 743 resolved as shift
WARNING: shift/reduce conflict for THIS in state 743 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 743 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 743 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 745 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 745 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 745 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 745 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 745 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 745 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 745 resolved as shift
WARNING: shift/reduce conflict for CONST in state 745 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 745 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 745 resolved as shift
WARNING: shift/reduce conflict for THIS in state 745 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 745 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 745 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 747 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 747 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 747 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 747 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 747 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 747 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 747 resolved as shift
WARNING: shift/reduce conflict for CONST in state 747 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 747 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 747 resolved as shift
WARNING: shift/reduce conflict for THIS in state 747 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 747 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 747 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 748 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 748 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 748 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 748 resolved as shift
WARNING: shift/reduce conflict for EXTERN in state 748 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 748 resolved as shift
WARNING: shift/reduce conflict for AUTO in state 748 resolved as shift
WARNING: shift/reduce conflict for CONST in state 748 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 748 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 748 resolved as shift
WARNING: shift/reduce conflict for THIS in state 748 resolved as shift
WARNING: shift/reduce conflict for MIXIN in state 748 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 748 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (attribute -> CONST)
WARNING: rejected rule (typeConstructor -> CONST) in state 17
WARNING: reduce/reduce conflict in state 24 resolved using rule (storageClass -> typeConstructor)
WARNING: rejected rule (empty -> <empty>) in state 24
WARNING: reduce/reduce conflict in state 33 resolved using rule (typeConstructors_quetsion -> empty)
WARNING: rejected rule (multiplestorageClass -> empty) in state 33
WARNING: reduce/reduce conflict in state 46 resolved using rule (attribute -> IMMUTABLE)
WARNING: rejected rule (typeConstructor -> IMMUTABLE) in state 46
WARNING: reduce/reduce conflict in state 217 resolved using rule (primaryExpression -> identifierOrTemplateInstance)
WARNING: rejected rule (identifierOrTemplateChain -> identifierOrTemplateInstance) in state 217
WARNING: reduce/reduce conflict in state 218 resolved using rule (identifierOrTemplateInstance -> IDENTIFIER)
WARNING: rejected rule (empty -> <empty>) in state 218
WARNING: reduce/reduce conflict in state 234 resolved using rule (cmpExpression -> shiftExpression)
WARNING: rejected rule (relExpression -> shiftExpression) in state 234
WARNING: reduce/reduce conflict in state 278 resolved using rule (typeConstructors_quetsion -> empty)
WARNING: rejected rule (type_question -> empty) in state 278
WARNING: reduce/reduce conflict in state 316 resolved using rule (argumentList_question -> argumentList)
WARNING: rejected rule (empty -> <empty>) in state 316
WARNING: reduce/reduce conflict in state 344 resolved using rule (statementNoCaseNoDefault -> blockStatement)
WARNING: rejected rule (functionBody -> blockStatement) in state 344
WARNING: reduce/reduce conflict in state 373 resolved using rule (typeConstructors_quetsion -> empty)
WARNING: rejected rule (multipleattributes -> empty) in state 373
WARNING: reduce/reduce conflict in state 390 resolved using rule (primaryExpression -> DOT identifierOrTemplateInstance)
WARNING: rejected rule (identifierOrTemplateChain -> identifierOrTemplateInstance) in state 390
WARNING: reduce/reduce conflict in state 394 resolved using rule (primaryExpression -> type arguments)
WARNING: rejected rule (functionCallExpression -> type arguments) in state 394
WARNING: reduce/reduce conflict in state 516 resolved using rule (multipleattributes -> empty)
WARNING: rejected rule (declarationOrStatementmultiple -> empty) in state 516
WARNING: reduce/reduce conflict in state 516 resolved using rule (typeConstructors_quetsion -> empty)
WARNING: rejected rule (multipleattributes -> empty) in state 516
WARNING: reduce/reduce conflict in state 585 resolved using rule (nonVoidInitializer -> assignExpression)
WARNING: rejected rule (argumentList -> assignExpression) in state 585
WARNING: reduce/reduce conflict in state 627 resolved using rule (multipleattributes -> empty)
WARNING: rejected rule (declarationOrStatement_question -> empty) in state 627
WARNING: reduce/reduce conflict in state 627 resolved using rule (typeConstructors_quetsion -> empty)
WARNING: rejected rule (multipleattributes -> empty) in state 627
WARNING: Rule (identifierOrTemplateChain -> identifierOrTemplateInstance) is never reduced
WARNING: Rule (relExpression -> shiftExpression) is never reduced
WARNING: Rule (functionCallExpression -> type arguments) is never reduced
