Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    VOID
    PROTECTED
    WITH
    COMMENT
    BODY
    ENUM
    FOREACH
    ARROW
    SCOPE
    DOUBLE
    CLASS
    STATIC
    SIZEOF
    FINAL
    FOREACH_REVERSE
    FOR
    UNION
    ELSE
    TYPEID
    LBRACE
    CONTINUE
    DELEGATE
    SINGLE_QUOTE
    DOUBLE_QUOTE
    DEFAULT
    WHILE
    EXTERN
    CASE
    SEMICOLON
    SWITCH
    BREAK
    PUBLIC
    DO
    GOTO
    RBRACE
    PRIVATE
    TYPEDEF
    AUTO
    BACK_SLASH
    ALIAS
    IF

Grammar

Rule 0     S' -> addExpression
Rule 1     addExpression -> mulExpression
Rule 2     addExpression -> addExpression PLUS mulExpression
Rule 3     addExpression -> addExpression MINUS mulExpression
Rule 4     addExpression -> addExpression TILDE mulExpression
Rule 5     mulExpression -> powExpression
Rule 6     mulExpression -> mulExpression TIMES powExpression
Rule 7     mulExpression -> mulExpression DIV powExpression
Rule 8     mulExpression -> mulExpression MODULO powExpression
Rule 9     powExpression -> unaryExpression
Rule 10    powExpression -> powExpression CARET unaryExpression
Rule 11    unaryExpression -> primaryExpression
Rule 12    unaryExpression -> AMPERSAND unaryExpression
Rule 13    unaryExpression -> EXCLAMATION unaryExpression
Rule 14    unaryExpression -> TIMES unaryExpression
Rule 15    unaryExpression -> PLUS unaryExpression
Rule 16    unaryExpression -> MINUS unaryExpression
Rule 17    unaryExpression -> DOT
Rule 18    unaryExpression -> PLUS_PLUS unaryExpression
Rule 19    unaryExpression -> MINUS_MINUS unaryExpression
Rule 20    unaryExpression -> ELLIPSIS
Rule 21    unaryExpression -> newExpression
Rule 22    unaryExpression -> deleteExpression
Rule 23    unaryExpression -> castExpression
Rule 24    unaryExpression -> functionCallExpression
Rule 25    unaryExpression -> indexExpression
Rule 26    unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance
Rule 27    unaryExpression -> unaryExpression DOT newExpression
Rule 28    unaryExpression -> unaryExpression DOT identifierOrTemplateInstance
Rule 29    unaryExpression -> unaryExpression PLUS_PLUS
Rule 30    unaryExpression -> unaryExpression MINUS_MINUS
Rule 31    primaryExpression -> identifierOrTemplateInstance
Rule 32    primaryExpression -> DOT identifierOrTemplateInstance
Rule 33    primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER
Rule 34    primaryExpression -> type DOT IDENTIFIER
Rule 35    primaryExpression -> type arguments
Rule 36    primaryExpression -> arrayLiteral
Rule 37    primaryExpression -> LPAREN expression RPAREN
Rule 38    primaryExpression -> functionLiteralExpression
Rule 39    primaryExpression -> mixinExpression
Rule 40    primaryExpression -> importExpression
Rule 41    primaryExpression -> DOLLAR
Rule 42    primaryExpression -> THIS
Rule 43    primaryExpression -> NULL
Rule 44    primaryExpression -> TRUE
Rule 45    primaryExpression -> FALSE
Rule 46    primaryExpression -> INUMBER
Rule 47    primaryExpression -> DNUMBER
Rule 48    primaryExpression -> LIT_STRPlus
Rule 49    primaryExpression -> LIT_CHAR
Rule 50    newExpression -> NEW type
Rule 51    newExpression -> NEW type LBRACKET assignExpression RBRACKET
Rule 52    newExpression -> NEW type arguments
Rule 53    deleteExpression -> DELETE unaryExpression
Rule 54    castExpression -> CAST LPAREN RPAREN unaryExpression
Rule 55    castExpression -> CAST LPAREN type RPAREN unaryExpression
Rule 56    castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression
Rule 57    castQualifier -> CONST
Rule 58    castQualifier -> IMMUTABLE
Rule 59    functionCallExpression -> symbol arguments unaryExpression arguments
Rule 60    functionCallExpression -> type arguments
Rule 61    symbol -> DOT identifierOrTemplateChain
Rule 62    symbol -> identifierOrTemplateChain
Rule 63    identifierOrTemplateChain -> identifierOrTemplateInstance
Rule 64    identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance
Rule 65    identifierOrTemplateInstance -> IDENTIFIER
Rule 66    indexExpression -> unaryExpression LBRACKET RBRACKET
Rule 67    indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET
Rule 68    comma_index -> COMMA index comma_index
Rule 69    comma_index -> empty
Rule 70    index -> assignExpression
Rule 71    index -> assignExpression RANGE assignExpression
Rule 72    type -> typeConstructors type2 typeSuffixStar
Rule 73    type -> type2 typeSuffixStar
Rule 74    typeSuffix -> <empty>
Rule 75    builtinType -> BOOL
Rule 76    builtinType -> SHORT
Rule 77    builtinType -> USHORT
Rule 78    builtinType -> INT
Rule 79    builtinType -> UINT
Rule 80    builtinType -> LONG
Rule 81    builtinType -> ULONG
Rule 82    builtinType -> CHAR
Rule 83    builtinType -> FLOAT
Rule 84    typeSuffixStar -> typeSuffix typeSuffixStar
Rule 85    typeSuffixStar -> empty
Rule 86    type2 -> builtinType
Rule 87    type2 -> symbol
Rule 88    type2 -> typeofExpression DOT identifierOrTemplateChain
Rule 89    type2 -> typeofExpression
Rule 90    type2 -> typeConstructor LBRACKET type RBRACKET
Rule 91    typeofExpression -> TYPEOF LBRACKET expression RBRACKET
Rule 92    typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET
Rule 93    typeConstructors -> typeConstructor
Rule 94    typeConstructors -> typeConstructor typeConstructors
Rule 95    typeConstructor -> CONST
Rule 96    typeConstructor -> IMMUTABLE
Rule 97    arguments -> LPAREN argumentList_question RPAREN
Rule 98    argumentList_question -> argumentList
Rule 99    argumentList_question -> empty
Rule 100   argumentList -> assignExpression
Rule 101   argumentList -> argumentList comma_assign
Rule 102   comma_assign -> COMMA assignExpression comma_assign
Rule 103   comma_assign -> empty
Rule 104   functionBody -> empty
Rule 105   arrayLiteral -> LBRACKET argumentList_question RBRACKET
Rule 106   expression -> assignExpression
Rule 107   expression -> expression COMMA assignExpression
Rule 108   functionLiteralExpression -> FUNCTION functionBody
Rule 109   functionLiteralExpression -> FUNCTION type functionBody
Rule 110   functionLiteralExpression -> functionBody
Rule 111   functionLiteralExpression -> IDENTIFIER assignExpression
Rule 112   mixinExpression -> MIXIN LPAREN assignExpression RPAREN
Rule 113   importExpression -> IMPORT LBRACKET assignExpression RBRACKET
Rule 114   LIT_STRPlus -> LIT_STR LIT_STRPlus
Rule 115   LIT_STRPlus -> LIT_STR
Rule 116   assignExpression -> ternaryExpression
Rule 117   assignExpression -> ternaryExpression assignOperator expression
Rule 118   assignOperator -> ASSIGN
Rule 119   assignOperator -> EQ_LEFT
Rule 120   assignOperator -> EQ_RIGHT
Rule 121   assignOperator -> EQ_PLUS
Rule 122   assignOperator -> EQ_MINUS
Rule 123   assignOperator -> EQ_TIMES
Rule 124   assignOperator -> EQ_MODULO
Rule 125   assignOperator -> EQ_AND_BIT
Rule 126   assignOperator -> EQ_DIV
Rule 127   assignOperator -> EQ_OR_BIT
Rule 128   assignOperator -> EQ_XOR_BIT
Rule 129   ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression
Rule 130   ternaryExpression -> orOrExpression
Rule 131   orOrExpression -> andAndExpression
Rule 132   orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression
Rule 133   andAndExpression -> orExpression
Rule 134   andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression
Rule 135   orExpression -> xorExpression
Rule 136   orExpression -> orExpression PIPE xorExpression
Rule 137   xorExpression -> andExpression
Rule 138   xorExpression -> xorExpression CARET andExpression
Rule 139   andExpression -> cmpExpression
Rule 140   andExpression -> andExpression AMPERSAND cmpExpression
Rule 141   cmpExpression -> shiftExpression
Rule 142   cmpExpression -> equalExpression
Rule 143   cmpExpression -> relExpression
Rule 144   shiftExpression -> addExpression
Rule 145   shiftExpression -> shiftExpression RIGHT_SHIFT addExpression
Rule 146   shiftExpression -> shiftExpression LEFT_SHIFT addExpression
Rule 147   equalExpression -> shiftExpression IS_EQ shiftExpression
Rule 148   equalExpression -> shiftExpression NOT_EQ shiftExpression
Rule 149   relExpression -> shiftExpression
Rule 150   relExpression -> relExpression relOperator shiftExpression
Rule 151   relOperator -> LESS
Rule 152   relOperator -> LESS_EQ
Rule 153   relOperator -> GREATER
Rule 154   relOperator -> GREATER_EQ
Rule 155   relOperator -> IS_EQ_DIFF
Rule 156   relOperator -> NOT_EQ_DIFF
Rule 157   relOperator -> LESS_EQ_DIFF
Rule 158   relOperator -> LESS_DIFF
Rule 159   relOperator -> GREATER_EQ_DIFF
Rule 160   relOperator -> GREATER_DIFF
Rule 161   empty -> <empty>

Terminals, with rules where they appear

ALIAS                : 
AMPERSAND            : 12 140
ARROW                : 
ASSIGN               : 118
AUTO                 : 
BACK_SLASH           : 
BODY                 : 
BOOL                 : 75
BREAK                : 
CARET                : 10 138
CASE                 : 
CAST                 : 54 55 56
CHAR                 : 82
CLASS                : 
COLON                : 129
COMMA                : 68 102 107
COMMENT              : 
CONST                : 57 95
CONTINUE             : 
DEFAULT              : 
DELEGATE             : 
DELETE               : 53
DIV                  : 7
DNUMBER              : 47
DO                   : 
DOLLAR               : 41
DOT                  : 17 26 27 28 32 33 34 61 64 88
DOUBLE               : 
DOUBLE_AMPERSAND     : 134
DOUBLE_PIPE          : 132
DOUBLE_QUOTE         : 
ELLIPSIS             : 20
ELSE                 : 
ENUM                 : 
EQ_AND_BIT           : 125
EQ_DIV               : 126
EQ_LEFT              : 119
EQ_MINUS             : 122
EQ_MODULO            : 124
EQ_OR_BIT            : 127
EQ_PLUS              : 121
EQ_RIGHT             : 120
EQ_TIMES             : 123
EQ_XOR_BIT           : 128
EXCLAMATION          : 13
EXTERN               : 
FALSE                : 45
FINAL                : 
FLOAT                : 83
FOR                  : 
FOREACH              : 
FOREACH_REVERSE      : 
FUNCTION             : 108 109
GOTO                 : 
GREATER              : 153
GREATER_DIFF         : 160
GREATER_EQ           : 154
GREATER_EQ_DIFF      : 159
IDENTIFIER           : 33 34 65 111
IF                   : 
IMMUTABLE            : 58 96
IMPORT               : 113
INT                  : 78
INUMBER              : 46
IS_EQ                : 147
IS_EQ_DIFF           : 155
LBRACE               : 
LBRACKET             : 51 66 67 90 91 92 105 113
LEFT_SHIFT           : 146
LESS                 : 151
LESS_DIFF            : 158
LESS_EQ              : 152
LESS_EQ_DIFF         : 157
LIT_CHAR             : 49
LIT_STR              : 114 115
LONG                 : 80
LPAREN               : 26 33 37 54 55 56 97 112
MINUS                : 3 16
MINUS_MINUS          : 19 30
MIXIN                : 112
MODULO               : 8
NEW                  : 50 51 52
NOT_EQ               : 148
NOT_EQ_DIFF          : 156
NULL                 : 43
PIPE                 : 136
PLUS                 : 2 15
PLUS_PLUS            : 18 29
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUESTION             : 129
RANGE                : 71
RBRACE               : 
RBRACKET             : 51 66 67 90 91 92 105 113
RETURN               : 92
RIGHT_SHIFT          : 145
RPAREN               : 26 33 37 54 55 56 97 112
SCOPE                : 
SEMICOLON            : 
SHORT                : 76
SINGLE_QUOTE         : 
SIZEOF               : 
STATIC               : 
SWITCH               : 
THIS                 : 42
TILDE                : 4
TIMES                : 6 14
TRUE                 : 44
TYPEDEF              : 
TYPEID               : 
TYPEOF               : 91 92
UINT                 : 79
ULONG                : 81
UNION                : 
USHORT               : 77
VOID                 : 
WHILE                : 
WITH                 : 
error                : 

Nonterminals, with rules where they appear

LIT_STRPlus          : 48 114
addExpression        : 2 3 4 144 145 146 0
andAndExpression     : 131 132 134
andExpression        : 137 138 140
argumentList         : 98 101
argumentList_question : 97 105
arguments            : 35 52 59 59 60
arrayLiteral         : 36
assignExpression     : 51 70 71 71 100 102 106 107 111 112 113
assignOperator       : 117
builtinType          : 86
castExpression       : 23
castQualifier        : 56
cmpExpression        : 139 140
comma_assign         : 101 102
comma_index          : 67 68
deleteExpression     : 22
empty                : 69 85 99 103 104
equalExpression      : 142
expression           : 37 91 107 117 129
functionBody         : 108 109 110
functionCallExpression : 24
functionLiteralExpression : 38
identifierOrTemplateChain : 61 62 64 88
identifierOrTemplateInstance : 26 28 31 32 63 64
importExpression     : 40
index                : 67 68
indexExpression      : 25
mixinExpression      : 39
mulExpression        : 1 2 3 4 6 7 8
newExpression        : 21 27
orExpression         : 133 134 136
orOrExpression       : 129 130 132
powExpression        : 5 6 7 8 10
primaryExpression    : 11
relExpression        : 143 150
relOperator          : 150
shiftExpression      : 141 145 146 147 147 148 148 149 150
symbol               : 59 87
ternaryExpression    : 116 117 129
type                 : 26 33 34 35 50 51 52 55 60 90 109
type2                : 72 73
typeConstructor      : 33 90 93 94
typeConstructors     : 72 94
typeSuffix           : 84
typeSuffixStar       : 72 73 84
typeofExpression     : 88 89
unaryExpression      : 9 10 12 13 14 15 16 18 19 27 28 29 30 53 54 55 56 59 66 67
xorExpression        : 135 136 138

Parsing method: LALR

state 0

    (0) S' -> . addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63
    addExpression                  shift and go to state 29

state 1

    (13) unaryExpression -> EXCLAMATION . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 66
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 2

    (77) builtinType -> USHORT .

    DOT             reduce using rule 77 (builtinType -> USHORT .)
    LPAREN          reduce using rule 77 (builtinType -> USHORT .)
    PLUS_PLUS       reduce using rule 77 (builtinType -> USHORT .)
    MINUS_MINUS     reduce using rule 77 (builtinType -> USHORT .)
    LBRACKET        reduce using rule 77 (builtinType -> USHORT .)
    CARET           reduce using rule 77 (builtinType -> USHORT .)
    TIMES           reduce using rule 77 (builtinType -> USHORT .)
    DIV             reduce using rule 77 (builtinType -> USHORT .)
    MODULO          reduce using rule 77 (builtinType -> USHORT .)
    PLUS            reduce using rule 77 (builtinType -> USHORT .)
    MINUS           reduce using rule 77 (builtinType -> USHORT .)
    TILDE           reduce using rule 77 (builtinType -> USHORT .)
    $end            reduce using rule 77 (builtinType -> USHORT .)
    RIGHT_SHIFT     reduce using rule 77 (builtinType -> USHORT .)
    LEFT_SHIFT      reduce using rule 77 (builtinType -> USHORT .)
    IS_EQ           reduce using rule 77 (builtinType -> USHORT .)
    NOT_EQ          reduce using rule 77 (builtinType -> USHORT .)
    AMPERSAND       reduce using rule 77 (builtinType -> USHORT .)
    PIPE            reduce using rule 77 (builtinType -> USHORT .)
    DOUBLE_AMPERSAND reduce using rule 77 (builtinType -> USHORT .)
    QUESTION        reduce using rule 77 (builtinType -> USHORT .)
    DOUBLE_PIPE     reduce using rule 77 (builtinType -> USHORT .)
    ASSIGN          reduce using rule 77 (builtinType -> USHORT .)
    EQ_LEFT         reduce using rule 77 (builtinType -> USHORT .)
    EQ_RIGHT        reduce using rule 77 (builtinType -> USHORT .)
    EQ_PLUS         reduce using rule 77 (builtinType -> USHORT .)
    EQ_MINUS        reduce using rule 77 (builtinType -> USHORT .)
    EQ_TIMES        reduce using rule 77 (builtinType -> USHORT .)
    EQ_MODULO       reduce using rule 77 (builtinType -> USHORT .)
    EQ_AND_BIT      reduce using rule 77 (builtinType -> USHORT .)
    EQ_DIV          reduce using rule 77 (builtinType -> USHORT .)
    EQ_OR_BIT       reduce using rule 77 (builtinType -> USHORT .)
    EQ_XOR_BIT      reduce using rule 77 (builtinType -> USHORT .)
    COMMA           reduce using rule 77 (builtinType -> USHORT .)
    RBRACKET        reduce using rule 77 (builtinType -> USHORT .)
    LESS            reduce using rule 77 (builtinType -> USHORT .)
    LESS_EQ         reduce using rule 77 (builtinType -> USHORT .)
    GREATER         reduce using rule 77 (builtinType -> USHORT .)
    GREATER_EQ      reduce using rule 77 (builtinType -> USHORT .)
    IS_EQ_DIFF      reduce using rule 77 (builtinType -> USHORT .)
    NOT_EQ_DIFF     reduce using rule 77 (builtinType -> USHORT .)
    LESS_EQ_DIFF    reduce using rule 77 (builtinType -> USHORT .)
    LESS_DIFF       reduce using rule 77 (builtinType -> USHORT .)
    GREATER_EQ_DIFF reduce using rule 77 (builtinType -> USHORT .)
    GREATER_DIFF    reduce using rule 77 (builtinType -> USHORT .)
    RPAREN          reduce using rule 77 (builtinType -> USHORT .)
    RANGE           reduce using rule 77 (builtinType -> USHORT .)
    COLON           reduce using rule 77 (builtinType -> USHORT .)


state 3

    (76) builtinType -> SHORT .

    DOT             reduce using rule 76 (builtinType -> SHORT .)
    LPAREN          reduce using rule 76 (builtinType -> SHORT .)
    PLUS_PLUS       reduce using rule 76 (builtinType -> SHORT .)
    MINUS_MINUS     reduce using rule 76 (builtinType -> SHORT .)
    LBRACKET        reduce using rule 76 (builtinType -> SHORT .)
    CARET           reduce using rule 76 (builtinType -> SHORT .)
    TIMES           reduce using rule 76 (builtinType -> SHORT .)
    DIV             reduce using rule 76 (builtinType -> SHORT .)
    MODULO          reduce using rule 76 (builtinType -> SHORT .)
    PLUS            reduce using rule 76 (builtinType -> SHORT .)
    MINUS           reduce using rule 76 (builtinType -> SHORT .)
    TILDE           reduce using rule 76 (builtinType -> SHORT .)
    $end            reduce using rule 76 (builtinType -> SHORT .)
    RIGHT_SHIFT     reduce using rule 76 (builtinType -> SHORT .)
    LEFT_SHIFT      reduce using rule 76 (builtinType -> SHORT .)
    IS_EQ           reduce using rule 76 (builtinType -> SHORT .)
    NOT_EQ          reduce using rule 76 (builtinType -> SHORT .)
    AMPERSAND       reduce using rule 76 (builtinType -> SHORT .)
    PIPE            reduce using rule 76 (builtinType -> SHORT .)
    DOUBLE_AMPERSAND reduce using rule 76 (builtinType -> SHORT .)
    QUESTION        reduce using rule 76 (builtinType -> SHORT .)
    DOUBLE_PIPE     reduce using rule 76 (builtinType -> SHORT .)
    ASSIGN          reduce using rule 76 (builtinType -> SHORT .)
    EQ_LEFT         reduce using rule 76 (builtinType -> SHORT .)
    EQ_RIGHT        reduce using rule 76 (builtinType -> SHORT .)
    EQ_PLUS         reduce using rule 76 (builtinType -> SHORT .)
    EQ_MINUS        reduce using rule 76 (builtinType -> SHORT .)
    EQ_TIMES        reduce using rule 76 (builtinType -> SHORT .)
    EQ_MODULO       reduce using rule 76 (builtinType -> SHORT .)
    EQ_AND_BIT      reduce using rule 76 (builtinType -> SHORT .)
    EQ_DIV          reduce using rule 76 (builtinType -> SHORT .)
    EQ_OR_BIT       reduce using rule 76 (builtinType -> SHORT .)
    EQ_XOR_BIT      reduce using rule 76 (builtinType -> SHORT .)
    COMMA           reduce using rule 76 (builtinType -> SHORT .)
    RBRACKET        reduce using rule 76 (builtinType -> SHORT .)
    LESS            reduce using rule 76 (builtinType -> SHORT .)
    LESS_EQ         reduce using rule 76 (builtinType -> SHORT .)
    GREATER         reduce using rule 76 (builtinType -> SHORT .)
    GREATER_EQ      reduce using rule 76 (builtinType -> SHORT .)
    IS_EQ_DIFF      reduce using rule 76 (builtinType -> SHORT .)
    NOT_EQ_DIFF     reduce using rule 76 (builtinType -> SHORT .)
    LESS_EQ_DIFF    reduce using rule 76 (builtinType -> SHORT .)
    LESS_DIFF       reduce using rule 76 (builtinType -> SHORT .)
    GREATER_EQ_DIFF reduce using rule 76 (builtinType -> SHORT .)
    GREATER_DIFF    reduce using rule 76 (builtinType -> SHORT .)
    RPAREN          reduce using rule 76 (builtinType -> SHORT .)
    RANGE           reduce using rule 76 (builtinType -> SHORT .)
    COLON           reduce using rule 76 (builtinType -> SHORT .)


state 4

    (95) typeConstructor -> CONST .

    LPAREN          reduce using rule 95 (typeConstructor -> CONST .)
    LBRACKET        reduce using rule 95 (typeConstructor -> CONST .)
    CONST           reduce using rule 95 (typeConstructor -> CONST .)
    IMMUTABLE       reduce using rule 95 (typeConstructor -> CONST .)
    BOOL            reduce using rule 95 (typeConstructor -> CONST .)
    SHORT           reduce using rule 95 (typeConstructor -> CONST .)
    USHORT          reduce using rule 95 (typeConstructor -> CONST .)
    INT             reduce using rule 95 (typeConstructor -> CONST .)
    UINT            reduce using rule 95 (typeConstructor -> CONST .)
    LONG            reduce using rule 95 (typeConstructor -> CONST .)
    ULONG           reduce using rule 95 (typeConstructor -> CONST .)
    CHAR            reduce using rule 95 (typeConstructor -> CONST .)
    FLOAT           reduce using rule 95 (typeConstructor -> CONST .)
    DOT             reduce using rule 95 (typeConstructor -> CONST .)
    TYPEOF          reduce using rule 95 (typeConstructor -> CONST .)
    IDENTIFIER      reduce using rule 95 (typeConstructor -> CONST .)


state 5

    (62) symbol -> identifierOrTemplateChain .
    (64) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

  ! shift/reduce conflict for DOT resolved as shift
    LPAREN          reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    LBRACKET        reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    PLUS_PLUS       reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    MINUS_MINUS     reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    CARET           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    TIMES           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    DIV             reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    MODULO          reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    PLUS            reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    MINUS           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    TILDE           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    $end            reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    RIGHT_SHIFT     reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    LEFT_SHIFT      reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    IS_EQ           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    NOT_EQ          reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    AMPERSAND       reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    PIPE            reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    DOUBLE_AMPERSAND reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    QUESTION        reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    DOUBLE_PIPE     reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    ASSIGN          reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_LEFT         reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_RIGHT        reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_PLUS         reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_MINUS        reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_TIMES        reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_MODULO       reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_AND_BIT      reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_DIV          reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_OR_BIT       reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    EQ_XOR_BIT      reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    COMMA           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    RBRACKET        reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    LESS            reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    LESS_EQ         reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    GREATER         reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    GREATER_EQ      reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    IS_EQ_DIFF      reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    NOT_EQ_DIFF     reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    LESS_EQ_DIFF    reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    LESS_DIFF       reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    GREATER_EQ_DIFF reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    GREATER_DIFF    reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    RPAREN          reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    RANGE           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    COLON           reduce using rule 62 (symbol -> identifierOrTemplateChain .)
    DOT             shift and go to state 67

  ! DOT             [ reduce using rule 62 (symbol -> identifierOrTemplateChain .) ]


state 6

    (79) builtinType -> UINT .

    DOT             reduce using rule 79 (builtinType -> UINT .)
    LPAREN          reduce using rule 79 (builtinType -> UINT .)
    PLUS_PLUS       reduce using rule 79 (builtinType -> UINT .)
    MINUS_MINUS     reduce using rule 79 (builtinType -> UINT .)
    LBRACKET        reduce using rule 79 (builtinType -> UINT .)
    CARET           reduce using rule 79 (builtinType -> UINT .)
    TIMES           reduce using rule 79 (builtinType -> UINT .)
    DIV             reduce using rule 79 (builtinType -> UINT .)
    MODULO          reduce using rule 79 (builtinType -> UINT .)
    PLUS            reduce using rule 79 (builtinType -> UINT .)
    MINUS           reduce using rule 79 (builtinType -> UINT .)
    TILDE           reduce using rule 79 (builtinType -> UINT .)
    $end            reduce using rule 79 (builtinType -> UINT .)
    RIGHT_SHIFT     reduce using rule 79 (builtinType -> UINT .)
    LEFT_SHIFT      reduce using rule 79 (builtinType -> UINT .)
    IS_EQ           reduce using rule 79 (builtinType -> UINT .)
    NOT_EQ          reduce using rule 79 (builtinType -> UINT .)
    AMPERSAND       reduce using rule 79 (builtinType -> UINT .)
    PIPE            reduce using rule 79 (builtinType -> UINT .)
    DOUBLE_AMPERSAND reduce using rule 79 (builtinType -> UINT .)
    QUESTION        reduce using rule 79 (builtinType -> UINT .)
    DOUBLE_PIPE     reduce using rule 79 (builtinType -> UINT .)
    ASSIGN          reduce using rule 79 (builtinType -> UINT .)
    EQ_LEFT         reduce using rule 79 (builtinType -> UINT .)
    EQ_RIGHT        reduce using rule 79 (builtinType -> UINT .)
    EQ_PLUS         reduce using rule 79 (builtinType -> UINT .)
    EQ_MINUS        reduce using rule 79 (builtinType -> UINT .)
    EQ_TIMES        reduce using rule 79 (builtinType -> UINT .)
    EQ_MODULO       reduce using rule 79 (builtinType -> UINT .)
    EQ_AND_BIT      reduce using rule 79 (builtinType -> UINT .)
    EQ_DIV          reduce using rule 79 (builtinType -> UINT .)
    EQ_OR_BIT       reduce using rule 79 (builtinType -> UINT .)
    EQ_XOR_BIT      reduce using rule 79 (builtinType -> UINT .)
    COMMA           reduce using rule 79 (builtinType -> UINT .)
    RBRACKET        reduce using rule 79 (builtinType -> UINT .)
    LESS            reduce using rule 79 (builtinType -> UINT .)
    LESS_EQ         reduce using rule 79 (builtinType -> UINT .)
    GREATER         reduce using rule 79 (builtinType -> UINT .)
    GREATER_EQ      reduce using rule 79 (builtinType -> UINT .)
    IS_EQ_DIFF      reduce using rule 79 (builtinType -> UINT .)
    NOT_EQ_DIFF     reduce using rule 79 (builtinType -> UINT .)
    LESS_EQ_DIFF    reduce using rule 79 (builtinType -> UINT .)
    LESS_DIFF       reduce using rule 79 (builtinType -> UINT .)
    GREATER_EQ_DIFF reduce using rule 79 (builtinType -> UINT .)
    GREATER_DIFF    reduce using rule 79 (builtinType -> UINT .)
    RPAREN          reduce using rule 79 (builtinType -> UINT .)
    RANGE           reduce using rule 79 (builtinType -> UINT .)
    COLON           reduce using rule 79 (builtinType -> UINT .)


state 7

    (22) unaryExpression -> deleteExpression .

    DOT             reduce using rule 22 (unaryExpression -> deleteExpression .)
    PLUS_PLUS       reduce using rule 22 (unaryExpression -> deleteExpression .)
    MINUS_MINUS     reduce using rule 22 (unaryExpression -> deleteExpression .)
    LBRACKET        reduce using rule 22 (unaryExpression -> deleteExpression .)
    CARET           reduce using rule 22 (unaryExpression -> deleteExpression .)
    TIMES           reduce using rule 22 (unaryExpression -> deleteExpression .)
    DIV             reduce using rule 22 (unaryExpression -> deleteExpression .)
    MODULO          reduce using rule 22 (unaryExpression -> deleteExpression .)
    PLUS            reduce using rule 22 (unaryExpression -> deleteExpression .)
    MINUS           reduce using rule 22 (unaryExpression -> deleteExpression .)
    TILDE           reduce using rule 22 (unaryExpression -> deleteExpression .)
    RIGHT_SHIFT     reduce using rule 22 (unaryExpression -> deleteExpression .)
    LEFT_SHIFT      reduce using rule 22 (unaryExpression -> deleteExpression .)
    IS_EQ           reduce using rule 22 (unaryExpression -> deleteExpression .)
    NOT_EQ          reduce using rule 22 (unaryExpression -> deleteExpression .)
    AMPERSAND       reduce using rule 22 (unaryExpression -> deleteExpression .)
    PIPE            reduce using rule 22 (unaryExpression -> deleteExpression .)
    DOUBLE_AMPERSAND reduce using rule 22 (unaryExpression -> deleteExpression .)
    QUESTION        reduce using rule 22 (unaryExpression -> deleteExpression .)
    DOUBLE_PIPE     reduce using rule 22 (unaryExpression -> deleteExpression .)
    ASSIGN          reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_LEFT         reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_RIGHT        reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_PLUS         reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_MINUS        reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_TIMES        reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_MODULO       reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_AND_BIT      reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_DIV          reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_OR_BIT       reduce using rule 22 (unaryExpression -> deleteExpression .)
    EQ_XOR_BIT      reduce using rule 22 (unaryExpression -> deleteExpression .)
    RBRACKET        reduce using rule 22 (unaryExpression -> deleteExpression .)
    COMMA           reduce using rule 22 (unaryExpression -> deleteExpression .)
    LESS            reduce using rule 22 (unaryExpression -> deleteExpression .)
    LESS_EQ         reduce using rule 22 (unaryExpression -> deleteExpression .)
    GREATER         reduce using rule 22 (unaryExpression -> deleteExpression .)
    GREATER_EQ      reduce using rule 22 (unaryExpression -> deleteExpression .)
    IS_EQ_DIFF      reduce using rule 22 (unaryExpression -> deleteExpression .)
    NOT_EQ_DIFF     reduce using rule 22 (unaryExpression -> deleteExpression .)
    LESS_EQ_DIFF    reduce using rule 22 (unaryExpression -> deleteExpression .)
    LESS_DIFF       reduce using rule 22 (unaryExpression -> deleteExpression .)
    GREATER_EQ_DIFF reduce using rule 22 (unaryExpression -> deleteExpression .)
    GREATER_DIFF    reduce using rule 22 (unaryExpression -> deleteExpression .)
    $end            reduce using rule 22 (unaryExpression -> deleteExpression .)
    RPAREN          reduce using rule 22 (unaryExpression -> deleteExpression .)
    RANGE           reduce using rule 22 (unaryExpression -> deleteExpression .)
    COLON           reduce using rule 22 (unaryExpression -> deleteExpression .)
    LPAREN          reduce using rule 22 (unaryExpression -> deleteExpression .)


state 8

    (105) arrayLiteral -> LBRACKET . argumentList_question RBRACKET
    (98) argumentList_question -> . argumentList
    (99) argumentList_question -> . empty
    (100) argumentList -> . assignExpression
    (101) argumentList -> . argumentList comma_assign
    (161) empty -> .
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACKET        reduce using rule 161 (empty -> .)
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    argumentList                   shift and go to state 78
    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    newExpression                  shift and go to state 39
    argumentList_question          shift and go to state 70
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 74
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    identifierOrTemplateInstance   shift and go to state 45
    assignExpression               shift and go to state 72
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    typeConstructor                shift and go to state 63
    primaryExpression              shift and go to state 51
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62

state 9

    (113) importExpression -> IMPORT . LBRACKET assignExpression RBRACKET

    LBRACKET        shift and go to state 83


state 10

    (50) newExpression -> NEW . type
    (51) newExpression -> NEW . type LBRACKET assignExpression RBRACKET
    (52) newExpression -> NEW . type arguments
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    DOT             shift and go to state 84
    TYPEOF          shift and go to state 25
    IDENTIFIER      shift and go to state 86

    typeConstructor                shift and go to state 89
    builtinType                    shift and go to state 36
    typeofExpression               shift and go to state 19
    symbol                         shift and go to state 88
    identifierOrTemplateChain      shift and go to state 5
    identifierOrTemplateInstance   shift and go to state 85
    typeConstructors               shift and go to state 33
    type                           shift and go to state 87
    type2                          shift and go to state 17

state 11

    (24) unaryExpression -> functionCallExpression .

    DOT             reduce using rule 24 (unaryExpression -> functionCallExpression .)
    PLUS_PLUS       reduce using rule 24 (unaryExpression -> functionCallExpression .)
    MINUS_MINUS     reduce using rule 24 (unaryExpression -> functionCallExpression .)
    LBRACKET        reduce using rule 24 (unaryExpression -> functionCallExpression .)
    CARET           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    TIMES           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    DIV             reduce using rule 24 (unaryExpression -> functionCallExpression .)
    MODULO          reduce using rule 24 (unaryExpression -> functionCallExpression .)
    PLUS            reduce using rule 24 (unaryExpression -> functionCallExpression .)
    MINUS           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    TILDE           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    RIGHT_SHIFT     reduce using rule 24 (unaryExpression -> functionCallExpression .)
    LEFT_SHIFT      reduce using rule 24 (unaryExpression -> functionCallExpression .)
    IS_EQ           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    NOT_EQ          reduce using rule 24 (unaryExpression -> functionCallExpression .)
    AMPERSAND       reduce using rule 24 (unaryExpression -> functionCallExpression .)
    PIPE            reduce using rule 24 (unaryExpression -> functionCallExpression .)
    DOUBLE_AMPERSAND reduce using rule 24 (unaryExpression -> functionCallExpression .)
    QUESTION        reduce using rule 24 (unaryExpression -> functionCallExpression .)
    DOUBLE_PIPE     reduce using rule 24 (unaryExpression -> functionCallExpression .)
    ASSIGN          reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_LEFT         reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_RIGHT        reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_PLUS         reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_MINUS        reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_TIMES        reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_MODULO       reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_AND_BIT      reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_DIV          reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_OR_BIT       reduce using rule 24 (unaryExpression -> functionCallExpression .)
    EQ_XOR_BIT      reduce using rule 24 (unaryExpression -> functionCallExpression .)
    RBRACKET        reduce using rule 24 (unaryExpression -> functionCallExpression .)
    COMMA           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    LESS            reduce using rule 24 (unaryExpression -> functionCallExpression .)
    LESS_EQ         reduce using rule 24 (unaryExpression -> functionCallExpression .)
    GREATER         reduce using rule 24 (unaryExpression -> functionCallExpression .)
    GREATER_EQ      reduce using rule 24 (unaryExpression -> functionCallExpression .)
    IS_EQ_DIFF      reduce using rule 24 (unaryExpression -> functionCallExpression .)
    NOT_EQ_DIFF     reduce using rule 24 (unaryExpression -> functionCallExpression .)
    LESS_EQ_DIFF    reduce using rule 24 (unaryExpression -> functionCallExpression .)
    LESS_DIFF       reduce using rule 24 (unaryExpression -> functionCallExpression .)
    GREATER_EQ_DIFF reduce using rule 24 (unaryExpression -> functionCallExpression .)
    GREATER_DIFF    reduce using rule 24 (unaryExpression -> functionCallExpression .)
    $end            reduce using rule 24 (unaryExpression -> functionCallExpression .)
    RPAREN          reduce using rule 24 (unaryExpression -> functionCallExpression .)
    RANGE           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    COLON           reduce using rule 24 (unaryExpression -> functionCallExpression .)
    LPAREN          reduce using rule 24 (unaryExpression -> functionCallExpression .)


state 12

    (9) powExpression -> unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 9 (powExpression -> unaryExpression .)
    TIMES           reduce using rule 9 (powExpression -> unaryExpression .)
    DIV             reduce using rule 9 (powExpression -> unaryExpression .)
    MODULO          reduce using rule 9 (powExpression -> unaryExpression .)
    PLUS            reduce using rule 9 (powExpression -> unaryExpression .)
    MINUS           reduce using rule 9 (powExpression -> unaryExpression .)
    TILDE           reduce using rule 9 (powExpression -> unaryExpression .)
    RIGHT_SHIFT     reduce using rule 9 (powExpression -> unaryExpression .)
    LEFT_SHIFT      reduce using rule 9 (powExpression -> unaryExpression .)
    IS_EQ           reduce using rule 9 (powExpression -> unaryExpression .)
    NOT_EQ          reduce using rule 9 (powExpression -> unaryExpression .)
    AMPERSAND       reduce using rule 9 (powExpression -> unaryExpression .)
    PIPE            reduce using rule 9 (powExpression -> unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 9 (powExpression -> unaryExpression .)
    QUESTION        reduce using rule 9 (powExpression -> unaryExpression .)
    DOUBLE_PIPE     reduce using rule 9 (powExpression -> unaryExpression .)
    ASSIGN          reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_LEFT         reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_RIGHT        reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_PLUS         reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_MINUS        reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_TIMES        reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_MODULO       reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_AND_BIT      reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_DIV          reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_OR_BIT       reduce using rule 9 (powExpression -> unaryExpression .)
    EQ_XOR_BIT      reduce using rule 9 (powExpression -> unaryExpression .)
    COMMA           reduce using rule 9 (powExpression -> unaryExpression .)
    RBRACKET        reduce using rule 9 (powExpression -> unaryExpression .)
    LESS            reduce using rule 9 (powExpression -> unaryExpression .)
    LESS_EQ         reduce using rule 9 (powExpression -> unaryExpression .)
    GREATER         reduce using rule 9 (powExpression -> unaryExpression .)
    GREATER_EQ      reduce using rule 9 (powExpression -> unaryExpression .)
    IS_EQ_DIFF      reduce using rule 9 (powExpression -> unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 9 (powExpression -> unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 9 (powExpression -> unaryExpression .)
    LESS_DIFF       reduce using rule 9 (powExpression -> unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 9 (powExpression -> unaryExpression .)
    GREATER_DIFF    reduce using rule 9 (powExpression -> unaryExpression .)
    RANGE           reduce using rule 9 (powExpression -> unaryExpression .)
    $end            reduce using rule 9 (powExpression -> unaryExpression .)
    RPAREN          reduce using rule 9 (powExpression -> unaryExpression .)
    COLON           reduce using rule 9 (powExpression -> unaryExpression .)
    LPAREN          reduce using rule 9 (powExpression -> unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 9 (powExpression -> unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 9 (powExpression -> unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 9 (powExpression -> unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 9 (powExpression -> unaryExpression .) ]


state 13

    (43) primaryExpression -> NULL .

    DOT             reduce using rule 43 (primaryExpression -> NULL .)
    PLUS_PLUS       reduce using rule 43 (primaryExpression -> NULL .)
    MINUS_MINUS     reduce using rule 43 (primaryExpression -> NULL .)
    LBRACKET        reduce using rule 43 (primaryExpression -> NULL .)
    LPAREN          reduce using rule 43 (primaryExpression -> NULL .)
    CARET           reduce using rule 43 (primaryExpression -> NULL .)
    TIMES           reduce using rule 43 (primaryExpression -> NULL .)
    DIV             reduce using rule 43 (primaryExpression -> NULL .)
    MODULO          reduce using rule 43 (primaryExpression -> NULL .)
    PLUS            reduce using rule 43 (primaryExpression -> NULL .)
    MINUS           reduce using rule 43 (primaryExpression -> NULL .)
    TILDE           reduce using rule 43 (primaryExpression -> NULL .)
    $end            reduce using rule 43 (primaryExpression -> NULL .)
    RIGHT_SHIFT     reduce using rule 43 (primaryExpression -> NULL .)
    LEFT_SHIFT      reduce using rule 43 (primaryExpression -> NULL .)
    IS_EQ           reduce using rule 43 (primaryExpression -> NULL .)
    NOT_EQ          reduce using rule 43 (primaryExpression -> NULL .)
    AMPERSAND       reduce using rule 43 (primaryExpression -> NULL .)
    PIPE            reduce using rule 43 (primaryExpression -> NULL .)
    DOUBLE_AMPERSAND reduce using rule 43 (primaryExpression -> NULL .)
    QUESTION        reduce using rule 43 (primaryExpression -> NULL .)
    DOUBLE_PIPE     reduce using rule 43 (primaryExpression -> NULL .)
    ASSIGN          reduce using rule 43 (primaryExpression -> NULL .)
    EQ_LEFT         reduce using rule 43 (primaryExpression -> NULL .)
    EQ_RIGHT        reduce using rule 43 (primaryExpression -> NULL .)
    EQ_PLUS         reduce using rule 43 (primaryExpression -> NULL .)
    EQ_MINUS        reduce using rule 43 (primaryExpression -> NULL .)
    EQ_TIMES        reduce using rule 43 (primaryExpression -> NULL .)
    EQ_MODULO       reduce using rule 43 (primaryExpression -> NULL .)
    EQ_AND_BIT      reduce using rule 43 (primaryExpression -> NULL .)
    EQ_DIV          reduce using rule 43 (primaryExpression -> NULL .)
    EQ_OR_BIT       reduce using rule 43 (primaryExpression -> NULL .)
    EQ_XOR_BIT      reduce using rule 43 (primaryExpression -> NULL .)
    COMMA           reduce using rule 43 (primaryExpression -> NULL .)
    RBRACKET        reduce using rule 43 (primaryExpression -> NULL .)
    LESS            reduce using rule 43 (primaryExpression -> NULL .)
    LESS_EQ         reduce using rule 43 (primaryExpression -> NULL .)
    GREATER         reduce using rule 43 (primaryExpression -> NULL .)
    GREATER_EQ      reduce using rule 43 (primaryExpression -> NULL .)
    IS_EQ_DIFF      reduce using rule 43 (primaryExpression -> NULL .)
    NOT_EQ_DIFF     reduce using rule 43 (primaryExpression -> NULL .)
    LESS_EQ_DIFF    reduce using rule 43 (primaryExpression -> NULL .)
    LESS_DIFF       reduce using rule 43 (primaryExpression -> NULL .)
    GREATER_EQ_DIFF reduce using rule 43 (primaryExpression -> NULL .)
    GREATER_DIFF    reduce using rule 43 (primaryExpression -> NULL .)
    RPAREN          reduce using rule 43 (primaryExpression -> NULL .)
    RANGE           reduce using rule 43 (primaryExpression -> NULL .)
    COLON           reduce using rule 43 (primaryExpression -> NULL .)


state 14

    (44) primaryExpression -> TRUE .

    DOT             reduce using rule 44 (primaryExpression -> TRUE .)
    PLUS_PLUS       reduce using rule 44 (primaryExpression -> TRUE .)
    MINUS_MINUS     reduce using rule 44 (primaryExpression -> TRUE .)
    LBRACKET        reduce using rule 44 (primaryExpression -> TRUE .)
    LPAREN          reduce using rule 44 (primaryExpression -> TRUE .)
    CARET           reduce using rule 44 (primaryExpression -> TRUE .)
    TIMES           reduce using rule 44 (primaryExpression -> TRUE .)
    DIV             reduce using rule 44 (primaryExpression -> TRUE .)
    MODULO          reduce using rule 44 (primaryExpression -> TRUE .)
    PLUS            reduce using rule 44 (primaryExpression -> TRUE .)
    MINUS           reduce using rule 44 (primaryExpression -> TRUE .)
    TILDE           reduce using rule 44 (primaryExpression -> TRUE .)
    $end            reduce using rule 44 (primaryExpression -> TRUE .)
    RIGHT_SHIFT     reduce using rule 44 (primaryExpression -> TRUE .)
    LEFT_SHIFT      reduce using rule 44 (primaryExpression -> TRUE .)
    IS_EQ           reduce using rule 44 (primaryExpression -> TRUE .)
    NOT_EQ          reduce using rule 44 (primaryExpression -> TRUE .)
    AMPERSAND       reduce using rule 44 (primaryExpression -> TRUE .)
    PIPE            reduce using rule 44 (primaryExpression -> TRUE .)
    DOUBLE_AMPERSAND reduce using rule 44 (primaryExpression -> TRUE .)
    QUESTION        reduce using rule 44 (primaryExpression -> TRUE .)
    DOUBLE_PIPE     reduce using rule 44 (primaryExpression -> TRUE .)
    ASSIGN          reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_LEFT         reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_RIGHT        reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_PLUS         reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_MINUS        reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_TIMES        reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_MODULO       reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_AND_BIT      reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_DIV          reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_OR_BIT       reduce using rule 44 (primaryExpression -> TRUE .)
    EQ_XOR_BIT      reduce using rule 44 (primaryExpression -> TRUE .)
    COMMA           reduce using rule 44 (primaryExpression -> TRUE .)
    RBRACKET        reduce using rule 44 (primaryExpression -> TRUE .)
    LESS            reduce using rule 44 (primaryExpression -> TRUE .)
    LESS_EQ         reduce using rule 44 (primaryExpression -> TRUE .)
    GREATER         reduce using rule 44 (primaryExpression -> TRUE .)
    GREATER_EQ      reduce using rule 44 (primaryExpression -> TRUE .)
    IS_EQ_DIFF      reduce using rule 44 (primaryExpression -> TRUE .)
    NOT_EQ_DIFF     reduce using rule 44 (primaryExpression -> TRUE .)
    LESS_EQ_DIFF    reduce using rule 44 (primaryExpression -> TRUE .)
    LESS_DIFF       reduce using rule 44 (primaryExpression -> TRUE .)
    GREATER_EQ_DIFF reduce using rule 44 (primaryExpression -> TRUE .)
    GREATER_DIFF    reduce using rule 44 (primaryExpression -> TRUE .)
    RPAREN          reduce using rule 44 (primaryExpression -> TRUE .)
    RANGE           reduce using rule 44 (primaryExpression -> TRUE .)
    COLON           reduce using rule 44 (primaryExpression -> TRUE .)


state 15

    (16) unaryExpression -> MINUS . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 94
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 16

    (17) unaryExpression -> DOT .
    (32) primaryExpression -> DOT . identifierOrTemplateInstance
    (61) symbol -> DOT . identifierOrTemplateChain
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance

    DOT             reduce using rule 17 (unaryExpression -> DOT .)
    PLUS_PLUS       reduce using rule 17 (unaryExpression -> DOT .)
    MINUS_MINUS     reduce using rule 17 (unaryExpression -> DOT .)
    LBRACKET        reduce using rule 17 (unaryExpression -> DOT .)
    CARET           reduce using rule 17 (unaryExpression -> DOT .)
    TIMES           reduce using rule 17 (unaryExpression -> DOT .)
    DIV             reduce using rule 17 (unaryExpression -> DOT .)
    MODULO          reduce using rule 17 (unaryExpression -> DOT .)
    PLUS            reduce using rule 17 (unaryExpression -> DOT .)
    MINUS           reduce using rule 17 (unaryExpression -> DOT .)
    TILDE           reduce using rule 17 (unaryExpression -> DOT .)
    RIGHT_SHIFT     reduce using rule 17 (unaryExpression -> DOT .)
    LEFT_SHIFT      reduce using rule 17 (unaryExpression -> DOT .)
    IS_EQ           reduce using rule 17 (unaryExpression -> DOT .)
    NOT_EQ          reduce using rule 17 (unaryExpression -> DOT .)
    AMPERSAND       reduce using rule 17 (unaryExpression -> DOT .)
    PIPE            reduce using rule 17 (unaryExpression -> DOT .)
    DOUBLE_AMPERSAND reduce using rule 17 (unaryExpression -> DOT .)
    QUESTION        reduce using rule 17 (unaryExpression -> DOT .)
    DOUBLE_PIPE     reduce using rule 17 (unaryExpression -> DOT .)
    ASSIGN          reduce using rule 17 (unaryExpression -> DOT .)
    EQ_LEFT         reduce using rule 17 (unaryExpression -> DOT .)
    EQ_RIGHT        reduce using rule 17 (unaryExpression -> DOT .)
    EQ_PLUS         reduce using rule 17 (unaryExpression -> DOT .)
    EQ_MINUS        reduce using rule 17 (unaryExpression -> DOT .)
    EQ_TIMES        reduce using rule 17 (unaryExpression -> DOT .)
    EQ_MODULO       reduce using rule 17 (unaryExpression -> DOT .)
    EQ_AND_BIT      reduce using rule 17 (unaryExpression -> DOT .)
    EQ_DIV          reduce using rule 17 (unaryExpression -> DOT .)
    EQ_OR_BIT       reduce using rule 17 (unaryExpression -> DOT .)
    EQ_XOR_BIT      reduce using rule 17 (unaryExpression -> DOT .)
    RBRACKET        reduce using rule 17 (unaryExpression -> DOT .)
    COMMA           reduce using rule 17 (unaryExpression -> DOT .)
    LESS            reduce using rule 17 (unaryExpression -> DOT .)
    LESS_EQ         reduce using rule 17 (unaryExpression -> DOT .)
    GREATER         reduce using rule 17 (unaryExpression -> DOT .)
    GREATER_EQ      reduce using rule 17 (unaryExpression -> DOT .)
    IS_EQ_DIFF      reduce using rule 17 (unaryExpression -> DOT .)
    NOT_EQ_DIFF     reduce using rule 17 (unaryExpression -> DOT .)
    LESS_EQ_DIFF    reduce using rule 17 (unaryExpression -> DOT .)
    LESS_DIFF       reduce using rule 17 (unaryExpression -> DOT .)
    GREATER_EQ_DIFF reduce using rule 17 (unaryExpression -> DOT .)
    GREATER_DIFF    reduce using rule 17 (unaryExpression -> DOT .)
    $end            reduce using rule 17 (unaryExpression -> DOT .)
    RPAREN          reduce using rule 17 (unaryExpression -> DOT .)
    RANGE           reduce using rule 17 (unaryExpression -> DOT .)
    COLON           reduce using rule 17 (unaryExpression -> DOT .)
    LPAREN          reduce using rule 17 (unaryExpression -> DOT .)
    IDENTIFIER      shift and go to state 86

    identifierOrTemplateInstance   shift and go to state 95
    identifierOrTemplateChain      shift and go to state 96

state 17

    (73) type -> type2 . typeSuffixStar
    (84) typeSuffixStar -> . typeSuffix typeSuffixStar
    (85) typeSuffixStar -> . empty
    (74) typeSuffix -> .
    (161) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for CARET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DIV resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MODULO resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for TILDE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for $end resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PIPE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for QUESTION resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RANGE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for COLON resolved using rule 74 (typeSuffix -> .)
    DOT             reduce using rule 74 (typeSuffix -> .)
    LPAREN          reduce using rule 74 (typeSuffix -> .)
    LBRACKET        reduce using rule 74 (typeSuffix -> .)
    PLUS_PLUS       reduce using rule 74 (typeSuffix -> .)
    MINUS_MINUS     reduce using rule 74 (typeSuffix -> .)
    CARET           reduce using rule 74 (typeSuffix -> .)
    TIMES           reduce using rule 74 (typeSuffix -> .)
    DIV             reduce using rule 74 (typeSuffix -> .)
    MODULO          reduce using rule 74 (typeSuffix -> .)
    PLUS            reduce using rule 74 (typeSuffix -> .)
    MINUS           reduce using rule 74 (typeSuffix -> .)
    TILDE           reduce using rule 74 (typeSuffix -> .)
    $end            reduce using rule 74 (typeSuffix -> .)
    RIGHT_SHIFT     reduce using rule 74 (typeSuffix -> .)
    LEFT_SHIFT      reduce using rule 74 (typeSuffix -> .)
    IS_EQ           reduce using rule 74 (typeSuffix -> .)
    NOT_EQ          reduce using rule 74 (typeSuffix -> .)
    AMPERSAND       reduce using rule 74 (typeSuffix -> .)
    PIPE            reduce using rule 74 (typeSuffix -> .)
    DOUBLE_AMPERSAND reduce using rule 74 (typeSuffix -> .)
    QUESTION        reduce using rule 74 (typeSuffix -> .)
    DOUBLE_PIPE     reduce using rule 74 (typeSuffix -> .)
    ASSIGN          reduce using rule 74 (typeSuffix -> .)
    EQ_LEFT         reduce using rule 74 (typeSuffix -> .)
    EQ_RIGHT        reduce using rule 74 (typeSuffix -> .)
    EQ_PLUS         reduce using rule 74 (typeSuffix -> .)
    EQ_MINUS        reduce using rule 74 (typeSuffix -> .)
    EQ_TIMES        reduce using rule 74 (typeSuffix -> .)
    EQ_MODULO       reduce using rule 74 (typeSuffix -> .)
    EQ_AND_BIT      reduce using rule 74 (typeSuffix -> .)
    EQ_DIV          reduce using rule 74 (typeSuffix -> .)
    EQ_OR_BIT       reduce using rule 74 (typeSuffix -> .)
    EQ_XOR_BIT      reduce using rule 74 (typeSuffix -> .)
    COMMA           reduce using rule 74 (typeSuffix -> .)
    RBRACKET        reduce using rule 74 (typeSuffix -> .)
    LESS            reduce using rule 74 (typeSuffix -> .)
    LESS_EQ         reduce using rule 74 (typeSuffix -> .)
    GREATER         reduce using rule 74 (typeSuffix -> .)
    GREATER_EQ      reduce using rule 74 (typeSuffix -> .)
    IS_EQ_DIFF      reduce using rule 74 (typeSuffix -> .)
    NOT_EQ_DIFF     reduce using rule 74 (typeSuffix -> .)
    LESS_EQ_DIFF    reduce using rule 74 (typeSuffix -> .)
    LESS_DIFF       reduce using rule 74 (typeSuffix -> .)
    GREATER_EQ_DIFF reduce using rule 74 (typeSuffix -> .)
    GREATER_DIFF    reduce using rule 74 (typeSuffix -> .)
    RPAREN          reduce using rule 74 (typeSuffix -> .)
    RANGE           reduce using rule 74 (typeSuffix -> .)
    COLON           reduce using rule 74 (typeSuffix -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! CARET           [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! DIV             [ reduce using rule 161 (empty -> .) ]
  ! MODULO          [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! TILDE           [ reduce using rule 161 (empty -> .) ]
  ! $end            [ reduce using rule 161 (empty -> .) ]
  ! RIGHT_SHIFT     [ reduce using rule 161 (empty -> .) ]
  ! LEFT_SHIFT      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ           [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! PIPE            [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 161 (empty -> .) ]
  ! QUESTION        [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_PIPE     [ reduce using rule 161 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 161 (empty -> .) ]
  ! EQ_LEFT         [ reduce using rule 161 (empty -> .) ]
  ! EQ_RIGHT        [ reduce using rule 161 (empty -> .) ]
  ! EQ_PLUS         [ reduce using rule 161 (empty -> .) ]
  ! EQ_MINUS        [ reduce using rule 161 (empty -> .) ]
  ! EQ_TIMES        [ reduce using rule 161 (empty -> .) ]
  ! EQ_MODULO       [ reduce using rule 161 (empty -> .) ]
  ! EQ_AND_BIT      [ reduce using rule 161 (empty -> .) ]
  ! EQ_DIV          [ reduce using rule 161 (empty -> .) ]
  ! EQ_OR_BIT       [ reduce using rule 161 (empty -> .) ]
  ! EQ_XOR_BIT      [ reduce using rule 161 (empty -> .) ]
  ! COMMA           [ reduce using rule 161 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! LESS            [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ         [ reduce using rule 161 (empty -> .) ]
  ! GREATER         [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ_DIFF      [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! LESS_DIFF       [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 161 (empty -> .) ]
  ! GREATER_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! RPAREN          [ reduce using rule 161 (empty -> .) ]
  ! RANGE           [ reduce using rule 161 (empty -> .) ]
  ! COLON           [ reduce using rule 161 (empty -> .) ]

    typeSuffixStar                 shift and go to state 97
    empty                          shift and go to state 98
    typeSuffix                     shift and go to state 99

state 18

    (81) builtinType -> ULONG .

    DOT             reduce using rule 81 (builtinType -> ULONG .)
    LPAREN          reduce using rule 81 (builtinType -> ULONG .)
    PLUS_PLUS       reduce using rule 81 (builtinType -> ULONG .)
    MINUS_MINUS     reduce using rule 81 (builtinType -> ULONG .)
    LBRACKET        reduce using rule 81 (builtinType -> ULONG .)
    CARET           reduce using rule 81 (builtinType -> ULONG .)
    TIMES           reduce using rule 81 (builtinType -> ULONG .)
    DIV             reduce using rule 81 (builtinType -> ULONG .)
    MODULO          reduce using rule 81 (builtinType -> ULONG .)
    PLUS            reduce using rule 81 (builtinType -> ULONG .)
    MINUS           reduce using rule 81 (builtinType -> ULONG .)
    TILDE           reduce using rule 81 (builtinType -> ULONG .)
    $end            reduce using rule 81 (builtinType -> ULONG .)
    RIGHT_SHIFT     reduce using rule 81 (builtinType -> ULONG .)
    LEFT_SHIFT      reduce using rule 81 (builtinType -> ULONG .)
    IS_EQ           reduce using rule 81 (builtinType -> ULONG .)
    NOT_EQ          reduce using rule 81 (builtinType -> ULONG .)
    AMPERSAND       reduce using rule 81 (builtinType -> ULONG .)
    PIPE            reduce using rule 81 (builtinType -> ULONG .)
    DOUBLE_AMPERSAND reduce using rule 81 (builtinType -> ULONG .)
    QUESTION        reduce using rule 81 (builtinType -> ULONG .)
    DOUBLE_PIPE     reduce using rule 81 (builtinType -> ULONG .)
    ASSIGN          reduce using rule 81 (builtinType -> ULONG .)
    EQ_LEFT         reduce using rule 81 (builtinType -> ULONG .)
    EQ_RIGHT        reduce using rule 81 (builtinType -> ULONG .)
    EQ_PLUS         reduce using rule 81 (builtinType -> ULONG .)
    EQ_MINUS        reduce using rule 81 (builtinType -> ULONG .)
    EQ_TIMES        reduce using rule 81 (builtinType -> ULONG .)
    EQ_MODULO       reduce using rule 81 (builtinType -> ULONG .)
    EQ_AND_BIT      reduce using rule 81 (builtinType -> ULONG .)
    EQ_DIV          reduce using rule 81 (builtinType -> ULONG .)
    EQ_OR_BIT       reduce using rule 81 (builtinType -> ULONG .)
    EQ_XOR_BIT      reduce using rule 81 (builtinType -> ULONG .)
    COMMA           reduce using rule 81 (builtinType -> ULONG .)
    RBRACKET        reduce using rule 81 (builtinType -> ULONG .)
    LESS            reduce using rule 81 (builtinType -> ULONG .)
    LESS_EQ         reduce using rule 81 (builtinType -> ULONG .)
    GREATER         reduce using rule 81 (builtinType -> ULONG .)
    GREATER_EQ      reduce using rule 81 (builtinType -> ULONG .)
    IS_EQ_DIFF      reduce using rule 81 (builtinType -> ULONG .)
    NOT_EQ_DIFF     reduce using rule 81 (builtinType -> ULONG .)
    LESS_EQ_DIFF    reduce using rule 81 (builtinType -> ULONG .)
    LESS_DIFF       reduce using rule 81 (builtinType -> ULONG .)
    GREATER_EQ_DIFF reduce using rule 81 (builtinType -> ULONG .)
    GREATER_DIFF    reduce using rule 81 (builtinType -> ULONG .)
    RPAREN          reduce using rule 81 (builtinType -> ULONG .)
    RANGE           reduce using rule 81 (builtinType -> ULONG .)
    COLON           reduce using rule 81 (builtinType -> ULONG .)


state 19

    (88) type2 -> typeofExpression . DOT identifierOrTemplateChain
    (89) type2 -> typeofExpression .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 100
    LPAREN          reduce using rule 89 (type2 -> typeofExpression .)
    RPAREN          reduce using rule 89 (type2 -> typeofExpression .)
    PLUS_PLUS       reduce using rule 89 (type2 -> typeofExpression .)
    MINUS_MINUS     reduce using rule 89 (type2 -> typeofExpression .)
    LBRACKET        reduce using rule 89 (type2 -> typeofExpression .)
    CARET           reduce using rule 89 (type2 -> typeofExpression .)
    TIMES           reduce using rule 89 (type2 -> typeofExpression .)
    DIV             reduce using rule 89 (type2 -> typeofExpression .)
    MODULO          reduce using rule 89 (type2 -> typeofExpression .)
    PLUS            reduce using rule 89 (type2 -> typeofExpression .)
    MINUS           reduce using rule 89 (type2 -> typeofExpression .)
    TILDE           reduce using rule 89 (type2 -> typeofExpression .)
    $end            reduce using rule 89 (type2 -> typeofExpression .)
    RIGHT_SHIFT     reduce using rule 89 (type2 -> typeofExpression .)
    LEFT_SHIFT      reduce using rule 89 (type2 -> typeofExpression .)
    IS_EQ           reduce using rule 89 (type2 -> typeofExpression .)
    NOT_EQ          reduce using rule 89 (type2 -> typeofExpression .)
    AMPERSAND       reduce using rule 89 (type2 -> typeofExpression .)
    PIPE            reduce using rule 89 (type2 -> typeofExpression .)
    DOUBLE_AMPERSAND reduce using rule 89 (type2 -> typeofExpression .)
    QUESTION        reduce using rule 89 (type2 -> typeofExpression .)
    DOUBLE_PIPE     reduce using rule 89 (type2 -> typeofExpression .)
    ASSIGN          reduce using rule 89 (type2 -> typeofExpression .)
    EQ_LEFT         reduce using rule 89 (type2 -> typeofExpression .)
    EQ_RIGHT        reduce using rule 89 (type2 -> typeofExpression .)
    EQ_PLUS         reduce using rule 89 (type2 -> typeofExpression .)
    EQ_MINUS        reduce using rule 89 (type2 -> typeofExpression .)
    EQ_TIMES        reduce using rule 89 (type2 -> typeofExpression .)
    EQ_MODULO       reduce using rule 89 (type2 -> typeofExpression .)
    EQ_AND_BIT      reduce using rule 89 (type2 -> typeofExpression .)
    EQ_DIV          reduce using rule 89 (type2 -> typeofExpression .)
    EQ_OR_BIT       reduce using rule 89 (type2 -> typeofExpression .)
    EQ_XOR_BIT      reduce using rule 89 (type2 -> typeofExpression .)
    COMMA           reduce using rule 89 (type2 -> typeofExpression .)
    RBRACKET        reduce using rule 89 (type2 -> typeofExpression .)
    LESS            reduce using rule 89 (type2 -> typeofExpression .)
    LESS_EQ         reduce using rule 89 (type2 -> typeofExpression .)
    GREATER         reduce using rule 89 (type2 -> typeofExpression .)
    GREATER_EQ      reduce using rule 89 (type2 -> typeofExpression .)
    IS_EQ_DIFF      reduce using rule 89 (type2 -> typeofExpression .)
    NOT_EQ_DIFF     reduce using rule 89 (type2 -> typeofExpression .)
    LESS_EQ_DIFF    reduce using rule 89 (type2 -> typeofExpression .)
    LESS_DIFF       reduce using rule 89 (type2 -> typeofExpression .)
    GREATER_EQ_DIFF reduce using rule 89 (type2 -> typeofExpression .)
    GREATER_DIFF    reduce using rule 89 (type2 -> typeofExpression .)
    RANGE           reduce using rule 89 (type2 -> typeofExpression .)
    COLON           reduce using rule 89 (type2 -> typeofExpression .)

  ! DOT             [ reduce using rule 89 (type2 -> typeofExpression .) ]


state 20

    (36) primaryExpression -> arrayLiteral .

    DOT             reduce using rule 36 (primaryExpression -> arrayLiteral .)
    PLUS_PLUS       reduce using rule 36 (primaryExpression -> arrayLiteral .)
    MINUS_MINUS     reduce using rule 36 (primaryExpression -> arrayLiteral .)
    LBRACKET        reduce using rule 36 (primaryExpression -> arrayLiteral .)
    LPAREN          reduce using rule 36 (primaryExpression -> arrayLiteral .)
    CARET           reduce using rule 36 (primaryExpression -> arrayLiteral .)
    TIMES           reduce using rule 36 (primaryExpression -> arrayLiteral .)
    DIV             reduce using rule 36 (primaryExpression -> arrayLiteral .)
    MODULO          reduce using rule 36 (primaryExpression -> arrayLiteral .)
    PLUS            reduce using rule 36 (primaryExpression -> arrayLiteral .)
    MINUS           reduce using rule 36 (primaryExpression -> arrayLiteral .)
    TILDE           reduce using rule 36 (primaryExpression -> arrayLiteral .)
    $end            reduce using rule 36 (primaryExpression -> arrayLiteral .)
    RIGHT_SHIFT     reduce using rule 36 (primaryExpression -> arrayLiteral .)
    LEFT_SHIFT      reduce using rule 36 (primaryExpression -> arrayLiteral .)
    IS_EQ           reduce using rule 36 (primaryExpression -> arrayLiteral .)
    NOT_EQ          reduce using rule 36 (primaryExpression -> arrayLiteral .)
    AMPERSAND       reduce using rule 36 (primaryExpression -> arrayLiteral .)
    PIPE            reduce using rule 36 (primaryExpression -> arrayLiteral .)
    DOUBLE_AMPERSAND reduce using rule 36 (primaryExpression -> arrayLiteral .)
    QUESTION        reduce using rule 36 (primaryExpression -> arrayLiteral .)
    DOUBLE_PIPE     reduce using rule 36 (primaryExpression -> arrayLiteral .)
    ASSIGN          reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_LEFT         reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_RIGHT        reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_PLUS         reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_MINUS        reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_TIMES        reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_MODULO       reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_AND_BIT      reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_DIV          reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_OR_BIT       reduce using rule 36 (primaryExpression -> arrayLiteral .)
    EQ_XOR_BIT      reduce using rule 36 (primaryExpression -> arrayLiteral .)
    COMMA           reduce using rule 36 (primaryExpression -> arrayLiteral .)
    RBRACKET        reduce using rule 36 (primaryExpression -> arrayLiteral .)
    LESS            reduce using rule 36 (primaryExpression -> arrayLiteral .)
    LESS_EQ         reduce using rule 36 (primaryExpression -> arrayLiteral .)
    GREATER         reduce using rule 36 (primaryExpression -> arrayLiteral .)
    GREATER_EQ      reduce using rule 36 (primaryExpression -> arrayLiteral .)
    IS_EQ_DIFF      reduce using rule 36 (primaryExpression -> arrayLiteral .)
    NOT_EQ_DIFF     reduce using rule 36 (primaryExpression -> arrayLiteral .)
    LESS_EQ_DIFF    reduce using rule 36 (primaryExpression -> arrayLiteral .)
    LESS_DIFF       reduce using rule 36 (primaryExpression -> arrayLiteral .)
    GREATER_EQ_DIFF reduce using rule 36 (primaryExpression -> arrayLiteral .)
    GREATER_DIFF    reduce using rule 36 (primaryExpression -> arrayLiteral .)
    RPAREN          reduce using rule 36 (primaryExpression -> arrayLiteral .)
    RANGE           reduce using rule 36 (primaryExpression -> arrayLiteral .)
    COLON           reduce using rule 36 (primaryExpression -> arrayLiteral .)


state 21

    (39) primaryExpression -> mixinExpression .

    DOT             reduce using rule 39 (primaryExpression -> mixinExpression .)
    PLUS_PLUS       reduce using rule 39 (primaryExpression -> mixinExpression .)
    MINUS_MINUS     reduce using rule 39 (primaryExpression -> mixinExpression .)
    LBRACKET        reduce using rule 39 (primaryExpression -> mixinExpression .)
    LPAREN          reduce using rule 39 (primaryExpression -> mixinExpression .)
    CARET           reduce using rule 39 (primaryExpression -> mixinExpression .)
    TIMES           reduce using rule 39 (primaryExpression -> mixinExpression .)
    DIV             reduce using rule 39 (primaryExpression -> mixinExpression .)
    MODULO          reduce using rule 39 (primaryExpression -> mixinExpression .)
    PLUS            reduce using rule 39 (primaryExpression -> mixinExpression .)
    MINUS           reduce using rule 39 (primaryExpression -> mixinExpression .)
    TILDE           reduce using rule 39 (primaryExpression -> mixinExpression .)
    $end            reduce using rule 39 (primaryExpression -> mixinExpression .)
    RIGHT_SHIFT     reduce using rule 39 (primaryExpression -> mixinExpression .)
    LEFT_SHIFT      reduce using rule 39 (primaryExpression -> mixinExpression .)
    IS_EQ           reduce using rule 39 (primaryExpression -> mixinExpression .)
    NOT_EQ          reduce using rule 39 (primaryExpression -> mixinExpression .)
    AMPERSAND       reduce using rule 39 (primaryExpression -> mixinExpression .)
    PIPE            reduce using rule 39 (primaryExpression -> mixinExpression .)
    DOUBLE_AMPERSAND reduce using rule 39 (primaryExpression -> mixinExpression .)
    QUESTION        reduce using rule 39 (primaryExpression -> mixinExpression .)
    DOUBLE_PIPE     reduce using rule 39 (primaryExpression -> mixinExpression .)
    ASSIGN          reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_LEFT         reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_RIGHT        reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_PLUS         reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_MINUS        reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_TIMES        reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_MODULO       reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_AND_BIT      reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_DIV          reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_OR_BIT       reduce using rule 39 (primaryExpression -> mixinExpression .)
    EQ_XOR_BIT      reduce using rule 39 (primaryExpression -> mixinExpression .)
    COMMA           reduce using rule 39 (primaryExpression -> mixinExpression .)
    RBRACKET        reduce using rule 39 (primaryExpression -> mixinExpression .)
    LESS            reduce using rule 39 (primaryExpression -> mixinExpression .)
    LESS_EQ         reduce using rule 39 (primaryExpression -> mixinExpression .)
    GREATER         reduce using rule 39 (primaryExpression -> mixinExpression .)
    GREATER_EQ      reduce using rule 39 (primaryExpression -> mixinExpression .)
    IS_EQ_DIFF      reduce using rule 39 (primaryExpression -> mixinExpression .)
    NOT_EQ_DIFF     reduce using rule 39 (primaryExpression -> mixinExpression .)
    LESS_EQ_DIFF    reduce using rule 39 (primaryExpression -> mixinExpression .)
    LESS_DIFF       reduce using rule 39 (primaryExpression -> mixinExpression .)
    GREATER_EQ_DIFF reduce using rule 39 (primaryExpression -> mixinExpression .)
    GREATER_DIFF    reduce using rule 39 (primaryExpression -> mixinExpression .)
    RPAREN          reduce using rule 39 (primaryExpression -> mixinExpression .)
    RANGE           reduce using rule 39 (primaryExpression -> mixinExpression .)
    COLON           reduce using rule 39 (primaryExpression -> mixinExpression .)


state 22

    (80) builtinType -> LONG .

    DOT             reduce using rule 80 (builtinType -> LONG .)
    LPAREN          reduce using rule 80 (builtinType -> LONG .)
    PLUS_PLUS       reduce using rule 80 (builtinType -> LONG .)
    MINUS_MINUS     reduce using rule 80 (builtinType -> LONG .)
    LBRACKET        reduce using rule 80 (builtinType -> LONG .)
    CARET           reduce using rule 80 (builtinType -> LONG .)
    TIMES           reduce using rule 80 (builtinType -> LONG .)
    DIV             reduce using rule 80 (builtinType -> LONG .)
    MODULO          reduce using rule 80 (builtinType -> LONG .)
    PLUS            reduce using rule 80 (builtinType -> LONG .)
    MINUS           reduce using rule 80 (builtinType -> LONG .)
    TILDE           reduce using rule 80 (builtinType -> LONG .)
    $end            reduce using rule 80 (builtinType -> LONG .)
    RIGHT_SHIFT     reduce using rule 80 (builtinType -> LONG .)
    LEFT_SHIFT      reduce using rule 80 (builtinType -> LONG .)
    IS_EQ           reduce using rule 80 (builtinType -> LONG .)
    NOT_EQ          reduce using rule 80 (builtinType -> LONG .)
    AMPERSAND       reduce using rule 80 (builtinType -> LONG .)
    PIPE            reduce using rule 80 (builtinType -> LONG .)
    DOUBLE_AMPERSAND reduce using rule 80 (builtinType -> LONG .)
    QUESTION        reduce using rule 80 (builtinType -> LONG .)
    DOUBLE_PIPE     reduce using rule 80 (builtinType -> LONG .)
    ASSIGN          reduce using rule 80 (builtinType -> LONG .)
    EQ_LEFT         reduce using rule 80 (builtinType -> LONG .)
    EQ_RIGHT        reduce using rule 80 (builtinType -> LONG .)
    EQ_PLUS         reduce using rule 80 (builtinType -> LONG .)
    EQ_MINUS        reduce using rule 80 (builtinType -> LONG .)
    EQ_TIMES        reduce using rule 80 (builtinType -> LONG .)
    EQ_MODULO       reduce using rule 80 (builtinType -> LONG .)
    EQ_AND_BIT      reduce using rule 80 (builtinType -> LONG .)
    EQ_DIV          reduce using rule 80 (builtinType -> LONG .)
    EQ_OR_BIT       reduce using rule 80 (builtinType -> LONG .)
    EQ_XOR_BIT      reduce using rule 80 (builtinType -> LONG .)
    COMMA           reduce using rule 80 (builtinType -> LONG .)
    RBRACKET        reduce using rule 80 (builtinType -> LONG .)
    LESS            reduce using rule 80 (builtinType -> LONG .)
    LESS_EQ         reduce using rule 80 (builtinType -> LONG .)
    GREATER         reduce using rule 80 (builtinType -> LONG .)
    GREATER_EQ      reduce using rule 80 (builtinType -> LONG .)
    IS_EQ_DIFF      reduce using rule 80 (builtinType -> LONG .)
    NOT_EQ_DIFF     reduce using rule 80 (builtinType -> LONG .)
    LESS_EQ_DIFF    reduce using rule 80 (builtinType -> LONG .)
    LESS_DIFF       reduce using rule 80 (builtinType -> LONG .)
    GREATER_EQ_DIFF reduce using rule 80 (builtinType -> LONG .)
    GREATER_DIFF    reduce using rule 80 (builtinType -> LONG .)
    RPAREN          reduce using rule 80 (builtinType -> LONG .)
    RANGE           reduce using rule 80 (builtinType -> LONG .)
    COLON           reduce using rule 80 (builtinType -> LONG .)


state 23

    (96) typeConstructor -> IMMUTABLE .

    LPAREN          reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    LBRACKET        reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    CONST           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    BOOL            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    SHORT           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    USHORT          reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    INT             reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    UINT            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    LONG            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    ULONG           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    CHAR            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    FLOAT           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    DOT             reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    TYPEOF          reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 96 (typeConstructor -> IMMUTABLE .)


state 24

    (54) castExpression -> CAST . LPAREN RPAREN unaryExpression
    (55) castExpression -> CAST . LPAREN type RPAREN unaryExpression
    (56) castExpression -> CAST . LPAREN castQualifier RPAREN unaryExpression

    LPAREN          shift and go to state 101


state 25

    (91) typeofExpression -> TYPEOF . LBRACKET expression RBRACKET
    (92) typeofExpression -> TYPEOF . LBRACKET RETURN RBRACKET

    LBRACKET        shift and go to state 102


state 26

    (15) unaryExpression -> PLUS . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 103
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 27

    (1) addExpression -> mulExpression .
    (6) mulExpression -> mulExpression . TIMES powExpression
    (7) mulExpression -> mulExpression . DIV powExpression
    (8) mulExpression -> mulExpression . MODULO powExpression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 1 (addExpression -> mulExpression .)
    MINUS           reduce using rule 1 (addExpression -> mulExpression .)
    TILDE           reduce using rule 1 (addExpression -> mulExpression .)
    RIGHT_SHIFT     reduce using rule 1 (addExpression -> mulExpression .)
    LEFT_SHIFT      reduce using rule 1 (addExpression -> mulExpression .)
    IS_EQ           reduce using rule 1 (addExpression -> mulExpression .)
    NOT_EQ          reduce using rule 1 (addExpression -> mulExpression .)
    AMPERSAND       reduce using rule 1 (addExpression -> mulExpression .)
    CARET           reduce using rule 1 (addExpression -> mulExpression .)
    PIPE            reduce using rule 1 (addExpression -> mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 1 (addExpression -> mulExpression .)
    QUESTION        reduce using rule 1 (addExpression -> mulExpression .)
    DOUBLE_PIPE     reduce using rule 1 (addExpression -> mulExpression .)
    ASSIGN          reduce using rule 1 (addExpression -> mulExpression .)
    EQ_LEFT         reduce using rule 1 (addExpression -> mulExpression .)
    EQ_RIGHT        reduce using rule 1 (addExpression -> mulExpression .)
    EQ_PLUS         reduce using rule 1 (addExpression -> mulExpression .)
    EQ_MINUS        reduce using rule 1 (addExpression -> mulExpression .)
    EQ_TIMES        reduce using rule 1 (addExpression -> mulExpression .)
    EQ_MODULO       reduce using rule 1 (addExpression -> mulExpression .)
    EQ_AND_BIT      reduce using rule 1 (addExpression -> mulExpression .)
    EQ_DIV          reduce using rule 1 (addExpression -> mulExpression .)
    EQ_OR_BIT       reduce using rule 1 (addExpression -> mulExpression .)
    EQ_XOR_BIT      reduce using rule 1 (addExpression -> mulExpression .)
    RBRACKET        reduce using rule 1 (addExpression -> mulExpression .)
    LESS            reduce using rule 1 (addExpression -> mulExpression .)
    LESS_EQ         reduce using rule 1 (addExpression -> mulExpression .)
    GREATER         reduce using rule 1 (addExpression -> mulExpression .)
    GREATER_EQ      reduce using rule 1 (addExpression -> mulExpression .)
    IS_EQ_DIFF      reduce using rule 1 (addExpression -> mulExpression .)
    NOT_EQ_DIFF     reduce using rule 1 (addExpression -> mulExpression .)
    LESS_EQ_DIFF    reduce using rule 1 (addExpression -> mulExpression .)
    LESS_DIFF       reduce using rule 1 (addExpression -> mulExpression .)
    GREATER_EQ_DIFF reduce using rule 1 (addExpression -> mulExpression .)
    GREATER_DIFF    reduce using rule 1 (addExpression -> mulExpression .)
    RANGE           reduce using rule 1 (addExpression -> mulExpression .)
    COMMA           reduce using rule 1 (addExpression -> mulExpression .)
    RPAREN          reduce using rule 1 (addExpression -> mulExpression .)
    DOT             reduce using rule 1 (addExpression -> mulExpression .)
    PLUS_PLUS       reduce using rule 1 (addExpression -> mulExpression .)
    MINUS_MINUS     reduce using rule 1 (addExpression -> mulExpression .)
    LBRACKET        reduce using rule 1 (addExpression -> mulExpression .)
    $end            reduce using rule 1 (addExpression -> mulExpression .)
    COLON           reduce using rule 1 (addExpression -> mulExpression .)
    LPAREN          reduce using rule 1 (addExpression -> mulExpression .)
    TIMES           shift and go to state 106
    DIV             shift and go to state 104
    MODULO          shift and go to state 105

  ! TIMES           [ reduce using rule 1 (addExpression -> mulExpression .) ]
  ! DIV             [ reduce using rule 1 (addExpression -> mulExpression .) ]
  ! MODULO          [ reduce using rule 1 (addExpression -> mulExpression .) ]


state 28

    (20) unaryExpression -> ELLIPSIS .

    DOT             reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    PLUS_PLUS       reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    MINUS_MINUS     reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    LBRACKET        reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    CARET           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    TIMES           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    DIV             reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    MODULO          reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    PLUS            reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    MINUS           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    TILDE           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    RIGHT_SHIFT     reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    LEFT_SHIFT      reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    IS_EQ           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    NOT_EQ          reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    AMPERSAND       reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    PIPE            reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    DOUBLE_AMPERSAND reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    QUESTION        reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    DOUBLE_PIPE     reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    ASSIGN          reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_LEFT         reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_RIGHT        reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_PLUS         reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_MINUS        reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_TIMES        reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_MODULO       reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_AND_BIT      reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_DIV          reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_OR_BIT       reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    EQ_XOR_BIT      reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    RBRACKET        reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    COMMA           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    LESS            reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    LESS_EQ         reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    GREATER         reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    GREATER_EQ      reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    IS_EQ_DIFF      reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    NOT_EQ_DIFF     reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    LESS_EQ_DIFF    reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    LESS_DIFF       reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    GREATER_EQ_DIFF reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    GREATER_DIFF    reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    $end            reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    RPAREN          reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    RANGE           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    COLON           reduce using rule 20 (unaryExpression -> ELLIPSIS .)
    LPAREN          reduce using rule 20 (unaryExpression -> ELLIPSIS .)


state 29

    (0) S' -> addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    TILDE           shift and go to state 109


state 30

    (65) identifierOrTemplateInstance -> IDENTIFIER .
    (111) functionLiteralExpression -> IDENTIFIER . assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! reduce/reduce conflict for CARET resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! reduce/reduce conflict for DIV resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for MODULO resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for TILDE resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for $end resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! reduce/reduce conflict for PIPE resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for QUESTION resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for COMMA resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for RANGE resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! reduce/reduce conflict for COLON resolved using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
  ! shift/reduce conflict for LPAREN resolved as shift
    CARET           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    $end            reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACKET        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RPAREN          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RANGE           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    COLON           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25

  ! DOT             [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS_PLUS       [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! MINUS_MINUS     [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LBRACKET        [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! TIMES           [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! PLUS            [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! MINUS           [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! AMPERSAND       [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! LPAREN          [ reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .) ]
  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! CARET           [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! DIV             [ reduce using rule 161 (empty -> .) ]
  ! MODULO          [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! TILDE           [ reduce using rule 161 (empty -> .) ]
  ! $end            [ reduce using rule 161 (empty -> .) ]
  ! RIGHT_SHIFT     [ reduce using rule 161 (empty -> .) ]
  ! LEFT_SHIFT      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ           [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! PIPE            [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 161 (empty -> .) ]
  ! QUESTION        [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_PIPE     [ reduce using rule 161 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 161 (empty -> .) ]
  ! EQ_LEFT         [ reduce using rule 161 (empty -> .) ]
  ! EQ_RIGHT        [ reduce using rule 161 (empty -> .) ]
  ! EQ_PLUS         [ reduce using rule 161 (empty -> .) ]
  ! EQ_MINUS        [ reduce using rule 161 (empty -> .) ]
  ! EQ_TIMES        [ reduce using rule 161 (empty -> .) ]
  ! EQ_MODULO       [ reduce using rule 161 (empty -> .) ]
  ! EQ_AND_BIT      [ reduce using rule 161 (empty -> .) ]
  ! EQ_DIV          [ reduce using rule 161 (empty -> .) ]
  ! EQ_OR_BIT       [ reduce using rule 161 (empty -> .) ]
  ! EQ_XOR_BIT      [ reduce using rule 161 (empty -> .) ]
  ! COMMA           [ reduce using rule 161 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! LESS            [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ         [ reduce using rule 161 (empty -> .) ]
  ! GREATER         [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ_DIFF      [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! LESS_DIFF       [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 161 (empty -> .) ]
  ! GREATER_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! RPAREN          [ reduce using rule 161 (empty -> .) ]
  ! RANGE           [ reduce using rule 161 (empty -> .) ]
  ! COLON           [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 110
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 31

    (34) primaryExpression -> type . DOT IDENTIFIER
    (35) primaryExpression -> type . arguments
    (60) functionCallExpression -> type . arguments
    (97) arguments -> . LPAREN argumentList_question RPAREN

    DOT             shift and go to state 113
    LPAREN          shift and go to state 112

    arguments                      shift and go to state 111

state 32

    (19) unaryExpression -> MINUS_MINUS . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 114
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 33

    (72) type -> typeConstructors . type2 typeSuffixStar
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    DOT             shift and go to state 84
    TYPEOF          shift and go to state 25
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    IDENTIFIER      shift and go to state 86

    typeConstructor                shift and go to state 116
    builtinType                    shift and go to state 36
    symbol                         shift and go to state 88
    typeofExpression               shift and go to state 19
    identifierOrTemplateChain      shift and go to state 5
    identifierOrTemplateInstance   shift and go to state 85
    type2                          shift and go to state 115

state 34

    (108) functionLiteralExpression -> FUNCTION . functionBody
    (109) functionLiteralExpression -> FUNCTION . type functionBody
    (104) functionBody -> . empty
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (161) empty -> .
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

  ! shift/reduce conflict for DOT resolved as shift
    PLUS_PLUS       reduce using rule 161 (empty -> .)
    MINUS_MINUS     reduce using rule 161 (empty -> .)
    LBRACKET        reduce using rule 161 (empty -> .)
    CARET           reduce using rule 161 (empty -> .)
    TIMES           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    PLUS            reduce using rule 161 (empty -> .)
    MINUS           reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    AMPERSAND       reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)
    LPAREN          reduce using rule 161 (empty -> .)
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    DOT             shift and go to state 84
    TYPEOF          shift and go to state 25
    IDENTIFIER      shift and go to state 86

  ! DOT             [ reduce using rule 161 (empty -> .) ]

    functionBody                   shift and go to state 118
    typeConstructor                shift and go to state 89
    builtinType                    shift and go to state 36
    symbol                         shift and go to state 88
    typeofExpression               shift and go to state 19
    identifierOrTemplateChain      shift and go to state 5
    identifierOrTemplateInstance   shift and go to state 85
    typeConstructors               shift and go to state 33
    type                           shift and go to state 117
    empty                          shift and go to state 60
    type2                          shift and go to state 17

state 35

    (25) unaryExpression -> indexExpression .

    DOT             reduce using rule 25 (unaryExpression -> indexExpression .)
    PLUS_PLUS       reduce using rule 25 (unaryExpression -> indexExpression .)
    MINUS_MINUS     reduce using rule 25 (unaryExpression -> indexExpression .)
    LBRACKET        reduce using rule 25 (unaryExpression -> indexExpression .)
    CARET           reduce using rule 25 (unaryExpression -> indexExpression .)
    TIMES           reduce using rule 25 (unaryExpression -> indexExpression .)
    DIV             reduce using rule 25 (unaryExpression -> indexExpression .)
    MODULO          reduce using rule 25 (unaryExpression -> indexExpression .)
    PLUS            reduce using rule 25 (unaryExpression -> indexExpression .)
    MINUS           reduce using rule 25 (unaryExpression -> indexExpression .)
    TILDE           reduce using rule 25 (unaryExpression -> indexExpression .)
    RIGHT_SHIFT     reduce using rule 25 (unaryExpression -> indexExpression .)
    LEFT_SHIFT      reduce using rule 25 (unaryExpression -> indexExpression .)
    IS_EQ           reduce using rule 25 (unaryExpression -> indexExpression .)
    NOT_EQ          reduce using rule 25 (unaryExpression -> indexExpression .)
    AMPERSAND       reduce using rule 25 (unaryExpression -> indexExpression .)
    PIPE            reduce using rule 25 (unaryExpression -> indexExpression .)
    DOUBLE_AMPERSAND reduce using rule 25 (unaryExpression -> indexExpression .)
    QUESTION        reduce using rule 25 (unaryExpression -> indexExpression .)
    DOUBLE_PIPE     reduce using rule 25 (unaryExpression -> indexExpression .)
    ASSIGN          reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_LEFT         reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_RIGHT        reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_PLUS         reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_MINUS        reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_TIMES        reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_MODULO       reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_AND_BIT      reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_DIV          reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_OR_BIT       reduce using rule 25 (unaryExpression -> indexExpression .)
    EQ_XOR_BIT      reduce using rule 25 (unaryExpression -> indexExpression .)
    RBRACKET        reduce using rule 25 (unaryExpression -> indexExpression .)
    COMMA           reduce using rule 25 (unaryExpression -> indexExpression .)
    LESS            reduce using rule 25 (unaryExpression -> indexExpression .)
    LESS_EQ         reduce using rule 25 (unaryExpression -> indexExpression .)
    GREATER         reduce using rule 25 (unaryExpression -> indexExpression .)
    GREATER_EQ      reduce using rule 25 (unaryExpression -> indexExpression .)
    IS_EQ_DIFF      reduce using rule 25 (unaryExpression -> indexExpression .)
    NOT_EQ_DIFF     reduce using rule 25 (unaryExpression -> indexExpression .)
    LESS_EQ_DIFF    reduce using rule 25 (unaryExpression -> indexExpression .)
    LESS_DIFF       reduce using rule 25 (unaryExpression -> indexExpression .)
    GREATER_EQ_DIFF reduce using rule 25 (unaryExpression -> indexExpression .)
    GREATER_DIFF    reduce using rule 25 (unaryExpression -> indexExpression .)
    $end            reduce using rule 25 (unaryExpression -> indexExpression .)
    RPAREN          reduce using rule 25 (unaryExpression -> indexExpression .)
    RANGE           reduce using rule 25 (unaryExpression -> indexExpression .)
    COLON           reduce using rule 25 (unaryExpression -> indexExpression .)
    LPAREN          reduce using rule 25 (unaryExpression -> indexExpression .)


state 36

    (86) type2 -> builtinType .

    DOT             reduce using rule 86 (type2 -> builtinType .)
    LPAREN          reduce using rule 86 (type2 -> builtinType .)
    RPAREN          reduce using rule 86 (type2 -> builtinType .)
    PLUS_PLUS       reduce using rule 86 (type2 -> builtinType .)
    MINUS_MINUS     reduce using rule 86 (type2 -> builtinType .)
    LBRACKET        reduce using rule 86 (type2 -> builtinType .)
    CARET           reduce using rule 86 (type2 -> builtinType .)
    TIMES           reduce using rule 86 (type2 -> builtinType .)
    DIV             reduce using rule 86 (type2 -> builtinType .)
    MODULO          reduce using rule 86 (type2 -> builtinType .)
    PLUS            reduce using rule 86 (type2 -> builtinType .)
    MINUS           reduce using rule 86 (type2 -> builtinType .)
    TILDE           reduce using rule 86 (type2 -> builtinType .)
    $end            reduce using rule 86 (type2 -> builtinType .)
    RIGHT_SHIFT     reduce using rule 86 (type2 -> builtinType .)
    LEFT_SHIFT      reduce using rule 86 (type2 -> builtinType .)
    IS_EQ           reduce using rule 86 (type2 -> builtinType .)
    NOT_EQ          reduce using rule 86 (type2 -> builtinType .)
    AMPERSAND       reduce using rule 86 (type2 -> builtinType .)
    PIPE            reduce using rule 86 (type2 -> builtinType .)
    DOUBLE_AMPERSAND reduce using rule 86 (type2 -> builtinType .)
    QUESTION        reduce using rule 86 (type2 -> builtinType .)
    DOUBLE_PIPE     reduce using rule 86 (type2 -> builtinType .)
    ASSIGN          reduce using rule 86 (type2 -> builtinType .)
    EQ_LEFT         reduce using rule 86 (type2 -> builtinType .)
    EQ_RIGHT        reduce using rule 86 (type2 -> builtinType .)
    EQ_PLUS         reduce using rule 86 (type2 -> builtinType .)
    EQ_MINUS        reduce using rule 86 (type2 -> builtinType .)
    EQ_TIMES        reduce using rule 86 (type2 -> builtinType .)
    EQ_MODULO       reduce using rule 86 (type2 -> builtinType .)
    EQ_AND_BIT      reduce using rule 86 (type2 -> builtinType .)
    EQ_DIV          reduce using rule 86 (type2 -> builtinType .)
    EQ_OR_BIT       reduce using rule 86 (type2 -> builtinType .)
    EQ_XOR_BIT      reduce using rule 86 (type2 -> builtinType .)
    COMMA           reduce using rule 86 (type2 -> builtinType .)
    RBRACKET        reduce using rule 86 (type2 -> builtinType .)
    LESS            reduce using rule 86 (type2 -> builtinType .)
    LESS_EQ         reduce using rule 86 (type2 -> builtinType .)
    GREATER         reduce using rule 86 (type2 -> builtinType .)
    GREATER_EQ      reduce using rule 86 (type2 -> builtinType .)
    IS_EQ_DIFF      reduce using rule 86 (type2 -> builtinType .)
    NOT_EQ_DIFF     reduce using rule 86 (type2 -> builtinType .)
    LESS_EQ_DIFF    reduce using rule 86 (type2 -> builtinType .)
    LESS_DIFF       reduce using rule 86 (type2 -> builtinType .)
    GREATER_EQ_DIFF reduce using rule 86 (type2 -> builtinType .)
    GREATER_DIFF    reduce using rule 86 (type2 -> builtinType .)
    RANGE           reduce using rule 86 (type2 -> builtinType .)
    COLON           reduce using rule 86 (type2 -> builtinType .)


state 37

    (48) primaryExpression -> LIT_STRPlus .

    DOT             reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    LBRACKET        reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    LPAREN          reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    CARET           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    TIMES           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    DIV             reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    MODULO          reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    PLUS            reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    MINUS           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    TILDE           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    $end            reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    IS_EQ           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    NOT_EQ          reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    AMPERSAND       reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    PIPE            reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    QUESTION        reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    ASSIGN          reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_LEFT         reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_PLUS         reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_MINUS        reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_TIMES        reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_MODULO       reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_DIV          reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    COMMA           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    RBRACKET        reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    LESS            reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    LESS_EQ         reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    GREATER         reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    GREATER_EQ      reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    IS_EQ_DIFF      reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    NOT_EQ_DIFF     reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    LESS_EQ_DIFF    reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    LESS_DIFF       reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    GREATER_EQ_DIFF reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    GREATER_DIFF    reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    RPAREN          reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    RANGE           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)
    COLON           reduce using rule 48 (primaryExpression -> LIT_STRPlus .)


state 38

    (47) primaryExpression -> DNUMBER .

    DOT             reduce using rule 47 (primaryExpression -> DNUMBER .)
    PLUS_PLUS       reduce using rule 47 (primaryExpression -> DNUMBER .)
    MINUS_MINUS     reduce using rule 47 (primaryExpression -> DNUMBER .)
    LBRACKET        reduce using rule 47 (primaryExpression -> DNUMBER .)
    LPAREN          reduce using rule 47 (primaryExpression -> DNUMBER .)
    CARET           reduce using rule 47 (primaryExpression -> DNUMBER .)
    TIMES           reduce using rule 47 (primaryExpression -> DNUMBER .)
    DIV             reduce using rule 47 (primaryExpression -> DNUMBER .)
    MODULO          reduce using rule 47 (primaryExpression -> DNUMBER .)
    PLUS            reduce using rule 47 (primaryExpression -> DNUMBER .)
    MINUS           reduce using rule 47 (primaryExpression -> DNUMBER .)
    TILDE           reduce using rule 47 (primaryExpression -> DNUMBER .)
    $end            reduce using rule 47 (primaryExpression -> DNUMBER .)
    RIGHT_SHIFT     reduce using rule 47 (primaryExpression -> DNUMBER .)
    LEFT_SHIFT      reduce using rule 47 (primaryExpression -> DNUMBER .)
    IS_EQ           reduce using rule 47 (primaryExpression -> DNUMBER .)
    NOT_EQ          reduce using rule 47 (primaryExpression -> DNUMBER .)
    AMPERSAND       reduce using rule 47 (primaryExpression -> DNUMBER .)
    PIPE            reduce using rule 47 (primaryExpression -> DNUMBER .)
    DOUBLE_AMPERSAND reduce using rule 47 (primaryExpression -> DNUMBER .)
    QUESTION        reduce using rule 47 (primaryExpression -> DNUMBER .)
    DOUBLE_PIPE     reduce using rule 47 (primaryExpression -> DNUMBER .)
    ASSIGN          reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_LEFT         reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_RIGHT        reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_PLUS         reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_MINUS        reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_TIMES        reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_MODULO       reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_AND_BIT      reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_DIV          reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_OR_BIT       reduce using rule 47 (primaryExpression -> DNUMBER .)
    EQ_XOR_BIT      reduce using rule 47 (primaryExpression -> DNUMBER .)
    COMMA           reduce using rule 47 (primaryExpression -> DNUMBER .)
    RBRACKET        reduce using rule 47 (primaryExpression -> DNUMBER .)
    LESS            reduce using rule 47 (primaryExpression -> DNUMBER .)
    LESS_EQ         reduce using rule 47 (primaryExpression -> DNUMBER .)
    GREATER         reduce using rule 47 (primaryExpression -> DNUMBER .)
    GREATER_EQ      reduce using rule 47 (primaryExpression -> DNUMBER .)
    IS_EQ_DIFF      reduce using rule 47 (primaryExpression -> DNUMBER .)
    NOT_EQ_DIFF     reduce using rule 47 (primaryExpression -> DNUMBER .)
    LESS_EQ_DIFF    reduce using rule 47 (primaryExpression -> DNUMBER .)
    LESS_DIFF       reduce using rule 47 (primaryExpression -> DNUMBER .)
    GREATER_EQ_DIFF reduce using rule 47 (primaryExpression -> DNUMBER .)
    GREATER_DIFF    reduce using rule 47 (primaryExpression -> DNUMBER .)
    RPAREN          reduce using rule 47 (primaryExpression -> DNUMBER .)
    RANGE           reduce using rule 47 (primaryExpression -> DNUMBER .)
    COLON           reduce using rule 47 (primaryExpression -> DNUMBER .)


state 39

    (21) unaryExpression -> newExpression .

    DOT             reduce using rule 21 (unaryExpression -> newExpression .)
    PLUS_PLUS       reduce using rule 21 (unaryExpression -> newExpression .)
    MINUS_MINUS     reduce using rule 21 (unaryExpression -> newExpression .)
    LBRACKET        reduce using rule 21 (unaryExpression -> newExpression .)
    CARET           reduce using rule 21 (unaryExpression -> newExpression .)
    TIMES           reduce using rule 21 (unaryExpression -> newExpression .)
    DIV             reduce using rule 21 (unaryExpression -> newExpression .)
    MODULO          reduce using rule 21 (unaryExpression -> newExpression .)
    PLUS            reduce using rule 21 (unaryExpression -> newExpression .)
    MINUS           reduce using rule 21 (unaryExpression -> newExpression .)
    TILDE           reduce using rule 21 (unaryExpression -> newExpression .)
    RIGHT_SHIFT     reduce using rule 21 (unaryExpression -> newExpression .)
    LEFT_SHIFT      reduce using rule 21 (unaryExpression -> newExpression .)
    IS_EQ           reduce using rule 21 (unaryExpression -> newExpression .)
    NOT_EQ          reduce using rule 21 (unaryExpression -> newExpression .)
    AMPERSAND       reduce using rule 21 (unaryExpression -> newExpression .)
    PIPE            reduce using rule 21 (unaryExpression -> newExpression .)
    DOUBLE_AMPERSAND reduce using rule 21 (unaryExpression -> newExpression .)
    QUESTION        reduce using rule 21 (unaryExpression -> newExpression .)
    DOUBLE_PIPE     reduce using rule 21 (unaryExpression -> newExpression .)
    ASSIGN          reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_LEFT         reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_RIGHT        reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_PLUS         reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_MINUS        reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_TIMES        reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_MODULO       reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_AND_BIT      reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_DIV          reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_OR_BIT       reduce using rule 21 (unaryExpression -> newExpression .)
    EQ_XOR_BIT      reduce using rule 21 (unaryExpression -> newExpression .)
    RBRACKET        reduce using rule 21 (unaryExpression -> newExpression .)
    COMMA           reduce using rule 21 (unaryExpression -> newExpression .)
    LESS            reduce using rule 21 (unaryExpression -> newExpression .)
    LESS_EQ         reduce using rule 21 (unaryExpression -> newExpression .)
    GREATER         reduce using rule 21 (unaryExpression -> newExpression .)
    GREATER_EQ      reduce using rule 21 (unaryExpression -> newExpression .)
    IS_EQ_DIFF      reduce using rule 21 (unaryExpression -> newExpression .)
    NOT_EQ_DIFF     reduce using rule 21 (unaryExpression -> newExpression .)
    LESS_EQ_DIFF    reduce using rule 21 (unaryExpression -> newExpression .)
    LESS_DIFF       reduce using rule 21 (unaryExpression -> newExpression .)
    GREATER_EQ_DIFF reduce using rule 21 (unaryExpression -> newExpression .)
    GREATER_DIFF    reduce using rule 21 (unaryExpression -> newExpression .)
    $end            reduce using rule 21 (unaryExpression -> newExpression .)
    RPAREN          reduce using rule 21 (unaryExpression -> newExpression .)
    RANGE           reduce using rule 21 (unaryExpression -> newExpression .)
    COLON           reduce using rule 21 (unaryExpression -> newExpression .)
    LPAREN          reduce using rule 21 (unaryExpression -> newExpression .)


state 40

    (59) functionCallExpression -> symbol . arguments unaryExpression arguments
    (87) type2 -> symbol .
    (97) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 87 (type2 -> symbol .)
    LPAREN          shift and go to state 112

  ! LPAREN          [ reduce using rule 87 (type2 -> symbol .) ]

    arguments                      shift and go to state 119

state 41

    (41) primaryExpression -> DOLLAR .

    DOT             reduce using rule 41 (primaryExpression -> DOLLAR .)
    PLUS_PLUS       reduce using rule 41 (primaryExpression -> DOLLAR .)
    MINUS_MINUS     reduce using rule 41 (primaryExpression -> DOLLAR .)
    LBRACKET        reduce using rule 41 (primaryExpression -> DOLLAR .)
    LPAREN          reduce using rule 41 (primaryExpression -> DOLLAR .)
    CARET           reduce using rule 41 (primaryExpression -> DOLLAR .)
    TIMES           reduce using rule 41 (primaryExpression -> DOLLAR .)
    DIV             reduce using rule 41 (primaryExpression -> DOLLAR .)
    MODULO          reduce using rule 41 (primaryExpression -> DOLLAR .)
    PLUS            reduce using rule 41 (primaryExpression -> DOLLAR .)
    MINUS           reduce using rule 41 (primaryExpression -> DOLLAR .)
    TILDE           reduce using rule 41 (primaryExpression -> DOLLAR .)
    $end            reduce using rule 41 (primaryExpression -> DOLLAR .)
    RIGHT_SHIFT     reduce using rule 41 (primaryExpression -> DOLLAR .)
    LEFT_SHIFT      reduce using rule 41 (primaryExpression -> DOLLAR .)
    IS_EQ           reduce using rule 41 (primaryExpression -> DOLLAR .)
    NOT_EQ          reduce using rule 41 (primaryExpression -> DOLLAR .)
    AMPERSAND       reduce using rule 41 (primaryExpression -> DOLLAR .)
    PIPE            reduce using rule 41 (primaryExpression -> DOLLAR .)
    DOUBLE_AMPERSAND reduce using rule 41 (primaryExpression -> DOLLAR .)
    QUESTION        reduce using rule 41 (primaryExpression -> DOLLAR .)
    DOUBLE_PIPE     reduce using rule 41 (primaryExpression -> DOLLAR .)
    ASSIGN          reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_LEFT         reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_RIGHT        reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_PLUS         reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_MINUS        reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_TIMES        reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_MODULO       reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_AND_BIT      reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_DIV          reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_OR_BIT       reduce using rule 41 (primaryExpression -> DOLLAR .)
    EQ_XOR_BIT      reduce using rule 41 (primaryExpression -> DOLLAR .)
    COMMA           reduce using rule 41 (primaryExpression -> DOLLAR .)
    RBRACKET        reduce using rule 41 (primaryExpression -> DOLLAR .)
    LESS            reduce using rule 41 (primaryExpression -> DOLLAR .)
    LESS_EQ         reduce using rule 41 (primaryExpression -> DOLLAR .)
    GREATER         reduce using rule 41 (primaryExpression -> DOLLAR .)
    GREATER_EQ      reduce using rule 41 (primaryExpression -> DOLLAR .)
    IS_EQ_DIFF      reduce using rule 41 (primaryExpression -> DOLLAR .)
    NOT_EQ_DIFF     reduce using rule 41 (primaryExpression -> DOLLAR .)
    LESS_EQ_DIFF    reduce using rule 41 (primaryExpression -> DOLLAR .)
    LESS_DIFF       reduce using rule 41 (primaryExpression -> DOLLAR .)
    GREATER_EQ_DIFF reduce using rule 41 (primaryExpression -> DOLLAR .)
    GREATER_DIFF    reduce using rule 41 (primaryExpression -> DOLLAR .)
    RPAREN          reduce using rule 41 (primaryExpression -> DOLLAR .)
    RANGE           reduce using rule 41 (primaryExpression -> DOLLAR .)
    COLON           reduce using rule 41 (primaryExpression -> DOLLAR .)


state 42

    (14) unaryExpression -> TIMES . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 120
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 43

    (12) unaryExpression -> AMPERSAND . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 121
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 44

    (26) unaryExpression -> LPAREN . type RPAREN DOT identifierOrTemplateInstance
    (37) primaryExpression -> LPAREN . expression RPAREN
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (106) expression -> . assignExpression
    (107) expression -> . expression COMMA assignExpression
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (104) functionBody -> . empty
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    DOT             shift and go to state 125
    TYPEOF          shift and go to state 25
    IDENTIFIER      shift and go to state 30
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 126
    addExpression                  shift and go to state 82
    type                           shift and go to state 127
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 128
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 123
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 122
    expression                     shift and go to state 124

state 45

    (31) primaryExpression -> identifierOrTemplateInstance .
    (63) identifierOrTemplateChain -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LPAREN resolved using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    DOT             reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    CARET           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    DIV             reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    $end            reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS            reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    RPAREN          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    RANGE           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    COLON           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]
  ! LPAREN          [ reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]


state 46

    (23) unaryExpression -> castExpression .

    DOT             reduce using rule 23 (unaryExpression -> castExpression .)
    PLUS_PLUS       reduce using rule 23 (unaryExpression -> castExpression .)
    MINUS_MINUS     reduce using rule 23 (unaryExpression -> castExpression .)
    LBRACKET        reduce using rule 23 (unaryExpression -> castExpression .)
    CARET           reduce using rule 23 (unaryExpression -> castExpression .)
    TIMES           reduce using rule 23 (unaryExpression -> castExpression .)
    DIV             reduce using rule 23 (unaryExpression -> castExpression .)
    MODULO          reduce using rule 23 (unaryExpression -> castExpression .)
    PLUS            reduce using rule 23 (unaryExpression -> castExpression .)
    MINUS           reduce using rule 23 (unaryExpression -> castExpression .)
    TILDE           reduce using rule 23 (unaryExpression -> castExpression .)
    RIGHT_SHIFT     reduce using rule 23 (unaryExpression -> castExpression .)
    LEFT_SHIFT      reduce using rule 23 (unaryExpression -> castExpression .)
    IS_EQ           reduce using rule 23 (unaryExpression -> castExpression .)
    NOT_EQ          reduce using rule 23 (unaryExpression -> castExpression .)
    AMPERSAND       reduce using rule 23 (unaryExpression -> castExpression .)
    PIPE            reduce using rule 23 (unaryExpression -> castExpression .)
    DOUBLE_AMPERSAND reduce using rule 23 (unaryExpression -> castExpression .)
    QUESTION        reduce using rule 23 (unaryExpression -> castExpression .)
    DOUBLE_PIPE     reduce using rule 23 (unaryExpression -> castExpression .)
    ASSIGN          reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_LEFT         reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_RIGHT        reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_PLUS         reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_MINUS        reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_TIMES        reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_MODULO       reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_AND_BIT      reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_DIV          reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_OR_BIT       reduce using rule 23 (unaryExpression -> castExpression .)
    EQ_XOR_BIT      reduce using rule 23 (unaryExpression -> castExpression .)
    RBRACKET        reduce using rule 23 (unaryExpression -> castExpression .)
    COMMA           reduce using rule 23 (unaryExpression -> castExpression .)
    LESS            reduce using rule 23 (unaryExpression -> castExpression .)
    LESS_EQ         reduce using rule 23 (unaryExpression -> castExpression .)
    GREATER         reduce using rule 23 (unaryExpression -> castExpression .)
    GREATER_EQ      reduce using rule 23 (unaryExpression -> castExpression .)
    IS_EQ_DIFF      reduce using rule 23 (unaryExpression -> castExpression .)
    NOT_EQ_DIFF     reduce using rule 23 (unaryExpression -> castExpression .)
    LESS_EQ_DIFF    reduce using rule 23 (unaryExpression -> castExpression .)
    LESS_DIFF       reduce using rule 23 (unaryExpression -> castExpression .)
    GREATER_EQ_DIFF reduce using rule 23 (unaryExpression -> castExpression .)
    GREATER_DIFF    reduce using rule 23 (unaryExpression -> castExpression .)
    $end            reduce using rule 23 (unaryExpression -> castExpression .)
    RPAREN          reduce using rule 23 (unaryExpression -> castExpression .)
    RANGE           reduce using rule 23 (unaryExpression -> castExpression .)
    COLON           reduce using rule 23 (unaryExpression -> castExpression .)
    LPAREN          reduce using rule 23 (unaryExpression -> castExpression .)


state 47

    (110) functionLiteralExpression -> functionBody .

    DOT             reduce using rule 110 (functionLiteralExpression -> functionBody .)
    PLUS_PLUS       reduce using rule 110 (functionLiteralExpression -> functionBody .)
    MINUS_MINUS     reduce using rule 110 (functionLiteralExpression -> functionBody .)
    LBRACKET        reduce using rule 110 (functionLiteralExpression -> functionBody .)
    CARET           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    TIMES           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    DIV             reduce using rule 110 (functionLiteralExpression -> functionBody .)
    MODULO          reduce using rule 110 (functionLiteralExpression -> functionBody .)
    PLUS            reduce using rule 110 (functionLiteralExpression -> functionBody .)
    MINUS           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    TILDE           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    $end            reduce using rule 110 (functionLiteralExpression -> functionBody .)
    RIGHT_SHIFT     reduce using rule 110 (functionLiteralExpression -> functionBody .)
    LEFT_SHIFT      reduce using rule 110 (functionLiteralExpression -> functionBody .)
    IS_EQ           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    NOT_EQ          reduce using rule 110 (functionLiteralExpression -> functionBody .)
    AMPERSAND       reduce using rule 110 (functionLiteralExpression -> functionBody .)
    PIPE            reduce using rule 110 (functionLiteralExpression -> functionBody .)
    DOUBLE_AMPERSAND reduce using rule 110 (functionLiteralExpression -> functionBody .)
    QUESTION        reduce using rule 110 (functionLiteralExpression -> functionBody .)
    DOUBLE_PIPE     reduce using rule 110 (functionLiteralExpression -> functionBody .)
    ASSIGN          reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_LEFT         reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_RIGHT        reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_PLUS         reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_MINUS        reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_TIMES        reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_MODULO       reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_AND_BIT      reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_DIV          reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_OR_BIT       reduce using rule 110 (functionLiteralExpression -> functionBody .)
    EQ_XOR_BIT      reduce using rule 110 (functionLiteralExpression -> functionBody .)
    COMMA           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    RBRACKET        reduce using rule 110 (functionLiteralExpression -> functionBody .)
    LESS            reduce using rule 110 (functionLiteralExpression -> functionBody .)
    LESS_EQ         reduce using rule 110 (functionLiteralExpression -> functionBody .)
    GREATER         reduce using rule 110 (functionLiteralExpression -> functionBody .)
    GREATER_EQ      reduce using rule 110 (functionLiteralExpression -> functionBody .)
    IS_EQ_DIFF      reduce using rule 110 (functionLiteralExpression -> functionBody .)
    NOT_EQ_DIFF     reduce using rule 110 (functionLiteralExpression -> functionBody .)
    LESS_EQ_DIFF    reduce using rule 110 (functionLiteralExpression -> functionBody .)
    LESS_DIFF       reduce using rule 110 (functionLiteralExpression -> functionBody .)
    GREATER_EQ_DIFF reduce using rule 110 (functionLiteralExpression -> functionBody .)
    GREATER_DIFF    reduce using rule 110 (functionLiteralExpression -> functionBody .)
    RPAREN          reduce using rule 110 (functionLiteralExpression -> functionBody .)
    RANGE           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    COLON           reduce using rule 110 (functionLiteralExpression -> functionBody .)
    LPAREN          reduce using rule 110 (functionLiteralExpression -> functionBody .)


state 48

    (82) builtinType -> CHAR .

    DOT             reduce using rule 82 (builtinType -> CHAR .)
    LPAREN          reduce using rule 82 (builtinType -> CHAR .)
    PLUS_PLUS       reduce using rule 82 (builtinType -> CHAR .)
    MINUS_MINUS     reduce using rule 82 (builtinType -> CHAR .)
    LBRACKET        reduce using rule 82 (builtinType -> CHAR .)
    CARET           reduce using rule 82 (builtinType -> CHAR .)
    TIMES           reduce using rule 82 (builtinType -> CHAR .)
    DIV             reduce using rule 82 (builtinType -> CHAR .)
    MODULO          reduce using rule 82 (builtinType -> CHAR .)
    PLUS            reduce using rule 82 (builtinType -> CHAR .)
    MINUS           reduce using rule 82 (builtinType -> CHAR .)
    TILDE           reduce using rule 82 (builtinType -> CHAR .)
    $end            reduce using rule 82 (builtinType -> CHAR .)
    RIGHT_SHIFT     reduce using rule 82 (builtinType -> CHAR .)
    LEFT_SHIFT      reduce using rule 82 (builtinType -> CHAR .)
    IS_EQ           reduce using rule 82 (builtinType -> CHAR .)
    NOT_EQ          reduce using rule 82 (builtinType -> CHAR .)
    AMPERSAND       reduce using rule 82 (builtinType -> CHAR .)
    PIPE            reduce using rule 82 (builtinType -> CHAR .)
    DOUBLE_AMPERSAND reduce using rule 82 (builtinType -> CHAR .)
    QUESTION        reduce using rule 82 (builtinType -> CHAR .)
    DOUBLE_PIPE     reduce using rule 82 (builtinType -> CHAR .)
    ASSIGN          reduce using rule 82 (builtinType -> CHAR .)
    EQ_LEFT         reduce using rule 82 (builtinType -> CHAR .)
    EQ_RIGHT        reduce using rule 82 (builtinType -> CHAR .)
    EQ_PLUS         reduce using rule 82 (builtinType -> CHAR .)
    EQ_MINUS        reduce using rule 82 (builtinType -> CHAR .)
    EQ_TIMES        reduce using rule 82 (builtinType -> CHAR .)
    EQ_MODULO       reduce using rule 82 (builtinType -> CHAR .)
    EQ_AND_BIT      reduce using rule 82 (builtinType -> CHAR .)
    EQ_DIV          reduce using rule 82 (builtinType -> CHAR .)
    EQ_OR_BIT       reduce using rule 82 (builtinType -> CHAR .)
    EQ_XOR_BIT      reduce using rule 82 (builtinType -> CHAR .)
    COMMA           reduce using rule 82 (builtinType -> CHAR .)
    RBRACKET        reduce using rule 82 (builtinType -> CHAR .)
    LESS            reduce using rule 82 (builtinType -> CHAR .)
    LESS_EQ         reduce using rule 82 (builtinType -> CHAR .)
    GREATER         reduce using rule 82 (builtinType -> CHAR .)
    GREATER_EQ      reduce using rule 82 (builtinType -> CHAR .)
    IS_EQ_DIFF      reduce using rule 82 (builtinType -> CHAR .)
    NOT_EQ_DIFF     reduce using rule 82 (builtinType -> CHAR .)
    LESS_EQ_DIFF    reduce using rule 82 (builtinType -> CHAR .)
    LESS_DIFF       reduce using rule 82 (builtinType -> CHAR .)
    GREATER_EQ_DIFF reduce using rule 82 (builtinType -> CHAR .)
    GREATER_DIFF    reduce using rule 82 (builtinType -> CHAR .)
    RPAREN          reduce using rule 82 (builtinType -> CHAR .)
    RANGE           reduce using rule 82 (builtinType -> CHAR .)
    COLON           reduce using rule 82 (builtinType -> CHAR .)


state 49

    (83) builtinType -> FLOAT .

    DOT             reduce using rule 83 (builtinType -> FLOAT .)
    LPAREN          reduce using rule 83 (builtinType -> FLOAT .)
    PLUS_PLUS       reduce using rule 83 (builtinType -> FLOAT .)
    MINUS_MINUS     reduce using rule 83 (builtinType -> FLOAT .)
    LBRACKET        reduce using rule 83 (builtinType -> FLOAT .)
    CARET           reduce using rule 83 (builtinType -> FLOAT .)
    TIMES           reduce using rule 83 (builtinType -> FLOAT .)
    DIV             reduce using rule 83 (builtinType -> FLOAT .)
    MODULO          reduce using rule 83 (builtinType -> FLOAT .)
    PLUS            reduce using rule 83 (builtinType -> FLOAT .)
    MINUS           reduce using rule 83 (builtinType -> FLOAT .)
    TILDE           reduce using rule 83 (builtinType -> FLOAT .)
    $end            reduce using rule 83 (builtinType -> FLOAT .)
    RIGHT_SHIFT     reduce using rule 83 (builtinType -> FLOAT .)
    LEFT_SHIFT      reduce using rule 83 (builtinType -> FLOAT .)
    IS_EQ           reduce using rule 83 (builtinType -> FLOAT .)
    NOT_EQ          reduce using rule 83 (builtinType -> FLOAT .)
    AMPERSAND       reduce using rule 83 (builtinType -> FLOAT .)
    PIPE            reduce using rule 83 (builtinType -> FLOAT .)
    DOUBLE_AMPERSAND reduce using rule 83 (builtinType -> FLOAT .)
    QUESTION        reduce using rule 83 (builtinType -> FLOAT .)
    DOUBLE_PIPE     reduce using rule 83 (builtinType -> FLOAT .)
    ASSIGN          reduce using rule 83 (builtinType -> FLOAT .)
    EQ_LEFT         reduce using rule 83 (builtinType -> FLOAT .)
    EQ_RIGHT        reduce using rule 83 (builtinType -> FLOAT .)
    EQ_PLUS         reduce using rule 83 (builtinType -> FLOAT .)
    EQ_MINUS        reduce using rule 83 (builtinType -> FLOAT .)
    EQ_TIMES        reduce using rule 83 (builtinType -> FLOAT .)
    EQ_MODULO       reduce using rule 83 (builtinType -> FLOAT .)
    EQ_AND_BIT      reduce using rule 83 (builtinType -> FLOAT .)
    EQ_DIV          reduce using rule 83 (builtinType -> FLOAT .)
    EQ_OR_BIT       reduce using rule 83 (builtinType -> FLOAT .)
    EQ_XOR_BIT      reduce using rule 83 (builtinType -> FLOAT .)
    COMMA           reduce using rule 83 (builtinType -> FLOAT .)
    RBRACKET        reduce using rule 83 (builtinType -> FLOAT .)
    LESS            reduce using rule 83 (builtinType -> FLOAT .)
    LESS_EQ         reduce using rule 83 (builtinType -> FLOAT .)
    GREATER         reduce using rule 83 (builtinType -> FLOAT .)
    GREATER_EQ      reduce using rule 83 (builtinType -> FLOAT .)
    IS_EQ_DIFF      reduce using rule 83 (builtinType -> FLOAT .)
    NOT_EQ_DIFF     reduce using rule 83 (builtinType -> FLOAT .)
    LESS_EQ_DIFF    reduce using rule 83 (builtinType -> FLOAT .)
    LESS_DIFF       reduce using rule 83 (builtinType -> FLOAT .)
    GREATER_EQ_DIFF reduce using rule 83 (builtinType -> FLOAT .)
    GREATER_DIFF    reduce using rule 83 (builtinType -> FLOAT .)
    RPAREN          reduce using rule 83 (builtinType -> FLOAT .)
    RANGE           reduce using rule 83 (builtinType -> FLOAT .)
    COLON           reduce using rule 83 (builtinType -> FLOAT .)


state 50

    (45) primaryExpression -> FALSE .

    DOT             reduce using rule 45 (primaryExpression -> FALSE .)
    PLUS_PLUS       reduce using rule 45 (primaryExpression -> FALSE .)
    MINUS_MINUS     reduce using rule 45 (primaryExpression -> FALSE .)
    LBRACKET        reduce using rule 45 (primaryExpression -> FALSE .)
    LPAREN          reduce using rule 45 (primaryExpression -> FALSE .)
    CARET           reduce using rule 45 (primaryExpression -> FALSE .)
    TIMES           reduce using rule 45 (primaryExpression -> FALSE .)
    DIV             reduce using rule 45 (primaryExpression -> FALSE .)
    MODULO          reduce using rule 45 (primaryExpression -> FALSE .)
    PLUS            reduce using rule 45 (primaryExpression -> FALSE .)
    MINUS           reduce using rule 45 (primaryExpression -> FALSE .)
    TILDE           reduce using rule 45 (primaryExpression -> FALSE .)
    $end            reduce using rule 45 (primaryExpression -> FALSE .)
    RIGHT_SHIFT     reduce using rule 45 (primaryExpression -> FALSE .)
    LEFT_SHIFT      reduce using rule 45 (primaryExpression -> FALSE .)
    IS_EQ           reduce using rule 45 (primaryExpression -> FALSE .)
    NOT_EQ          reduce using rule 45 (primaryExpression -> FALSE .)
    AMPERSAND       reduce using rule 45 (primaryExpression -> FALSE .)
    PIPE            reduce using rule 45 (primaryExpression -> FALSE .)
    DOUBLE_AMPERSAND reduce using rule 45 (primaryExpression -> FALSE .)
    QUESTION        reduce using rule 45 (primaryExpression -> FALSE .)
    DOUBLE_PIPE     reduce using rule 45 (primaryExpression -> FALSE .)
    ASSIGN          reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_LEFT         reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_RIGHT        reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_PLUS         reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_MINUS        reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_TIMES        reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_MODULO       reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_AND_BIT      reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_DIV          reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_OR_BIT       reduce using rule 45 (primaryExpression -> FALSE .)
    EQ_XOR_BIT      reduce using rule 45 (primaryExpression -> FALSE .)
    COMMA           reduce using rule 45 (primaryExpression -> FALSE .)
    RBRACKET        reduce using rule 45 (primaryExpression -> FALSE .)
    LESS            reduce using rule 45 (primaryExpression -> FALSE .)
    LESS_EQ         reduce using rule 45 (primaryExpression -> FALSE .)
    GREATER         reduce using rule 45 (primaryExpression -> FALSE .)
    GREATER_EQ      reduce using rule 45 (primaryExpression -> FALSE .)
    IS_EQ_DIFF      reduce using rule 45 (primaryExpression -> FALSE .)
    NOT_EQ_DIFF     reduce using rule 45 (primaryExpression -> FALSE .)
    LESS_EQ_DIFF    reduce using rule 45 (primaryExpression -> FALSE .)
    LESS_DIFF       reduce using rule 45 (primaryExpression -> FALSE .)
    GREATER_EQ_DIFF reduce using rule 45 (primaryExpression -> FALSE .)
    GREATER_DIFF    reduce using rule 45 (primaryExpression -> FALSE .)
    RPAREN          reduce using rule 45 (primaryExpression -> FALSE .)
    RANGE           reduce using rule 45 (primaryExpression -> FALSE .)
    COLON           reduce using rule 45 (primaryExpression -> FALSE .)


state 51

    (11) unaryExpression -> primaryExpression .

    DOT             reduce using rule 11 (unaryExpression -> primaryExpression .)
    PLUS_PLUS       reduce using rule 11 (unaryExpression -> primaryExpression .)
    MINUS_MINUS     reduce using rule 11 (unaryExpression -> primaryExpression .)
    LBRACKET        reduce using rule 11 (unaryExpression -> primaryExpression .)
    CARET           reduce using rule 11 (unaryExpression -> primaryExpression .)
    TIMES           reduce using rule 11 (unaryExpression -> primaryExpression .)
    DIV             reduce using rule 11 (unaryExpression -> primaryExpression .)
    MODULO          reduce using rule 11 (unaryExpression -> primaryExpression .)
    PLUS            reduce using rule 11 (unaryExpression -> primaryExpression .)
    MINUS           reduce using rule 11 (unaryExpression -> primaryExpression .)
    TILDE           reduce using rule 11 (unaryExpression -> primaryExpression .)
    RIGHT_SHIFT     reduce using rule 11 (unaryExpression -> primaryExpression .)
    LEFT_SHIFT      reduce using rule 11 (unaryExpression -> primaryExpression .)
    IS_EQ           reduce using rule 11 (unaryExpression -> primaryExpression .)
    NOT_EQ          reduce using rule 11 (unaryExpression -> primaryExpression .)
    AMPERSAND       reduce using rule 11 (unaryExpression -> primaryExpression .)
    PIPE            reduce using rule 11 (unaryExpression -> primaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 11 (unaryExpression -> primaryExpression .)
    QUESTION        reduce using rule 11 (unaryExpression -> primaryExpression .)
    DOUBLE_PIPE     reduce using rule 11 (unaryExpression -> primaryExpression .)
    ASSIGN          reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_LEFT         reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_RIGHT        reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_PLUS         reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_MINUS        reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_TIMES        reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_MODULO       reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_AND_BIT      reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_DIV          reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_OR_BIT       reduce using rule 11 (unaryExpression -> primaryExpression .)
    EQ_XOR_BIT      reduce using rule 11 (unaryExpression -> primaryExpression .)
    RBRACKET        reduce using rule 11 (unaryExpression -> primaryExpression .)
    COMMA           reduce using rule 11 (unaryExpression -> primaryExpression .)
    LESS            reduce using rule 11 (unaryExpression -> primaryExpression .)
    LESS_EQ         reduce using rule 11 (unaryExpression -> primaryExpression .)
    GREATER         reduce using rule 11 (unaryExpression -> primaryExpression .)
    GREATER_EQ      reduce using rule 11 (unaryExpression -> primaryExpression .)
    IS_EQ_DIFF      reduce using rule 11 (unaryExpression -> primaryExpression .)
    NOT_EQ_DIFF     reduce using rule 11 (unaryExpression -> primaryExpression .)
    LESS_EQ_DIFF    reduce using rule 11 (unaryExpression -> primaryExpression .)
    LESS_DIFF       reduce using rule 11 (unaryExpression -> primaryExpression .)
    GREATER_EQ_DIFF reduce using rule 11 (unaryExpression -> primaryExpression .)
    GREATER_DIFF    reduce using rule 11 (unaryExpression -> primaryExpression .)
    $end            reduce using rule 11 (unaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 11 (unaryExpression -> primaryExpression .)
    RANGE           reduce using rule 11 (unaryExpression -> primaryExpression .)
    COLON           reduce using rule 11 (unaryExpression -> primaryExpression .)
    LPAREN          reduce using rule 11 (unaryExpression -> primaryExpression .)


state 52

    (42) primaryExpression -> THIS .

    DOT             reduce using rule 42 (primaryExpression -> THIS .)
    PLUS_PLUS       reduce using rule 42 (primaryExpression -> THIS .)
    MINUS_MINUS     reduce using rule 42 (primaryExpression -> THIS .)
    LBRACKET        reduce using rule 42 (primaryExpression -> THIS .)
    LPAREN          reduce using rule 42 (primaryExpression -> THIS .)
    CARET           reduce using rule 42 (primaryExpression -> THIS .)
    TIMES           reduce using rule 42 (primaryExpression -> THIS .)
    DIV             reduce using rule 42 (primaryExpression -> THIS .)
    MODULO          reduce using rule 42 (primaryExpression -> THIS .)
    PLUS            reduce using rule 42 (primaryExpression -> THIS .)
    MINUS           reduce using rule 42 (primaryExpression -> THIS .)
    TILDE           reduce using rule 42 (primaryExpression -> THIS .)
    $end            reduce using rule 42 (primaryExpression -> THIS .)
    RIGHT_SHIFT     reduce using rule 42 (primaryExpression -> THIS .)
    LEFT_SHIFT      reduce using rule 42 (primaryExpression -> THIS .)
    IS_EQ           reduce using rule 42 (primaryExpression -> THIS .)
    NOT_EQ          reduce using rule 42 (primaryExpression -> THIS .)
    AMPERSAND       reduce using rule 42 (primaryExpression -> THIS .)
    PIPE            reduce using rule 42 (primaryExpression -> THIS .)
    DOUBLE_AMPERSAND reduce using rule 42 (primaryExpression -> THIS .)
    QUESTION        reduce using rule 42 (primaryExpression -> THIS .)
    DOUBLE_PIPE     reduce using rule 42 (primaryExpression -> THIS .)
    ASSIGN          reduce using rule 42 (primaryExpression -> THIS .)
    EQ_LEFT         reduce using rule 42 (primaryExpression -> THIS .)
    EQ_RIGHT        reduce using rule 42 (primaryExpression -> THIS .)
    EQ_PLUS         reduce using rule 42 (primaryExpression -> THIS .)
    EQ_MINUS        reduce using rule 42 (primaryExpression -> THIS .)
    EQ_TIMES        reduce using rule 42 (primaryExpression -> THIS .)
    EQ_MODULO       reduce using rule 42 (primaryExpression -> THIS .)
    EQ_AND_BIT      reduce using rule 42 (primaryExpression -> THIS .)
    EQ_DIV          reduce using rule 42 (primaryExpression -> THIS .)
    EQ_OR_BIT       reduce using rule 42 (primaryExpression -> THIS .)
    EQ_XOR_BIT      reduce using rule 42 (primaryExpression -> THIS .)
    COMMA           reduce using rule 42 (primaryExpression -> THIS .)
    RBRACKET        reduce using rule 42 (primaryExpression -> THIS .)
    LESS            reduce using rule 42 (primaryExpression -> THIS .)
    LESS_EQ         reduce using rule 42 (primaryExpression -> THIS .)
    GREATER         reduce using rule 42 (primaryExpression -> THIS .)
    GREATER_EQ      reduce using rule 42 (primaryExpression -> THIS .)
    IS_EQ_DIFF      reduce using rule 42 (primaryExpression -> THIS .)
    NOT_EQ_DIFF     reduce using rule 42 (primaryExpression -> THIS .)
    LESS_EQ_DIFF    reduce using rule 42 (primaryExpression -> THIS .)
    LESS_DIFF       reduce using rule 42 (primaryExpression -> THIS .)
    GREATER_EQ_DIFF reduce using rule 42 (primaryExpression -> THIS .)
    GREATER_DIFF    reduce using rule 42 (primaryExpression -> THIS .)
    RPAREN          reduce using rule 42 (primaryExpression -> THIS .)
    RANGE           reduce using rule 42 (primaryExpression -> THIS .)
    COLON           reduce using rule 42 (primaryExpression -> THIS .)


state 53

    (46) primaryExpression -> INUMBER .

    DOT             reduce using rule 46 (primaryExpression -> INUMBER .)
    PLUS_PLUS       reduce using rule 46 (primaryExpression -> INUMBER .)
    MINUS_MINUS     reduce using rule 46 (primaryExpression -> INUMBER .)
    LBRACKET        reduce using rule 46 (primaryExpression -> INUMBER .)
    LPAREN          reduce using rule 46 (primaryExpression -> INUMBER .)
    CARET           reduce using rule 46 (primaryExpression -> INUMBER .)
    TIMES           reduce using rule 46 (primaryExpression -> INUMBER .)
    DIV             reduce using rule 46 (primaryExpression -> INUMBER .)
    MODULO          reduce using rule 46 (primaryExpression -> INUMBER .)
    PLUS            reduce using rule 46 (primaryExpression -> INUMBER .)
    MINUS           reduce using rule 46 (primaryExpression -> INUMBER .)
    TILDE           reduce using rule 46 (primaryExpression -> INUMBER .)
    $end            reduce using rule 46 (primaryExpression -> INUMBER .)
    RIGHT_SHIFT     reduce using rule 46 (primaryExpression -> INUMBER .)
    LEFT_SHIFT      reduce using rule 46 (primaryExpression -> INUMBER .)
    IS_EQ           reduce using rule 46 (primaryExpression -> INUMBER .)
    NOT_EQ          reduce using rule 46 (primaryExpression -> INUMBER .)
    AMPERSAND       reduce using rule 46 (primaryExpression -> INUMBER .)
    PIPE            reduce using rule 46 (primaryExpression -> INUMBER .)
    DOUBLE_AMPERSAND reduce using rule 46 (primaryExpression -> INUMBER .)
    QUESTION        reduce using rule 46 (primaryExpression -> INUMBER .)
    DOUBLE_PIPE     reduce using rule 46 (primaryExpression -> INUMBER .)
    ASSIGN          reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_LEFT         reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_RIGHT        reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_PLUS         reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_MINUS        reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_TIMES        reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_MODULO       reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_AND_BIT      reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_DIV          reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_OR_BIT       reduce using rule 46 (primaryExpression -> INUMBER .)
    EQ_XOR_BIT      reduce using rule 46 (primaryExpression -> INUMBER .)
    COMMA           reduce using rule 46 (primaryExpression -> INUMBER .)
    RBRACKET        reduce using rule 46 (primaryExpression -> INUMBER .)
    LESS            reduce using rule 46 (primaryExpression -> INUMBER .)
    LESS_EQ         reduce using rule 46 (primaryExpression -> INUMBER .)
    GREATER         reduce using rule 46 (primaryExpression -> INUMBER .)
    GREATER_EQ      reduce using rule 46 (primaryExpression -> INUMBER .)
    IS_EQ_DIFF      reduce using rule 46 (primaryExpression -> INUMBER .)
    NOT_EQ_DIFF     reduce using rule 46 (primaryExpression -> INUMBER .)
    LESS_EQ_DIFF    reduce using rule 46 (primaryExpression -> INUMBER .)
    LESS_DIFF       reduce using rule 46 (primaryExpression -> INUMBER .)
    GREATER_EQ_DIFF reduce using rule 46 (primaryExpression -> INUMBER .)
    GREATER_DIFF    reduce using rule 46 (primaryExpression -> INUMBER .)
    RPAREN          reduce using rule 46 (primaryExpression -> INUMBER .)
    RANGE           reduce using rule 46 (primaryExpression -> INUMBER .)
    COLON           reduce using rule 46 (primaryExpression -> INUMBER .)


state 54

    (38) primaryExpression -> functionLiteralExpression .

    DOT             reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    PLUS_PLUS       reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    MINUS_MINUS     reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    LBRACKET        reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    LPAREN          reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    CARET           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    TIMES           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    DIV             reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    MODULO          reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    PLUS            reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    MINUS           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    TILDE           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    $end            reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    RIGHT_SHIFT     reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    LEFT_SHIFT      reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    IS_EQ           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    NOT_EQ          reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    AMPERSAND       reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    PIPE            reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    DOUBLE_AMPERSAND reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    QUESTION        reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    DOUBLE_PIPE     reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    ASSIGN          reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_LEFT         reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_RIGHT        reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_PLUS         reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_MINUS        reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_TIMES        reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_MODULO       reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_AND_BIT      reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_DIV          reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_OR_BIT       reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    EQ_XOR_BIT      reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    COMMA           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    RBRACKET        reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    LESS            reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    LESS_EQ         reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    GREATER         reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    GREATER_EQ      reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    IS_EQ_DIFF      reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    NOT_EQ_DIFF     reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    LESS_EQ_DIFF    reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    LESS_DIFF       reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    GREATER_EQ_DIFF reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    GREATER_DIFF    reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    RPAREN          reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    RANGE           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)
    COLON           reduce using rule 38 (primaryExpression -> functionLiteralExpression .)


state 55

    (78) builtinType -> INT .

    DOT             reduce using rule 78 (builtinType -> INT .)
    LPAREN          reduce using rule 78 (builtinType -> INT .)
    PLUS_PLUS       reduce using rule 78 (builtinType -> INT .)
    MINUS_MINUS     reduce using rule 78 (builtinType -> INT .)
    LBRACKET        reduce using rule 78 (builtinType -> INT .)
    CARET           reduce using rule 78 (builtinType -> INT .)
    TIMES           reduce using rule 78 (builtinType -> INT .)
    DIV             reduce using rule 78 (builtinType -> INT .)
    MODULO          reduce using rule 78 (builtinType -> INT .)
    PLUS            reduce using rule 78 (builtinType -> INT .)
    MINUS           reduce using rule 78 (builtinType -> INT .)
    TILDE           reduce using rule 78 (builtinType -> INT .)
    $end            reduce using rule 78 (builtinType -> INT .)
    RIGHT_SHIFT     reduce using rule 78 (builtinType -> INT .)
    LEFT_SHIFT      reduce using rule 78 (builtinType -> INT .)
    IS_EQ           reduce using rule 78 (builtinType -> INT .)
    NOT_EQ          reduce using rule 78 (builtinType -> INT .)
    AMPERSAND       reduce using rule 78 (builtinType -> INT .)
    PIPE            reduce using rule 78 (builtinType -> INT .)
    DOUBLE_AMPERSAND reduce using rule 78 (builtinType -> INT .)
    QUESTION        reduce using rule 78 (builtinType -> INT .)
    DOUBLE_PIPE     reduce using rule 78 (builtinType -> INT .)
    ASSIGN          reduce using rule 78 (builtinType -> INT .)
    EQ_LEFT         reduce using rule 78 (builtinType -> INT .)
    EQ_RIGHT        reduce using rule 78 (builtinType -> INT .)
    EQ_PLUS         reduce using rule 78 (builtinType -> INT .)
    EQ_MINUS        reduce using rule 78 (builtinType -> INT .)
    EQ_TIMES        reduce using rule 78 (builtinType -> INT .)
    EQ_MODULO       reduce using rule 78 (builtinType -> INT .)
    EQ_AND_BIT      reduce using rule 78 (builtinType -> INT .)
    EQ_DIV          reduce using rule 78 (builtinType -> INT .)
    EQ_OR_BIT       reduce using rule 78 (builtinType -> INT .)
    EQ_XOR_BIT      reduce using rule 78 (builtinType -> INT .)
    COMMA           reduce using rule 78 (builtinType -> INT .)
    RBRACKET        reduce using rule 78 (builtinType -> INT .)
    LESS            reduce using rule 78 (builtinType -> INT .)
    LESS_EQ         reduce using rule 78 (builtinType -> INT .)
    GREATER         reduce using rule 78 (builtinType -> INT .)
    GREATER_EQ      reduce using rule 78 (builtinType -> INT .)
    IS_EQ_DIFF      reduce using rule 78 (builtinType -> INT .)
    NOT_EQ_DIFF     reduce using rule 78 (builtinType -> INT .)
    LESS_EQ_DIFF    reduce using rule 78 (builtinType -> INT .)
    LESS_DIFF       reduce using rule 78 (builtinType -> INT .)
    GREATER_EQ_DIFF reduce using rule 78 (builtinType -> INT .)
    GREATER_DIFF    reduce using rule 78 (builtinType -> INT .)
    RPAREN          reduce using rule 78 (builtinType -> INT .)
    RANGE           reduce using rule 78 (builtinType -> INT .)
    COLON           reduce using rule 78 (builtinType -> INT .)


state 56

    (114) LIT_STRPlus -> LIT_STR . LIT_STRPlus
    (115) LIT_STRPlus -> LIT_STR .
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR

    DOT             reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    PLUS_PLUS       reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    MINUS_MINUS     reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LBRACKET        reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    CARET           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    TIMES           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    DIV             reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    MODULO          reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    PLUS            reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    MINUS           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    TILDE           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    $end            reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    RIGHT_SHIFT     reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LEFT_SHIFT      reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    IS_EQ           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ          reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    AMPERSAND       reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    PIPE            reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_AMPERSAND reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    QUESTION        reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    DOUBLE_PIPE     reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    ASSIGN          reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_LEFT         reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_RIGHT        reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_PLUS         reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_MINUS        reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_TIMES        reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_MODULO       reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_AND_BIT      reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_DIV          reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_OR_BIT       reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    EQ_XOR_BIT      reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    COMMA           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    RBRACKET        reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LESS            reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ         reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    GREATER         reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ      reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    IS_EQ_DIFF      reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    NOT_EQ_DIFF     reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LESS_EQ_DIFF    reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LESS_DIFF       reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    GREATER_EQ_DIFF reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    GREATER_DIFF    reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    RPAREN          reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    RANGE           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    COLON           reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LPAREN          reduce using rule 115 (LIT_STRPlus -> LIT_STR .)
    LIT_STR         shift and go to state 56

    LIT_STRPlus                    shift and go to state 129

state 57

    (40) primaryExpression -> importExpression .

    DOT             reduce using rule 40 (primaryExpression -> importExpression .)
    PLUS_PLUS       reduce using rule 40 (primaryExpression -> importExpression .)
    MINUS_MINUS     reduce using rule 40 (primaryExpression -> importExpression .)
    LBRACKET        reduce using rule 40 (primaryExpression -> importExpression .)
    LPAREN          reduce using rule 40 (primaryExpression -> importExpression .)
    CARET           reduce using rule 40 (primaryExpression -> importExpression .)
    TIMES           reduce using rule 40 (primaryExpression -> importExpression .)
    DIV             reduce using rule 40 (primaryExpression -> importExpression .)
    MODULO          reduce using rule 40 (primaryExpression -> importExpression .)
    PLUS            reduce using rule 40 (primaryExpression -> importExpression .)
    MINUS           reduce using rule 40 (primaryExpression -> importExpression .)
    TILDE           reduce using rule 40 (primaryExpression -> importExpression .)
    $end            reduce using rule 40 (primaryExpression -> importExpression .)
    RIGHT_SHIFT     reduce using rule 40 (primaryExpression -> importExpression .)
    LEFT_SHIFT      reduce using rule 40 (primaryExpression -> importExpression .)
    IS_EQ           reduce using rule 40 (primaryExpression -> importExpression .)
    NOT_EQ          reduce using rule 40 (primaryExpression -> importExpression .)
    AMPERSAND       reduce using rule 40 (primaryExpression -> importExpression .)
    PIPE            reduce using rule 40 (primaryExpression -> importExpression .)
    DOUBLE_AMPERSAND reduce using rule 40 (primaryExpression -> importExpression .)
    QUESTION        reduce using rule 40 (primaryExpression -> importExpression .)
    DOUBLE_PIPE     reduce using rule 40 (primaryExpression -> importExpression .)
    ASSIGN          reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_LEFT         reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_RIGHT        reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_PLUS         reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_MINUS        reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_TIMES        reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_MODULO       reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_AND_BIT      reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_DIV          reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_OR_BIT       reduce using rule 40 (primaryExpression -> importExpression .)
    EQ_XOR_BIT      reduce using rule 40 (primaryExpression -> importExpression .)
    COMMA           reduce using rule 40 (primaryExpression -> importExpression .)
    RBRACKET        reduce using rule 40 (primaryExpression -> importExpression .)
    LESS            reduce using rule 40 (primaryExpression -> importExpression .)
    LESS_EQ         reduce using rule 40 (primaryExpression -> importExpression .)
    GREATER         reduce using rule 40 (primaryExpression -> importExpression .)
    GREATER_EQ      reduce using rule 40 (primaryExpression -> importExpression .)
    IS_EQ_DIFF      reduce using rule 40 (primaryExpression -> importExpression .)
    NOT_EQ_DIFF     reduce using rule 40 (primaryExpression -> importExpression .)
    LESS_EQ_DIFF    reduce using rule 40 (primaryExpression -> importExpression .)
    LESS_DIFF       reduce using rule 40 (primaryExpression -> importExpression .)
    GREATER_EQ_DIFF reduce using rule 40 (primaryExpression -> importExpression .)
    GREATER_DIFF    reduce using rule 40 (primaryExpression -> importExpression .)
    RPAREN          reduce using rule 40 (primaryExpression -> importExpression .)
    RANGE           reduce using rule 40 (primaryExpression -> importExpression .)
    COLON           reduce using rule 40 (primaryExpression -> importExpression .)


state 58

    (112) mixinExpression -> MIXIN . LPAREN assignExpression RPAREN

    LPAREN          shift and go to state 130


state 59

    (75) builtinType -> BOOL .

    DOT             reduce using rule 75 (builtinType -> BOOL .)
    LPAREN          reduce using rule 75 (builtinType -> BOOL .)
    PLUS_PLUS       reduce using rule 75 (builtinType -> BOOL .)
    MINUS_MINUS     reduce using rule 75 (builtinType -> BOOL .)
    LBRACKET        reduce using rule 75 (builtinType -> BOOL .)
    CARET           reduce using rule 75 (builtinType -> BOOL .)
    TIMES           reduce using rule 75 (builtinType -> BOOL .)
    DIV             reduce using rule 75 (builtinType -> BOOL .)
    MODULO          reduce using rule 75 (builtinType -> BOOL .)
    PLUS            reduce using rule 75 (builtinType -> BOOL .)
    MINUS           reduce using rule 75 (builtinType -> BOOL .)
    TILDE           reduce using rule 75 (builtinType -> BOOL .)
    $end            reduce using rule 75 (builtinType -> BOOL .)
    RIGHT_SHIFT     reduce using rule 75 (builtinType -> BOOL .)
    LEFT_SHIFT      reduce using rule 75 (builtinType -> BOOL .)
    IS_EQ           reduce using rule 75 (builtinType -> BOOL .)
    NOT_EQ          reduce using rule 75 (builtinType -> BOOL .)
    AMPERSAND       reduce using rule 75 (builtinType -> BOOL .)
    PIPE            reduce using rule 75 (builtinType -> BOOL .)
    DOUBLE_AMPERSAND reduce using rule 75 (builtinType -> BOOL .)
    QUESTION        reduce using rule 75 (builtinType -> BOOL .)
    DOUBLE_PIPE     reduce using rule 75 (builtinType -> BOOL .)
    ASSIGN          reduce using rule 75 (builtinType -> BOOL .)
    EQ_LEFT         reduce using rule 75 (builtinType -> BOOL .)
    EQ_RIGHT        reduce using rule 75 (builtinType -> BOOL .)
    EQ_PLUS         reduce using rule 75 (builtinType -> BOOL .)
    EQ_MINUS        reduce using rule 75 (builtinType -> BOOL .)
    EQ_TIMES        reduce using rule 75 (builtinType -> BOOL .)
    EQ_MODULO       reduce using rule 75 (builtinType -> BOOL .)
    EQ_AND_BIT      reduce using rule 75 (builtinType -> BOOL .)
    EQ_DIV          reduce using rule 75 (builtinType -> BOOL .)
    EQ_OR_BIT       reduce using rule 75 (builtinType -> BOOL .)
    EQ_XOR_BIT      reduce using rule 75 (builtinType -> BOOL .)
    COMMA           reduce using rule 75 (builtinType -> BOOL .)
    RBRACKET        reduce using rule 75 (builtinType -> BOOL .)
    LESS            reduce using rule 75 (builtinType -> BOOL .)
    LESS_EQ         reduce using rule 75 (builtinType -> BOOL .)
    GREATER         reduce using rule 75 (builtinType -> BOOL .)
    GREATER_EQ      reduce using rule 75 (builtinType -> BOOL .)
    IS_EQ_DIFF      reduce using rule 75 (builtinType -> BOOL .)
    NOT_EQ_DIFF     reduce using rule 75 (builtinType -> BOOL .)
    LESS_EQ_DIFF    reduce using rule 75 (builtinType -> BOOL .)
    LESS_DIFF       reduce using rule 75 (builtinType -> BOOL .)
    GREATER_EQ_DIFF reduce using rule 75 (builtinType -> BOOL .)
    GREATER_DIFF    reduce using rule 75 (builtinType -> BOOL .)
    RPAREN          reduce using rule 75 (builtinType -> BOOL .)
    RANGE           reduce using rule 75 (builtinType -> BOOL .)
    COLON           reduce using rule 75 (builtinType -> BOOL .)


state 60

    (104) functionBody -> empty .

    DOT             reduce using rule 104 (functionBody -> empty .)
    PLUS_PLUS       reduce using rule 104 (functionBody -> empty .)
    MINUS_MINUS     reduce using rule 104 (functionBody -> empty .)
    LBRACKET        reduce using rule 104 (functionBody -> empty .)
    CARET           reduce using rule 104 (functionBody -> empty .)
    TIMES           reduce using rule 104 (functionBody -> empty .)
    DIV             reduce using rule 104 (functionBody -> empty .)
    MODULO          reduce using rule 104 (functionBody -> empty .)
    PLUS            reduce using rule 104 (functionBody -> empty .)
    MINUS           reduce using rule 104 (functionBody -> empty .)
    TILDE           reduce using rule 104 (functionBody -> empty .)
    $end            reduce using rule 104 (functionBody -> empty .)
    RIGHT_SHIFT     reduce using rule 104 (functionBody -> empty .)
    LEFT_SHIFT      reduce using rule 104 (functionBody -> empty .)
    IS_EQ           reduce using rule 104 (functionBody -> empty .)
    NOT_EQ          reduce using rule 104 (functionBody -> empty .)
    AMPERSAND       reduce using rule 104 (functionBody -> empty .)
    PIPE            reduce using rule 104 (functionBody -> empty .)
    DOUBLE_AMPERSAND reduce using rule 104 (functionBody -> empty .)
    QUESTION        reduce using rule 104 (functionBody -> empty .)
    DOUBLE_PIPE     reduce using rule 104 (functionBody -> empty .)
    ASSIGN          reduce using rule 104 (functionBody -> empty .)
    EQ_LEFT         reduce using rule 104 (functionBody -> empty .)
    EQ_RIGHT        reduce using rule 104 (functionBody -> empty .)
    EQ_PLUS         reduce using rule 104 (functionBody -> empty .)
    EQ_MINUS        reduce using rule 104 (functionBody -> empty .)
    EQ_TIMES        reduce using rule 104 (functionBody -> empty .)
    EQ_MODULO       reduce using rule 104 (functionBody -> empty .)
    EQ_AND_BIT      reduce using rule 104 (functionBody -> empty .)
    EQ_DIV          reduce using rule 104 (functionBody -> empty .)
    EQ_OR_BIT       reduce using rule 104 (functionBody -> empty .)
    EQ_XOR_BIT      reduce using rule 104 (functionBody -> empty .)
    COMMA           reduce using rule 104 (functionBody -> empty .)
    RBRACKET        reduce using rule 104 (functionBody -> empty .)
    LESS            reduce using rule 104 (functionBody -> empty .)
    LESS_EQ         reduce using rule 104 (functionBody -> empty .)
    GREATER         reduce using rule 104 (functionBody -> empty .)
    GREATER_EQ      reduce using rule 104 (functionBody -> empty .)
    IS_EQ_DIFF      reduce using rule 104 (functionBody -> empty .)
    NOT_EQ_DIFF     reduce using rule 104 (functionBody -> empty .)
    LESS_EQ_DIFF    reduce using rule 104 (functionBody -> empty .)
    LESS_DIFF       reduce using rule 104 (functionBody -> empty .)
    GREATER_EQ_DIFF reduce using rule 104 (functionBody -> empty .)
    GREATER_DIFF    reduce using rule 104 (functionBody -> empty .)
    RPAREN          reduce using rule 104 (functionBody -> empty .)
    RANGE           reduce using rule 104 (functionBody -> empty .)
    COLON           reduce using rule 104 (functionBody -> empty .)
    LPAREN          reduce using rule 104 (functionBody -> empty .)


state 61

    (18) unaryExpression -> PLUS_PLUS . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 131
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 62

    (5) mulExpression -> powExpression .
    (10) powExpression -> powExpression . CARET unaryExpression

  ! shift/reduce conflict for CARET resolved as shift
    TIMES           reduce using rule 5 (mulExpression -> powExpression .)
    DIV             reduce using rule 5 (mulExpression -> powExpression .)
    MODULO          reduce using rule 5 (mulExpression -> powExpression .)
    PLUS            reduce using rule 5 (mulExpression -> powExpression .)
    MINUS           reduce using rule 5 (mulExpression -> powExpression .)
    TILDE           reduce using rule 5 (mulExpression -> powExpression .)
    RIGHT_SHIFT     reduce using rule 5 (mulExpression -> powExpression .)
    LEFT_SHIFT      reduce using rule 5 (mulExpression -> powExpression .)
    IS_EQ           reduce using rule 5 (mulExpression -> powExpression .)
    NOT_EQ          reduce using rule 5 (mulExpression -> powExpression .)
    AMPERSAND       reduce using rule 5 (mulExpression -> powExpression .)
    PIPE            reduce using rule 5 (mulExpression -> powExpression .)
    DOUBLE_AMPERSAND reduce using rule 5 (mulExpression -> powExpression .)
    QUESTION        reduce using rule 5 (mulExpression -> powExpression .)
    DOUBLE_PIPE     reduce using rule 5 (mulExpression -> powExpression .)
    ASSIGN          reduce using rule 5 (mulExpression -> powExpression .)
    EQ_LEFT         reduce using rule 5 (mulExpression -> powExpression .)
    EQ_RIGHT        reduce using rule 5 (mulExpression -> powExpression .)
    EQ_PLUS         reduce using rule 5 (mulExpression -> powExpression .)
    EQ_MINUS        reduce using rule 5 (mulExpression -> powExpression .)
    EQ_TIMES        reduce using rule 5 (mulExpression -> powExpression .)
    EQ_MODULO       reduce using rule 5 (mulExpression -> powExpression .)
    EQ_AND_BIT      reduce using rule 5 (mulExpression -> powExpression .)
    EQ_DIV          reduce using rule 5 (mulExpression -> powExpression .)
    EQ_OR_BIT       reduce using rule 5 (mulExpression -> powExpression .)
    EQ_XOR_BIT      reduce using rule 5 (mulExpression -> powExpression .)
    RANGE           reduce using rule 5 (mulExpression -> powExpression .)
    COMMA           reduce using rule 5 (mulExpression -> powExpression .)
    RBRACKET        reduce using rule 5 (mulExpression -> powExpression .)
    LESS            reduce using rule 5 (mulExpression -> powExpression .)
    LESS_EQ         reduce using rule 5 (mulExpression -> powExpression .)
    GREATER         reduce using rule 5 (mulExpression -> powExpression .)
    GREATER_EQ      reduce using rule 5 (mulExpression -> powExpression .)
    IS_EQ_DIFF      reduce using rule 5 (mulExpression -> powExpression .)
    NOT_EQ_DIFF     reduce using rule 5 (mulExpression -> powExpression .)
    LESS_EQ_DIFF    reduce using rule 5 (mulExpression -> powExpression .)
    LESS_DIFF       reduce using rule 5 (mulExpression -> powExpression .)
    GREATER_EQ_DIFF reduce using rule 5 (mulExpression -> powExpression .)
    GREATER_DIFF    reduce using rule 5 (mulExpression -> powExpression .)
    DOT             reduce using rule 5 (mulExpression -> powExpression .)
    PLUS_PLUS       reduce using rule 5 (mulExpression -> powExpression .)
    MINUS_MINUS     reduce using rule 5 (mulExpression -> powExpression .)
    LBRACKET        reduce using rule 5 (mulExpression -> powExpression .)
    $end            reduce using rule 5 (mulExpression -> powExpression .)
    RPAREN          reduce using rule 5 (mulExpression -> powExpression .)
    COLON           reduce using rule 5 (mulExpression -> powExpression .)
    LPAREN          reduce using rule 5 (mulExpression -> powExpression .)
    CARET           shift and go to state 132

  ! CARET           [ reduce using rule 5 (mulExpression -> powExpression .) ]


state 63

    (33) primaryExpression -> typeConstructor . LPAREN type RPAREN DOT IDENTIFIER
    (93) typeConstructors -> typeConstructor .
    (94) typeConstructors -> typeConstructor . typeConstructors
    (90) type2 -> typeConstructor . LBRACKET type RBRACKET
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    LPAREN          shift and go to state 135
    BOOL            reduce using rule 93 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 93 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 93 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 93 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 93 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 93 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 93 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 93 (typeConstructors -> typeConstructor .)
    LBRACKET        shift and go to state 134
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23

  ! CONST           [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 133
    typeConstructors               shift and go to state 136

state 64

    (49) primaryExpression -> LIT_CHAR .

    DOT             reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    PLUS_PLUS       reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    MINUS_MINUS     reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    LBRACKET        reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    LPAREN          reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    CARET           reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    TIMES           reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    DIV             reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    MODULO          reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    PLUS            reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    MINUS           reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    TILDE           reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    $end            reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    RIGHT_SHIFT     reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    LEFT_SHIFT      reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    IS_EQ           reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    NOT_EQ          reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    AMPERSAND       reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    PIPE            reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    DOUBLE_AMPERSAND reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    QUESTION        reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    DOUBLE_PIPE     reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    ASSIGN          reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_LEFT         reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_RIGHT        reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_PLUS         reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_MINUS        reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_TIMES        reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_MODULO       reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_AND_BIT      reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_DIV          reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_OR_BIT       reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    EQ_XOR_BIT      reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    COMMA           reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    RBRACKET        reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    LESS            reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    LESS_EQ         reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    GREATER         reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    GREATER_EQ      reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    IS_EQ_DIFF      reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    NOT_EQ_DIFF     reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    LESS_EQ_DIFF    reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    LESS_DIFF       reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    GREATER_EQ_DIFF reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    GREATER_DIFF    reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    RPAREN          reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    RANGE           reduce using rule 49 (primaryExpression -> LIT_CHAR .)
    COLON           reduce using rule 49 (primaryExpression -> LIT_CHAR .)


state 65

    (53) deleteExpression -> DELETE . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 137
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 66

    (13) unaryExpression -> EXCLAMATION unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    TIMES           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    DIV             reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    MODULO          reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    PLUS            reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    MINUS           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    TILDE           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    RIGHT_SHIFT     reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    LEFT_SHIFT      reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    IS_EQ           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    NOT_EQ          reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    AMPERSAND       reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    PIPE            reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    QUESTION        reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOUBLE_PIPE     reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    ASSIGN          reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_LEFT         reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_RIGHT        reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_PLUS         reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_MINUS        reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_TIMES        reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_MODULO       reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_AND_BIT      reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_DIV          reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_OR_BIT       reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    EQ_XOR_BIT      reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    RBRACKET        reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    COMMA           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS            reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_EQ         reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER         reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_EQ      reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    IS_EQ_DIFF      reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    LESS_DIFF       reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    GREATER_DIFF    reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    $end            reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    RPAREN          reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    RANGE           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    COLON           reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    LPAREN          reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 13 (unaryExpression -> EXCLAMATION unaryExpression .) ]


state 67

    (64) identifierOrTemplateChain -> identifierOrTemplateChain DOT . identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 86

    identifierOrTemplateInstance   shift and go to state 138

state 68

    (135) orExpression -> xorExpression .
    (138) xorExpression -> xorExpression . CARET andExpression

  ! shift/reduce conflict for CARET resolved as shift
    PIPE            reduce using rule 135 (orExpression -> xorExpression .)
    DOUBLE_AMPERSAND reduce using rule 135 (orExpression -> xorExpression .)
    QUESTION        reduce using rule 135 (orExpression -> xorExpression .)
    DOUBLE_PIPE     reduce using rule 135 (orExpression -> xorExpression .)
    ASSIGN          reduce using rule 135 (orExpression -> xorExpression .)
    EQ_LEFT         reduce using rule 135 (orExpression -> xorExpression .)
    EQ_RIGHT        reduce using rule 135 (orExpression -> xorExpression .)
    EQ_PLUS         reduce using rule 135 (orExpression -> xorExpression .)
    EQ_MINUS        reduce using rule 135 (orExpression -> xorExpression .)
    EQ_TIMES        reduce using rule 135 (orExpression -> xorExpression .)
    EQ_MODULO       reduce using rule 135 (orExpression -> xorExpression .)
    EQ_AND_BIT      reduce using rule 135 (orExpression -> xorExpression .)
    EQ_DIV          reduce using rule 135 (orExpression -> xorExpression .)
    EQ_OR_BIT       reduce using rule 135 (orExpression -> xorExpression .)
    EQ_XOR_BIT      reduce using rule 135 (orExpression -> xorExpression .)
    RANGE           reduce using rule 135 (orExpression -> xorExpression .)
    COMMA           reduce using rule 135 (orExpression -> xorExpression .)
    RBRACKET        reduce using rule 135 (orExpression -> xorExpression .)
    DOT             reduce using rule 135 (orExpression -> xorExpression .)
    PLUS_PLUS       reduce using rule 135 (orExpression -> xorExpression .)
    MINUS_MINUS     reduce using rule 135 (orExpression -> xorExpression .)
    LBRACKET        reduce using rule 135 (orExpression -> xorExpression .)
    TIMES           reduce using rule 135 (orExpression -> xorExpression .)
    DIV             reduce using rule 135 (orExpression -> xorExpression .)
    MODULO          reduce using rule 135 (orExpression -> xorExpression .)
    PLUS            reduce using rule 135 (orExpression -> xorExpression .)
    MINUS           reduce using rule 135 (orExpression -> xorExpression .)
    TILDE           reduce using rule 135 (orExpression -> xorExpression .)
    $end            reduce using rule 135 (orExpression -> xorExpression .)
    RIGHT_SHIFT     reduce using rule 135 (orExpression -> xorExpression .)
    LEFT_SHIFT      reduce using rule 135 (orExpression -> xorExpression .)
    IS_EQ           reduce using rule 135 (orExpression -> xorExpression .)
    NOT_EQ          reduce using rule 135 (orExpression -> xorExpression .)
    AMPERSAND       reduce using rule 135 (orExpression -> xorExpression .)
    LESS            reduce using rule 135 (orExpression -> xorExpression .)
    LESS_EQ         reduce using rule 135 (orExpression -> xorExpression .)
    GREATER         reduce using rule 135 (orExpression -> xorExpression .)
    GREATER_EQ      reduce using rule 135 (orExpression -> xorExpression .)
    IS_EQ_DIFF      reduce using rule 135 (orExpression -> xorExpression .)
    NOT_EQ_DIFF     reduce using rule 135 (orExpression -> xorExpression .)
    LESS_EQ_DIFF    reduce using rule 135 (orExpression -> xorExpression .)
    LESS_DIFF       reduce using rule 135 (orExpression -> xorExpression .)
    GREATER_EQ_DIFF reduce using rule 135 (orExpression -> xorExpression .)
    GREATER_DIFF    reduce using rule 135 (orExpression -> xorExpression .)
    RPAREN          reduce using rule 135 (orExpression -> xorExpression .)
    COLON           reduce using rule 135 (orExpression -> xorExpression .)
    LPAREN          reduce using rule 135 (orExpression -> xorExpression .)
    CARET           shift and go to state 139

  ! CARET           [ reduce using rule 135 (orExpression -> xorExpression .) ]


state 69

    (143) cmpExpression -> relExpression .
    (150) relExpression -> relExpression . relOperator shiftExpression
    (151) relOperator -> . LESS
    (152) relOperator -> . LESS_EQ
    (153) relOperator -> . GREATER
    (154) relOperator -> . GREATER_EQ
    (155) relOperator -> . IS_EQ_DIFF
    (156) relOperator -> . NOT_EQ_DIFF
    (157) relOperator -> . LESS_EQ_DIFF
    (158) relOperator -> . LESS_DIFF
    (159) relOperator -> . GREATER_EQ_DIFF
    (160) relOperator -> . GREATER_DIFF

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
  ! shift/reduce conflict for IS_EQ_DIFF resolved as shift
  ! shift/reduce conflict for NOT_EQ_DIFF resolved as shift
  ! shift/reduce conflict for LESS_EQ_DIFF resolved as shift
  ! shift/reduce conflict for LESS_DIFF resolved as shift
  ! shift/reduce conflict for GREATER_EQ_DIFF resolved as shift
  ! shift/reduce conflict for GREATER_DIFF resolved as shift
    DOT             reduce using rule 143 (cmpExpression -> relExpression .)
    PLUS_PLUS       reduce using rule 143 (cmpExpression -> relExpression .)
    MINUS_MINUS     reduce using rule 143 (cmpExpression -> relExpression .)
    LBRACKET        reduce using rule 143 (cmpExpression -> relExpression .)
    CARET           reduce using rule 143 (cmpExpression -> relExpression .)
    TIMES           reduce using rule 143 (cmpExpression -> relExpression .)
    DIV             reduce using rule 143 (cmpExpression -> relExpression .)
    MODULO          reduce using rule 143 (cmpExpression -> relExpression .)
    PLUS            reduce using rule 143 (cmpExpression -> relExpression .)
    MINUS           reduce using rule 143 (cmpExpression -> relExpression .)
    TILDE           reduce using rule 143 (cmpExpression -> relExpression .)
    $end            reduce using rule 143 (cmpExpression -> relExpression .)
    RIGHT_SHIFT     reduce using rule 143 (cmpExpression -> relExpression .)
    LEFT_SHIFT      reduce using rule 143 (cmpExpression -> relExpression .)
    IS_EQ           reduce using rule 143 (cmpExpression -> relExpression .)
    NOT_EQ          reduce using rule 143 (cmpExpression -> relExpression .)
    AMPERSAND       reduce using rule 143 (cmpExpression -> relExpression .)
    PIPE            reduce using rule 143 (cmpExpression -> relExpression .)
    DOUBLE_AMPERSAND reduce using rule 143 (cmpExpression -> relExpression .)
    QUESTION        reduce using rule 143 (cmpExpression -> relExpression .)
    DOUBLE_PIPE     reduce using rule 143 (cmpExpression -> relExpression .)
    ASSIGN          reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_LEFT         reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_RIGHT        reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_PLUS         reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_MINUS        reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_TIMES        reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_MODULO       reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_AND_BIT      reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_DIV          reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_OR_BIT       reduce using rule 143 (cmpExpression -> relExpression .)
    EQ_XOR_BIT      reduce using rule 143 (cmpExpression -> relExpression .)
    COMMA           reduce using rule 143 (cmpExpression -> relExpression .)
    RBRACKET        reduce using rule 143 (cmpExpression -> relExpression .)
    RPAREN          reduce using rule 143 (cmpExpression -> relExpression .)
    RANGE           reduce using rule 143 (cmpExpression -> relExpression .)
    COLON           reduce using rule 143 (cmpExpression -> relExpression .)
    LPAREN          reduce using rule 143 (cmpExpression -> relExpression .)
    LESS            shift and go to state 143
    LESS_EQ         shift and go to state 140
    GREATER         shift and go to state 142
    GREATER_EQ      shift and go to state 146
    IS_EQ_DIFF      shift and go to state 145
    NOT_EQ_DIFF     shift and go to state 147
    LESS_EQ_DIFF    shift and go to state 149
    LESS_DIFF       shift and go to state 144
    GREATER_EQ_DIFF shift and go to state 141
    GREATER_DIFF    shift and go to state 148

  ! LESS            [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! LESS_EQ         [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! GREATER         [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! GREATER_EQ      [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! IS_EQ_DIFF      [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! LESS_DIFF       [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 143 (cmpExpression -> relExpression .) ]
  ! GREATER_DIFF    [ reduce using rule 143 (cmpExpression -> relExpression .) ]

    relOperator                    shift and go to state 150

state 70

    (105) arrayLiteral -> LBRACKET argumentList_question . RBRACKET

    RBRACKET        shift and go to state 151


state 71

    (131) orOrExpression -> andAndExpression .
    (134) andAndExpression -> andAndExpression . DOUBLE_AMPERSAND orExpression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
    QUESTION        reduce using rule 131 (orOrExpression -> andAndExpression .)
    DOUBLE_PIPE     reduce using rule 131 (orOrExpression -> andAndExpression .)
    ASSIGN          reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_LEFT         reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_RIGHT        reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_PLUS         reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_MINUS        reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_TIMES        reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_MODULO       reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_AND_BIT      reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_DIV          reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_OR_BIT       reduce using rule 131 (orOrExpression -> andAndExpression .)
    EQ_XOR_BIT      reduce using rule 131 (orOrExpression -> andAndExpression .)
    COMMA           reduce using rule 131 (orOrExpression -> andAndExpression .)
    RBRACKET        reduce using rule 131 (orOrExpression -> andAndExpression .)
    DOT             reduce using rule 131 (orOrExpression -> andAndExpression .)
    PLUS_PLUS       reduce using rule 131 (orOrExpression -> andAndExpression .)
    MINUS_MINUS     reduce using rule 131 (orOrExpression -> andAndExpression .)
    LBRACKET        reduce using rule 131 (orOrExpression -> andAndExpression .)
    CARET           reduce using rule 131 (orOrExpression -> andAndExpression .)
    TIMES           reduce using rule 131 (orOrExpression -> andAndExpression .)
    DIV             reduce using rule 131 (orOrExpression -> andAndExpression .)
    MODULO          reduce using rule 131 (orOrExpression -> andAndExpression .)
    PLUS            reduce using rule 131 (orOrExpression -> andAndExpression .)
    MINUS           reduce using rule 131 (orOrExpression -> andAndExpression .)
    TILDE           reduce using rule 131 (orOrExpression -> andAndExpression .)
    $end            reduce using rule 131 (orOrExpression -> andAndExpression .)
    RIGHT_SHIFT     reduce using rule 131 (orOrExpression -> andAndExpression .)
    LEFT_SHIFT      reduce using rule 131 (orOrExpression -> andAndExpression .)
    IS_EQ           reduce using rule 131 (orOrExpression -> andAndExpression .)
    NOT_EQ          reduce using rule 131 (orOrExpression -> andAndExpression .)
    AMPERSAND       reduce using rule 131 (orOrExpression -> andAndExpression .)
    PIPE            reduce using rule 131 (orOrExpression -> andAndExpression .)
    LESS            reduce using rule 131 (orOrExpression -> andAndExpression .)
    LESS_EQ         reduce using rule 131 (orOrExpression -> andAndExpression .)
    GREATER         reduce using rule 131 (orOrExpression -> andAndExpression .)
    GREATER_EQ      reduce using rule 131 (orOrExpression -> andAndExpression .)
    IS_EQ_DIFF      reduce using rule 131 (orOrExpression -> andAndExpression .)
    NOT_EQ_DIFF     reduce using rule 131 (orOrExpression -> andAndExpression .)
    LESS_EQ_DIFF    reduce using rule 131 (orOrExpression -> andAndExpression .)
    LESS_DIFF       reduce using rule 131 (orOrExpression -> andAndExpression .)
    GREATER_EQ_DIFF reduce using rule 131 (orOrExpression -> andAndExpression .)
    GREATER_DIFF    reduce using rule 131 (orOrExpression -> andAndExpression .)
    RPAREN          reduce using rule 131 (orOrExpression -> andAndExpression .)
    RANGE           reduce using rule 131 (orOrExpression -> andAndExpression .)
    COLON           reduce using rule 131 (orOrExpression -> andAndExpression .)
    LPAREN          reduce using rule 131 (orOrExpression -> andAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 152

  ! DOUBLE_AMPERSAND [ reduce using rule 131 (orOrExpression -> andAndExpression .) ]


state 72

    (100) argumentList -> assignExpression .

    COMMA           reduce using rule 100 (argumentList -> assignExpression .)
    RPAREN          reduce using rule 100 (argumentList -> assignExpression .)
    RBRACKET        reduce using rule 100 (argumentList -> assignExpression .)


state 73

    (137) xorExpression -> andExpression .
    (140) andExpression -> andExpression . AMPERSAND cmpExpression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    DOT             reduce using rule 137 (xorExpression -> andExpression .)
    PLUS_PLUS       reduce using rule 137 (xorExpression -> andExpression .)
    MINUS_MINUS     reduce using rule 137 (xorExpression -> andExpression .)
    LBRACKET        reduce using rule 137 (xorExpression -> andExpression .)
    CARET           reduce using rule 137 (xorExpression -> andExpression .)
    TIMES           reduce using rule 137 (xorExpression -> andExpression .)
    DIV             reduce using rule 137 (xorExpression -> andExpression .)
    MODULO          reduce using rule 137 (xorExpression -> andExpression .)
    PLUS            reduce using rule 137 (xorExpression -> andExpression .)
    MINUS           reduce using rule 137 (xorExpression -> andExpression .)
    TILDE           reduce using rule 137 (xorExpression -> andExpression .)
    $end            reduce using rule 137 (xorExpression -> andExpression .)
    RIGHT_SHIFT     reduce using rule 137 (xorExpression -> andExpression .)
    LEFT_SHIFT      reduce using rule 137 (xorExpression -> andExpression .)
    IS_EQ           reduce using rule 137 (xorExpression -> andExpression .)
    NOT_EQ          reduce using rule 137 (xorExpression -> andExpression .)
    PIPE            reduce using rule 137 (xorExpression -> andExpression .)
    DOUBLE_AMPERSAND reduce using rule 137 (xorExpression -> andExpression .)
    QUESTION        reduce using rule 137 (xorExpression -> andExpression .)
    DOUBLE_PIPE     reduce using rule 137 (xorExpression -> andExpression .)
    ASSIGN          reduce using rule 137 (xorExpression -> andExpression .)
    EQ_LEFT         reduce using rule 137 (xorExpression -> andExpression .)
    EQ_RIGHT        reduce using rule 137 (xorExpression -> andExpression .)
    EQ_PLUS         reduce using rule 137 (xorExpression -> andExpression .)
    EQ_MINUS        reduce using rule 137 (xorExpression -> andExpression .)
    EQ_TIMES        reduce using rule 137 (xorExpression -> andExpression .)
    EQ_MODULO       reduce using rule 137 (xorExpression -> andExpression .)
    EQ_AND_BIT      reduce using rule 137 (xorExpression -> andExpression .)
    EQ_DIV          reduce using rule 137 (xorExpression -> andExpression .)
    EQ_OR_BIT       reduce using rule 137 (xorExpression -> andExpression .)
    EQ_XOR_BIT      reduce using rule 137 (xorExpression -> andExpression .)
    COMMA           reduce using rule 137 (xorExpression -> andExpression .)
    RBRACKET        reduce using rule 137 (xorExpression -> andExpression .)
    LESS            reduce using rule 137 (xorExpression -> andExpression .)
    LESS_EQ         reduce using rule 137 (xorExpression -> andExpression .)
    GREATER         reduce using rule 137 (xorExpression -> andExpression .)
    GREATER_EQ      reduce using rule 137 (xorExpression -> andExpression .)
    IS_EQ_DIFF      reduce using rule 137 (xorExpression -> andExpression .)
    NOT_EQ_DIFF     reduce using rule 137 (xorExpression -> andExpression .)
    LESS_EQ_DIFF    reduce using rule 137 (xorExpression -> andExpression .)
    LESS_DIFF       reduce using rule 137 (xorExpression -> andExpression .)
    GREATER_EQ_DIFF reduce using rule 137 (xorExpression -> andExpression .)
    GREATER_DIFF    reduce using rule 137 (xorExpression -> andExpression .)
    RPAREN          reduce using rule 137 (xorExpression -> andExpression .)
    RANGE           reduce using rule 137 (xorExpression -> andExpression .)
    COLON           reduce using rule 137 (xorExpression -> andExpression .)
    LPAREN          reduce using rule 137 (xorExpression -> andExpression .)
    AMPERSAND       shift and go to state 153

  ! AMPERSAND       [ reduce using rule 137 (xorExpression -> andExpression .) ]


state 74

    (99) argumentList_question -> empty .
    (104) functionBody -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 99 (argumentList_question -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 99 (argumentList_question -> empty .)
    RBRACKET        reduce using rule 99 (argumentList_question -> empty .)
    RPAREN          reduce using rule 99 (argumentList_question -> empty .)
    DOT             reduce using rule 104 (functionBody -> empty .)
    PLUS_PLUS       reduce using rule 104 (functionBody -> empty .)
    MINUS_MINUS     reduce using rule 104 (functionBody -> empty .)
    LBRACKET        reduce using rule 104 (functionBody -> empty .)
    CARET           reduce using rule 104 (functionBody -> empty .)
    TIMES           reduce using rule 104 (functionBody -> empty .)
    DIV             reduce using rule 104 (functionBody -> empty .)
    MODULO          reduce using rule 104 (functionBody -> empty .)
    PLUS            reduce using rule 104 (functionBody -> empty .)
    MINUS           reduce using rule 104 (functionBody -> empty .)
    TILDE           reduce using rule 104 (functionBody -> empty .)
    RIGHT_SHIFT     reduce using rule 104 (functionBody -> empty .)
    LEFT_SHIFT      reduce using rule 104 (functionBody -> empty .)
    IS_EQ           reduce using rule 104 (functionBody -> empty .)
    NOT_EQ          reduce using rule 104 (functionBody -> empty .)
    AMPERSAND       reduce using rule 104 (functionBody -> empty .)
    PIPE            reduce using rule 104 (functionBody -> empty .)
    DOUBLE_AMPERSAND reduce using rule 104 (functionBody -> empty .)
    QUESTION        reduce using rule 104 (functionBody -> empty .)
    DOUBLE_PIPE     reduce using rule 104 (functionBody -> empty .)
    ASSIGN          reduce using rule 104 (functionBody -> empty .)
    EQ_LEFT         reduce using rule 104 (functionBody -> empty .)
    EQ_RIGHT        reduce using rule 104 (functionBody -> empty .)
    EQ_PLUS         reduce using rule 104 (functionBody -> empty .)
    EQ_MINUS        reduce using rule 104 (functionBody -> empty .)
    EQ_TIMES        reduce using rule 104 (functionBody -> empty .)
    EQ_MODULO       reduce using rule 104 (functionBody -> empty .)
    EQ_AND_BIT      reduce using rule 104 (functionBody -> empty .)
    EQ_DIV          reduce using rule 104 (functionBody -> empty .)
    EQ_OR_BIT       reduce using rule 104 (functionBody -> empty .)
    EQ_XOR_BIT      reduce using rule 104 (functionBody -> empty .)
    COMMA           reduce using rule 104 (functionBody -> empty .)
    LESS            reduce using rule 104 (functionBody -> empty .)
    LESS_EQ         reduce using rule 104 (functionBody -> empty .)
    GREATER         reduce using rule 104 (functionBody -> empty .)
    GREATER_EQ      reduce using rule 104 (functionBody -> empty .)
    IS_EQ_DIFF      reduce using rule 104 (functionBody -> empty .)
    NOT_EQ_DIFF     reduce using rule 104 (functionBody -> empty .)
    LESS_EQ_DIFF    reduce using rule 104 (functionBody -> empty .)
    LESS_DIFF       reduce using rule 104 (functionBody -> empty .)
    GREATER_EQ_DIFF reduce using rule 104 (functionBody -> empty .)
    GREATER_DIFF    reduce using rule 104 (functionBody -> empty .)

  ! RBRACKET        [ reduce using rule 104 (functionBody -> empty .) ]
  ! RPAREN          [ reduce using rule 104 (functionBody -> empty .) ]


state 75

    (129) ternaryExpression -> orOrExpression . QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> orOrExpression .
    (132) orOrExpression -> orOrExpression . DOUBLE_PIPE andAndExpression

  ! shift/reduce conflict for QUESTION resolved as shift
  ! shift/reduce conflict for DOUBLE_PIPE resolved as shift
    QUESTION        shift and go to state 154
    ASSIGN          reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_LEFT         reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_RIGHT        reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_PLUS         reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_MINUS        reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_TIMES        reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_MODULO       reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_AND_BIT      reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_DIV          reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_OR_BIT       reduce using rule 130 (ternaryExpression -> orOrExpression .)
    EQ_XOR_BIT      reduce using rule 130 (ternaryExpression -> orOrExpression .)
    COMMA           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    RBRACKET        reduce using rule 130 (ternaryExpression -> orOrExpression .)
    RPAREN          reduce using rule 130 (ternaryExpression -> orOrExpression .)
    COLON           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    RANGE           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    DOT             reduce using rule 130 (ternaryExpression -> orOrExpression .)
    PLUS_PLUS       reduce using rule 130 (ternaryExpression -> orOrExpression .)
    MINUS_MINUS     reduce using rule 130 (ternaryExpression -> orOrExpression .)
    LBRACKET        reduce using rule 130 (ternaryExpression -> orOrExpression .)
    CARET           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    TIMES           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    DIV             reduce using rule 130 (ternaryExpression -> orOrExpression .)
    MODULO          reduce using rule 130 (ternaryExpression -> orOrExpression .)
    PLUS            reduce using rule 130 (ternaryExpression -> orOrExpression .)
    MINUS           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    TILDE           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    $end            reduce using rule 130 (ternaryExpression -> orOrExpression .)
    RIGHT_SHIFT     reduce using rule 130 (ternaryExpression -> orOrExpression .)
    LEFT_SHIFT      reduce using rule 130 (ternaryExpression -> orOrExpression .)
    IS_EQ           reduce using rule 130 (ternaryExpression -> orOrExpression .)
    NOT_EQ          reduce using rule 130 (ternaryExpression -> orOrExpression .)
    AMPERSAND       reduce using rule 130 (ternaryExpression -> orOrExpression .)
    PIPE            reduce using rule 130 (ternaryExpression -> orOrExpression .)
    DOUBLE_AMPERSAND reduce using rule 130 (ternaryExpression -> orOrExpression .)
    LESS            reduce using rule 130 (ternaryExpression -> orOrExpression .)
    LESS_EQ         reduce using rule 130 (ternaryExpression -> orOrExpression .)
    GREATER         reduce using rule 130 (ternaryExpression -> orOrExpression .)
    GREATER_EQ      reduce using rule 130 (ternaryExpression -> orOrExpression .)
    IS_EQ_DIFF      reduce using rule 130 (ternaryExpression -> orOrExpression .)
    NOT_EQ_DIFF     reduce using rule 130 (ternaryExpression -> orOrExpression .)
    LESS_EQ_DIFF    reduce using rule 130 (ternaryExpression -> orOrExpression .)
    LESS_DIFF       reduce using rule 130 (ternaryExpression -> orOrExpression .)
    GREATER_EQ_DIFF reduce using rule 130 (ternaryExpression -> orOrExpression .)
    GREATER_DIFF    reduce using rule 130 (ternaryExpression -> orOrExpression .)
    LPAREN          reduce using rule 130 (ternaryExpression -> orOrExpression .)
    DOUBLE_PIPE     shift and go to state 155

  ! QUESTION        [ reduce using rule 130 (ternaryExpression -> orOrExpression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 130 (ternaryExpression -> orOrExpression .) ]


state 76

    (139) andExpression -> cmpExpression .

    AMPERSAND       reduce using rule 139 (andExpression -> cmpExpression .)
    CARET           reduce using rule 139 (andExpression -> cmpExpression .)
    PIPE            reduce using rule 139 (andExpression -> cmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 139 (andExpression -> cmpExpression .)
    QUESTION        reduce using rule 139 (andExpression -> cmpExpression .)
    DOUBLE_PIPE     reduce using rule 139 (andExpression -> cmpExpression .)
    ASSIGN          reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_LEFT         reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_RIGHT        reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_PLUS         reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_MINUS        reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_TIMES        reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_MODULO       reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_AND_BIT      reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_DIV          reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_OR_BIT       reduce using rule 139 (andExpression -> cmpExpression .)
    EQ_XOR_BIT      reduce using rule 139 (andExpression -> cmpExpression .)
    COMMA           reduce using rule 139 (andExpression -> cmpExpression .)
    RBRACKET        reduce using rule 139 (andExpression -> cmpExpression .)
    RPAREN          reduce using rule 139 (andExpression -> cmpExpression .)
    DOT             reduce using rule 139 (andExpression -> cmpExpression .)
    PLUS_PLUS       reduce using rule 139 (andExpression -> cmpExpression .)
    MINUS_MINUS     reduce using rule 139 (andExpression -> cmpExpression .)
    LBRACKET        reduce using rule 139 (andExpression -> cmpExpression .)
    TIMES           reduce using rule 139 (andExpression -> cmpExpression .)
    DIV             reduce using rule 139 (andExpression -> cmpExpression .)
    MODULO          reduce using rule 139 (andExpression -> cmpExpression .)
    PLUS            reduce using rule 139 (andExpression -> cmpExpression .)
    MINUS           reduce using rule 139 (andExpression -> cmpExpression .)
    TILDE           reduce using rule 139 (andExpression -> cmpExpression .)
    $end            reduce using rule 139 (andExpression -> cmpExpression .)
    RIGHT_SHIFT     reduce using rule 139 (andExpression -> cmpExpression .)
    LEFT_SHIFT      reduce using rule 139 (andExpression -> cmpExpression .)
    IS_EQ           reduce using rule 139 (andExpression -> cmpExpression .)
    NOT_EQ          reduce using rule 139 (andExpression -> cmpExpression .)
    LESS            reduce using rule 139 (andExpression -> cmpExpression .)
    LESS_EQ         reduce using rule 139 (andExpression -> cmpExpression .)
    GREATER         reduce using rule 139 (andExpression -> cmpExpression .)
    GREATER_EQ      reduce using rule 139 (andExpression -> cmpExpression .)
    IS_EQ_DIFF      reduce using rule 139 (andExpression -> cmpExpression .)
    NOT_EQ_DIFF     reduce using rule 139 (andExpression -> cmpExpression .)
    LESS_EQ_DIFF    reduce using rule 139 (andExpression -> cmpExpression .)
    LESS_DIFF       reduce using rule 139 (andExpression -> cmpExpression .)
    GREATER_EQ_DIFF reduce using rule 139 (andExpression -> cmpExpression .)
    GREATER_DIFF    reduce using rule 139 (andExpression -> cmpExpression .)
    RANGE           reduce using rule 139 (andExpression -> cmpExpression .)
    COLON           reduce using rule 139 (andExpression -> cmpExpression .)
    LPAREN          reduce using rule 139 (andExpression -> cmpExpression .)


state 77

    (116) assignExpression -> ternaryExpression .
    (117) assignExpression -> ternaryExpression . assignOperator expression
    (118) assignOperator -> . ASSIGN
    (119) assignOperator -> . EQ_LEFT
    (120) assignOperator -> . EQ_RIGHT
    (121) assignOperator -> . EQ_PLUS
    (122) assignOperator -> . EQ_MINUS
    (123) assignOperator -> . EQ_TIMES
    (124) assignOperator -> . EQ_MODULO
    (125) assignOperator -> . EQ_AND_BIT
    (126) assignOperator -> . EQ_DIV
    (127) assignOperator -> . EQ_OR_BIT
    (128) assignOperator -> . EQ_XOR_BIT

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for EQ_LEFT resolved as shift
  ! shift/reduce conflict for EQ_RIGHT resolved as shift
  ! shift/reduce conflict for EQ_PLUS resolved as shift
  ! shift/reduce conflict for EQ_MINUS resolved as shift
  ! shift/reduce conflict for EQ_TIMES resolved as shift
  ! shift/reduce conflict for EQ_MODULO resolved as shift
  ! shift/reduce conflict for EQ_AND_BIT resolved as shift
  ! shift/reduce conflict for EQ_DIV resolved as shift
  ! shift/reduce conflict for EQ_OR_BIT resolved as shift
  ! shift/reduce conflict for EQ_XOR_BIT resolved as shift
    RANGE           reduce using rule 116 (assignExpression -> ternaryExpression .)
    COMMA           reduce using rule 116 (assignExpression -> ternaryExpression .)
    RBRACKET        reduce using rule 116 (assignExpression -> ternaryExpression .)
    RPAREN          reduce using rule 116 (assignExpression -> ternaryExpression .)
    DOT             reduce using rule 116 (assignExpression -> ternaryExpression .)
    PLUS_PLUS       reduce using rule 116 (assignExpression -> ternaryExpression .)
    MINUS_MINUS     reduce using rule 116 (assignExpression -> ternaryExpression .)
    LBRACKET        reduce using rule 116 (assignExpression -> ternaryExpression .)
    CARET           reduce using rule 116 (assignExpression -> ternaryExpression .)
    TIMES           reduce using rule 116 (assignExpression -> ternaryExpression .)
    DIV             reduce using rule 116 (assignExpression -> ternaryExpression .)
    MODULO          reduce using rule 116 (assignExpression -> ternaryExpression .)
    PLUS            reduce using rule 116 (assignExpression -> ternaryExpression .)
    MINUS           reduce using rule 116 (assignExpression -> ternaryExpression .)
    TILDE           reduce using rule 116 (assignExpression -> ternaryExpression .)
    $end            reduce using rule 116 (assignExpression -> ternaryExpression .)
    RIGHT_SHIFT     reduce using rule 116 (assignExpression -> ternaryExpression .)
    LEFT_SHIFT      reduce using rule 116 (assignExpression -> ternaryExpression .)
    IS_EQ           reduce using rule 116 (assignExpression -> ternaryExpression .)
    NOT_EQ          reduce using rule 116 (assignExpression -> ternaryExpression .)
    AMPERSAND       reduce using rule 116 (assignExpression -> ternaryExpression .)
    PIPE            reduce using rule 116 (assignExpression -> ternaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 116 (assignExpression -> ternaryExpression .)
    QUESTION        reduce using rule 116 (assignExpression -> ternaryExpression .)
    DOUBLE_PIPE     reduce using rule 116 (assignExpression -> ternaryExpression .)
    LESS            reduce using rule 116 (assignExpression -> ternaryExpression .)
    LESS_EQ         reduce using rule 116 (assignExpression -> ternaryExpression .)
    GREATER         reduce using rule 116 (assignExpression -> ternaryExpression .)
    GREATER_EQ      reduce using rule 116 (assignExpression -> ternaryExpression .)
    IS_EQ_DIFF      reduce using rule 116 (assignExpression -> ternaryExpression .)
    NOT_EQ_DIFF     reduce using rule 116 (assignExpression -> ternaryExpression .)
    LESS_EQ_DIFF    reduce using rule 116 (assignExpression -> ternaryExpression .)
    LESS_DIFF       reduce using rule 116 (assignExpression -> ternaryExpression .)
    GREATER_EQ_DIFF reduce using rule 116 (assignExpression -> ternaryExpression .)
    GREATER_DIFF    reduce using rule 116 (assignExpression -> ternaryExpression .)
    COLON           reduce using rule 116 (assignExpression -> ternaryExpression .)
    LPAREN          reduce using rule 116 (assignExpression -> ternaryExpression .)
    ASSIGN          shift and go to state 162
    EQ_LEFT         shift and go to state 163
    EQ_RIGHT        shift and go to state 156
    EQ_PLUS         shift and go to state 159
    EQ_MINUS        shift and go to state 165
    EQ_TIMES        shift and go to state 167
    EQ_MODULO       shift and go to state 164
    EQ_AND_BIT      shift and go to state 157
    EQ_DIV          shift and go to state 160
    EQ_OR_BIT       shift and go to state 158
    EQ_XOR_BIT      shift and go to state 161

  ! ASSIGN          [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_LEFT         [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_RIGHT        [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_PLUS         [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_MINUS        [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_TIMES        [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_MODULO       [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_AND_BIT      [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_DIV          [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_OR_BIT       [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]
  ! EQ_XOR_BIT      [ reduce using rule 116 (assignExpression -> ternaryExpression .) ]

    assignOperator                 shift and go to state 166

state 78

    (98) argumentList_question -> argumentList .
    (101) argumentList -> argumentList . comma_assign
    (102) comma_assign -> . COMMA assignExpression comma_assign
    (103) comma_assign -> . empty
    (161) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RBRACKET resolved using rule 98 (argumentList_question -> argumentList .)
  ! reduce/reduce conflict for RPAREN resolved using rule 98 (argumentList_question -> argumentList .)
    RBRACKET        reduce using rule 98 (argumentList_question -> argumentList .)
    RPAREN          reduce using rule 98 (argumentList_question -> argumentList .)
    COMMA           shift and go to state 169

  ! COMMA           [ reduce using rule 161 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! RPAREN          [ reduce using rule 161 (empty -> .) ]

    comma_assign                   shift and go to state 168
    empty                          shift and go to state 170

state 79

    (141) cmpExpression -> shiftExpression .
    (145) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (146) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression
    (147) equalExpression -> shiftExpression . IS_EQ shiftExpression
    (148) equalExpression -> shiftExpression . NOT_EQ shiftExpression
    (149) relExpression -> shiftExpression .

  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for IS_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! reduce/reduce conflict for LESS resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for CARET resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PIPE resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for QUESTION resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DOT resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TIMES resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for DIV resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MODULO resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for TILDE resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for $end resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
  ! shift/reduce conflict for IS_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for RANGE resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for COLON resolved using rule 141 (cmpExpression -> shiftExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 141 (cmpExpression -> shiftExpression .)
    DOT             reduce using rule 141 (cmpExpression -> shiftExpression .)
    PLUS_PLUS       reduce using rule 141 (cmpExpression -> shiftExpression .)
    MINUS_MINUS     reduce using rule 141 (cmpExpression -> shiftExpression .)
    LBRACKET        reduce using rule 141 (cmpExpression -> shiftExpression .)
    CARET           reduce using rule 141 (cmpExpression -> shiftExpression .)
    TIMES           reduce using rule 141 (cmpExpression -> shiftExpression .)
    DIV             reduce using rule 141 (cmpExpression -> shiftExpression .)
    MODULO          reduce using rule 141 (cmpExpression -> shiftExpression .)
    PLUS            reduce using rule 141 (cmpExpression -> shiftExpression .)
    MINUS           reduce using rule 141 (cmpExpression -> shiftExpression .)
    TILDE           reduce using rule 141 (cmpExpression -> shiftExpression .)
    $end            reduce using rule 141 (cmpExpression -> shiftExpression .)
    AMPERSAND       reduce using rule 141 (cmpExpression -> shiftExpression .)
    PIPE            reduce using rule 141 (cmpExpression -> shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 141 (cmpExpression -> shiftExpression .)
    QUESTION        reduce using rule 141 (cmpExpression -> shiftExpression .)
    DOUBLE_PIPE     reduce using rule 141 (cmpExpression -> shiftExpression .)
    ASSIGN          reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_LEFT         reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_RIGHT        reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_PLUS         reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_MINUS        reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_TIMES        reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_MODULO       reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_AND_BIT      reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_DIV          reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_OR_BIT       reduce using rule 141 (cmpExpression -> shiftExpression .)
    EQ_XOR_BIT      reduce using rule 141 (cmpExpression -> shiftExpression .)
    COMMA           reduce using rule 141 (cmpExpression -> shiftExpression .)
    RBRACKET        reduce using rule 141 (cmpExpression -> shiftExpression .)
    LESS            reduce using rule 141 (cmpExpression -> shiftExpression .)
    LESS_EQ         reduce using rule 141 (cmpExpression -> shiftExpression .)
    GREATER         reduce using rule 141 (cmpExpression -> shiftExpression .)
    GREATER_EQ      reduce using rule 141 (cmpExpression -> shiftExpression .)
    IS_EQ_DIFF      reduce using rule 141 (cmpExpression -> shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 141 (cmpExpression -> shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 141 (cmpExpression -> shiftExpression .)
    LESS_DIFF       reduce using rule 141 (cmpExpression -> shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 141 (cmpExpression -> shiftExpression .)
    GREATER_DIFF    reduce using rule 141 (cmpExpression -> shiftExpression .)
    RPAREN          reduce using rule 141 (cmpExpression -> shiftExpression .)
    RANGE           reduce using rule 141 (cmpExpression -> shiftExpression .)
    COLON           reduce using rule 141 (cmpExpression -> shiftExpression .)
    LPAREN          reduce using rule 141 (cmpExpression -> shiftExpression .)
    RIGHT_SHIFT     shift and go to state 173
    LEFT_SHIFT      shift and go to state 172
    IS_EQ           shift and go to state 171
    NOT_EQ          shift and go to state 174

  ! RIGHT_SHIFT     [ reduce using rule 141 (cmpExpression -> shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 141 (cmpExpression -> shiftExpression .) ]
  ! IS_EQ           [ reduce using rule 141 (cmpExpression -> shiftExpression .) ]
  ! NOT_EQ          [ reduce using rule 141 (cmpExpression -> shiftExpression .) ]
  ! LESS            [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! LESS_EQ         [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! GREATER         [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! GREATER_EQ      [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! IS_EQ_DIFF      [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! LESS_DIFF       [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! GREATER_DIFF    [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! AMPERSAND       [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! CARET           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! PIPE            [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! QUESTION        [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! DOUBLE_PIPE     [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! ASSIGN          [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_LEFT         [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_RIGHT        [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_PLUS         [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_MINUS        [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_TIMES        [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_MODULO       [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_AND_BIT      [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_DIV          [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_OR_BIT       [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! EQ_XOR_BIT      [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! RBRACKET        [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! DOT             [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! LBRACKET        [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! TIMES           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! DIV             [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! MODULO          [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! PLUS            [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! MINUS           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! TILDE           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! $end            [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! RIGHT_SHIFT     [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! IS_EQ           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! NOT_EQ          [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! COMMA           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! RPAREN          [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! RANGE           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! COLON           [ reduce using rule 149 (relExpression -> shiftExpression .) ]
  ! LPAREN          [ reduce using rule 149 (relExpression -> shiftExpression .) ]


state 80

    (133) andAndExpression -> orExpression .
    (136) orExpression -> orExpression . PIPE xorExpression

  ! shift/reduce conflict for PIPE resolved as shift
    DOUBLE_AMPERSAND reduce using rule 133 (andAndExpression -> orExpression .)
    QUESTION        reduce using rule 133 (andAndExpression -> orExpression .)
    DOUBLE_PIPE     reduce using rule 133 (andAndExpression -> orExpression .)
    ASSIGN          reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_LEFT         reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_RIGHT        reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_PLUS         reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_MINUS        reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_TIMES        reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_MODULO       reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_AND_BIT      reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_DIV          reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_OR_BIT       reduce using rule 133 (andAndExpression -> orExpression .)
    EQ_XOR_BIT      reduce using rule 133 (andAndExpression -> orExpression .)
    RBRACKET        reduce using rule 133 (andAndExpression -> orExpression .)
    COMMA           reduce using rule 133 (andAndExpression -> orExpression .)
    RANGE           reduce using rule 133 (andAndExpression -> orExpression .)
    COLON           reduce using rule 133 (andAndExpression -> orExpression .)
    DOT             reduce using rule 133 (andAndExpression -> orExpression .)
    PLUS_PLUS       reduce using rule 133 (andAndExpression -> orExpression .)
    MINUS_MINUS     reduce using rule 133 (andAndExpression -> orExpression .)
    LBRACKET        reduce using rule 133 (andAndExpression -> orExpression .)
    CARET           reduce using rule 133 (andAndExpression -> orExpression .)
    TIMES           reduce using rule 133 (andAndExpression -> orExpression .)
    DIV             reduce using rule 133 (andAndExpression -> orExpression .)
    MODULO          reduce using rule 133 (andAndExpression -> orExpression .)
    PLUS            reduce using rule 133 (andAndExpression -> orExpression .)
    MINUS           reduce using rule 133 (andAndExpression -> orExpression .)
    TILDE           reduce using rule 133 (andAndExpression -> orExpression .)
    $end            reduce using rule 133 (andAndExpression -> orExpression .)
    RIGHT_SHIFT     reduce using rule 133 (andAndExpression -> orExpression .)
    LEFT_SHIFT      reduce using rule 133 (andAndExpression -> orExpression .)
    IS_EQ           reduce using rule 133 (andAndExpression -> orExpression .)
    NOT_EQ          reduce using rule 133 (andAndExpression -> orExpression .)
    AMPERSAND       reduce using rule 133 (andAndExpression -> orExpression .)
    LESS            reduce using rule 133 (andAndExpression -> orExpression .)
    LESS_EQ         reduce using rule 133 (andAndExpression -> orExpression .)
    GREATER         reduce using rule 133 (andAndExpression -> orExpression .)
    GREATER_EQ      reduce using rule 133 (andAndExpression -> orExpression .)
    IS_EQ_DIFF      reduce using rule 133 (andAndExpression -> orExpression .)
    NOT_EQ_DIFF     reduce using rule 133 (andAndExpression -> orExpression .)
    LESS_EQ_DIFF    reduce using rule 133 (andAndExpression -> orExpression .)
    LESS_DIFF       reduce using rule 133 (andAndExpression -> orExpression .)
    GREATER_EQ_DIFF reduce using rule 133 (andAndExpression -> orExpression .)
    GREATER_DIFF    reduce using rule 133 (andAndExpression -> orExpression .)
    RPAREN          reduce using rule 133 (andAndExpression -> orExpression .)
    LPAREN          reduce using rule 133 (andAndExpression -> orExpression .)
    PIPE            shift and go to state 175

  ! PIPE            [ reduce using rule 133 (andAndExpression -> orExpression .) ]


state 81

    (142) cmpExpression -> equalExpression .

    DOT             reduce using rule 142 (cmpExpression -> equalExpression .)
    PLUS_PLUS       reduce using rule 142 (cmpExpression -> equalExpression .)
    MINUS_MINUS     reduce using rule 142 (cmpExpression -> equalExpression .)
    LBRACKET        reduce using rule 142 (cmpExpression -> equalExpression .)
    CARET           reduce using rule 142 (cmpExpression -> equalExpression .)
    TIMES           reduce using rule 142 (cmpExpression -> equalExpression .)
    DIV             reduce using rule 142 (cmpExpression -> equalExpression .)
    MODULO          reduce using rule 142 (cmpExpression -> equalExpression .)
    PLUS            reduce using rule 142 (cmpExpression -> equalExpression .)
    MINUS           reduce using rule 142 (cmpExpression -> equalExpression .)
    TILDE           reduce using rule 142 (cmpExpression -> equalExpression .)
    $end            reduce using rule 142 (cmpExpression -> equalExpression .)
    RIGHT_SHIFT     reduce using rule 142 (cmpExpression -> equalExpression .)
    LEFT_SHIFT      reduce using rule 142 (cmpExpression -> equalExpression .)
    IS_EQ           reduce using rule 142 (cmpExpression -> equalExpression .)
    NOT_EQ          reduce using rule 142 (cmpExpression -> equalExpression .)
    AMPERSAND       reduce using rule 142 (cmpExpression -> equalExpression .)
    PIPE            reduce using rule 142 (cmpExpression -> equalExpression .)
    DOUBLE_AMPERSAND reduce using rule 142 (cmpExpression -> equalExpression .)
    QUESTION        reduce using rule 142 (cmpExpression -> equalExpression .)
    DOUBLE_PIPE     reduce using rule 142 (cmpExpression -> equalExpression .)
    ASSIGN          reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_LEFT         reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_RIGHT        reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_PLUS         reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_MINUS        reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_TIMES        reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_MODULO       reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_AND_BIT      reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_DIV          reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_OR_BIT       reduce using rule 142 (cmpExpression -> equalExpression .)
    EQ_XOR_BIT      reduce using rule 142 (cmpExpression -> equalExpression .)
    COMMA           reduce using rule 142 (cmpExpression -> equalExpression .)
    RBRACKET        reduce using rule 142 (cmpExpression -> equalExpression .)
    LESS            reduce using rule 142 (cmpExpression -> equalExpression .)
    LESS_EQ         reduce using rule 142 (cmpExpression -> equalExpression .)
    GREATER         reduce using rule 142 (cmpExpression -> equalExpression .)
    GREATER_EQ      reduce using rule 142 (cmpExpression -> equalExpression .)
    IS_EQ_DIFF      reduce using rule 142 (cmpExpression -> equalExpression .)
    NOT_EQ_DIFF     reduce using rule 142 (cmpExpression -> equalExpression .)
    LESS_EQ_DIFF    reduce using rule 142 (cmpExpression -> equalExpression .)
    LESS_DIFF       reduce using rule 142 (cmpExpression -> equalExpression .)
    GREATER_EQ_DIFF reduce using rule 142 (cmpExpression -> equalExpression .)
    GREATER_DIFF    reduce using rule 142 (cmpExpression -> equalExpression .)
    RPAREN          reduce using rule 142 (cmpExpression -> equalExpression .)
    RANGE           reduce using rule 142 (cmpExpression -> equalExpression .)
    COLON           reduce using rule 142 (cmpExpression -> equalExpression .)
    LPAREN          reduce using rule 142 (cmpExpression -> equalExpression .)


state 82

    (144) shiftExpression -> addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
    DOT             reduce using rule 144 (shiftExpression -> addExpression .)
    PLUS_PLUS       reduce using rule 144 (shiftExpression -> addExpression .)
    MINUS_MINUS     reduce using rule 144 (shiftExpression -> addExpression .)
    LBRACKET        reduce using rule 144 (shiftExpression -> addExpression .)
    CARET           reduce using rule 144 (shiftExpression -> addExpression .)
    TIMES           reduce using rule 144 (shiftExpression -> addExpression .)
    DIV             reduce using rule 144 (shiftExpression -> addExpression .)
    MODULO          reduce using rule 144 (shiftExpression -> addExpression .)
    $end            reduce using rule 144 (shiftExpression -> addExpression .)
    RIGHT_SHIFT     reduce using rule 144 (shiftExpression -> addExpression .)
    LEFT_SHIFT      reduce using rule 144 (shiftExpression -> addExpression .)
    IS_EQ           reduce using rule 144 (shiftExpression -> addExpression .)
    NOT_EQ          reduce using rule 144 (shiftExpression -> addExpression .)
    AMPERSAND       reduce using rule 144 (shiftExpression -> addExpression .)
    PIPE            reduce using rule 144 (shiftExpression -> addExpression .)
    DOUBLE_AMPERSAND reduce using rule 144 (shiftExpression -> addExpression .)
    QUESTION        reduce using rule 144 (shiftExpression -> addExpression .)
    DOUBLE_PIPE     reduce using rule 144 (shiftExpression -> addExpression .)
    ASSIGN          reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_LEFT         reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_RIGHT        reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_PLUS         reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_MINUS        reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_TIMES        reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_MODULO       reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_AND_BIT      reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_DIV          reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_OR_BIT       reduce using rule 144 (shiftExpression -> addExpression .)
    EQ_XOR_BIT      reduce using rule 144 (shiftExpression -> addExpression .)
    COMMA           reduce using rule 144 (shiftExpression -> addExpression .)
    RBRACKET        reduce using rule 144 (shiftExpression -> addExpression .)
    LESS            reduce using rule 144 (shiftExpression -> addExpression .)
    LESS_EQ         reduce using rule 144 (shiftExpression -> addExpression .)
    GREATER         reduce using rule 144 (shiftExpression -> addExpression .)
    GREATER_EQ      reduce using rule 144 (shiftExpression -> addExpression .)
    IS_EQ_DIFF      reduce using rule 144 (shiftExpression -> addExpression .)
    NOT_EQ_DIFF     reduce using rule 144 (shiftExpression -> addExpression .)
    LESS_EQ_DIFF    reduce using rule 144 (shiftExpression -> addExpression .)
    LESS_DIFF       reduce using rule 144 (shiftExpression -> addExpression .)
    GREATER_EQ_DIFF reduce using rule 144 (shiftExpression -> addExpression .)
    GREATER_DIFF    reduce using rule 144 (shiftExpression -> addExpression .)
    RPAREN          reduce using rule 144 (shiftExpression -> addExpression .)
    RANGE           reduce using rule 144 (shiftExpression -> addExpression .)
    COLON           reduce using rule 144 (shiftExpression -> addExpression .)
    LPAREN          reduce using rule 144 (shiftExpression -> addExpression .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    TILDE           shift and go to state 109

  ! PLUS            [ reduce using rule 144 (shiftExpression -> addExpression .) ]
  ! MINUS           [ reduce using rule 144 (shiftExpression -> addExpression .) ]
  ! TILDE           [ reduce using rule 144 (shiftExpression -> addExpression .) ]


state 83

    (113) importExpression -> IMPORT LBRACKET . assignExpression RBRACKET
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 176
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 84

    (61) symbol -> DOT . identifierOrTemplateChain
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 86

    identifierOrTemplateInstance   shift and go to state 85
    identifierOrTemplateChain      shift and go to state 96

state 85

    (63) identifierOrTemplateChain -> identifierOrTemplateInstance .

    DOT             reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RPAREN          reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    CARET           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DIV             reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    $end            reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS            reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    RANGE           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    COLON           reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)


state 86

    (65) identifierOrTemplateInstance -> IDENTIFIER .

    DOT             reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LBRACKET        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    CARET           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    TIMES           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    DIV             reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    MODULO          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    PLUS            reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    MINUS           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    TILDE           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    AMPERSAND       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    PIPE            reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    QUESTION        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    ASSIGN          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_LEFT         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_RIGHT        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_PLUS         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MINUS        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_TIMES        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_MODULO       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_DIV          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RPAREN          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    COMMA           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS            reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER         reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LESS_DIFF       reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    GREATER_DIFF    reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    LPAREN          reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    $end            reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RBRACKET        reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    RANGE           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)
    COLON           reduce using rule 65 (identifierOrTemplateInstance -> IDENTIFIER .)


state 87

    (50) newExpression -> NEW type .
    (51) newExpression -> NEW type . LBRACKET assignExpression RBRACKET
    (52) newExpression -> NEW type . arguments
    (97) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             reduce using rule 50 (newExpression -> NEW type .)
    PLUS_PLUS       reduce using rule 50 (newExpression -> NEW type .)
    MINUS_MINUS     reduce using rule 50 (newExpression -> NEW type .)
    CARET           reduce using rule 50 (newExpression -> NEW type .)
    TIMES           reduce using rule 50 (newExpression -> NEW type .)
    DIV             reduce using rule 50 (newExpression -> NEW type .)
    MODULO          reduce using rule 50 (newExpression -> NEW type .)
    PLUS            reduce using rule 50 (newExpression -> NEW type .)
    MINUS           reduce using rule 50 (newExpression -> NEW type .)
    TILDE           reduce using rule 50 (newExpression -> NEW type .)
    $end            reduce using rule 50 (newExpression -> NEW type .)
    RIGHT_SHIFT     reduce using rule 50 (newExpression -> NEW type .)
    LEFT_SHIFT      reduce using rule 50 (newExpression -> NEW type .)
    IS_EQ           reduce using rule 50 (newExpression -> NEW type .)
    NOT_EQ          reduce using rule 50 (newExpression -> NEW type .)
    AMPERSAND       reduce using rule 50 (newExpression -> NEW type .)
    PIPE            reduce using rule 50 (newExpression -> NEW type .)
    DOUBLE_AMPERSAND reduce using rule 50 (newExpression -> NEW type .)
    QUESTION        reduce using rule 50 (newExpression -> NEW type .)
    DOUBLE_PIPE     reduce using rule 50 (newExpression -> NEW type .)
    ASSIGN          reduce using rule 50 (newExpression -> NEW type .)
    EQ_LEFT         reduce using rule 50 (newExpression -> NEW type .)
    EQ_RIGHT        reduce using rule 50 (newExpression -> NEW type .)
    EQ_PLUS         reduce using rule 50 (newExpression -> NEW type .)
    EQ_MINUS        reduce using rule 50 (newExpression -> NEW type .)
    EQ_TIMES        reduce using rule 50 (newExpression -> NEW type .)
    EQ_MODULO       reduce using rule 50 (newExpression -> NEW type .)
    EQ_AND_BIT      reduce using rule 50 (newExpression -> NEW type .)
    EQ_DIV          reduce using rule 50 (newExpression -> NEW type .)
    EQ_OR_BIT       reduce using rule 50 (newExpression -> NEW type .)
    EQ_XOR_BIT      reduce using rule 50 (newExpression -> NEW type .)
    COMMA           reduce using rule 50 (newExpression -> NEW type .)
    RBRACKET        reduce using rule 50 (newExpression -> NEW type .)
    LESS            reduce using rule 50 (newExpression -> NEW type .)
    LESS_EQ         reduce using rule 50 (newExpression -> NEW type .)
    GREATER         reduce using rule 50 (newExpression -> NEW type .)
    GREATER_EQ      reduce using rule 50 (newExpression -> NEW type .)
    IS_EQ_DIFF      reduce using rule 50 (newExpression -> NEW type .)
    NOT_EQ_DIFF     reduce using rule 50 (newExpression -> NEW type .)
    LESS_EQ_DIFF    reduce using rule 50 (newExpression -> NEW type .)
    LESS_DIFF       reduce using rule 50 (newExpression -> NEW type .)
    GREATER_EQ_DIFF reduce using rule 50 (newExpression -> NEW type .)
    GREATER_DIFF    reduce using rule 50 (newExpression -> NEW type .)
    RPAREN          reduce using rule 50 (newExpression -> NEW type .)
    RANGE           reduce using rule 50 (newExpression -> NEW type .)
    COLON           reduce using rule 50 (newExpression -> NEW type .)
    LBRACKET        shift and go to state 177
    LPAREN          shift and go to state 112

  ! LBRACKET        [ reduce using rule 50 (newExpression -> NEW type .) ]
  ! LPAREN          [ reduce using rule 50 (newExpression -> NEW type .) ]

    arguments                      shift and go to state 178

state 88

    (87) type2 -> symbol .

    RPAREN          reduce using rule 87 (type2 -> symbol .)
    DOT             reduce using rule 87 (type2 -> symbol .)
    PLUS_PLUS       reduce using rule 87 (type2 -> symbol .)
    MINUS_MINUS     reduce using rule 87 (type2 -> symbol .)
    LBRACKET        reduce using rule 87 (type2 -> symbol .)
    CARET           reduce using rule 87 (type2 -> symbol .)
    TIMES           reduce using rule 87 (type2 -> symbol .)
    DIV             reduce using rule 87 (type2 -> symbol .)
    MODULO          reduce using rule 87 (type2 -> symbol .)
    PLUS            reduce using rule 87 (type2 -> symbol .)
    MINUS           reduce using rule 87 (type2 -> symbol .)
    TILDE           reduce using rule 87 (type2 -> symbol .)
    $end            reduce using rule 87 (type2 -> symbol .)
    RIGHT_SHIFT     reduce using rule 87 (type2 -> symbol .)
    LEFT_SHIFT      reduce using rule 87 (type2 -> symbol .)
    IS_EQ           reduce using rule 87 (type2 -> symbol .)
    NOT_EQ          reduce using rule 87 (type2 -> symbol .)
    AMPERSAND       reduce using rule 87 (type2 -> symbol .)
    PIPE            reduce using rule 87 (type2 -> symbol .)
    DOUBLE_AMPERSAND reduce using rule 87 (type2 -> symbol .)
    QUESTION        reduce using rule 87 (type2 -> symbol .)
    DOUBLE_PIPE     reduce using rule 87 (type2 -> symbol .)
    ASSIGN          reduce using rule 87 (type2 -> symbol .)
    EQ_LEFT         reduce using rule 87 (type2 -> symbol .)
    EQ_RIGHT        reduce using rule 87 (type2 -> symbol .)
    EQ_PLUS         reduce using rule 87 (type2 -> symbol .)
    EQ_MINUS        reduce using rule 87 (type2 -> symbol .)
    EQ_TIMES        reduce using rule 87 (type2 -> symbol .)
    EQ_MODULO       reduce using rule 87 (type2 -> symbol .)
    EQ_AND_BIT      reduce using rule 87 (type2 -> symbol .)
    EQ_DIV          reduce using rule 87 (type2 -> symbol .)
    EQ_OR_BIT       reduce using rule 87 (type2 -> symbol .)
    EQ_XOR_BIT      reduce using rule 87 (type2 -> symbol .)
    COMMA           reduce using rule 87 (type2 -> symbol .)
    RBRACKET        reduce using rule 87 (type2 -> symbol .)
    LESS            reduce using rule 87 (type2 -> symbol .)
    LESS_EQ         reduce using rule 87 (type2 -> symbol .)
    GREATER         reduce using rule 87 (type2 -> symbol .)
    GREATER_EQ      reduce using rule 87 (type2 -> symbol .)
    IS_EQ_DIFF      reduce using rule 87 (type2 -> symbol .)
    NOT_EQ_DIFF     reduce using rule 87 (type2 -> symbol .)
    LESS_EQ_DIFF    reduce using rule 87 (type2 -> symbol .)
    LESS_DIFF       reduce using rule 87 (type2 -> symbol .)
    GREATER_EQ_DIFF reduce using rule 87 (type2 -> symbol .)
    GREATER_DIFF    reduce using rule 87 (type2 -> symbol .)
    RANGE           reduce using rule 87 (type2 -> symbol .)
    COLON           reduce using rule 87 (type2 -> symbol .)
    LPAREN          reduce using rule 87 (type2 -> symbol .)


state 89

    (93) typeConstructors -> typeConstructor .
    (94) typeConstructors -> typeConstructor . typeConstructors
    (90) type2 -> typeConstructor . LBRACKET type RBRACKET
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    BOOL            reduce using rule 93 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 93 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 93 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 93 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 93 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 93 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 93 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 93 (typeConstructors -> typeConstructor .)
    LBRACKET        shift and go to state 134
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23

  ! CONST           [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 133
    typeConstructors               shift and go to state 136

state 90

    (66) indexExpression -> unaryExpression LBRACKET . RBRACKET
    (67) indexExpression -> unaryExpression LBRACKET . index comma_index RBRACKET
    (70) index -> . assignExpression
    (71) index -> . assignExpression RANGE assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 181
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    orOrExpression                 shift and go to state 75
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    index                          shift and go to state 179
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 180
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 91

    (27) unaryExpression -> unaryExpression DOT . newExpression
    (28) unaryExpression -> unaryExpression DOT . identifierOrTemplateInstance
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    NEW             shift and go to state 10
    IDENTIFIER      shift and go to state 86

    newExpression                  shift and go to state 182
    identifierOrTemplateInstance   shift and go to state 183

state 92

    (29) unaryExpression -> unaryExpression PLUS_PLUS .

    DOT             reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LBRACKET        reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    CARET           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TIMES           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DIV             reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MODULO          reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PLUS            reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    MINUS           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    TILDE           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RIGHT_SHIFT     reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LEFT_SHIFT      reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IS_EQ           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    NOT_EQ          reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    AMPERSAND       reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    PIPE            reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    QUESTION        reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    DOUBLE_PIPE     reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    ASSIGN          reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_LEFT         reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_RIGHT        reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_PLUS         reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_MINUS        reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_TIMES        reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_MODULO       reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_AND_BIT      reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_DIV          reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_OR_BIT       reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    EQ_XOR_BIT      reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RBRACKET        reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    COMMA           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS            reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_EQ         reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER         reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_EQ      reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    IS_EQ_DIFF      reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    NOT_EQ_DIFF     reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_EQ_DIFF    reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LESS_DIFF       reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_EQ_DIFF reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    GREATER_DIFF    reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    $end            reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RPAREN          reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    RANGE           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    COLON           reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)
    LPAREN          reduce using rule 29 (unaryExpression -> unaryExpression PLUS_PLUS .)


state 93

    (30) unaryExpression -> unaryExpression MINUS_MINUS .

    DOT             reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LBRACKET        reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    CARET           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    TIMES           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    DIV             reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    MODULO          reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    PLUS            reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    MINUS           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    TILDE           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RIGHT_SHIFT     reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LEFT_SHIFT      reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    IS_EQ           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    NOT_EQ          reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    AMPERSAND       reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    PIPE            reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    QUESTION        reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    DOUBLE_PIPE     reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    ASSIGN          reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_LEFT         reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_RIGHT        reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_PLUS         reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_MINUS        reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_TIMES        reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_MODULO       reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_AND_BIT      reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_DIV          reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_OR_BIT       reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    EQ_XOR_BIT      reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RBRACKET        reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    COMMA           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS            reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS_EQ         reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER         reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER_EQ      reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    IS_EQ_DIFF      reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    NOT_EQ_DIFF     reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS_EQ_DIFF    reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LESS_DIFF       reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER_EQ_DIFF reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    GREATER_DIFF    reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    $end            reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RPAREN          reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    RANGE           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    COLON           reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)
    LPAREN          reduce using rule 30 (unaryExpression -> unaryExpression MINUS_MINUS .)


state 94

    (16) unaryExpression -> MINUS unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    TIMES           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    DIV             reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    MODULO          reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    PLUS            reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    MINUS           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    TILDE           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    IS_EQ           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    NOT_EQ          reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    AMPERSAND       reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    PIPE            reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    QUESTION        reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    ASSIGN          reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_LEFT         reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_RIGHT        reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_PLUS         reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_MINUS        reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_TIMES        reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_MODULO       reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_DIV          reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    RBRACKET        reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    COMMA           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    LESS            reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    LESS_EQ         reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    GREATER         reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    GREATER_EQ      reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    LESS_DIFF       reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    GREATER_DIFF    reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    $end            reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    RPAREN          reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    RANGE           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    COLON           reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    LPAREN          reduce using rule 16 (unaryExpression -> MINUS unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 16 (unaryExpression -> MINUS unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 16 (unaryExpression -> MINUS unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 16 (unaryExpression -> MINUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 16 (unaryExpression -> MINUS unaryExpression .) ]


state 95

    (32) primaryExpression -> DOT identifierOrTemplateInstance .
    (63) identifierOrTemplateChain -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
  ! reduce/reduce conflict for LPAREN resolved using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOT             reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    $end            reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 32 (primaryExpression -> DOT identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]
  ! LPAREN          [ reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]
  ! RPAREN          [ reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]


state 96

    (61) symbol -> DOT identifierOrTemplateChain .
    (64) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

  ! shift/reduce conflict for DOT resolved as shift
    LPAREN          reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    LBRACKET        reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    PLUS_PLUS       reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    MINUS_MINUS     reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    CARET           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    TIMES           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    DIV             reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    MODULO          reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    PLUS            reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    MINUS           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    TILDE           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    $end            reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    RIGHT_SHIFT     reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    LEFT_SHIFT      reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    IS_EQ           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    NOT_EQ          reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    AMPERSAND       reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    PIPE            reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    DOUBLE_AMPERSAND reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    QUESTION        reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    DOUBLE_PIPE     reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    ASSIGN          reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_LEFT         reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_RIGHT        reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_PLUS         reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_MINUS        reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_TIMES        reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_MODULO       reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_AND_BIT      reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_DIV          reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_OR_BIT       reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    EQ_XOR_BIT      reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    COMMA           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    RBRACKET        reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    LESS            reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    LESS_EQ         reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    GREATER         reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    GREATER_EQ      reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    IS_EQ_DIFF      reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    NOT_EQ_DIFF     reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    LESS_EQ_DIFF    reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    LESS_DIFF       reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    GREATER_EQ_DIFF reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    GREATER_DIFF    reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    RPAREN          reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    RANGE           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    COLON           reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .)
    DOT             shift and go to state 67

  ! DOT             [ reduce using rule 61 (symbol -> DOT identifierOrTemplateChain .) ]


state 97

    (73) type -> type2 typeSuffixStar .

    DOT             reduce using rule 73 (type -> type2 typeSuffixStar .)
    LPAREN          reduce using rule 73 (type -> type2 typeSuffixStar .)
    RPAREN          reduce using rule 73 (type -> type2 typeSuffixStar .)
    PLUS_PLUS       reduce using rule 73 (type -> type2 typeSuffixStar .)
    MINUS_MINUS     reduce using rule 73 (type -> type2 typeSuffixStar .)
    LBRACKET        reduce using rule 73 (type -> type2 typeSuffixStar .)
    CARET           reduce using rule 73 (type -> type2 typeSuffixStar .)
    TIMES           reduce using rule 73 (type -> type2 typeSuffixStar .)
    DIV             reduce using rule 73 (type -> type2 typeSuffixStar .)
    MODULO          reduce using rule 73 (type -> type2 typeSuffixStar .)
    PLUS            reduce using rule 73 (type -> type2 typeSuffixStar .)
    MINUS           reduce using rule 73 (type -> type2 typeSuffixStar .)
    TILDE           reduce using rule 73 (type -> type2 typeSuffixStar .)
    $end            reduce using rule 73 (type -> type2 typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 73 (type -> type2 typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 73 (type -> type2 typeSuffixStar .)
    IS_EQ           reduce using rule 73 (type -> type2 typeSuffixStar .)
    NOT_EQ          reduce using rule 73 (type -> type2 typeSuffixStar .)
    AMPERSAND       reduce using rule 73 (type -> type2 typeSuffixStar .)
    PIPE            reduce using rule 73 (type -> type2 typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 73 (type -> type2 typeSuffixStar .)
    QUESTION        reduce using rule 73 (type -> type2 typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 73 (type -> type2 typeSuffixStar .)
    ASSIGN          reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_LEFT         reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_RIGHT        reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_PLUS         reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_MINUS        reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_TIMES        reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_MODULO       reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_DIV          reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 73 (type -> type2 typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 73 (type -> type2 typeSuffixStar .)
    COMMA           reduce using rule 73 (type -> type2 typeSuffixStar .)
    RBRACKET        reduce using rule 73 (type -> type2 typeSuffixStar .)
    LESS            reduce using rule 73 (type -> type2 typeSuffixStar .)
    LESS_EQ         reduce using rule 73 (type -> type2 typeSuffixStar .)
    GREATER         reduce using rule 73 (type -> type2 typeSuffixStar .)
    GREATER_EQ      reduce using rule 73 (type -> type2 typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 73 (type -> type2 typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 73 (type -> type2 typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 73 (type -> type2 typeSuffixStar .)
    LESS_DIFF       reduce using rule 73 (type -> type2 typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 73 (type -> type2 typeSuffixStar .)
    GREATER_DIFF    reduce using rule 73 (type -> type2 typeSuffixStar .)
    RANGE           reduce using rule 73 (type -> type2 typeSuffixStar .)
    COLON           reduce using rule 73 (type -> type2 typeSuffixStar .)


state 98

    (85) typeSuffixStar -> empty .

    DOT             reduce using rule 85 (typeSuffixStar -> empty .)
    LPAREN          reduce using rule 85 (typeSuffixStar -> empty .)
    LBRACKET        reduce using rule 85 (typeSuffixStar -> empty .)
    PLUS_PLUS       reduce using rule 85 (typeSuffixStar -> empty .)
    MINUS_MINUS     reduce using rule 85 (typeSuffixStar -> empty .)
    CARET           reduce using rule 85 (typeSuffixStar -> empty .)
    TIMES           reduce using rule 85 (typeSuffixStar -> empty .)
    DIV             reduce using rule 85 (typeSuffixStar -> empty .)
    MODULO          reduce using rule 85 (typeSuffixStar -> empty .)
    PLUS            reduce using rule 85 (typeSuffixStar -> empty .)
    MINUS           reduce using rule 85 (typeSuffixStar -> empty .)
    TILDE           reduce using rule 85 (typeSuffixStar -> empty .)
    $end            reduce using rule 85 (typeSuffixStar -> empty .)
    RIGHT_SHIFT     reduce using rule 85 (typeSuffixStar -> empty .)
    LEFT_SHIFT      reduce using rule 85 (typeSuffixStar -> empty .)
    IS_EQ           reduce using rule 85 (typeSuffixStar -> empty .)
    NOT_EQ          reduce using rule 85 (typeSuffixStar -> empty .)
    AMPERSAND       reduce using rule 85 (typeSuffixStar -> empty .)
    PIPE            reduce using rule 85 (typeSuffixStar -> empty .)
    DOUBLE_AMPERSAND reduce using rule 85 (typeSuffixStar -> empty .)
    QUESTION        reduce using rule 85 (typeSuffixStar -> empty .)
    DOUBLE_PIPE     reduce using rule 85 (typeSuffixStar -> empty .)
    ASSIGN          reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_LEFT         reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_RIGHT        reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_PLUS         reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_MINUS        reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_TIMES        reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_MODULO       reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_AND_BIT      reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_DIV          reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_OR_BIT       reduce using rule 85 (typeSuffixStar -> empty .)
    EQ_XOR_BIT      reduce using rule 85 (typeSuffixStar -> empty .)
    COMMA           reduce using rule 85 (typeSuffixStar -> empty .)
    RBRACKET        reduce using rule 85 (typeSuffixStar -> empty .)
    LESS            reduce using rule 85 (typeSuffixStar -> empty .)
    LESS_EQ         reduce using rule 85 (typeSuffixStar -> empty .)
    GREATER         reduce using rule 85 (typeSuffixStar -> empty .)
    GREATER_EQ      reduce using rule 85 (typeSuffixStar -> empty .)
    IS_EQ_DIFF      reduce using rule 85 (typeSuffixStar -> empty .)
    NOT_EQ_DIFF     reduce using rule 85 (typeSuffixStar -> empty .)
    LESS_EQ_DIFF    reduce using rule 85 (typeSuffixStar -> empty .)
    LESS_DIFF       reduce using rule 85 (typeSuffixStar -> empty .)
    GREATER_EQ_DIFF reduce using rule 85 (typeSuffixStar -> empty .)
    GREATER_DIFF    reduce using rule 85 (typeSuffixStar -> empty .)
    RPAREN          reduce using rule 85 (typeSuffixStar -> empty .)
    RANGE           reduce using rule 85 (typeSuffixStar -> empty .)
    COLON           reduce using rule 85 (typeSuffixStar -> empty .)


state 99

    (84) typeSuffixStar -> typeSuffix . typeSuffixStar
    (84) typeSuffixStar -> . typeSuffix typeSuffixStar
    (85) typeSuffixStar -> . empty
    (74) typeSuffix -> .
    (161) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for CARET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DIV resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MODULO resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for TILDE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for $end resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PIPE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for QUESTION resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RANGE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for COLON resolved using rule 74 (typeSuffix -> .)
    DOT             reduce using rule 74 (typeSuffix -> .)
    LPAREN          reduce using rule 74 (typeSuffix -> .)
    LBRACKET        reduce using rule 74 (typeSuffix -> .)
    PLUS_PLUS       reduce using rule 74 (typeSuffix -> .)
    MINUS_MINUS     reduce using rule 74 (typeSuffix -> .)
    CARET           reduce using rule 74 (typeSuffix -> .)
    TIMES           reduce using rule 74 (typeSuffix -> .)
    DIV             reduce using rule 74 (typeSuffix -> .)
    MODULO          reduce using rule 74 (typeSuffix -> .)
    PLUS            reduce using rule 74 (typeSuffix -> .)
    MINUS           reduce using rule 74 (typeSuffix -> .)
    TILDE           reduce using rule 74 (typeSuffix -> .)
    $end            reduce using rule 74 (typeSuffix -> .)
    RIGHT_SHIFT     reduce using rule 74 (typeSuffix -> .)
    LEFT_SHIFT      reduce using rule 74 (typeSuffix -> .)
    IS_EQ           reduce using rule 74 (typeSuffix -> .)
    NOT_EQ          reduce using rule 74 (typeSuffix -> .)
    AMPERSAND       reduce using rule 74 (typeSuffix -> .)
    PIPE            reduce using rule 74 (typeSuffix -> .)
    DOUBLE_AMPERSAND reduce using rule 74 (typeSuffix -> .)
    QUESTION        reduce using rule 74 (typeSuffix -> .)
    DOUBLE_PIPE     reduce using rule 74 (typeSuffix -> .)
    ASSIGN          reduce using rule 74 (typeSuffix -> .)
    EQ_LEFT         reduce using rule 74 (typeSuffix -> .)
    EQ_RIGHT        reduce using rule 74 (typeSuffix -> .)
    EQ_PLUS         reduce using rule 74 (typeSuffix -> .)
    EQ_MINUS        reduce using rule 74 (typeSuffix -> .)
    EQ_TIMES        reduce using rule 74 (typeSuffix -> .)
    EQ_MODULO       reduce using rule 74 (typeSuffix -> .)
    EQ_AND_BIT      reduce using rule 74 (typeSuffix -> .)
    EQ_DIV          reduce using rule 74 (typeSuffix -> .)
    EQ_OR_BIT       reduce using rule 74 (typeSuffix -> .)
    EQ_XOR_BIT      reduce using rule 74 (typeSuffix -> .)
    COMMA           reduce using rule 74 (typeSuffix -> .)
    RBRACKET        reduce using rule 74 (typeSuffix -> .)
    LESS            reduce using rule 74 (typeSuffix -> .)
    LESS_EQ         reduce using rule 74 (typeSuffix -> .)
    GREATER         reduce using rule 74 (typeSuffix -> .)
    GREATER_EQ      reduce using rule 74 (typeSuffix -> .)
    IS_EQ_DIFF      reduce using rule 74 (typeSuffix -> .)
    NOT_EQ_DIFF     reduce using rule 74 (typeSuffix -> .)
    LESS_EQ_DIFF    reduce using rule 74 (typeSuffix -> .)
    LESS_DIFF       reduce using rule 74 (typeSuffix -> .)
    GREATER_EQ_DIFF reduce using rule 74 (typeSuffix -> .)
    GREATER_DIFF    reduce using rule 74 (typeSuffix -> .)
    RPAREN          reduce using rule 74 (typeSuffix -> .)
    RANGE           reduce using rule 74 (typeSuffix -> .)
    COLON           reduce using rule 74 (typeSuffix -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! CARET           [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! DIV             [ reduce using rule 161 (empty -> .) ]
  ! MODULO          [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! TILDE           [ reduce using rule 161 (empty -> .) ]
  ! $end            [ reduce using rule 161 (empty -> .) ]
  ! RIGHT_SHIFT     [ reduce using rule 161 (empty -> .) ]
  ! LEFT_SHIFT      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ           [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! PIPE            [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 161 (empty -> .) ]
  ! QUESTION        [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_PIPE     [ reduce using rule 161 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 161 (empty -> .) ]
  ! EQ_LEFT         [ reduce using rule 161 (empty -> .) ]
  ! EQ_RIGHT        [ reduce using rule 161 (empty -> .) ]
  ! EQ_PLUS         [ reduce using rule 161 (empty -> .) ]
  ! EQ_MINUS        [ reduce using rule 161 (empty -> .) ]
  ! EQ_TIMES        [ reduce using rule 161 (empty -> .) ]
  ! EQ_MODULO       [ reduce using rule 161 (empty -> .) ]
  ! EQ_AND_BIT      [ reduce using rule 161 (empty -> .) ]
  ! EQ_DIV          [ reduce using rule 161 (empty -> .) ]
  ! EQ_OR_BIT       [ reduce using rule 161 (empty -> .) ]
  ! EQ_XOR_BIT      [ reduce using rule 161 (empty -> .) ]
  ! COMMA           [ reduce using rule 161 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! LESS            [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ         [ reduce using rule 161 (empty -> .) ]
  ! GREATER         [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ_DIFF      [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! LESS_DIFF       [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 161 (empty -> .) ]
  ! GREATER_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! RPAREN          [ reduce using rule 161 (empty -> .) ]
  ! RANGE           [ reduce using rule 161 (empty -> .) ]
  ! COLON           [ reduce using rule 161 (empty -> .) ]

    typeSuffix                     shift and go to state 99
    empty                          shift and go to state 98
    typeSuffixStar                 shift and go to state 184

state 100

    (88) type2 -> typeofExpression DOT . identifierOrTemplateChain
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 86

    identifierOrTemplateInstance   shift and go to state 85
    identifierOrTemplateChain      shift and go to state 185

state 101

    (54) castExpression -> CAST LPAREN . RPAREN unaryExpression
    (55) castExpression -> CAST LPAREN . type RPAREN unaryExpression
    (56) castExpression -> CAST LPAREN . castQualifier RPAREN unaryExpression
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (57) castQualifier -> . CONST
    (58) castQualifier -> . IMMUTABLE
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    RPAREN          shift and go to state 187
    CONST           shift and go to state 186
    IMMUTABLE       shift and go to state 190
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    DOT             shift and go to state 84
    TYPEOF          shift and go to state 25
    IDENTIFIER      shift and go to state 86

    typeConstructor                shift and go to state 89
    builtinType                    shift and go to state 36
    symbol                         shift and go to state 88
    typeofExpression               shift and go to state 19
    identifierOrTemplateChain      shift and go to state 5
    identifierOrTemplateInstance   shift and go to state 85
    castQualifier                  shift and go to state 188
    typeConstructors               shift and go to state 33
    type                           shift and go to state 189
    type2                          shift and go to state 17

state 102

    (91) typeofExpression -> TYPEOF LBRACKET . expression RBRACKET
    (92) typeofExpression -> TYPEOF LBRACKET . RETURN RBRACKET
    (106) expression -> . assignExpression
    (107) expression -> . expression COMMA assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    RETURN          shift and go to state 191
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 123
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63
    expression                     shift and go to state 192

state 103

    (15) unaryExpression -> PLUS unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    TIMES           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    DIV             reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    MODULO          reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    PLUS            reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    MINUS           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    TILDE           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    IS_EQ           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    NOT_EQ          reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    AMPERSAND       reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    PIPE            reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    QUESTION        reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    ASSIGN          reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_LEFT         reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_RIGHT        reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_PLUS         reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_MINUS        reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_TIMES        reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_MODULO       reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_DIV          reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    RBRACKET        reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    COMMA           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    LESS            reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    LESS_EQ         reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    GREATER         reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    GREATER_EQ      reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    LESS_DIFF       reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    GREATER_DIFF    reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    $end            reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    RPAREN          reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    RANGE           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    COLON           reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    LPAREN          reduce using rule 15 (unaryExpression -> PLUS unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 15 (unaryExpression -> PLUS unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 15 (unaryExpression -> PLUS unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 15 (unaryExpression -> PLUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 15 (unaryExpression -> PLUS unaryExpression .) ]


state 104

    (7) mulExpression -> mulExpression DIV . powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 193
    typeConstructor                shift and go to state 63

state 105

    (8) mulExpression -> mulExpression MODULO . powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 194
    typeConstructor                shift and go to state 63

state 106

    (6) mulExpression -> mulExpression TIMES . powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 195
    typeConstructor                shift and go to state 63

state 107

    (2) addExpression -> addExpression PLUS . mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 196
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 108

    (3) addExpression -> addExpression MINUS . mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 197
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 109

    (4) addExpression -> addExpression TILDE . mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 198
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 110

    (111) functionLiteralExpression -> IDENTIFIER assignExpression .

    DOT             reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PLUS_PLUS       reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MINUS_MINUS     reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LBRACKET        reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    CARET           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TIMES           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DIV             reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MODULO          reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PLUS            reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    MINUS           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    TILDE           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    $end            reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RIGHT_SHIFT     reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LEFT_SHIFT      reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IS_EQ           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    NOT_EQ          reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    AMPERSAND       reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    PIPE            reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    QUESTION        reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    DOUBLE_PIPE     reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    ASSIGN          reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_LEFT         reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_RIGHT        reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_PLUS         reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_MINUS        reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_TIMES        reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_MODULO       reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_AND_BIT      reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_DIV          reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_OR_BIT       reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    EQ_XOR_BIT      reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    COMMA           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RBRACKET        reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS            reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_EQ         reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER         reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_EQ      reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    IS_EQ_DIFF      reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    NOT_EQ_DIFF     reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_EQ_DIFF    reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LESS_DIFF       reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_EQ_DIFF reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    GREATER_DIFF    reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RPAREN          reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    RANGE           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    COLON           reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)
    LPAREN          reduce using rule 111 (functionLiteralExpression -> IDENTIFIER assignExpression .)


state 111

    (35) primaryExpression -> type arguments .
    (60) functionCallExpression -> type arguments .

  ! reduce/reduce conflict for DOT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for CARET resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for TIMES resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for DIV resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for MODULO resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for PLUS resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for TILDE resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for $end resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for PIPE resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for QUESTION resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for RANGE resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (primaryExpression -> type arguments .)
  ! reduce/reduce conflict for LPAREN resolved using rule 35 (primaryExpression -> type arguments .)
    DOT             reduce using rule 35 (primaryExpression -> type arguments .)
    PLUS_PLUS       reduce using rule 35 (primaryExpression -> type arguments .)
    MINUS_MINUS     reduce using rule 35 (primaryExpression -> type arguments .)
    LBRACKET        reduce using rule 35 (primaryExpression -> type arguments .)
    LPAREN          reduce using rule 35 (primaryExpression -> type arguments .)
    CARET           reduce using rule 35 (primaryExpression -> type arguments .)
    TIMES           reduce using rule 35 (primaryExpression -> type arguments .)
    DIV             reduce using rule 35 (primaryExpression -> type arguments .)
    MODULO          reduce using rule 35 (primaryExpression -> type arguments .)
    PLUS            reduce using rule 35 (primaryExpression -> type arguments .)
    MINUS           reduce using rule 35 (primaryExpression -> type arguments .)
    TILDE           reduce using rule 35 (primaryExpression -> type arguments .)
    $end            reduce using rule 35 (primaryExpression -> type arguments .)
    RIGHT_SHIFT     reduce using rule 35 (primaryExpression -> type arguments .)
    LEFT_SHIFT      reduce using rule 35 (primaryExpression -> type arguments .)
    IS_EQ           reduce using rule 35 (primaryExpression -> type arguments .)
    NOT_EQ          reduce using rule 35 (primaryExpression -> type arguments .)
    AMPERSAND       reduce using rule 35 (primaryExpression -> type arguments .)
    PIPE            reduce using rule 35 (primaryExpression -> type arguments .)
    DOUBLE_AMPERSAND reduce using rule 35 (primaryExpression -> type arguments .)
    QUESTION        reduce using rule 35 (primaryExpression -> type arguments .)
    DOUBLE_PIPE     reduce using rule 35 (primaryExpression -> type arguments .)
    ASSIGN          reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_LEFT         reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_RIGHT        reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_PLUS         reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_MINUS        reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_TIMES        reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_MODULO       reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_AND_BIT      reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_DIV          reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_OR_BIT       reduce using rule 35 (primaryExpression -> type arguments .)
    EQ_XOR_BIT      reduce using rule 35 (primaryExpression -> type arguments .)
    COMMA           reduce using rule 35 (primaryExpression -> type arguments .)
    RBRACKET        reduce using rule 35 (primaryExpression -> type arguments .)
    LESS            reduce using rule 35 (primaryExpression -> type arguments .)
    LESS_EQ         reduce using rule 35 (primaryExpression -> type arguments .)
    GREATER         reduce using rule 35 (primaryExpression -> type arguments .)
    GREATER_EQ      reduce using rule 35 (primaryExpression -> type arguments .)
    IS_EQ_DIFF      reduce using rule 35 (primaryExpression -> type arguments .)
    NOT_EQ_DIFF     reduce using rule 35 (primaryExpression -> type arguments .)
    LESS_EQ_DIFF    reduce using rule 35 (primaryExpression -> type arguments .)
    LESS_DIFF       reduce using rule 35 (primaryExpression -> type arguments .)
    GREATER_EQ_DIFF reduce using rule 35 (primaryExpression -> type arguments .)
    GREATER_DIFF    reduce using rule 35 (primaryExpression -> type arguments .)
    RPAREN          reduce using rule 35 (primaryExpression -> type arguments .)
    RANGE           reduce using rule 35 (primaryExpression -> type arguments .)
    COLON           reduce using rule 35 (primaryExpression -> type arguments .)

  ! DOT             [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! PLUS_PLUS       [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! MINUS_MINUS     [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! LBRACKET        [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! CARET           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! TIMES           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! DIV             [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! MODULO          [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! PLUS            [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! MINUS           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! TILDE           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! $end            [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! RIGHT_SHIFT     [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! LEFT_SHIFT      [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! IS_EQ           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! NOT_EQ          [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! AMPERSAND       [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! PIPE            [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! QUESTION        [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! DOUBLE_PIPE     [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! ASSIGN          [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_LEFT         [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_RIGHT        [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_PLUS         [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_MINUS        [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_TIMES        [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_MODULO       [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_AND_BIT      [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_DIV          [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_OR_BIT       [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! EQ_XOR_BIT      [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! COMMA           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! RBRACKET        [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! LESS            [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! LESS_EQ         [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! GREATER         [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! GREATER_EQ      [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! IS_EQ_DIFF      [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! LESS_DIFF       [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! GREATER_DIFF    [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! RPAREN          [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! RANGE           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! COLON           [ reduce using rule 60 (functionCallExpression -> type arguments .) ]
  ! LPAREN          [ reduce using rule 60 (functionCallExpression -> type arguments .) ]


state 112

    (97) arguments -> LPAREN . argumentList_question RPAREN
    (98) argumentList_question -> . argumentList
    (99) argumentList_question -> . empty
    (100) argumentList -> . assignExpression
    (101) argumentList -> . argumentList comma_assign
    (161) empty -> .
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET

  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RPAREN          reduce using rule 161 (empty -> .)
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    argumentList                   shift and go to state 78
    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    newExpression                  shift and go to state 39
    argumentList_question          shift and go to state 199
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 74
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    identifierOrTemplateInstance   shift and go to state 45
    assignExpression               shift and go to state 72
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    typeConstructor                shift and go to state 63
    primaryExpression              shift and go to state 51
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62

state 113

    (34) primaryExpression -> type DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 200


state 114

    (19) unaryExpression -> MINUS_MINUS unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    TIMES           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DIV             reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    MODULO          reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    PLUS            reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    MINUS           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    TILDE           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    IS_EQ           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    NOT_EQ          reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    AMPERSAND       reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    PIPE            reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    QUESTION        reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    ASSIGN          reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_LEFT         reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_RIGHT        reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_PLUS         reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_MINUS        reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_TIMES        reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_MODULO       reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_DIV          reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RBRACKET        reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    COMMA           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS            reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS_EQ         reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER         reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER_EQ      reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LESS_DIFF       reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    GREATER_DIFF    reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    $end            reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RPAREN          reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    RANGE           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    COLON           reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    LPAREN          reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 19 (unaryExpression -> MINUS_MINUS unaryExpression .) ]


state 115

    (72) type -> typeConstructors type2 . typeSuffixStar
    (84) typeSuffixStar -> . typeSuffix typeSuffixStar
    (85) typeSuffixStar -> . empty
    (74) typeSuffix -> .
    (161) empty -> .

  ! reduce/reduce conflict for DOT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PLUS_PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MINUS_MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for CARET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for TIMES resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DIV resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MODULO resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for TILDE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for $end resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RIGHT_SHIFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LEFT_SHIFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for IS_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for AMPERSAND resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for PIPE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DOUBLE_AMPERSAND resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for QUESTION resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for DOUBLE_PIPE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_LEFT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_RIGHT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_PLUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_MINUS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_TIMES resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_MODULO resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_AND_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_DIV resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_OR_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for EQ_XOR_BIT resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for IS_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for NOT_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for LESS_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_EQ_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for GREATER_DIFF resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for RANGE resolved using rule 74 (typeSuffix -> .)
  ! reduce/reduce conflict for COLON resolved using rule 74 (typeSuffix -> .)
    DOT             reduce using rule 74 (typeSuffix -> .)
    LPAREN          reduce using rule 74 (typeSuffix -> .)
    LBRACKET        reduce using rule 74 (typeSuffix -> .)
    PLUS_PLUS       reduce using rule 74 (typeSuffix -> .)
    MINUS_MINUS     reduce using rule 74 (typeSuffix -> .)
    CARET           reduce using rule 74 (typeSuffix -> .)
    TIMES           reduce using rule 74 (typeSuffix -> .)
    DIV             reduce using rule 74 (typeSuffix -> .)
    MODULO          reduce using rule 74 (typeSuffix -> .)
    PLUS            reduce using rule 74 (typeSuffix -> .)
    MINUS           reduce using rule 74 (typeSuffix -> .)
    TILDE           reduce using rule 74 (typeSuffix -> .)
    $end            reduce using rule 74 (typeSuffix -> .)
    RIGHT_SHIFT     reduce using rule 74 (typeSuffix -> .)
    LEFT_SHIFT      reduce using rule 74 (typeSuffix -> .)
    IS_EQ           reduce using rule 74 (typeSuffix -> .)
    NOT_EQ          reduce using rule 74 (typeSuffix -> .)
    AMPERSAND       reduce using rule 74 (typeSuffix -> .)
    PIPE            reduce using rule 74 (typeSuffix -> .)
    DOUBLE_AMPERSAND reduce using rule 74 (typeSuffix -> .)
    QUESTION        reduce using rule 74 (typeSuffix -> .)
    DOUBLE_PIPE     reduce using rule 74 (typeSuffix -> .)
    ASSIGN          reduce using rule 74 (typeSuffix -> .)
    EQ_LEFT         reduce using rule 74 (typeSuffix -> .)
    EQ_RIGHT        reduce using rule 74 (typeSuffix -> .)
    EQ_PLUS         reduce using rule 74 (typeSuffix -> .)
    EQ_MINUS        reduce using rule 74 (typeSuffix -> .)
    EQ_TIMES        reduce using rule 74 (typeSuffix -> .)
    EQ_MODULO       reduce using rule 74 (typeSuffix -> .)
    EQ_AND_BIT      reduce using rule 74 (typeSuffix -> .)
    EQ_DIV          reduce using rule 74 (typeSuffix -> .)
    EQ_OR_BIT       reduce using rule 74 (typeSuffix -> .)
    EQ_XOR_BIT      reduce using rule 74 (typeSuffix -> .)
    COMMA           reduce using rule 74 (typeSuffix -> .)
    RBRACKET        reduce using rule 74 (typeSuffix -> .)
    LESS            reduce using rule 74 (typeSuffix -> .)
    LESS_EQ         reduce using rule 74 (typeSuffix -> .)
    GREATER         reduce using rule 74 (typeSuffix -> .)
    GREATER_EQ      reduce using rule 74 (typeSuffix -> .)
    IS_EQ_DIFF      reduce using rule 74 (typeSuffix -> .)
    NOT_EQ_DIFF     reduce using rule 74 (typeSuffix -> .)
    LESS_EQ_DIFF    reduce using rule 74 (typeSuffix -> .)
    LESS_DIFF       reduce using rule 74 (typeSuffix -> .)
    GREATER_EQ_DIFF reduce using rule 74 (typeSuffix -> .)
    GREATER_DIFF    reduce using rule 74 (typeSuffix -> .)
    RPAREN          reduce using rule 74 (typeSuffix -> .)
    RANGE           reduce using rule 74 (typeSuffix -> .)
    COLON           reduce using rule 74 (typeSuffix -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! CARET           [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! DIV             [ reduce using rule 161 (empty -> .) ]
  ! MODULO          [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! TILDE           [ reduce using rule 161 (empty -> .) ]
  ! $end            [ reduce using rule 161 (empty -> .) ]
  ! RIGHT_SHIFT     [ reduce using rule 161 (empty -> .) ]
  ! LEFT_SHIFT      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ           [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ          [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! PIPE            [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_AMPERSAND [ reduce using rule 161 (empty -> .) ]
  ! QUESTION        [ reduce using rule 161 (empty -> .) ]
  ! DOUBLE_PIPE     [ reduce using rule 161 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 161 (empty -> .) ]
  ! EQ_LEFT         [ reduce using rule 161 (empty -> .) ]
  ! EQ_RIGHT        [ reduce using rule 161 (empty -> .) ]
  ! EQ_PLUS         [ reduce using rule 161 (empty -> .) ]
  ! EQ_MINUS        [ reduce using rule 161 (empty -> .) ]
  ! EQ_TIMES        [ reduce using rule 161 (empty -> .) ]
  ! EQ_MODULO       [ reduce using rule 161 (empty -> .) ]
  ! EQ_AND_BIT      [ reduce using rule 161 (empty -> .) ]
  ! EQ_DIV          [ reduce using rule 161 (empty -> .) ]
  ! EQ_OR_BIT       [ reduce using rule 161 (empty -> .) ]
  ! EQ_XOR_BIT      [ reduce using rule 161 (empty -> .) ]
  ! COMMA           [ reduce using rule 161 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! LESS            [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ         [ reduce using rule 161 (empty -> .) ]
  ! GREATER         [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ      [ reduce using rule 161 (empty -> .) ]
  ! IS_EQ_DIFF      [ reduce using rule 161 (empty -> .) ]
  ! NOT_EQ_DIFF     [ reduce using rule 161 (empty -> .) ]
  ! LESS_EQ_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! LESS_DIFF       [ reduce using rule 161 (empty -> .) ]
  ! GREATER_EQ_DIFF [ reduce using rule 161 (empty -> .) ]
  ! GREATER_DIFF    [ reduce using rule 161 (empty -> .) ]
  ! RPAREN          [ reduce using rule 161 (empty -> .) ]
  ! RANGE           [ reduce using rule 161 (empty -> .) ]
  ! COLON           [ reduce using rule 161 (empty -> .) ]

    typeSuffixStar                 shift and go to state 201
    empty                          shift and go to state 98
    typeSuffix                     shift and go to state 99

state 116

    (90) type2 -> typeConstructor . LBRACKET type RBRACKET

    LBRACKET        shift and go to state 134


state 117

    (109) functionLiteralExpression -> FUNCTION type . functionBody
    (104) functionBody -> . empty
    (161) empty -> .

    DOT             reduce using rule 161 (empty -> .)
    PLUS_PLUS       reduce using rule 161 (empty -> .)
    MINUS_MINUS     reduce using rule 161 (empty -> .)
    LBRACKET        reduce using rule 161 (empty -> .)
    CARET           reduce using rule 161 (empty -> .)
    TIMES           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    PLUS            reduce using rule 161 (empty -> .)
    MINUS           reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    AMPERSAND       reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)
    LPAREN          reduce using rule 161 (empty -> .)

    functionBody                   shift and go to state 202
    empty                          shift and go to state 60

state 118

    (108) functionLiteralExpression -> FUNCTION functionBody .

    DOT             reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    PLUS_PLUS       reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    MINUS_MINUS     reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    LBRACKET        reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    CARET           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    TIMES           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    DIV             reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    MODULO          reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    PLUS            reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    MINUS           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    TILDE           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    $end            reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    RIGHT_SHIFT     reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    LEFT_SHIFT      reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    IS_EQ           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    NOT_EQ          reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    AMPERSAND       reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    PIPE            reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    DOUBLE_AMPERSAND reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    QUESTION        reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    DOUBLE_PIPE     reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    ASSIGN          reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_LEFT         reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_RIGHT        reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_PLUS         reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_MINUS        reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_TIMES        reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_MODULO       reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_AND_BIT      reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_DIV          reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_OR_BIT       reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    EQ_XOR_BIT      reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    COMMA           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    RBRACKET        reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS            reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_EQ         reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER         reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_EQ      reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    IS_EQ_DIFF      reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    NOT_EQ_DIFF     reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_EQ_DIFF    reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    LESS_DIFF       reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_EQ_DIFF reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    GREATER_DIFF    reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    RPAREN          reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    RANGE           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    COLON           reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)
    LPAREN          reduce using rule 108 (functionLiteralExpression -> FUNCTION functionBody .)


state 119

    (59) functionCallExpression -> symbol arguments . unaryExpression arguments
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 203
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 120

    (14) unaryExpression -> TIMES unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    TIMES           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    DIV             reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    MODULO          reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    PLUS            reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    MINUS           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    TILDE           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    RIGHT_SHIFT     reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    LEFT_SHIFT      reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    IS_EQ           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    NOT_EQ          reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    AMPERSAND       reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    PIPE            reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    QUESTION        reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    DOUBLE_PIPE     reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    ASSIGN          reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_LEFT         reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_RIGHT        reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_PLUS         reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_MINUS        reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_TIMES        reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_MODULO       reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_AND_BIT      reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_DIV          reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_OR_BIT       reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    EQ_XOR_BIT      reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    RBRACKET        reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    COMMA           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    LESS            reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    LESS_EQ         reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    GREATER         reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    GREATER_EQ      reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    IS_EQ_DIFF      reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    LESS_DIFF       reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    GREATER_DIFF    reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    $end            reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    RPAREN          reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    RANGE           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    COLON           reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    LPAREN          reduce using rule 14 (unaryExpression -> TIMES unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 14 (unaryExpression -> TIMES unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 14 (unaryExpression -> TIMES unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 14 (unaryExpression -> TIMES unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 14 (unaryExpression -> TIMES unaryExpression .) ]


state 121

    (12) unaryExpression -> AMPERSAND unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    TIMES           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    DIV             reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    MODULO          reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    PLUS            reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    MINUS           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    TILDE           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    RIGHT_SHIFT     reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    LEFT_SHIFT      reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    IS_EQ           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    NOT_EQ          reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    AMPERSAND       reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    PIPE            reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    QUESTION        reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    DOUBLE_PIPE     reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    ASSIGN          reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_LEFT         reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_RIGHT        reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_PLUS         reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_MINUS        reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_TIMES        reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_MODULO       reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_AND_BIT      reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_DIV          reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_OR_BIT       reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    EQ_XOR_BIT      reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    RBRACKET        reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    COMMA           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS            reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS_EQ         reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER         reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER_EQ      reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    IS_EQ_DIFF      reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    LESS_DIFF       reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    GREATER_DIFF    reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    $end            reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    RPAREN          reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    RANGE           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    COLON           reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    LPAREN          reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 12 (unaryExpression -> AMPERSAND unaryExpression .) ]


state 122

    (93) typeConstructors -> typeConstructor .
    (94) typeConstructors -> typeConstructor . typeConstructors
    (90) type2 -> typeConstructor . LBRACKET type RBRACKET
    (33) primaryExpression -> typeConstructor . LPAREN type RPAREN DOT IDENTIFIER
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    BOOL            reduce using rule 93 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 93 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 93 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 93 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 93 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 93 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 93 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 93 (typeConstructors -> typeConstructor .)
    LBRACKET        shift and go to state 134
    LPAREN          shift and go to state 135
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23

  ! CONST           [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 133
    typeConstructors               shift and go to state 136

state 123

    (106) expression -> assignExpression .

    COLON           reduce using rule 106 (expression -> assignExpression .)
    COMMA           reduce using rule 106 (expression -> assignExpression .)
    RPAREN          reduce using rule 106 (expression -> assignExpression .)
    DOT             reduce using rule 106 (expression -> assignExpression .)
    PLUS_PLUS       reduce using rule 106 (expression -> assignExpression .)
    MINUS_MINUS     reduce using rule 106 (expression -> assignExpression .)
    LBRACKET        reduce using rule 106 (expression -> assignExpression .)
    CARET           reduce using rule 106 (expression -> assignExpression .)
    TIMES           reduce using rule 106 (expression -> assignExpression .)
    DIV             reduce using rule 106 (expression -> assignExpression .)
    MODULO          reduce using rule 106 (expression -> assignExpression .)
    PLUS            reduce using rule 106 (expression -> assignExpression .)
    MINUS           reduce using rule 106 (expression -> assignExpression .)
    TILDE           reduce using rule 106 (expression -> assignExpression .)
    $end            reduce using rule 106 (expression -> assignExpression .)
    RIGHT_SHIFT     reduce using rule 106 (expression -> assignExpression .)
    LEFT_SHIFT      reduce using rule 106 (expression -> assignExpression .)
    IS_EQ           reduce using rule 106 (expression -> assignExpression .)
    NOT_EQ          reduce using rule 106 (expression -> assignExpression .)
    AMPERSAND       reduce using rule 106 (expression -> assignExpression .)
    PIPE            reduce using rule 106 (expression -> assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 106 (expression -> assignExpression .)
    QUESTION        reduce using rule 106 (expression -> assignExpression .)
    DOUBLE_PIPE     reduce using rule 106 (expression -> assignExpression .)
    ASSIGN          reduce using rule 106 (expression -> assignExpression .)
    EQ_LEFT         reduce using rule 106 (expression -> assignExpression .)
    EQ_RIGHT        reduce using rule 106 (expression -> assignExpression .)
    EQ_PLUS         reduce using rule 106 (expression -> assignExpression .)
    EQ_MINUS        reduce using rule 106 (expression -> assignExpression .)
    EQ_TIMES        reduce using rule 106 (expression -> assignExpression .)
    EQ_MODULO       reduce using rule 106 (expression -> assignExpression .)
    EQ_AND_BIT      reduce using rule 106 (expression -> assignExpression .)
    EQ_DIV          reduce using rule 106 (expression -> assignExpression .)
    EQ_OR_BIT       reduce using rule 106 (expression -> assignExpression .)
    EQ_XOR_BIT      reduce using rule 106 (expression -> assignExpression .)
    RBRACKET        reduce using rule 106 (expression -> assignExpression .)
    LESS            reduce using rule 106 (expression -> assignExpression .)
    LESS_EQ         reduce using rule 106 (expression -> assignExpression .)
    GREATER         reduce using rule 106 (expression -> assignExpression .)
    GREATER_EQ      reduce using rule 106 (expression -> assignExpression .)
    IS_EQ_DIFF      reduce using rule 106 (expression -> assignExpression .)
    NOT_EQ_DIFF     reduce using rule 106 (expression -> assignExpression .)
    LESS_EQ_DIFF    reduce using rule 106 (expression -> assignExpression .)
    LESS_DIFF       reduce using rule 106 (expression -> assignExpression .)
    GREATER_EQ_DIFF reduce using rule 106 (expression -> assignExpression .)
    GREATER_DIFF    reduce using rule 106 (expression -> assignExpression .)
    RANGE           reduce using rule 106 (expression -> assignExpression .)
    LPAREN          reduce using rule 106 (expression -> assignExpression .)


state 124

    (37) primaryExpression -> LPAREN expression . RPAREN
    (107) expression -> expression . COMMA assignExpression

    RPAREN          shift and go to state 204
    COMMA           shift and go to state 205


state 125

    (61) symbol -> DOT . identifierOrTemplateChain
    (17) unaryExpression -> DOT .
    (32) primaryExpression -> DOT . identifierOrTemplateInstance
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    DOT             reduce using rule 17 (unaryExpression -> DOT .)
    PLUS_PLUS       reduce using rule 17 (unaryExpression -> DOT .)
    MINUS_MINUS     reduce using rule 17 (unaryExpression -> DOT .)
    LBRACKET        reduce using rule 17 (unaryExpression -> DOT .)
    CARET           reduce using rule 17 (unaryExpression -> DOT .)
    TIMES           reduce using rule 17 (unaryExpression -> DOT .)
    DIV             reduce using rule 17 (unaryExpression -> DOT .)
    MODULO          reduce using rule 17 (unaryExpression -> DOT .)
    PLUS            reduce using rule 17 (unaryExpression -> DOT .)
    MINUS           reduce using rule 17 (unaryExpression -> DOT .)
    TILDE           reduce using rule 17 (unaryExpression -> DOT .)
    RIGHT_SHIFT     reduce using rule 17 (unaryExpression -> DOT .)
    LEFT_SHIFT      reduce using rule 17 (unaryExpression -> DOT .)
    IS_EQ           reduce using rule 17 (unaryExpression -> DOT .)
    NOT_EQ          reduce using rule 17 (unaryExpression -> DOT .)
    AMPERSAND       reduce using rule 17 (unaryExpression -> DOT .)
    PIPE            reduce using rule 17 (unaryExpression -> DOT .)
    DOUBLE_AMPERSAND reduce using rule 17 (unaryExpression -> DOT .)
    QUESTION        reduce using rule 17 (unaryExpression -> DOT .)
    DOUBLE_PIPE     reduce using rule 17 (unaryExpression -> DOT .)
    ASSIGN          reduce using rule 17 (unaryExpression -> DOT .)
    EQ_LEFT         reduce using rule 17 (unaryExpression -> DOT .)
    EQ_RIGHT        reduce using rule 17 (unaryExpression -> DOT .)
    EQ_PLUS         reduce using rule 17 (unaryExpression -> DOT .)
    EQ_MINUS        reduce using rule 17 (unaryExpression -> DOT .)
    EQ_TIMES        reduce using rule 17 (unaryExpression -> DOT .)
    EQ_MODULO       reduce using rule 17 (unaryExpression -> DOT .)
    EQ_AND_BIT      reduce using rule 17 (unaryExpression -> DOT .)
    EQ_DIV          reduce using rule 17 (unaryExpression -> DOT .)
    EQ_OR_BIT       reduce using rule 17 (unaryExpression -> DOT .)
    EQ_XOR_BIT      reduce using rule 17 (unaryExpression -> DOT .)
    RPAREN          reduce using rule 17 (unaryExpression -> DOT .)
    COMMA           reduce using rule 17 (unaryExpression -> DOT .)
    LESS            reduce using rule 17 (unaryExpression -> DOT .)
    LESS_EQ         reduce using rule 17 (unaryExpression -> DOT .)
    GREATER         reduce using rule 17 (unaryExpression -> DOT .)
    GREATER_EQ      reduce using rule 17 (unaryExpression -> DOT .)
    IS_EQ_DIFF      reduce using rule 17 (unaryExpression -> DOT .)
    NOT_EQ_DIFF     reduce using rule 17 (unaryExpression -> DOT .)
    LESS_EQ_DIFF    reduce using rule 17 (unaryExpression -> DOT .)
    LESS_DIFF       reduce using rule 17 (unaryExpression -> DOT .)
    GREATER_EQ_DIFF reduce using rule 17 (unaryExpression -> DOT .)
    GREATER_DIFF    reduce using rule 17 (unaryExpression -> DOT .)
    IDENTIFIER      shift and go to state 86

    identifierOrTemplateInstance   shift and go to state 95
    identifierOrTemplateChain      shift and go to state 96

state 126

    (63) identifierOrTemplateChain -> identifierOrTemplateInstance .
    (31) primaryExpression -> identifierOrTemplateInstance .

  ! reduce/reduce conflict for DOT resolved using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
  ! reduce/reduce conflict for RPAREN resolved using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LPAREN          reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .)
    DOT             reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    CARET           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    TIMES           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    DIV             reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    MODULO          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    PLUS            reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    MINUS           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    TILDE           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    PIPE            reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    QUESTION        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    RPAREN          reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    COMMA           reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS            reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER         reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 31 (primaryExpression -> identifierOrTemplateInstance .)

  ! DOT             [ reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]
  ! RPAREN          [ reduce using rule 63 (identifierOrTemplateChain -> identifierOrTemplateInstance .) ]


state 127

    (26) unaryExpression -> LPAREN type . RPAREN DOT identifierOrTemplateInstance
    (34) primaryExpression -> type . DOT IDENTIFIER
    (35) primaryExpression -> type . arguments
    (60) functionCallExpression -> type . arguments
    (97) arguments -> . LPAREN argumentList_question RPAREN

    RPAREN          shift and go to state 206
    DOT             shift and go to state 113
    LPAREN          shift and go to state 112

    arguments                      shift and go to state 111

state 128

    (87) type2 -> symbol .
    (59) functionCallExpression -> symbol . arguments unaryExpression arguments
    (97) arguments -> . LPAREN argumentList_question RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    RPAREN          reduce using rule 87 (type2 -> symbol .)
    DOT             reduce using rule 87 (type2 -> symbol .)
    LPAREN          shift and go to state 112

  ! LPAREN          [ reduce using rule 87 (type2 -> symbol .) ]

    arguments                      shift and go to state 119

state 129

    (114) LIT_STRPlus -> LIT_STR LIT_STRPlus .

    DOT             reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS_PLUS       reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS_MINUS     reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LBRACKET        reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    CARET           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TIMES           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DIV             reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MODULO          reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PLUS            reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    MINUS           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    TILDE           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    $end            reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RIGHT_SHIFT     reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LEFT_SHIFT      reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ          reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    AMPERSAND       reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    PIPE            reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_AMPERSAND reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    QUESTION        reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    DOUBLE_PIPE     reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    ASSIGN          reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_LEFT         reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_RIGHT        reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_PLUS         reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MINUS        reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_TIMES        reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_MODULO       reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_AND_BIT      reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_DIV          reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_OR_BIT       reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    EQ_XOR_BIT      reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COMMA           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RBRACKET        reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS            reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ         reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER         reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ      reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    IS_EQ_DIFF      reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    NOT_EQ_DIFF     reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_EQ_DIFF    reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LESS_DIFF       reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_EQ_DIFF reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    GREATER_DIFF    reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RPAREN          reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    RANGE           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    COLON           reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)
    LPAREN          reduce using rule 114 (LIT_STRPlus -> LIT_STR LIT_STRPlus .)


state 130

    (112) mixinExpression -> MIXIN LPAREN . assignExpression RPAREN
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 207
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 131

    (18) unaryExpression -> PLUS_PLUS unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TIMES           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DIV             reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    MODULO          reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    PLUS            reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    MINUS           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    TILDE           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RIGHT_SHIFT     reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LEFT_SHIFT      reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IS_EQ           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    NOT_EQ          reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    AMPERSAND       reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    PIPE            reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    QUESTION        reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOUBLE_PIPE     reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    ASSIGN          reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_LEFT         reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_RIGHT        reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_PLUS         reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_MINUS        reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_TIMES        reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_MODULO       reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_AND_BIT      reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_DIV          reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_OR_BIT       reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    EQ_XOR_BIT      reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RBRACKET        reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    COMMA           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS            reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_EQ         reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER         reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_EQ      reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    IS_EQ_DIFF      reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LESS_DIFF       reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    GREATER_DIFF    reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    $end            reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RPAREN          reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    RANGE           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    COLON           reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    LPAREN          reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 18 (unaryExpression -> PLUS_PLUS unaryExpression .) ]


state 132

    (10) powExpression -> powExpression CARET . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 208
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 133

    (93) typeConstructors -> typeConstructor .
    (94) typeConstructors -> typeConstructor . typeConstructors
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE

  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IMMUTABLE resolved as shift
    BOOL            reduce using rule 93 (typeConstructors -> typeConstructor .)
    SHORT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    USHORT          reduce using rule 93 (typeConstructors -> typeConstructor .)
    INT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    UINT            reduce using rule 93 (typeConstructors -> typeConstructor .)
    LONG            reduce using rule 93 (typeConstructors -> typeConstructor .)
    ULONG           reduce using rule 93 (typeConstructors -> typeConstructor .)
    CHAR            reduce using rule 93 (typeConstructors -> typeConstructor .)
    FLOAT           reduce using rule 93 (typeConstructors -> typeConstructor .)
    DOT             reduce using rule 93 (typeConstructors -> typeConstructor .)
    TYPEOF          reduce using rule 93 (typeConstructors -> typeConstructor .)
    IDENTIFIER      reduce using rule 93 (typeConstructors -> typeConstructor .)
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23

  ! CONST           [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]
  ! IMMUTABLE       [ reduce using rule 93 (typeConstructors -> typeConstructor .) ]

    typeConstructor                shift and go to state 133
    typeConstructors               shift and go to state 136

state 134

    (90) type2 -> typeConstructor LBRACKET . type RBRACKET
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    DOT             shift and go to state 84
    TYPEOF          shift and go to state 25
    IDENTIFIER      shift and go to state 86

    builtinType                    shift and go to state 36
    typeConstructors               shift and go to state 33
    symbol                         shift and go to state 88
    typeofExpression               shift and go to state 19
    identifierOrTemplateChain      shift and go to state 5
    identifierOrTemplateInstance   shift and go to state 85
    typeConstructor                shift and go to state 89
    type                           shift and go to state 209
    type2                          shift and go to state 17

state 135

    (33) primaryExpression -> typeConstructor LPAREN . type RPAREN DOT IDENTIFIER
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    DOT             shift and go to state 84
    TYPEOF          shift and go to state 25
    IDENTIFIER      shift and go to state 86

    builtinType                    shift and go to state 36
    typeConstructors               shift and go to state 33
    symbol                         shift and go to state 88
    typeofExpression               shift and go to state 19
    identifierOrTemplateChain      shift and go to state 5
    identifierOrTemplateInstance   shift and go to state 85
    typeConstructor                shift and go to state 89
    type                           shift and go to state 210
    type2                          shift and go to state 17

state 136

    (94) typeConstructors -> typeConstructor typeConstructors .

    BOOL            reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    SHORT           reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    USHORT          reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    INT             reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    UINT            reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    LONG            reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    ULONG           reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    CHAR            reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    FLOAT           reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    DOT             reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    TYPEOF          reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    CONST           reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    IMMUTABLE       reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)
    IDENTIFIER      reduce using rule 94 (typeConstructors -> typeConstructor typeConstructors .)


state 137

    (53) deleteExpression -> DELETE unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    TIMES           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    DIV             reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    MODULO          reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    PLUS            reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    MINUS           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    TILDE           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    $end            reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    RIGHT_SHIFT     reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    LEFT_SHIFT      reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    IS_EQ           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    NOT_EQ          reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    AMPERSAND       reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    PIPE            reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    QUESTION        reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    DOUBLE_PIPE     reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    ASSIGN          reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_LEFT         reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_RIGHT        reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_PLUS         reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_MINUS        reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_TIMES        reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_MODULO       reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_AND_BIT      reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_DIV          reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_OR_BIT       reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    EQ_XOR_BIT      reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    COMMA           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    RBRACKET        reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    LESS            reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    LESS_EQ         reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    GREATER         reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    GREATER_EQ      reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    IS_EQ_DIFF      reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    LESS_DIFF       reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    GREATER_DIFF    reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    RPAREN          reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    RANGE           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    COLON           reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    LPAREN          reduce using rule 53 (deleteExpression -> DELETE unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 53 (deleteExpression -> DELETE unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 53 (deleteExpression -> DELETE unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 53 (deleteExpression -> DELETE unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 53 (deleteExpression -> DELETE unaryExpression .) ]


state 138

    (64) identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .

    DOT             reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    $end            reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 64 (identifierOrTemplateChain -> identifierOrTemplateChain DOT identifierOrTemplateInstance .)


state 139

    (138) xorExpression -> xorExpression CARET . andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    equalExpression                shift and go to state 81
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 211
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 140

    (152) relOperator -> LESS_EQ .

    AMPERSAND       reduce using rule 152 (relOperator -> LESS_EQ .)
    EXCLAMATION     reduce using rule 152 (relOperator -> LESS_EQ .)
    TIMES           reduce using rule 152 (relOperator -> LESS_EQ .)
    PLUS            reduce using rule 152 (relOperator -> LESS_EQ .)
    MINUS           reduce using rule 152 (relOperator -> LESS_EQ .)
    DOT             reduce using rule 152 (relOperator -> LESS_EQ .)
    PLUS_PLUS       reduce using rule 152 (relOperator -> LESS_EQ .)
    MINUS_MINUS     reduce using rule 152 (relOperator -> LESS_EQ .)
    ELLIPSIS        reduce using rule 152 (relOperator -> LESS_EQ .)
    LPAREN          reduce using rule 152 (relOperator -> LESS_EQ .)
    DOLLAR          reduce using rule 152 (relOperator -> LESS_EQ .)
    THIS            reduce using rule 152 (relOperator -> LESS_EQ .)
    NULL            reduce using rule 152 (relOperator -> LESS_EQ .)
    TRUE            reduce using rule 152 (relOperator -> LESS_EQ .)
    FALSE           reduce using rule 152 (relOperator -> LESS_EQ .)
    INUMBER         reduce using rule 152 (relOperator -> LESS_EQ .)
    DNUMBER         reduce using rule 152 (relOperator -> LESS_EQ .)
    LIT_CHAR        reduce using rule 152 (relOperator -> LESS_EQ .)
    NEW             reduce using rule 152 (relOperator -> LESS_EQ .)
    DELETE          reduce using rule 152 (relOperator -> LESS_EQ .)
    CAST            reduce using rule 152 (relOperator -> LESS_EQ .)
    IDENTIFIER      reduce using rule 152 (relOperator -> LESS_EQ .)
    CONST           reduce using rule 152 (relOperator -> LESS_EQ .)
    IMMUTABLE       reduce using rule 152 (relOperator -> LESS_EQ .)
    LBRACKET        reduce using rule 152 (relOperator -> LESS_EQ .)
    FUNCTION        reduce using rule 152 (relOperator -> LESS_EQ .)
    MIXIN           reduce using rule 152 (relOperator -> LESS_EQ .)
    IMPORT          reduce using rule 152 (relOperator -> LESS_EQ .)
    LIT_STR         reduce using rule 152 (relOperator -> LESS_EQ .)
    BOOL            reduce using rule 152 (relOperator -> LESS_EQ .)
    SHORT           reduce using rule 152 (relOperator -> LESS_EQ .)
    USHORT          reduce using rule 152 (relOperator -> LESS_EQ .)
    INT             reduce using rule 152 (relOperator -> LESS_EQ .)
    UINT            reduce using rule 152 (relOperator -> LESS_EQ .)
    LONG            reduce using rule 152 (relOperator -> LESS_EQ .)
    ULONG           reduce using rule 152 (relOperator -> LESS_EQ .)
    CHAR            reduce using rule 152 (relOperator -> LESS_EQ .)
    FLOAT           reduce using rule 152 (relOperator -> LESS_EQ .)
    TYPEOF          reduce using rule 152 (relOperator -> LESS_EQ .)
    RIGHT_SHIFT     reduce using rule 152 (relOperator -> LESS_EQ .)
    LEFT_SHIFT      reduce using rule 152 (relOperator -> LESS_EQ .)
    TILDE           reduce using rule 152 (relOperator -> LESS_EQ .)
    DIV             reduce using rule 152 (relOperator -> LESS_EQ .)
    MODULO          reduce using rule 152 (relOperator -> LESS_EQ .)
    CARET           reduce using rule 152 (relOperator -> LESS_EQ .)
    LESS            reduce using rule 152 (relOperator -> LESS_EQ .)
    LESS_EQ         reduce using rule 152 (relOperator -> LESS_EQ .)
    GREATER         reduce using rule 152 (relOperator -> LESS_EQ .)
    GREATER_EQ      reduce using rule 152 (relOperator -> LESS_EQ .)
    IS_EQ_DIFF      reduce using rule 152 (relOperator -> LESS_EQ .)
    NOT_EQ_DIFF     reduce using rule 152 (relOperator -> LESS_EQ .)
    LESS_EQ_DIFF    reduce using rule 152 (relOperator -> LESS_EQ .)
    LESS_DIFF       reduce using rule 152 (relOperator -> LESS_EQ .)
    GREATER_EQ_DIFF reduce using rule 152 (relOperator -> LESS_EQ .)
    GREATER_DIFF    reduce using rule 152 (relOperator -> LESS_EQ .)
    PIPE            reduce using rule 152 (relOperator -> LESS_EQ .)
    DOUBLE_AMPERSAND reduce using rule 152 (relOperator -> LESS_EQ .)
    QUESTION        reduce using rule 152 (relOperator -> LESS_EQ .)
    DOUBLE_PIPE     reduce using rule 152 (relOperator -> LESS_EQ .)
    ASSIGN          reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_LEFT         reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_RIGHT        reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_PLUS         reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_MINUS        reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_TIMES        reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_MODULO       reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_AND_BIT      reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_DIV          reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_OR_BIT       reduce using rule 152 (relOperator -> LESS_EQ .)
    EQ_XOR_BIT      reduce using rule 152 (relOperator -> LESS_EQ .)
    COMMA           reduce using rule 152 (relOperator -> LESS_EQ .)
    RBRACKET        reduce using rule 152 (relOperator -> LESS_EQ .)
    $end            reduce using rule 152 (relOperator -> LESS_EQ .)
    IS_EQ           reduce using rule 152 (relOperator -> LESS_EQ .)
    NOT_EQ          reduce using rule 152 (relOperator -> LESS_EQ .)
    RPAREN          reduce using rule 152 (relOperator -> LESS_EQ .)
    RANGE           reduce using rule 152 (relOperator -> LESS_EQ .)
    COLON           reduce using rule 152 (relOperator -> LESS_EQ .)


state 141

    (159) relOperator -> GREATER_EQ_DIFF .

    AMPERSAND       reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EXCLAMATION     reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    TIMES           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    PLUS            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    MINUS           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    DOT             reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    ELLIPSIS        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LPAREN          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    DOLLAR          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    THIS            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    NULL            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    TRUE            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    FALSE           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    INUMBER         reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    DNUMBER         reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LIT_CHAR        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    NEW             reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    DELETE          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    CAST            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    IDENTIFIER      reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    CONST           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    IMMUTABLE       reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LBRACKET        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    FUNCTION        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    MIXIN           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    IMPORT          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LIT_STR         reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    BOOL            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    SHORT           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    USHORT          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    INT             reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    UINT            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LONG            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    ULONG           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    CHAR            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    FLOAT           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    TYPEOF          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    RIGHT_SHIFT     reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LEFT_SHIFT      reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    TILDE           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    DIV             reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    MODULO          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    CARET           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LESS            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LESS_EQ         reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    GREATER         reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    GREATER_EQ      reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    IS_EQ_DIFF      reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    NOT_EQ_DIFF     reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LESS_EQ_DIFF    reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    LESS_DIFF       reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    GREATER_EQ_DIFF reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    GREATER_DIFF    reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    PIPE            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    DOUBLE_AMPERSAND reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    QUESTION        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    DOUBLE_PIPE     reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    ASSIGN          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_LEFT         reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_RIGHT        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_PLUS         reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_MINUS        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_TIMES        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_MODULO       reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_AND_BIT      reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_DIV          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_OR_BIT       reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    EQ_XOR_BIT      reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    COMMA           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    RBRACKET        reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    $end            reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    IS_EQ           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    NOT_EQ          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    RPAREN          reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    RANGE           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)
    COLON           reduce using rule 159 (relOperator -> GREATER_EQ_DIFF .)


state 142

    (153) relOperator -> GREATER .

    AMPERSAND       reduce using rule 153 (relOperator -> GREATER .)
    EXCLAMATION     reduce using rule 153 (relOperator -> GREATER .)
    TIMES           reduce using rule 153 (relOperator -> GREATER .)
    PLUS            reduce using rule 153 (relOperator -> GREATER .)
    MINUS           reduce using rule 153 (relOperator -> GREATER .)
    DOT             reduce using rule 153 (relOperator -> GREATER .)
    PLUS_PLUS       reduce using rule 153 (relOperator -> GREATER .)
    MINUS_MINUS     reduce using rule 153 (relOperator -> GREATER .)
    ELLIPSIS        reduce using rule 153 (relOperator -> GREATER .)
    LPAREN          reduce using rule 153 (relOperator -> GREATER .)
    DOLLAR          reduce using rule 153 (relOperator -> GREATER .)
    THIS            reduce using rule 153 (relOperator -> GREATER .)
    NULL            reduce using rule 153 (relOperator -> GREATER .)
    TRUE            reduce using rule 153 (relOperator -> GREATER .)
    FALSE           reduce using rule 153 (relOperator -> GREATER .)
    INUMBER         reduce using rule 153 (relOperator -> GREATER .)
    DNUMBER         reduce using rule 153 (relOperator -> GREATER .)
    LIT_CHAR        reduce using rule 153 (relOperator -> GREATER .)
    NEW             reduce using rule 153 (relOperator -> GREATER .)
    DELETE          reduce using rule 153 (relOperator -> GREATER .)
    CAST            reduce using rule 153 (relOperator -> GREATER .)
    IDENTIFIER      reduce using rule 153 (relOperator -> GREATER .)
    CONST           reduce using rule 153 (relOperator -> GREATER .)
    IMMUTABLE       reduce using rule 153 (relOperator -> GREATER .)
    LBRACKET        reduce using rule 153 (relOperator -> GREATER .)
    FUNCTION        reduce using rule 153 (relOperator -> GREATER .)
    MIXIN           reduce using rule 153 (relOperator -> GREATER .)
    IMPORT          reduce using rule 153 (relOperator -> GREATER .)
    LIT_STR         reduce using rule 153 (relOperator -> GREATER .)
    BOOL            reduce using rule 153 (relOperator -> GREATER .)
    SHORT           reduce using rule 153 (relOperator -> GREATER .)
    USHORT          reduce using rule 153 (relOperator -> GREATER .)
    INT             reduce using rule 153 (relOperator -> GREATER .)
    UINT            reduce using rule 153 (relOperator -> GREATER .)
    LONG            reduce using rule 153 (relOperator -> GREATER .)
    ULONG           reduce using rule 153 (relOperator -> GREATER .)
    CHAR            reduce using rule 153 (relOperator -> GREATER .)
    FLOAT           reduce using rule 153 (relOperator -> GREATER .)
    TYPEOF          reduce using rule 153 (relOperator -> GREATER .)
    RIGHT_SHIFT     reduce using rule 153 (relOperator -> GREATER .)
    LEFT_SHIFT      reduce using rule 153 (relOperator -> GREATER .)
    TILDE           reduce using rule 153 (relOperator -> GREATER .)
    DIV             reduce using rule 153 (relOperator -> GREATER .)
    MODULO          reduce using rule 153 (relOperator -> GREATER .)
    CARET           reduce using rule 153 (relOperator -> GREATER .)
    LESS            reduce using rule 153 (relOperator -> GREATER .)
    LESS_EQ         reduce using rule 153 (relOperator -> GREATER .)
    GREATER         reduce using rule 153 (relOperator -> GREATER .)
    GREATER_EQ      reduce using rule 153 (relOperator -> GREATER .)
    IS_EQ_DIFF      reduce using rule 153 (relOperator -> GREATER .)
    NOT_EQ_DIFF     reduce using rule 153 (relOperator -> GREATER .)
    LESS_EQ_DIFF    reduce using rule 153 (relOperator -> GREATER .)
    LESS_DIFF       reduce using rule 153 (relOperator -> GREATER .)
    GREATER_EQ_DIFF reduce using rule 153 (relOperator -> GREATER .)
    GREATER_DIFF    reduce using rule 153 (relOperator -> GREATER .)
    PIPE            reduce using rule 153 (relOperator -> GREATER .)
    DOUBLE_AMPERSAND reduce using rule 153 (relOperator -> GREATER .)
    QUESTION        reduce using rule 153 (relOperator -> GREATER .)
    DOUBLE_PIPE     reduce using rule 153 (relOperator -> GREATER .)
    ASSIGN          reduce using rule 153 (relOperator -> GREATER .)
    EQ_LEFT         reduce using rule 153 (relOperator -> GREATER .)
    EQ_RIGHT        reduce using rule 153 (relOperator -> GREATER .)
    EQ_PLUS         reduce using rule 153 (relOperator -> GREATER .)
    EQ_MINUS        reduce using rule 153 (relOperator -> GREATER .)
    EQ_TIMES        reduce using rule 153 (relOperator -> GREATER .)
    EQ_MODULO       reduce using rule 153 (relOperator -> GREATER .)
    EQ_AND_BIT      reduce using rule 153 (relOperator -> GREATER .)
    EQ_DIV          reduce using rule 153 (relOperator -> GREATER .)
    EQ_OR_BIT       reduce using rule 153 (relOperator -> GREATER .)
    EQ_XOR_BIT      reduce using rule 153 (relOperator -> GREATER .)
    COMMA           reduce using rule 153 (relOperator -> GREATER .)
    RBRACKET        reduce using rule 153 (relOperator -> GREATER .)
    $end            reduce using rule 153 (relOperator -> GREATER .)
    IS_EQ           reduce using rule 153 (relOperator -> GREATER .)
    NOT_EQ          reduce using rule 153 (relOperator -> GREATER .)
    RPAREN          reduce using rule 153 (relOperator -> GREATER .)
    RANGE           reduce using rule 153 (relOperator -> GREATER .)
    COLON           reduce using rule 153 (relOperator -> GREATER .)


state 143

    (151) relOperator -> LESS .

    AMPERSAND       reduce using rule 151 (relOperator -> LESS .)
    EXCLAMATION     reduce using rule 151 (relOperator -> LESS .)
    TIMES           reduce using rule 151 (relOperator -> LESS .)
    PLUS            reduce using rule 151 (relOperator -> LESS .)
    MINUS           reduce using rule 151 (relOperator -> LESS .)
    DOT             reduce using rule 151 (relOperator -> LESS .)
    PLUS_PLUS       reduce using rule 151 (relOperator -> LESS .)
    MINUS_MINUS     reduce using rule 151 (relOperator -> LESS .)
    ELLIPSIS        reduce using rule 151 (relOperator -> LESS .)
    LPAREN          reduce using rule 151 (relOperator -> LESS .)
    DOLLAR          reduce using rule 151 (relOperator -> LESS .)
    THIS            reduce using rule 151 (relOperator -> LESS .)
    NULL            reduce using rule 151 (relOperator -> LESS .)
    TRUE            reduce using rule 151 (relOperator -> LESS .)
    FALSE           reduce using rule 151 (relOperator -> LESS .)
    INUMBER         reduce using rule 151 (relOperator -> LESS .)
    DNUMBER         reduce using rule 151 (relOperator -> LESS .)
    LIT_CHAR        reduce using rule 151 (relOperator -> LESS .)
    NEW             reduce using rule 151 (relOperator -> LESS .)
    DELETE          reduce using rule 151 (relOperator -> LESS .)
    CAST            reduce using rule 151 (relOperator -> LESS .)
    IDENTIFIER      reduce using rule 151 (relOperator -> LESS .)
    CONST           reduce using rule 151 (relOperator -> LESS .)
    IMMUTABLE       reduce using rule 151 (relOperator -> LESS .)
    LBRACKET        reduce using rule 151 (relOperator -> LESS .)
    FUNCTION        reduce using rule 151 (relOperator -> LESS .)
    MIXIN           reduce using rule 151 (relOperator -> LESS .)
    IMPORT          reduce using rule 151 (relOperator -> LESS .)
    LIT_STR         reduce using rule 151 (relOperator -> LESS .)
    BOOL            reduce using rule 151 (relOperator -> LESS .)
    SHORT           reduce using rule 151 (relOperator -> LESS .)
    USHORT          reduce using rule 151 (relOperator -> LESS .)
    INT             reduce using rule 151 (relOperator -> LESS .)
    UINT            reduce using rule 151 (relOperator -> LESS .)
    LONG            reduce using rule 151 (relOperator -> LESS .)
    ULONG           reduce using rule 151 (relOperator -> LESS .)
    CHAR            reduce using rule 151 (relOperator -> LESS .)
    FLOAT           reduce using rule 151 (relOperator -> LESS .)
    TYPEOF          reduce using rule 151 (relOperator -> LESS .)
    RIGHT_SHIFT     reduce using rule 151 (relOperator -> LESS .)
    LEFT_SHIFT      reduce using rule 151 (relOperator -> LESS .)
    TILDE           reduce using rule 151 (relOperator -> LESS .)
    DIV             reduce using rule 151 (relOperator -> LESS .)
    MODULO          reduce using rule 151 (relOperator -> LESS .)
    CARET           reduce using rule 151 (relOperator -> LESS .)
    LESS            reduce using rule 151 (relOperator -> LESS .)
    LESS_EQ         reduce using rule 151 (relOperator -> LESS .)
    GREATER         reduce using rule 151 (relOperator -> LESS .)
    GREATER_EQ      reduce using rule 151 (relOperator -> LESS .)
    IS_EQ_DIFF      reduce using rule 151 (relOperator -> LESS .)
    NOT_EQ_DIFF     reduce using rule 151 (relOperator -> LESS .)
    LESS_EQ_DIFF    reduce using rule 151 (relOperator -> LESS .)
    LESS_DIFF       reduce using rule 151 (relOperator -> LESS .)
    GREATER_EQ_DIFF reduce using rule 151 (relOperator -> LESS .)
    GREATER_DIFF    reduce using rule 151 (relOperator -> LESS .)
    PIPE            reduce using rule 151 (relOperator -> LESS .)
    DOUBLE_AMPERSAND reduce using rule 151 (relOperator -> LESS .)
    QUESTION        reduce using rule 151 (relOperator -> LESS .)
    DOUBLE_PIPE     reduce using rule 151 (relOperator -> LESS .)
    ASSIGN          reduce using rule 151 (relOperator -> LESS .)
    EQ_LEFT         reduce using rule 151 (relOperator -> LESS .)
    EQ_RIGHT        reduce using rule 151 (relOperator -> LESS .)
    EQ_PLUS         reduce using rule 151 (relOperator -> LESS .)
    EQ_MINUS        reduce using rule 151 (relOperator -> LESS .)
    EQ_TIMES        reduce using rule 151 (relOperator -> LESS .)
    EQ_MODULO       reduce using rule 151 (relOperator -> LESS .)
    EQ_AND_BIT      reduce using rule 151 (relOperator -> LESS .)
    EQ_DIV          reduce using rule 151 (relOperator -> LESS .)
    EQ_OR_BIT       reduce using rule 151 (relOperator -> LESS .)
    EQ_XOR_BIT      reduce using rule 151 (relOperator -> LESS .)
    COMMA           reduce using rule 151 (relOperator -> LESS .)
    RBRACKET        reduce using rule 151 (relOperator -> LESS .)
    $end            reduce using rule 151 (relOperator -> LESS .)
    IS_EQ           reduce using rule 151 (relOperator -> LESS .)
    NOT_EQ          reduce using rule 151 (relOperator -> LESS .)
    RPAREN          reduce using rule 151 (relOperator -> LESS .)
    RANGE           reduce using rule 151 (relOperator -> LESS .)
    COLON           reduce using rule 151 (relOperator -> LESS .)


state 144

    (158) relOperator -> LESS_DIFF .

    AMPERSAND       reduce using rule 158 (relOperator -> LESS_DIFF .)
    EXCLAMATION     reduce using rule 158 (relOperator -> LESS_DIFF .)
    TIMES           reduce using rule 158 (relOperator -> LESS_DIFF .)
    PLUS            reduce using rule 158 (relOperator -> LESS_DIFF .)
    MINUS           reduce using rule 158 (relOperator -> LESS_DIFF .)
    DOT             reduce using rule 158 (relOperator -> LESS_DIFF .)
    PLUS_PLUS       reduce using rule 158 (relOperator -> LESS_DIFF .)
    MINUS_MINUS     reduce using rule 158 (relOperator -> LESS_DIFF .)
    ELLIPSIS        reduce using rule 158 (relOperator -> LESS_DIFF .)
    LPAREN          reduce using rule 158 (relOperator -> LESS_DIFF .)
    DOLLAR          reduce using rule 158 (relOperator -> LESS_DIFF .)
    THIS            reduce using rule 158 (relOperator -> LESS_DIFF .)
    NULL            reduce using rule 158 (relOperator -> LESS_DIFF .)
    TRUE            reduce using rule 158 (relOperator -> LESS_DIFF .)
    FALSE           reduce using rule 158 (relOperator -> LESS_DIFF .)
    INUMBER         reduce using rule 158 (relOperator -> LESS_DIFF .)
    DNUMBER         reduce using rule 158 (relOperator -> LESS_DIFF .)
    LIT_CHAR        reduce using rule 158 (relOperator -> LESS_DIFF .)
    NEW             reduce using rule 158 (relOperator -> LESS_DIFF .)
    DELETE          reduce using rule 158 (relOperator -> LESS_DIFF .)
    CAST            reduce using rule 158 (relOperator -> LESS_DIFF .)
    IDENTIFIER      reduce using rule 158 (relOperator -> LESS_DIFF .)
    CONST           reduce using rule 158 (relOperator -> LESS_DIFF .)
    IMMUTABLE       reduce using rule 158 (relOperator -> LESS_DIFF .)
    LBRACKET        reduce using rule 158 (relOperator -> LESS_DIFF .)
    FUNCTION        reduce using rule 158 (relOperator -> LESS_DIFF .)
    MIXIN           reduce using rule 158 (relOperator -> LESS_DIFF .)
    IMPORT          reduce using rule 158 (relOperator -> LESS_DIFF .)
    LIT_STR         reduce using rule 158 (relOperator -> LESS_DIFF .)
    BOOL            reduce using rule 158 (relOperator -> LESS_DIFF .)
    SHORT           reduce using rule 158 (relOperator -> LESS_DIFF .)
    USHORT          reduce using rule 158 (relOperator -> LESS_DIFF .)
    INT             reduce using rule 158 (relOperator -> LESS_DIFF .)
    UINT            reduce using rule 158 (relOperator -> LESS_DIFF .)
    LONG            reduce using rule 158 (relOperator -> LESS_DIFF .)
    ULONG           reduce using rule 158 (relOperator -> LESS_DIFF .)
    CHAR            reduce using rule 158 (relOperator -> LESS_DIFF .)
    FLOAT           reduce using rule 158 (relOperator -> LESS_DIFF .)
    TYPEOF          reduce using rule 158 (relOperator -> LESS_DIFF .)
    RIGHT_SHIFT     reduce using rule 158 (relOperator -> LESS_DIFF .)
    LEFT_SHIFT      reduce using rule 158 (relOperator -> LESS_DIFF .)
    TILDE           reduce using rule 158 (relOperator -> LESS_DIFF .)
    DIV             reduce using rule 158 (relOperator -> LESS_DIFF .)
    MODULO          reduce using rule 158 (relOperator -> LESS_DIFF .)
    CARET           reduce using rule 158 (relOperator -> LESS_DIFF .)
    LESS            reduce using rule 158 (relOperator -> LESS_DIFF .)
    LESS_EQ         reduce using rule 158 (relOperator -> LESS_DIFF .)
    GREATER         reduce using rule 158 (relOperator -> LESS_DIFF .)
    GREATER_EQ      reduce using rule 158 (relOperator -> LESS_DIFF .)
    IS_EQ_DIFF      reduce using rule 158 (relOperator -> LESS_DIFF .)
    NOT_EQ_DIFF     reduce using rule 158 (relOperator -> LESS_DIFF .)
    LESS_EQ_DIFF    reduce using rule 158 (relOperator -> LESS_DIFF .)
    LESS_DIFF       reduce using rule 158 (relOperator -> LESS_DIFF .)
    GREATER_EQ_DIFF reduce using rule 158 (relOperator -> LESS_DIFF .)
    GREATER_DIFF    reduce using rule 158 (relOperator -> LESS_DIFF .)
    PIPE            reduce using rule 158 (relOperator -> LESS_DIFF .)
    DOUBLE_AMPERSAND reduce using rule 158 (relOperator -> LESS_DIFF .)
    QUESTION        reduce using rule 158 (relOperator -> LESS_DIFF .)
    DOUBLE_PIPE     reduce using rule 158 (relOperator -> LESS_DIFF .)
    ASSIGN          reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_LEFT         reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_RIGHT        reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_PLUS         reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_MINUS        reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_TIMES        reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_MODULO       reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_AND_BIT      reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_DIV          reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_OR_BIT       reduce using rule 158 (relOperator -> LESS_DIFF .)
    EQ_XOR_BIT      reduce using rule 158 (relOperator -> LESS_DIFF .)
    COMMA           reduce using rule 158 (relOperator -> LESS_DIFF .)
    RBRACKET        reduce using rule 158 (relOperator -> LESS_DIFF .)
    $end            reduce using rule 158 (relOperator -> LESS_DIFF .)
    IS_EQ           reduce using rule 158 (relOperator -> LESS_DIFF .)
    NOT_EQ          reduce using rule 158 (relOperator -> LESS_DIFF .)
    RPAREN          reduce using rule 158 (relOperator -> LESS_DIFF .)
    RANGE           reduce using rule 158 (relOperator -> LESS_DIFF .)
    COLON           reduce using rule 158 (relOperator -> LESS_DIFF .)


state 145

    (155) relOperator -> IS_EQ_DIFF .

    AMPERSAND       reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EXCLAMATION     reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    TIMES           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    PLUS            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    MINUS           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    DOT             reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    ELLIPSIS        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LPAREN          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    DOLLAR          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    THIS            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    NULL            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    TRUE            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    FALSE           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    INUMBER         reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    DNUMBER         reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LIT_CHAR        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    NEW             reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    DELETE          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    CAST            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    IDENTIFIER      reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    CONST           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    IMMUTABLE       reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LBRACKET        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    FUNCTION        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    MIXIN           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    IMPORT          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LIT_STR         reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    BOOL            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    SHORT           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    USHORT          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    INT             reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    UINT            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LONG            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    ULONG           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    CHAR            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    FLOAT           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    TYPEOF          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    RIGHT_SHIFT     reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LEFT_SHIFT      reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    TILDE           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    DIV             reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    MODULO          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    CARET           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LESS            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LESS_EQ         reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    GREATER         reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    GREATER_EQ      reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    IS_EQ_DIFF      reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    NOT_EQ_DIFF     reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LESS_EQ_DIFF    reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    LESS_DIFF       reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    GREATER_EQ_DIFF reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    GREATER_DIFF    reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    PIPE            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    DOUBLE_AMPERSAND reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    QUESTION        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    DOUBLE_PIPE     reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    ASSIGN          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_LEFT         reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_RIGHT        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_PLUS         reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_MINUS        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_TIMES        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_MODULO       reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_AND_BIT      reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_DIV          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_OR_BIT       reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    EQ_XOR_BIT      reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    COMMA           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    RBRACKET        reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    $end            reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    IS_EQ           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    NOT_EQ          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    RPAREN          reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    RANGE           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)
    COLON           reduce using rule 155 (relOperator -> IS_EQ_DIFF .)


state 146

    (154) relOperator -> GREATER_EQ .

    AMPERSAND       reduce using rule 154 (relOperator -> GREATER_EQ .)
    EXCLAMATION     reduce using rule 154 (relOperator -> GREATER_EQ .)
    TIMES           reduce using rule 154 (relOperator -> GREATER_EQ .)
    PLUS            reduce using rule 154 (relOperator -> GREATER_EQ .)
    MINUS           reduce using rule 154 (relOperator -> GREATER_EQ .)
    DOT             reduce using rule 154 (relOperator -> GREATER_EQ .)
    PLUS_PLUS       reduce using rule 154 (relOperator -> GREATER_EQ .)
    MINUS_MINUS     reduce using rule 154 (relOperator -> GREATER_EQ .)
    ELLIPSIS        reduce using rule 154 (relOperator -> GREATER_EQ .)
    LPAREN          reduce using rule 154 (relOperator -> GREATER_EQ .)
    DOLLAR          reduce using rule 154 (relOperator -> GREATER_EQ .)
    THIS            reduce using rule 154 (relOperator -> GREATER_EQ .)
    NULL            reduce using rule 154 (relOperator -> GREATER_EQ .)
    TRUE            reduce using rule 154 (relOperator -> GREATER_EQ .)
    FALSE           reduce using rule 154 (relOperator -> GREATER_EQ .)
    INUMBER         reduce using rule 154 (relOperator -> GREATER_EQ .)
    DNUMBER         reduce using rule 154 (relOperator -> GREATER_EQ .)
    LIT_CHAR        reduce using rule 154 (relOperator -> GREATER_EQ .)
    NEW             reduce using rule 154 (relOperator -> GREATER_EQ .)
    DELETE          reduce using rule 154 (relOperator -> GREATER_EQ .)
    CAST            reduce using rule 154 (relOperator -> GREATER_EQ .)
    IDENTIFIER      reduce using rule 154 (relOperator -> GREATER_EQ .)
    CONST           reduce using rule 154 (relOperator -> GREATER_EQ .)
    IMMUTABLE       reduce using rule 154 (relOperator -> GREATER_EQ .)
    LBRACKET        reduce using rule 154 (relOperator -> GREATER_EQ .)
    FUNCTION        reduce using rule 154 (relOperator -> GREATER_EQ .)
    MIXIN           reduce using rule 154 (relOperator -> GREATER_EQ .)
    IMPORT          reduce using rule 154 (relOperator -> GREATER_EQ .)
    LIT_STR         reduce using rule 154 (relOperator -> GREATER_EQ .)
    BOOL            reduce using rule 154 (relOperator -> GREATER_EQ .)
    SHORT           reduce using rule 154 (relOperator -> GREATER_EQ .)
    USHORT          reduce using rule 154 (relOperator -> GREATER_EQ .)
    INT             reduce using rule 154 (relOperator -> GREATER_EQ .)
    UINT            reduce using rule 154 (relOperator -> GREATER_EQ .)
    LONG            reduce using rule 154 (relOperator -> GREATER_EQ .)
    ULONG           reduce using rule 154 (relOperator -> GREATER_EQ .)
    CHAR            reduce using rule 154 (relOperator -> GREATER_EQ .)
    FLOAT           reduce using rule 154 (relOperator -> GREATER_EQ .)
    TYPEOF          reduce using rule 154 (relOperator -> GREATER_EQ .)
    RIGHT_SHIFT     reduce using rule 154 (relOperator -> GREATER_EQ .)
    LEFT_SHIFT      reduce using rule 154 (relOperator -> GREATER_EQ .)
    TILDE           reduce using rule 154 (relOperator -> GREATER_EQ .)
    DIV             reduce using rule 154 (relOperator -> GREATER_EQ .)
    MODULO          reduce using rule 154 (relOperator -> GREATER_EQ .)
    CARET           reduce using rule 154 (relOperator -> GREATER_EQ .)
    LESS            reduce using rule 154 (relOperator -> GREATER_EQ .)
    LESS_EQ         reduce using rule 154 (relOperator -> GREATER_EQ .)
    GREATER         reduce using rule 154 (relOperator -> GREATER_EQ .)
    GREATER_EQ      reduce using rule 154 (relOperator -> GREATER_EQ .)
    IS_EQ_DIFF      reduce using rule 154 (relOperator -> GREATER_EQ .)
    NOT_EQ_DIFF     reduce using rule 154 (relOperator -> GREATER_EQ .)
    LESS_EQ_DIFF    reduce using rule 154 (relOperator -> GREATER_EQ .)
    LESS_DIFF       reduce using rule 154 (relOperator -> GREATER_EQ .)
    GREATER_EQ_DIFF reduce using rule 154 (relOperator -> GREATER_EQ .)
    GREATER_DIFF    reduce using rule 154 (relOperator -> GREATER_EQ .)
    PIPE            reduce using rule 154 (relOperator -> GREATER_EQ .)
    DOUBLE_AMPERSAND reduce using rule 154 (relOperator -> GREATER_EQ .)
    QUESTION        reduce using rule 154 (relOperator -> GREATER_EQ .)
    DOUBLE_PIPE     reduce using rule 154 (relOperator -> GREATER_EQ .)
    ASSIGN          reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_LEFT         reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_RIGHT        reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_PLUS         reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_MINUS        reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_TIMES        reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_MODULO       reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_AND_BIT      reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_DIV          reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_OR_BIT       reduce using rule 154 (relOperator -> GREATER_EQ .)
    EQ_XOR_BIT      reduce using rule 154 (relOperator -> GREATER_EQ .)
    COMMA           reduce using rule 154 (relOperator -> GREATER_EQ .)
    RBRACKET        reduce using rule 154 (relOperator -> GREATER_EQ .)
    $end            reduce using rule 154 (relOperator -> GREATER_EQ .)
    IS_EQ           reduce using rule 154 (relOperator -> GREATER_EQ .)
    NOT_EQ          reduce using rule 154 (relOperator -> GREATER_EQ .)
    RPAREN          reduce using rule 154 (relOperator -> GREATER_EQ .)
    RANGE           reduce using rule 154 (relOperator -> GREATER_EQ .)
    COLON           reduce using rule 154 (relOperator -> GREATER_EQ .)


state 147

    (156) relOperator -> NOT_EQ_DIFF .

    AMPERSAND       reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EXCLAMATION     reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    TIMES           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    PLUS            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    MINUS           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    DOT             reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    ELLIPSIS        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LPAREN          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    DOLLAR          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    THIS            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    NULL            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    TRUE            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    FALSE           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    INUMBER         reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    DNUMBER         reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LIT_CHAR        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    NEW             reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    DELETE          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    CAST            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    IDENTIFIER      reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    CONST           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    IMMUTABLE       reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LBRACKET        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    FUNCTION        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    MIXIN           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    IMPORT          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LIT_STR         reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    BOOL            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    SHORT           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    USHORT          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    INT             reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    UINT            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LONG            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    ULONG           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    CHAR            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    FLOAT           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    TYPEOF          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    RIGHT_SHIFT     reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LEFT_SHIFT      reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    TILDE           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    DIV             reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    MODULO          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    CARET           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LESS            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LESS_EQ         reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    GREATER         reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    GREATER_EQ      reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    IS_EQ_DIFF      reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    NOT_EQ_DIFF     reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LESS_EQ_DIFF    reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    LESS_DIFF       reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    GREATER_EQ_DIFF reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    GREATER_DIFF    reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    PIPE            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    DOUBLE_AMPERSAND reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    QUESTION        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    DOUBLE_PIPE     reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    ASSIGN          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_LEFT         reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_RIGHT        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_PLUS         reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_MINUS        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_TIMES        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_MODULO       reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_AND_BIT      reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_DIV          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_OR_BIT       reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    EQ_XOR_BIT      reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    COMMA           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    RBRACKET        reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    $end            reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    IS_EQ           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    NOT_EQ          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    RPAREN          reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    RANGE           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)
    COLON           reduce using rule 156 (relOperator -> NOT_EQ_DIFF .)


state 148

    (160) relOperator -> GREATER_DIFF .

    AMPERSAND       reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EXCLAMATION     reduce using rule 160 (relOperator -> GREATER_DIFF .)
    TIMES           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    PLUS            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    MINUS           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    DOT             reduce using rule 160 (relOperator -> GREATER_DIFF .)
    PLUS_PLUS       reduce using rule 160 (relOperator -> GREATER_DIFF .)
    MINUS_MINUS     reduce using rule 160 (relOperator -> GREATER_DIFF .)
    ELLIPSIS        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LPAREN          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    DOLLAR          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    THIS            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    NULL            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    TRUE            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    FALSE           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    INUMBER         reduce using rule 160 (relOperator -> GREATER_DIFF .)
    DNUMBER         reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LIT_CHAR        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    NEW             reduce using rule 160 (relOperator -> GREATER_DIFF .)
    DELETE          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    CAST            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    IDENTIFIER      reduce using rule 160 (relOperator -> GREATER_DIFF .)
    CONST           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    IMMUTABLE       reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LBRACKET        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    FUNCTION        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    MIXIN           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    IMPORT          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LIT_STR         reduce using rule 160 (relOperator -> GREATER_DIFF .)
    BOOL            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    SHORT           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    USHORT          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    INT             reduce using rule 160 (relOperator -> GREATER_DIFF .)
    UINT            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LONG            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    ULONG           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    CHAR            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    FLOAT           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    TYPEOF          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    RIGHT_SHIFT     reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LEFT_SHIFT      reduce using rule 160 (relOperator -> GREATER_DIFF .)
    TILDE           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    DIV             reduce using rule 160 (relOperator -> GREATER_DIFF .)
    MODULO          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    CARET           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LESS            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LESS_EQ         reduce using rule 160 (relOperator -> GREATER_DIFF .)
    GREATER         reduce using rule 160 (relOperator -> GREATER_DIFF .)
    GREATER_EQ      reduce using rule 160 (relOperator -> GREATER_DIFF .)
    IS_EQ_DIFF      reduce using rule 160 (relOperator -> GREATER_DIFF .)
    NOT_EQ_DIFF     reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LESS_EQ_DIFF    reduce using rule 160 (relOperator -> GREATER_DIFF .)
    LESS_DIFF       reduce using rule 160 (relOperator -> GREATER_DIFF .)
    GREATER_EQ_DIFF reduce using rule 160 (relOperator -> GREATER_DIFF .)
    GREATER_DIFF    reduce using rule 160 (relOperator -> GREATER_DIFF .)
    PIPE            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    DOUBLE_AMPERSAND reduce using rule 160 (relOperator -> GREATER_DIFF .)
    QUESTION        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    DOUBLE_PIPE     reduce using rule 160 (relOperator -> GREATER_DIFF .)
    ASSIGN          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_LEFT         reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_RIGHT        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_PLUS         reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_MINUS        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_TIMES        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_MODULO       reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_AND_BIT      reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_DIV          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_OR_BIT       reduce using rule 160 (relOperator -> GREATER_DIFF .)
    EQ_XOR_BIT      reduce using rule 160 (relOperator -> GREATER_DIFF .)
    COMMA           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    RBRACKET        reduce using rule 160 (relOperator -> GREATER_DIFF .)
    $end            reduce using rule 160 (relOperator -> GREATER_DIFF .)
    IS_EQ           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    NOT_EQ          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    RPAREN          reduce using rule 160 (relOperator -> GREATER_DIFF .)
    RANGE           reduce using rule 160 (relOperator -> GREATER_DIFF .)
    COLON           reduce using rule 160 (relOperator -> GREATER_DIFF .)


state 149

    (157) relOperator -> LESS_EQ_DIFF .

    AMPERSAND       reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EXCLAMATION     reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    TIMES           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    PLUS            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    MINUS           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    DOT             reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    PLUS_PLUS       reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    MINUS_MINUS     reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    ELLIPSIS        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LPAREN          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    DOLLAR          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    THIS            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    NULL            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    TRUE            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    FALSE           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    INUMBER         reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    DNUMBER         reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LIT_CHAR        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    NEW             reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    DELETE          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    CAST            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    IDENTIFIER      reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    CONST           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    IMMUTABLE       reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LBRACKET        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    FUNCTION        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    MIXIN           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    IMPORT          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LIT_STR         reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    BOOL            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    SHORT           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    USHORT          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    INT             reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    UINT            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LONG            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    ULONG           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    CHAR            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    FLOAT           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    TYPEOF          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    RIGHT_SHIFT     reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LEFT_SHIFT      reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    TILDE           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    DIV             reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    MODULO          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    CARET           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LESS            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LESS_EQ         reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    GREATER         reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    GREATER_EQ      reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    IS_EQ_DIFF      reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    NOT_EQ_DIFF     reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LESS_EQ_DIFF    reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    LESS_DIFF       reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    GREATER_EQ_DIFF reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    GREATER_DIFF    reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    PIPE            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    DOUBLE_AMPERSAND reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    QUESTION        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    DOUBLE_PIPE     reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    ASSIGN          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_LEFT         reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_RIGHT        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_PLUS         reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_MINUS        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_TIMES        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_MODULO       reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_AND_BIT      reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_DIV          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_OR_BIT       reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    EQ_XOR_BIT      reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    COMMA           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    RBRACKET        reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    $end            reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    IS_EQ           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    NOT_EQ          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    RPAREN          reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    RANGE           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)
    COLON           reduce using rule 157 (relOperator -> LESS_EQ_DIFF .)


state 150

    (150) relExpression -> relExpression relOperator . shiftExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    shiftExpression                shift and go to state 212
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 151

    (105) arrayLiteral -> LBRACKET argumentList_question RBRACKET .

    DOT             reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    PLUS_PLUS       reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    MINUS_MINUS     reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LBRACKET        reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    CARET           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    TIMES           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    DIV             reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    MODULO          reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    PLUS            reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    MINUS           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    TILDE           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    $end            reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RIGHT_SHIFT     reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LEFT_SHIFT      reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    IS_EQ           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    NOT_EQ          reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    AMPERSAND       reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    PIPE            reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    QUESTION        reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    DOUBLE_PIPE     reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    ASSIGN          reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_LEFT         reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_RIGHT        reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_PLUS         reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_MINUS        reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_TIMES        reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_MODULO       reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_AND_BIT      reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_DIV          reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_OR_BIT       reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    EQ_XOR_BIT      reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    COMMA           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RBRACKET        reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS            reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS_EQ         reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER         reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER_EQ      reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    IS_EQ_DIFF      reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LESS_DIFF       reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    GREATER_DIFF    reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RPAREN          reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    RANGE           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    COLON           reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)
    LPAREN          reduce using rule 105 (arrayLiteral -> LBRACKET argumentList_question RBRACKET .)


state 152

    (134) andAndExpression -> andAndExpression DOUBLE_AMPERSAND . orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 213
    equalExpression                shift and go to state 81
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 153

    (140) andExpression -> andExpression AMPERSAND . cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    equalExpression                shift and go to state 81
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 214
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 154

    (129) ternaryExpression -> orOrExpression QUESTION . expression COLON ternaryExpression
    (106) expression -> . assignExpression
    (107) expression -> . expression COMMA assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 123
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63
    expression                     shift and go to state 215

state 155

    (132) orOrExpression -> orOrExpression DOUBLE_PIPE . andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 216
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 156

    (120) assignOperator -> EQ_RIGHT .

    AMPERSAND       reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EXCLAMATION     reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    TIMES           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    PLUS            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    MINUS           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    DOT             reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    PLUS_PLUS       reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    MINUS_MINUS     reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    ELLIPSIS        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LPAREN          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    DOLLAR          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    THIS            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    NULL            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    TRUE            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    FALSE           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    INUMBER         reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    DNUMBER         reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LIT_CHAR        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    NEW             reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    DELETE          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    CAST            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    IDENTIFIER      reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    CONST           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    IMMUTABLE       reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LBRACKET        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    FUNCTION        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    MIXIN           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    IMPORT          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LIT_STR         reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    BOOL            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    SHORT           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    USHORT          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    INT             reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    UINT            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LONG            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    ULONG           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    CHAR            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    FLOAT           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    TYPEOF          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    COMMA           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    ASSIGN          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_LEFT         reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_RIGHT        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_PLUS         reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_MINUS        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_TIMES        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_MODULO       reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_AND_BIT      reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_DIV          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_OR_BIT       reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    EQ_XOR_BIT      reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    QUESTION        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    DOUBLE_PIPE     reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    DOUBLE_AMPERSAND reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    PIPE            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    CARET           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    RIGHT_SHIFT     reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LEFT_SHIFT      reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    IS_EQ           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    NOT_EQ          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LESS            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LESS_EQ         reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    GREATER         reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    GREATER_EQ      reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    IS_EQ_DIFF      reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    NOT_EQ_DIFF     reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LESS_EQ_DIFF    reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    LESS_DIFF       reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    GREATER_EQ_DIFF reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    GREATER_DIFF    reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    TILDE           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    DIV             reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    MODULO          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    RBRACKET        reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    $end            reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    RPAREN          reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    RANGE           reduce using rule 120 (assignOperator -> EQ_RIGHT .)
    COLON           reduce using rule 120 (assignOperator -> EQ_RIGHT .)


state 157

    (125) assignOperator -> EQ_AND_BIT .

    AMPERSAND       reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EXCLAMATION     reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    TIMES           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    PLUS            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    MINUS           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    DOT             reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    PLUS_PLUS       reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    MINUS_MINUS     reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    ELLIPSIS        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LPAREN          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    DOLLAR          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    THIS            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    NULL            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    TRUE            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    FALSE           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    INUMBER         reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    DNUMBER         reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LIT_CHAR        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    NEW             reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    DELETE          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    CAST            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    IDENTIFIER      reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    CONST           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    IMMUTABLE       reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LBRACKET        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    FUNCTION        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    MIXIN           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    IMPORT          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LIT_STR         reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    BOOL            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    SHORT           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    USHORT          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    INT             reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    UINT            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LONG            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    ULONG           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    CHAR            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    FLOAT           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    TYPEOF          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    COMMA           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    ASSIGN          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_LEFT         reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_RIGHT        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_PLUS         reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_MINUS        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_TIMES        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_MODULO       reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_AND_BIT      reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_DIV          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_OR_BIT       reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    EQ_XOR_BIT      reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    QUESTION        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    DOUBLE_PIPE     reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    DOUBLE_AMPERSAND reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    PIPE            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    CARET           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    RIGHT_SHIFT     reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LEFT_SHIFT      reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    IS_EQ           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    NOT_EQ          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LESS            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LESS_EQ         reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    GREATER         reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    GREATER_EQ      reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    IS_EQ_DIFF      reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    NOT_EQ_DIFF     reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LESS_EQ_DIFF    reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    LESS_DIFF       reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    GREATER_EQ_DIFF reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    GREATER_DIFF    reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    TILDE           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    DIV             reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    MODULO          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    RBRACKET        reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    $end            reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    RPAREN          reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    RANGE           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)
    COLON           reduce using rule 125 (assignOperator -> EQ_AND_BIT .)


state 158

    (127) assignOperator -> EQ_OR_BIT .

    AMPERSAND       reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EXCLAMATION     reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    TIMES           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    PLUS            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    MINUS           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    DOT             reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    PLUS_PLUS       reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    MINUS_MINUS     reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    ELLIPSIS        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LPAREN          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    DOLLAR          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    THIS            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    NULL            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    TRUE            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    FALSE           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    INUMBER         reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    DNUMBER         reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LIT_CHAR        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    NEW             reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    DELETE          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    CAST            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    IDENTIFIER      reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    CONST           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    IMMUTABLE       reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LBRACKET        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    FUNCTION        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    MIXIN           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    IMPORT          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LIT_STR         reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    BOOL            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    SHORT           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    USHORT          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    INT             reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    UINT            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LONG            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    ULONG           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    CHAR            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    FLOAT           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    TYPEOF          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    COMMA           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    ASSIGN          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_LEFT         reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_RIGHT        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_PLUS         reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_MINUS        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_TIMES        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_MODULO       reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_AND_BIT      reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_DIV          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_OR_BIT       reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    EQ_XOR_BIT      reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    QUESTION        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    DOUBLE_PIPE     reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    DOUBLE_AMPERSAND reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    PIPE            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    CARET           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    RIGHT_SHIFT     reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LEFT_SHIFT      reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    IS_EQ           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    NOT_EQ          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LESS            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LESS_EQ         reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    GREATER         reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    GREATER_EQ      reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    IS_EQ_DIFF      reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    NOT_EQ_DIFF     reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LESS_EQ_DIFF    reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    LESS_DIFF       reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    GREATER_EQ_DIFF reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    GREATER_DIFF    reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    TILDE           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    DIV             reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    MODULO          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    RBRACKET        reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    $end            reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    RPAREN          reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    RANGE           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)
    COLON           reduce using rule 127 (assignOperator -> EQ_OR_BIT .)


state 159

    (121) assignOperator -> EQ_PLUS .

    AMPERSAND       reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EXCLAMATION     reduce using rule 121 (assignOperator -> EQ_PLUS .)
    TIMES           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    PLUS            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    MINUS           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    DOT             reduce using rule 121 (assignOperator -> EQ_PLUS .)
    PLUS_PLUS       reduce using rule 121 (assignOperator -> EQ_PLUS .)
    MINUS_MINUS     reduce using rule 121 (assignOperator -> EQ_PLUS .)
    ELLIPSIS        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LPAREN          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    DOLLAR          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    THIS            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    NULL            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    TRUE            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    FALSE           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    INUMBER         reduce using rule 121 (assignOperator -> EQ_PLUS .)
    DNUMBER         reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LIT_CHAR        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    NEW             reduce using rule 121 (assignOperator -> EQ_PLUS .)
    DELETE          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    CAST            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    IDENTIFIER      reduce using rule 121 (assignOperator -> EQ_PLUS .)
    CONST           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    IMMUTABLE       reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LBRACKET        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    FUNCTION        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    MIXIN           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    IMPORT          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LIT_STR         reduce using rule 121 (assignOperator -> EQ_PLUS .)
    BOOL            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    SHORT           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    USHORT          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    INT             reduce using rule 121 (assignOperator -> EQ_PLUS .)
    UINT            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LONG            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    ULONG           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    CHAR            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    FLOAT           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    TYPEOF          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    COMMA           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    ASSIGN          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_LEFT         reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_RIGHT        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_PLUS         reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_MINUS        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_TIMES        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_MODULO       reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_AND_BIT      reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_DIV          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_OR_BIT       reduce using rule 121 (assignOperator -> EQ_PLUS .)
    EQ_XOR_BIT      reduce using rule 121 (assignOperator -> EQ_PLUS .)
    QUESTION        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    DOUBLE_PIPE     reduce using rule 121 (assignOperator -> EQ_PLUS .)
    DOUBLE_AMPERSAND reduce using rule 121 (assignOperator -> EQ_PLUS .)
    PIPE            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    CARET           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    RIGHT_SHIFT     reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LEFT_SHIFT      reduce using rule 121 (assignOperator -> EQ_PLUS .)
    IS_EQ           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    NOT_EQ          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LESS            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LESS_EQ         reduce using rule 121 (assignOperator -> EQ_PLUS .)
    GREATER         reduce using rule 121 (assignOperator -> EQ_PLUS .)
    GREATER_EQ      reduce using rule 121 (assignOperator -> EQ_PLUS .)
    IS_EQ_DIFF      reduce using rule 121 (assignOperator -> EQ_PLUS .)
    NOT_EQ_DIFF     reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LESS_EQ_DIFF    reduce using rule 121 (assignOperator -> EQ_PLUS .)
    LESS_DIFF       reduce using rule 121 (assignOperator -> EQ_PLUS .)
    GREATER_EQ_DIFF reduce using rule 121 (assignOperator -> EQ_PLUS .)
    GREATER_DIFF    reduce using rule 121 (assignOperator -> EQ_PLUS .)
    TILDE           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    DIV             reduce using rule 121 (assignOperator -> EQ_PLUS .)
    MODULO          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    RBRACKET        reduce using rule 121 (assignOperator -> EQ_PLUS .)
    $end            reduce using rule 121 (assignOperator -> EQ_PLUS .)
    RPAREN          reduce using rule 121 (assignOperator -> EQ_PLUS .)
    RANGE           reduce using rule 121 (assignOperator -> EQ_PLUS .)
    COLON           reduce using rule 121 (assignOperator -> EQ_PLUS .)


state 160

    (126) assignOperator -> EQ_DIV .

    AMPERSAND       reduce using rule 126 (assignOperator -> EQ_DIV .)
    EXCLAMATION     reduce using rule 126 (assignOperator -> EQ_DIV .)
    TIMES           reduce using rule 126 (assignOperator -> EQ_DIV .)
    PLUS            reduce using rule 126 (assignOperator -> EQ_DIV .)
    MINUS           reduce using rule 126 (assignOperator -> EQ_DIV .)
    DOT             reduce using rule 126 (assignOperator -> EQ_DIV .)
    PLUS_PLUS       reduce using rule 126 (assignOperator -> EQ_DIV .)
    MINUS_MINUS     reduce using rule 126 (assignOperator -> EQ_DIV .)
    ELLIPSIS        reduce using rule 126 (assignOperator -> EQ_DIV .)
    LPAREN          reduce using rule 126 (assignOperator -> EQ_DIV .)
    DOLLAR          reduce using rule 126 (assignOperator -> EQ_DIV .)
    THIS            reduce using rule 126 (assignOperator -> EQ_DIV .)
    NULL            reduce using rule 126 (assignOperator -> EQ_DIV .)
    TRUE            reduce using rule 126 (assignOperator -> EQ_DIV .)
    FALSE           reduce using rule 126 (assignOperator -> EQ_DIV .)
    INUMBER         reduce using rule 126 (assignOperator -> EQ_DIV .)
    DNUMBER         reduce using rule 126 (assignOperator -> EQ_DIV .)
    LIT_CHAR        reduce using rule 126 (assignOperator -> EQ_DIV .)
    NEW             reduce using rule 126 (assignOperator -> EQ_DIV .)
    DELETE          reduce using rule 126 (assignOperator -> EQ_DIV .)
    CAST            reduce using rule 126 (assignOperator -> EQ_DIV .)
    IDENTIFIER      reduce using rule 126 (assignOperator -> EQ_DIV .)
    CONST           reduce using rule 126 (assignOperator -> EQ_DIV .)
    IMMUTABLE       reduce using rule 126 (assignOperator -> EQ_DIV .)
    LBRACKET        reduce using rule 126 (assignOperator -> EQ_DIV .)
    FUNCTION        reduce using rule 126 (assignOperator -> EQ_DIV .)
    MIXIN           reduce using rule 126 (assignOperator -> EQ_DIV .)
    IMPORT          reduce using rule 126 (assignOperator -> EQ_DIV .)
    LIT_STR         reduce using rule 126 (assignOperator -> EQ_DIV .)
    BOOL            reduce using rule 126 (assignOperator -> EQ_DIV .)
    SHORT           reduce using rule 126 (assignOperator -> EQ_DIV .)
    USHORT          reduce using rule 126 (assignOperator -> EQ_DIV .)
    INT             reduce using rule 126 (assignOperator -> EQ_DIV .)
    UINT            reduce using rule 126 (assignOperator -> EQ_DIV .)
    LONG            reduce using rule 126 (assignOperator -> EQ_DIV .)
    ULONG           reduce using rule 126 (assignOperator -> EQ_DIV .)
    CHAR            reduce using rule 126 (assignOperator -> EQ_DIV .)
    FLOAT           reduce using rule 126 (assignOperator -> EQ_DIV .)
    TYPEOF          reduce using rule 126 (assignOperator -> EQ_DIV .)
    COMMA           reduce using rule 126 (assignOperator -> EQ_DIV .)
    ASSIGN          reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_LEFT         reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_RIGHT        reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_PLUS         reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_MINUS        reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_TIMES        reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_MODULO       reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_AND_BIT      reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_DIV          reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_OR_BIT       reduce using rule 126 (assignOperator -> EQ_DIV .)
    EQ_XOR_BIT      reduce using rule 126 (assignOperator -> EQ_DIV .)
    QUESTION        reduce using rule 126 (assignOperator -> EQ_DIV .)
    DOUBLE_PIPE     reduce using rule 126 (assignOperator -> EQ_DIV .)
    DOUBLE_AMPERSAND reduce using rule 126 (assignOperator -> EQ_DIV .)
    PIPE            reduce using rule 126 (assignOperator -> EQ_DIV .)
    CARET           reduce using rule 126 (assignOperator -> EQ_DIV .)
    RIGHT_SHIFT     reduce using rule 126 (assignOperator -> EQ_DIV .)
    LEFT_SHIFT      reduce using rule 126 (assignOperator -> EQ_DIV .)
    IS_EQ           reduce using rule 126 (assignOperator -> EQ_DIV .)
    NOT_EQ          reduce using rule 126 (assignOperator -> EQ_DIV .)
    LESS            reduce using rule 126 (assignOperator -> EQ_DIV .)
    LESS_EQ         reduce using rule 126 (assignOperator -> EQ_DIV .)
    GREATER         reduce using rule 126 (assignOperator -> EQ_DIV .)
    GREATER_EQ      reduce using rule 126 (assignOperator -> EQ_DIV .)
    IS_EQ_DIFF      reduce using rule 126 (assignOperator -> EQ_DIV .)
    NOT_EQ_DIFF     reduce using rule 126 (assignOperator -> EQ_DIV .)
    LESS_EQ_DIFF    reduce using rule 126 (assignOperator -> EQ_DIV .)
    LESS_DIFF       reduce using rule 126 (assignOperator -> EQ_DIV .)
    GREATER_EQ_DIFF reduce using rule 126 (assignOperator -> EQ_DIV .)
    GREATER_DIFF    reduce using rule 126 (assignOperator -> EQ_DIV .)
    TILDE           reduce using rule 126 (assignOperator -> EQ_DIV .)
    DIV             reduce using rule 126 (assignOperator -> EQ_DIV .)
    MODULO          reduce using rule 126 (assignOperator -> EQ_DIV .)
    RBRACKET        reduce using rule 126 (assignOperator -> EQ_DIV .)
    $end            reduce using rule 126 (assignOperator -> EQ_DIV .)
    RPAREN          reduce using rule 126 (assignOperator -> EQ_DIV .)
    RANGE           reduce using rule 126 (assignOperator -> EQ_DIV .)
    COLON           reduce using rule 126 (assignOperator -> EQ_DIV .)


state 161

    (128) assignOperator -> EQ_XOR_BIT .

    AMPERSAND       reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EXCLAMATION     reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    TIMES           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    PLUS            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    MINUS           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    DOT             reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    PLUS_PLUS       reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    MINUS_MINUS     reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    ELLIPSIS        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LPAREN          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    DOLLAR          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    THIS            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    NULL            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    TRUE            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    FALSE           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    INUMBER         reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    DNUMBER         reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LIT_CHAR        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    NEW             reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    DELETE          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    CAST            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    IDENTIFIER      reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    CONST           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    IMMUTABLE       reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LBRACKET        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    FUNCTION        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    MIXIN           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    IMPORT          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LIT_STR         reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    BOOL            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    SHORT           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    USHORT          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    INT             reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    UINT            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LONG            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    ULONG           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    CHAR            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    FLOAT           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    TYPEOF          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    COMMA           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    ASSIGN          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_LEFT         reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_RIGHT        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_PLUS         reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_MINUS        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_TIMES        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_MODULO       reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_AND_BIT      reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_DIV          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_OR_BIT       reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    EQ_XOR_BIT      reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    QUESTION        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    DOUBLE_PIPE     reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    DOUBLE_AMPERSAND reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    PIPE            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    CARET           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    RIGHT_SHIFT     reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LEFT_SHIFT      reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    IS_EQ           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    NOT_EQ          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LESS            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LESS_EQ         reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    GREATER         reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    GREATER_EQ      reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    IS_EQ_DIFF      reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    NOT_EQ_DIFF     reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LESS_EQ_DIFF    reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    LESS_DIFF       reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    GREATER_EQ_DIFF reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    GREATER_DIFF    reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    TILDE           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    DIV             reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    MODULO          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    RBRACKET        reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    $end            reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    RPAREN          reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    RANGE           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)
    COLON           reduce using rule 128 (assignOperator -> EQ_XOR_BIT .)


state 162

    (118) assignOperator -> ASSIGN .

    AMPERSAND       reduce using rule 118 (assignOperator -> ASSIGN .)
    EXCLAMATION     reduce using rule 118 (assignOperator -> ASSIGN .)
    TIMES           reduce using rule 118 (assignOperator -> ASSIGN .)
    PLUS            reduce using rule 118 (assignOperator -> ASSIGN .)
    MINUS           reduce using rule 118 (assignOperator -> ASSIGN .)
    DOT             reduce using rule 118 (assignOperator -> ASSIGN .)
    PLUS_PLUS       reduce using rule 118 (assignOperator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 118 (assignOperator -> ASSIGN .)
    ELLIPSIS        reduce using rule 118 (assignOperator -> ASSIGN .)
    LPAREN          reduce using rule 118 (assignOperator -> ASSIGN .)
    DOLLAR          reduce using rule 118 (assignOperator -> ASSIGN .)
    THIS            reduce using rule 118 (assignOperator -> ASSIGN .)
    NULL            reduce using rule 118 (assignOperator -> ASSIGN .)
    TRUE            reduce using rule 118 (assignOperator -> ASSIGN .)
    FALSE           reduce using rule 118 (assignOperator -> ASSIGN .)
    INUMBER         reduce using rule 118 (assignOperator -> ASSIGN .)
    DNUMBER         reduce using rule 118 (assignOperator -> ASSIGN .)
    LIT_CHAR        reduce using rule 118 (assignOperator -> ASSIGN .)
    NEW             reduce using rule 118 (assignOperator -> ASSIGN .)
    DELETE          reduce using rule 118 (assignOperator -> ASSIGN .)
    CAST            reduce using rule 118 (assignOperator -> ASSIGN .)
    IDENTIFIER      reduce using rule 118 (assignOperator -> ASSIGN .)
    CONST           reduce using rule 118 (assignOperator -> ASSIGN .)
    IMMUTABLE       reduce using rule 118 (assignOperator -> ASSIGN .)
    LBRACKET        reduce using rule 118 (assignOperator -> ASSIGN .)
    FUNCTION        reduce using rule 118 (assignOperator -> ASSIGN .)
    MIXIN           reduce using rule 118 (assignOperator -> ASSIGN .)
    IMPORT          reduce using rule 118 (assignOperator -> ASSIGN .)
    LIT_STR         reduce using rule 118 (assignOperator -> ASSIGN .)
    BOOL            reduce using rule 118 (assignOperator -> ASSIGN .)
    SHORT           reduce using rule 118 (assignOperator -> ASSIGN .)
    USHORT          reduce using rule 118 (assignOperator -> ASSIGN .)
    INT             reduce using rule 118 (assignOperator -> ASSIGN .)
    UINT            reduce using rule 118 (assignOperator -> ASSIGN .)
    LONG            reduce using rule 118 (assignOperator -> ASSIGN .)
    ULONG           reduce using rule 118 (assignOperator -> ASSIGN .)
    CHAR            reduce using rule 118 (assignOperator -> ASSIGN .)
    FLOAT           reduce using rule 118 (assignOperator -> ASSIGN .)
    TYPEOF          reduce using rule 118 (assignOperator -> ASSIGN .)
    COMMA           reduce using rule 118 (assignOperator -> ASSIGN .)
    ASSIGN          reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_LEFT         reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_RIGHT        reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_PLUS         reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_MINUS        reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_TIMES        reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_MODULO       reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_AND_BIT      reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_DIV          reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_OR_BIT       reduce using rule 118 (assignOperator -> ASSIGN .)
    EQ_XOR_BIT      reduce using rule 118 (assignOperator -> ASSIGN .)
    QUESTION        reduce using rule 118 (assignOperator -> ASSIGN .)
    DOUBLE_PIPE     reduce using rule 118 (assignOperator -> ASSIGN .)
    DOUBLE_AMPERSAND reduce using rule 118 (assignOperator -> ASSIGN .)
    PIPE            reduce using rule 118 (assignOperator -> ASSIGN .)
    CARET           reduce using rule 118 (assignOperator -> ASSIGN .)
    RIGHT_SHIFT     reduce using rule 118 (assignOperator -> ASSIGN .)
    LEFT_SHIFT      reduce using rule 118 (assignOperator -> ASSIGN .)
    IS_EQ           reduce using rule 118 (assignOperator -> ASSIGN .)
    NOT_EQ          reduce using rule 118 (assignOperator -> ASSIGN .)
    LESS            reduce using rule 118 (assignOperator -> ASSIGN .)
    LESS_EQ         reduce using rule 118 (assignOperator -> ASSIGN .)
    GREATER         reduce using rule 118 (assignOperator -> ASSIGN .)
    GREATER_EQ      reduce using rule 118 (assignOperator -> ASSIGN .)
    IS_EQ_DIFF      reduce using rule 118 (assignOperator -> ASSIGN .)
    NOT_EQ_DIFF     reduce using rule 118 (assignOperator -> ASSIGN .)
    LESS_EQ_DIFF    reduce using rule 118 (assignOperator -> ASSIGN .)
    LESS_DIFF       reduce using rule 118 (assignOperator -> ASSIGN .)
    GREATER_EQ_DIFF reduce using rule 118 (assignOperator -> ASSIGN .)
    GREATER_DIFF    reduce using rule 118 (assignOperator -> ASSIGN .)
    TILDE           reduce using rule 118 (assignOperator -> ASSIGN .)
    DIV             reduce using rule 118 (assignOperator -> ASSIGN .)
    MODULO          reduce using rule 118 (assignOperator -> ASSIGN .)
    RBRACKET        reduce using rule 118 (assignOperator -> ASSIGN .)
    $end            reduce using rule 118 (assignOperator -> ASSIGN .)
    RPAREN          reduce using rule 118 (assignOperator -> ASSIGN .)
    RANGE           reduce using rule 118 (assignOperator -> ASSIGN .)
    COLON           reduce using rule 118 (assignOperator -> ASSIGN .)


state 163

    (119) assignOperator -> EQ_LEFT .

    AMPERSAND       reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EXCLAMATION     reduce using rule 119 (assignOperator -> EQ_LEFT .)
    TIMES           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    PLUS            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    MINUS           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    DOT             reduce using rule 119 (assignOperator -> EQ_LEFT .)
    PLUS_PLUS       reduce using rule 119 (assignOperator -> EQ_LEFT .)
    MINUS_MINUS     reduce using rule 119 (assignOperator -> EQ_LEFT .)
    ELLIPSIS        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LPAREN          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    DOLLAR          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    THIS            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    NULL            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    TRUE            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    FALSE           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    INUMBER         reduce using rule 119 (assignOperator -> EQ_LEFT .)
    DNUMBER         reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LIT_CHAR        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    NEW             reduce using rule 119 (assignOperator -> EQ_LEFT .)
    DELETE          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    CAST            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    IDENTIFIER      reduce using rule 119 (assignOperator -> EQ_LEFT .)
    CONST           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    IMMUTABLE       reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LBRACKET        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    FUNCTION        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    MIXIN           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    IMPORT          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LIT_STR         reduce using rule 119 (assignOperator -> EQ_LEFT .)
    BOOL            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    SHORT           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    USHORT          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    INT             reduce using rule 119 (assignOperator -> EQ_LEFT .)
    UINT            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LONG            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    ULONG           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    CHAR            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    FLOAT           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    TYPEOF          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    COMMA           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    ASSIGN          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_LEFT         reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_RIGHT        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_PLUS         reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_MINUS        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_TIMES        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_MODULO       reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_AND_BIT      reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_DIV          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_OR_BIT       reduce using rule 119 (assignOperator -> EQ_LEFT .)
    EQ_XOR_BIT      reduce using rule 119 (assignOperator -> EQ_LEFT .)
    QUESTION        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    DOUBLE_PIPE     reduce using rule 119 (assignOperator -> EQ_LEFT .)
    DOUBLE_AMPERSAND reduce using rule 119 (assignOperator -> EQ_LEFT .)
    PIPE            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    CARET           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    RIGHT_SHIFT     reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LEFT_SHIFT      reduce using rule 119 (assignOperator -> EQ_LEFT .)
    IS_EQ           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    NOT_EQ          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LESS            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LESS_EQ         reduce using rule 119 (assignOperator -> EQ_LEFT .)
    GREATER         reduce using rule 119 (assignOperator -> EQ_LEFT .)
    GREATER_EQ      reduce using rule 119 (assignOperator -> EQ_LEFT .)
    IS_EQ_DIFF      reduce using rule 119 (assignOperator -> EQ_LEFT .)
    NOT_EQ_DIFF     reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LESS_EQ_DIFF    reduce using rule 119 (assignOperator -> EQ_LEFT .)
    LESS_DIFF       reduce using rule 119 (assignOperator -> EQ_LEFT .)
    GREATER_EQ_DIFF reduce using rule 119 (assignOperator -> EQ_LEFT .)
    GREATER_DIFF    reduce using rule 119 (assignOperator -> EQ_LEFT .)
    TILDE           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    DIV             reduce using rule 119 (assignOperator -> EQ_LEFT .)
    MODULO          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    RBRACKET        reduce using rule 119 (assignOperator -> EQ_LEFT .)
    $end            reduce using rule 119 (assignOperator -> EQ_LEFT .)
    RPAREN          reduce using rule 119 (assignOperator -> EQ_LEFT .)
    RANGE           reduce using rule 119 (assignOperator -> EQ_LEFT .)
    COLON           reduce using rule 119 (assignOperator -> EQ_LEFT .)


state 164

    (124) assignOperator -> EQ_MODULO .

    AMPERSAND       reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EXCLAMATION     reduce using rule 124 (assignOperator -> EQ_MODULO .)
    TIMES           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    PLUS            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    MINUS           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    DOT             reduce using rule 124 (assignOperator -> EQ_MODULO .)
    PLUS_PLUS       reduce using rule 124 (assignOperator -> EQ_MODULO .)
    MINUS_MINUS     reduce using rule 124 (assignOperator -> EQ_MODULO .)
    ELLIPSIS        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LPAREN          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    DOLLAR          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    THIS            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    NULL            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    TRUE            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    FALSE           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    INUMBER         reduce using rule 124 (assignOperator -> EQ_MODULO .)
    DNUMBER         reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LIT_CHAR        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    NEW             reduce using rule 124 (assignOperator -> EQ_MODULO .)
    DELETE          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    CAST            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    IDENTIFIER      reduce using rule 124 (assignOperator -> EQ_MODULO .)
    CONST           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    IMMUTABLE       reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LBRACKET        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    FUNCTION        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    MIXIN           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    IMPORT          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LIT_STR         reduce using rule 124 (assignOperator -> EQ_MODULO .)
    BOOL            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    SHORT           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    USHORT          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    INT             reduce using rule 124 (assignOperator -> EQ_MODULO .)
    UINT            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LONG            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    ULONG           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    CHAR            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    FLOAT           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    TYPEOF          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    COMMA           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    ASSIGN          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_LEFT         reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_RIGHT        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_PLUS         reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_MINUS        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_TIMES        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_MODULO       reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_AND_BIT      reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_DIV          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_OR_BIT       reduce using rule 124 (assignOperator -> EQ_MODULO .)
    EQ_XOR_BIT      reduce using rule 124 (assignOperator -> EQ_MODULO .)
    QUESTION        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    DOUBLE_PIPE     reduce using rule 124 (assignOperator -> EQ_MODULO .)
    DOUBLE_AMPERSAND reduce using rule 124 (assignOperator -> EQ_MODULO .)
    PIPE            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    CARET           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    RIGHT_SHIFT     reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LEFT_SHIFT      reduce using rule 124 (assignOperator -> EQ_MODULO .)
    IS_EQ           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    NOT_EQ          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LESS            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LESS_EQ         reduce using rule 124 (assignOperator -> EQ_MODULO .)
    GREATER         reduce using rule 124 (assignOperator -> EQ_MODULO .)
    GREATER_EQ      reduce using rule 124 (assignOperator -> EQ_MODULO .)
    IS_EQ_DIFF      reduce using rule 124 (assignOperator -> EQ_MODULO .)
    NOT_EQ_DIFF     reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LESS_EQ_DIFF    reduce using rule 124 (assignOperator -> EQ_MODULO .)
    LESS_DIFF       reduce using rule 124 (assignOperator -> EQ_MODULO .)
    GREATER_EQ_DIFF reduce using rule 124 (assignOperator -> EQ_MODULO .)
    GREATER_DIFF    reduce using rule 124 (assignOperator -> EQ_MODULO .)
    TILDE           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    DIV             reduce using rule 124 (assignOperator -> EQ_MODULO .)
    MODULO          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    RBRACKET        reduce using rule 124 (assignOperator -> EQ_MODULO .)
    $end            reduce using rule 124 (assignOperator -> EQ_MODULO .)
    RPAREN          reduce using rule 124 (assignOperator -> EQ_MODULO .)
    RANGE           reduce using rule 124 (assignOperator -> EQ_MODULO .)
    COLON           reduce using rule 124 (assignOperator -> EQ_MODULO .)


state 165

    (122) assignOperator -> EQ_MINUS .

    AMPERSAND       reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EXCLAMATION     reduce using rule 122 (assignOperator -> EQ_MINUS .)
    TIMES           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    PLUS            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    MINUS           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    DOT             reduce using rule 122 (assignOperator -> EQ_MINUS .)
    PLUS_PLUS       reduce using rule 122 (assignOperator -> EQ_MINUS .)
    MINUS_MINUS     reduce using rule 122 (assignOperator -> EQ_MINUS .)
    ELLIPSIS        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LPAREN          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    DOLLAR          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    THIS            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    NULL            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    TRUE            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    FALSE           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    INUMBER         reduce using rule 122 (assignOperator -> EQ_MINUS .)
    DNUMBER         reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LIT_CHAR        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    NEW             reduce using rule 122 (assignOperator -> EQ_MINUS .)
    DELETE          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    CAST            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    IDENTIFIER      reduce using rule 122 (assignOperator -> EQ_MINUS .)
    CONST           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    IMMUTABLE       reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LBRACKET        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    FUNCTION        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    MIXIN           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    IMPORT          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LIT_STR         reduce using rule 122 (assignOperator -> EQ_MINUS .)
    BOOL            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    SHORT           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    USHORT          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    INT             reduce using rule 122 (assignOperator -> EQ_MINUS .)
    UINT            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LONG            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    ULONG           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    CHAR            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    FLOAT           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    TYPEOF          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    COMMA           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    ASSIGN          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_LEFT         reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_RIGHT        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_PLUS         reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_MINUS        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_TIMES        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_MODULO       reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_AND_BIT      reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_DIV          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_OR_BIT       reduce using rule 122 (assignOperator -> EQ_MINUS .)
    EQ_XOR_BIT      reduce using rule 122 (assignOperator -> EQ_MINUS .)
    QUESTION        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    DOUBLE_PIPE     reduce using rule 122 (assignOperator -> EQ_MINUS .)
    DOUBLE_AMPERSAND reduce using rule 122 (assignOperator -> EQ_MINUS .)
    PIPE            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    CARET           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    RIGHT_SHIFT     reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LEFT_SHIFT      reduce using rule 122 (assignOperator -> EQ_MINUS .)
    IS_EQ           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    NOT_EQ          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LESS            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LESS_EQ         reduce using rule 122 (assignOperator -> EQ_MINUS .)
    GREATER         reduce using rule 122 (assignOperator -> EQ_MINUS .)
    GREATER_EQ      reduce using rule 122 (assignOperator -> EQ_MINUS .)
    IS_EQ_DIFF      reduce using rule 122 (assignOperator -> EQ_MINUS .)
    NOT_EQ_DIFF     reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LESS_EQ_DIFF    reduce using rule 122 (assignOperator -> EQ_MINUS .)
    LESS_DIFF       reduce using rule 122 (assignOperator -> EQ_MINUS .)
    GREATER_EQ_DIFF reduce using rule 122 (assignOperator -> EQ_MINUS .)
    GREATER_DIFF    reduce using rule 122 (assignOperator -> EQ_MINUS .)
    TILDE           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    DIV             reduce using rule 122 (assignOperator -> EQ_MINUS .)
    MODULO          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    RBRACKET        reduce using rule 122 (assignOperator -> EQ_MINUS .)
    $end            reduce using rule 122 (assignOperator -> EQ_MINUS .)
    RPAREN          reduce using rule 122 (assignOperator -> EQ_MINUS .)
    RANGE           reduce using rule 122 (assignOperator -> EQ_MINUS .)
    COLON           reduce using rule 122 (assignOperator -> EQ_MINUS .)


state 166

    (117) assignExpression -> ternaryExpression assignOperator . expression
    (106) expression -> . assignExpression
    (107) expression -> . expression COMMA assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 123
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63
    expression                     shift and go to state 217

state 167

    (123) assignOperator -> EQ_TIMES .

    AMPERSAND       reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EXCLAMATION     reduce using rule 123 (assignOperator -> EQ_TIMES .)
    TIMES           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    PLUS            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    MINUS           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    DOT             reduce using rule 123 (assignOperator -> EQ_TIMES .)
    PLUS_PLUS       reduce using rule 123 (assignOperator -> EQ_TIMES .)
    MINUS_MINUS     reduce using rule 123 (assignOperator -> EQ_TIMES .)
    ELLIPSIS        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LPAREN          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    DOLLAR          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    THIS            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    NULL            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    TRUE            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    FALSE           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    INUMBER         reduce using rule 123 (assignOperator -> EQ_TIMES .)
    DNUMBER         reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LIT_CHAR        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    NEW             reduce using rule 123 (assignOperator -> EQ_TIMES .)
    DELETE          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    CAST            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    IDENTIFIER      reduce using rule 123 (assignOperator -> EQ_TIMES .)
    CONST           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    IMMUTABLE       reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LBRACKET        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    FUNCTION        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    MIXIN           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    IMPORT          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LIT_STR         reduce using rule 123 (assignOperator -> EQ_TIMES .)
    BOOL            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    SHORT           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    USHORT          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    INT             reduce using rule 123 (assignOperator -> EQ_TIMES .)
    UINT            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LONG            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    ULONG           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    CHAR            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    FLOAT           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    TYPEOF          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    COMMA           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    ASSIGN          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_LEFT         reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_RIGHT        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_PLUS         reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_MINUS        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_TIMES        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_MODULO       reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_AND_BIT      reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_DIV          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_OR_BIT       reduce using rule 123 (assignOperator -> EQ_TIMES .)
    EQ_XOR_BIT      reduce using rule 123 (assignOperator -> EQ_TIMES .)
    QUESTION        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    DOUBLE_PIPE     reduce using rule 123 (assignOperator -> EQ_TIMES .)
    DOUBLE_AMPERSAND reduce using rule 123 (assignOperator -> EQ_TIMES .)
    PIPE            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    CARET           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    RIGHT_SHIFT     reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LEFT_SHIFT      reduce using rule 123 (assignOperator -> EQ_TIMES .)
    IS_EQ           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    NOT_EQ          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LESS            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LESS_EQ         reduce using rule 123 (assignOperator -> EQ_TIMES .)
    GREATER         reduce using rule 123 (assignOperator -> EQ_TIMES .)
    GREATER_EQ      reduce using rule 123 (assignOperator -> EQ_TIMES .)
    IS_EQ_DIFF      reduce using rule 123 (assignOperator -> EQ_TIMES .)
    NOT_EQ_DIFF     reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LESS_EQ_DIFF    reduce using rule 123 (assignOperator -> EQ_TIMES .)
    LESS_DIFF       reduce using rule 123 (assignOperator -> EQ_TIMES .)
    GREATER_EQ_DIFF reduce using rule 123 (assignOperator -> EQ_TIMES .)
    GREATER_DIFF    reduce using rule 123 (assignOperator -> EQ_TIMES .)
    TILDE           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    DIV             reduce using rule 123 (assignOperator -> EQ_TIMES .)
    MODULO          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    RBRACKET        reduce using rule 123 (assignOperator -> EQ_TIMES .)
    $end            reduce using rule 123 (assignOperator -> EQ_TIMES .)
    RPAREN          reduce using rule 123 (assignOperator -> EQ_TIMES .)
    RANGE           reduce using rule 123 (assignOperator -> EQ_TIMES .)
    COLON           reduce using rule 123 (assignOperator -> EQ_TIMES .)


state 168

    (101) argumentList -> argumentList comma_assign .

    COMMA           reduce using rule 101 (argumentList -> argumentList comma_assign .)
    RPAREN          reduce using rule 101 (argumentList -> argumentList comma_assign .)
    RBRACKET        reduce using rule 101 (argumentList -> argumentList comma_assign .)


state 169

    (102) comma_assign -> COMMA . assignExpression comma_assign
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 218
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    typeConstructor                shift and go to state 63
    primaryExpression              shift and go to state 51
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62

state 170

    (103) comma_assign -> empty .

    COMMA           reduce using rule 103 (comma_assign -> empty .)
    RBRACKET        reduce using rule 103 (comma_assign -> empty .)
    RPAREN          reduce using rule 103 (comma_assign -> empty .)


state 171

    (147) equalExpression -> shiftExpression IS_EQ . shiftExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    shiftExpression                shift and go to state 219
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 172

    (146) shiftExpression -> shiftExpression LEFT_SHIFT . addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 220
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 173

    (145) shiftExpression -> shiftExpression RIGHT_SHIFT . addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 221
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 174

    (148) equalExpression -> shiftExpression NOT_EQ . shiftExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    shiftExpression                shift and go to state 222
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 175

    (136) orExpression -> orExpression PIPE . xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 223
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    equalExpression                shift and go to state 81
    newExpression                  shift and go to state 39
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 12
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    mulExpression                  shift and go to state 27
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 176

    (113) importExpression -> IMPORT LBRACKET assignExpression . RBRACKET

    RBRACKET        shift and go to state 224


state 177

    (51) newExpression -> NEW type LBRACKET . assignExpression RBRACKET
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 225
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 178

    (52) newExpression -> NEW type arguments .

    DOT             reduce using rule 52 (newExpression -> NEW type arguments .)
    PLUS_PLUS       reduce using rule 52 (newExpression -> NEW type arguments .)
    MINUS_MINUS     reduce using rule 52 (newExpression -> NEW type arguments .)
    LBRACKET        reduce using rule 52 (newExpression -> NEW type arguments .)
    CARET           reduce using rule 52 (newExpression -> NEW type arguments .)
    TIMES           reduce using rule 52 (newExpression -> NEW type arguments .)
    DIV             reduce using rule 52 (newExpression -> NEW type arguments .)
    MODULO          reduce using rule 52 (newExpression -> NEW type arguments .)
    PLUS            reduce using rule 52 (newExpression -> NEW type arguments .)
    MINUS           reduce using rule 52 (newExpression -> NEW type arguments .)
    TILDE           reduce using rule 52 (newExpression -> NEW type arguments .)
    $end            reduce using rule 52 (newExpression -> NEW type arguments .)
    RIGHT_SHIFT     reduce using rule 52 (newExpression -> NEW type arguments .)
    LEFT_SHIFT      reduce using rule 52 (newExpression -> NEW type arguments .)
    IS_EQ           reduce using rule 52 (newExpression -> NEW type arguments .)
    NOT_EQ          reduce using rule 52 (newExpression -> NEW type arguments .)
    AMPERSAND       reduce using rule 52 (newExpression -> NEW type arguments .)
    PIPE            reduce using rule 52 (newExpression -> NEW type arguments .)
    DOUBLE_AMPERSAND reduce using rule 52 (newExpression -> NEW type arguments .)
    QUESTION        reduce using rule 52 (newExpression -> NEW type arguments .)
    DOUBLE_PIPE     reduce using rule 52 (newExpression -> NEW type arguments .)
    ASSIGN          reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_LEFT         reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_RIGHT        reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_PLUS         reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_MINUS        reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_TIMES        reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_MODULO       reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_AND_BIT      reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_DIV          reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_OR_BIT       reduce using rule 52 (newExpression -> NEW type arguments .)
    EQ_XOR_BIT      reduce using rule 52 (newExpression -> NEW type arguments .)
    COMMA           reduce using rule 52 (newExpression -> NEW type arguments .)
    RBRACKET        reduce using rule 52 (newExpression -> NEW type arguments .)
    LESS            reduce using rule 52 (newExpression -> NEW type arguments .)
    LESS_EQ         reduce using rule 52 (newExpression -> NEW type arguments .)
    GREATER         reduce using rule 52 (newExpression -> NEW type arguments .)
    GREATER_EQ      reduce using rule 52 (newExpression -> NEW type arguments .)
    IS_EQ_DIFF      reduce using rule 52 (newExpression -> NEW type arguments .)
    NOT_EQ_DIFF     reduce using rule 52 (newExpression -> NEW type arguments .)
    LESS_EQ_DIFF    reduce using rule 52 (newExpression -> NEW type arguments .)
    LESS_DIFF       reduce using rule 52 (newExpression -> NEW type arguments .)
    GREATER_EQ_DIFF reduce using rule 52 (newExpression -> NEW type arguments .)
    GREATER_DIFF    reduce using rule 52 (newExpression -> NEW type arguments .)
    RPAREN          reduce using rule 52 (newExpression -> NEW type arguments .)
    RANGE           reduce using rule 52 (newExpression -> NEW type arguments .)
    COLON           reduce using rule 52 (newExpression -> NEW type arguments .)
    LPAREN          reduce using rule 52 (newExpression -> NEW type arguments .)


state 179

    (67) indexExpression -> unaryExpression LBRACKET index . comma_index RBRACKET
    (68) comma_index -> . COMMA index comma_index
    (69) comma_index -> . empty
    (161) empty -> .

    COMMA           shift and go to state 226
    RBRACKET        reduce using rule 161 (empty -> .)

    comma_index                    shift and go to state 227
    empty                          shift and go to state 228

state 180

    (70) index -> assignExpression .
    (71) index -> assignExpression . RANGE assignExpression

    COMMA           reduce using rule 70 (index -> assignExpression .)
    RBRACKET        reduce using rule 70 (index -> assignExpression .)
    RANGE           shift and go to state 229


state 181

    (66) indexExpression -> unaryExpression LBRACKET RBRACKET .

    DOT             reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PLUS_PLUS       reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MINUS_MINUS     reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    CARET           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TIMES           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DIV             reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MODULO          reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PLUS            reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    MINUS           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    TILDE           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    $end            reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RIGHT_SHIFT     reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LEFT_SHIFT      reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IS_EQ           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    NOT_EQ          reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    PIPE            reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    QUESTION        reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    DOUBLE_PIPE     reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_LEFT         reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_RIGHT        reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_PLUS         reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_MINUS        reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_TIMES        reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_MODULO       reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_AND_BIT      reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_DIV          reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_OR_BIT       reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    EQ_XOR_BIT      reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    COMMA           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS            reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_EQ         reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER         reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_EQ      reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    IS_EQ_DIFF      reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LESS_DIFF       reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    GREATER_DIFF    reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RPAREN          reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    RANGE           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    COLON           reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)
    LPAREN          reduce using rule 66 (indexExpression -> unaryExpression LBRACKET RBRACKET .)


state 182

    (27) unaryExpression -> unaryExpression DOT newExpression .

    DOT             reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    PLUS_PLUS       reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    MINUS_MINUS     reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    LBRACKET        reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    CARET           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    TIMES           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    DIV             reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    MODULO          reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    PLUS            reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    MINUS           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    TILDE           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    RIGHT_SHIFT     reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    LEFT_SHIFT      reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    IS_EQ           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    NOT_EQ          reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    AMPERSAND       reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    PIPE            reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    DOUBLE_AMPERSAND reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    QUESTION        reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    DOUBLE_PIPE     reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    ASSIGN          reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_LEFT         reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_RIGHT        reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_PLUS         reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_MINUS        reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_TIMES        reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_MODULO       reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_AND_BIT      reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_DIV          reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_OR_BIT       reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    EQ_XOR_BIT      reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    RBRACKET        reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    COMMA           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS            reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_EQ         reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER         reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_EQ      reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    IS_EQ_DIFF      reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    NOT_EQ_DIFF     reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_EQ_DIFF    reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    LESS_DIFF       reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_EQ_DIFF reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    GREATER_DIFF    reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    $end            reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    RPAREN          reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    RANGE           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    COLON           reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)
    LPAREN          reduce using rule 27 (unaryExpression -> unaryExpression DOT newExpression .)


state 183

    (28) unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .

    DOT             reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    $end            reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 28 (unaryExpression -> unaryExpression DOT identifierOrTemplateInstance .)


state 184

    (84) typeSuffixStar -> typeSuffix typeSuffixStar .

    DOT             reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LPAREN          reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LBRACKET        reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PLUS_PLUS       reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MINUS_MINUS     reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    CARET           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TIMES           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DIV             reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MODULO          reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PLUS            reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    MINUS           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    TILDE           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    $end            reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IS_EQ           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    NOT_EQ          reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    AMPERSAND       reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    PIPE            reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    QUESTION        reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    ASSIGN          reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_LEFT         reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_RIGHT        reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_PLUS         reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_MINUS        reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_TIMES        reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_MODULO       reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_DIV          reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    COMMA           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RBRACKET        reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS            reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_EQ         reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER         reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_EQ      reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    LESS_DIFF       reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    GREATER_DIFF    reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RPAREN          reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    RANGE           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)
    COLON           reduce using rule 84 (typeSuffixStar -> typeSuffix typeSuffixStar .)


state 185

    (88) type2 -> typeofExpression DOT identifierOrTemplateChain .
    (64) identifierOrTemplateChain -> identifierOrTemplateChain . DOT identifierOrTemplateInstance

  ! shift/reduce conflict for DOT resolved as shift
    LPAREN          reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RPAREN          reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    PLUS_PLUS       reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    MINUS_MINUS     reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LBRACKET        reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    CARET           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    TIMES           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DIV             reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    MODULO          reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    PLUS            reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    MINUS           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    TILDE           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    $end            reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RIGHT_SHIFT     reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LEFT_SHIFT      reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    IS_EQ           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    NOT_EQ          reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    AMPERSAND       reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    PIPE            reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DOUBLE_AMPERSAND reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    QUESTION        reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DOUBLE_PIPE     reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    ASSIGN          reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_LEFT         reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_RIGHT        reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_PLUS         reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_MINUS        reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_TIMES        reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_MODULO       reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_AND_BIT      reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_DIV          reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_OR_BIT       reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    EQ_XOR_BIT      reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    COMMA           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RBRACKET        reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS            reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS_EQ         reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER         reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER_EQ      reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    IS_EQ_DIFF      reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    NOT_EQ_DIFF     reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS_EQ_DIFF    reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    LESS_DIFF       reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER_EQ_DIFF reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    GREATER_DIFF    reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    RANGE           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    COLON           reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .)
    DOT             shift and go to state 67

  ! DOT             [ reduce using rule 88 (type2 -> typeofExpression DOT identifierOrTemplateChain .) ]


state 186

    (57) castQualifier -> CONST .
    (95) typeConstructor -> CONST .

    RPAREN          reduce using rule 57 (castQualifier -> CONST .)
    LBRACKET        reduce using rule 95 (typeConstructor -> CONST .)
    CONST           reduce using rule 95 (typeConstructor -> CONST .)
    IMMUTABLE       reduce using rule 95 (typeConstructor -> CONST .)
    BOOL            reduce using rule 95 (typeConstructor -> CONST .)
    SHORT           reduce using rule 95 (typeConstructor -> CONST .)
    USHORT          reduce using rule 95 (typeConstructor -> CONST .)
    INT             reduce using rule 95 (typeConstructor -> CONST .)
    UINT            reduce using rule 95 (typeConstructor -> CONST .)
    LONG            reduce using rule 95 (typeConstructor -> CONST .)
    ULONG           reduce using rule 95 (typeConstructor -> CONST .)
    CHAR            reduce using rule 95 (typeConstructor -> CONST .)
    FLOAT           reduce using rule 95 (typeConstructor -> CONST .)
    DOT             reduce using rule 95 (typeConstructor -> CONST .)
    TYPEOF          reduce using rule 95 (typeConstructor -> CONST .)
    IDENTIFIER      reduce using rule 95 (typeConstructor -> CONST .)


state 187

    (54) castExpression -> CAST LPAREN RPAREN . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 230
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 188

    (56) castExpression -> CAST LPAREN castQualifier . RPAREN unaryExpression

    RPAREN          shift and go to state 231


state 189

    (55) castExpression -> CAST LPAREN type . RPAREN unaryExpression

    RPAREN          shift and go to state 232


state 190

    (58) castQualifier -> IMMUTABLE .
    (96) typeConstructor -> IMMUTABLE .

    RPAREN          reduce using rule 58 (castQualifier -> IMMUTABLE .)
    LBRACKET        reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    CONST           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    IMMUTABLE       reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    BOOL            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    SHORT           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    USHORT          reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    INT             reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    UINT            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    LONG            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    ULONG           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    CHAR            reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    FLOAT           reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    DOT             reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    TYPEOF          reduce using rule 96 (typeConstructor -> IMMUTABLE .)
    IDENTIFIER      reduce using rule 96 (typeConstructor -> IMMUTABLE .)


state 191

    (92) typeofExpression -> TYPEOF LBRACKET RETURN . RBRACKET

    RBRACKET        shift and go to state 233


state 192

    (91) typeofExpression -> TYPEOF LBRACKET expression . RBRACKET
    (107) expression -> expression . COMMA assignExpression

    RBRACKET        shift and go to state 234
    COMMA           shift and go to state 205


state 193

    (7) mulExpression -> mulExpression DIV powExpression .
    (10) powExpression -> powExpression . CARET unaryExpression

  ! shift/reduce conflict for CARET resolved as shift
    TIMES           reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    DIV             reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    MODULO          reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    PLUS            reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    MINUS           reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    TILDE           reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    RIGHT_SHIFT     reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    LEFT_SHIFT      reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    IS_EQ           reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    NOT_EQ          reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    AMPERSAND       reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    PIPE            reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    DOUBLE_AMPERSAND reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    QUESTION        reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    DOUBLE_PIPE     reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    ASSIGN          reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_LEFT         reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_RIGHT        reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_PLUS         reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_MINUS        reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_TIMES        reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_MODULO       reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_AND_BIT      reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_DIV          reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_OR_BIT       reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    EQ_XOR_BIT      reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    RANGE           reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    COMMA           reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    RBRACKET        reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    LESS            reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    LESS_EQ         reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    GREATER         reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    GREATER_EQ      reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    IS_EQ_DIFF      reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    NOT_EQ_DIFF     reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    LESS_EQ_DIFF    reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    LESS_DIFF       reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    GREATER_EQ_DIFF reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    GREATER_DIFF    reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    DOT             reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    PLUS_PLUS       reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    MINUS_MINUS     reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    LBRACKET        reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    $end            reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    RPAREN          reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    COLON           reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    LPAREN          reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .)
    CARET           shift and go to state 132

  ! CARET           [ reduce using rule 7 (mulExpression -> mulExpression DIV powExpression .) ]


state 194

    (8) mulExpression -> mulExpression MODULO powExpression .
    (10) powExpression -> powExpression . CARET unaryExpression

  ! shift/reduce conflict for CARET resolved as shift
    TIMES           reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    DIV             reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    MODULO          reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    PLUS            reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    MINUS           reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    TILDE           reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    RIGHT_SHIFT     reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    LEFT_SHIFT      reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    IS_EQ           reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    NOT_EQ          reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    AMPERSAND       reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    PIPE            reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    DOUBLE_AMPERSAND reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    QUESTION        reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    DOUBLE_PIPE     reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    ASSIGN          reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_LEFT         reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_RIGHT        reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_PLUS         reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_MINUS        reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_TIMES        reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_MODULO       reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_AND_BIT      reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_DIV          reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_OR_BIT       reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    EQ_XOR_BIT      reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    RANGE           reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    COMMA           reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    RBRACKET        reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    LESS            reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    LESS_EQ         reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER         reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER_EQ      reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    IS_EQ_DIFF      reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    NOT_EQ_DIFF     reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    LESS_EQ_DIFF    reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    LESS_DIFF       reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER_EQ_DIFF reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    GREATER_DIFF    reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    DOT             reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    PLUS_PLUS       reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    MINUS_MINUS     reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    LBRACKET        reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    $end            reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    RPAREN          reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    COLON           reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    LPAREN          reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .)
    CARET           shift and go to state 132

  ! CARET           [ reduce using rule 8 (mulExpression -> mulExpression MODULO powExpression .) ]


state 195

    (6) mulExpression -> mulExpression TIMES powExpression .
    (10) powExpression -> powExpression . CARET unaryExpression

  ! shift/reduce conflict for CARET resolved as shift
    TIMES           reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    DIV             reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    MODULO          reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    PLUS            reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    MINUS           reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    TILDE           reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    RIGHT_SHIFT     reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    LEFT_SHIFT      reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    IS_EQ           reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    NOT_EQ          reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    AMPERSAND       reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    PIPE            reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    DOUBLE_AMPERSAND reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    QUESTION        reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    DOUBLE_PIPE     reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    ASSIGN          reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_LEFT         reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_RIGHT        reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_PLUS         reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_MINUS        reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_TIMES        reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_MODULO       reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_AND_BIT      reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_DIV          reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_OR_BIT       reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    EQ_XOR_BIT      reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    RANGE           reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    COMMA           reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    RBRACKET        reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    LESS            reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    LESS_EQ         reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER         reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER_EQ      reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    IS_EQ_DIFF      reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    NOT_EQ_DIFF     reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    LESS_EQ_DIFF    reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    LESS_DIFF       reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER_EQ_DIFF reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    GREATER_DIFF    reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    DOT             reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    PLUS_PLUS       reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    MINUS_MINUS     reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    LBRACKET        reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    $end            reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    RPAREN          reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    COLON           reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    LPAREN          reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .)
    CARET           shift and go to state 132

  ! CARET           [ reduce using rule 6 (mulExpression -> mulExpression TIMES powExpression .) ]


state 196

    (2) addExpression -> addExpression PLUS mulExpression .
    (6) mulExpression -> mulExpression . TIMES powExpression
    (7) mulExpression -> mulExpression . DIV powExpression
    (8) mulExpression -> mulExpression . MODULO powExpression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    MINUS           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    TILDE           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RIGHT_SHIFT     reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LEFT_SHIFT      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    IS_EQ           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    NOT_EQ          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    AMPERSAND       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    CARET           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    PIPE            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    QUESTION        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    DOUBLE_PIPE     reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    ASSIGN          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_LEFT         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_RIGHT        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_PLUS         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_MINUS        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_TIMES        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_MODULO       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_AND_BIT      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_DIV          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_OR_BIT       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    EQ_XOR_BIT      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RBRACKET        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS_EQ         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER         reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_EQ      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    IS_EQ_DIFF      reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    NOT_EQ_DIFF     reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS_EQ_DIFF    reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LESS_DIFF       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_EQ_DIFF reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    GREATER_DIFF    reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RANGE           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    COMMA           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    RPAREN          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    DOT             reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    PLUS_PLUS       reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    MINUS_MINUS     reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LBRACKET        reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    $end            reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    COLON           reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    LPAREN          reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .)
    TIMES           shift and go to state 106
    DIV             shift and go to state 104
    MODULO          shift and go to state 105

  ! TIMES           [ reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .) ]
  ! DIV             [ reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .) ]
  ! MODULO          [ reduce using rule 2 (addExpression -> addExpression PLUS mulExpression .) ]


state 197

    (3) addExpression -> addExpression MINUS mulExpression .
    (6) mulExpression -> mulExpression . TIMES powExpression
    (7) mulExpression -> mulExpression . DIV powExpression
    (8) mulExpression -> mulExpression . MODULO powExpression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    MINUS           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    TILDE           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RIGHT_SHIFT     reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LEFT_SHIFT      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    IS_EQ           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    NOT_EQ          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    AMPERSAND       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    CARET           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    PIPE            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    QUESTION        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    DOUBLE_PIPE     reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    ASSIGN          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_LEFT         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_RIGHT        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_PLUS         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_MINUS        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_TIMES        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_MODULO       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_AND_BIT      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_DIV          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_OR_BIT       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    EQ_XOR_BIT      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RBRACKET        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS_EQ         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER         reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_EQ      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    IS_EQ_DIFF      reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    NOT_EQ_DIFF     reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS_EQ_DIFF    reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LESS_DIFF       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_EQ_DIFF reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    GREATER_DIFF    reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RANGE           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    COMMA           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    RPAREN          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    DOT             reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    PLUS_PLUS       reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    MINUS_MINUS     reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LBRACKET        reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    $end            reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    COLON           reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    LPAREN          reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .)
    TIMES           shift and go to state 106
    DIV             shift and go to state 104
    MODULO          shift and go to state 105

  ! TIMES           [ reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .) ]
  ! DIV             [ reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .) ]
  ! MODULO          [ reduce using rule 3 (addExpression -> addExpression MINUS mulExpression .) ]


state 198

    (4) addExpression -> addExpression TILDE mulExpression .
    (6) mulExpression -> mulExpression . TIMES powExpression
    (7) mulExpression -> mulExpression . DIV powExpression
    (8) mulExpression -> mulExpression . MODULO powExpression

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    PLUS            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    MINUS           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    TILDE           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RIGHT_SHIFT     reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LEFT_SHIFT      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    IS_EQ           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    NOT_EQ          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    AMPERSAND       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    CARET           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    PIPE            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    DOUBLE_AMPERSAND reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    QUESTION        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    DOUBLE_PIPE     reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    ASSIGN          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_LEFT         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_RIGHT        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_PLUS         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_MINUS        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_TIMES        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_MODULO       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_AND_BIT      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_DIV          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_OR_BIT       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    EQ_XOR_BIT      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RBRACKET        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS_EQ         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER         reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_EQ      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    IS_EQ_DIFF      reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    NOT_EQ_DIFF     reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS_EQ_DIFF    reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LESS_DIFF       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_EQ_DIFF reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    GREATER_DIFF    reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RANGE           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    COMMA           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    RPAREN          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    DOT             reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    PLUS_PLUS       reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    MINUS_MINUS     reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LBRACKET        reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    $end            reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    COLON           reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    LPAREN          reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .)
    TIMES           shift and go to state 106
    DIV             shift and go to state 104
    MODULO          shift and go to state 105

  ! TIMES           [ reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .) ]
  ! DIV             [ reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .) ]
  ! MODULO          [ reduce using rule 4 (addExpression -> addExpression TILDE mulExpression .) ]


state 199

    (97) arguments -> LPAREN argumentList_question . RPAREN

    RPAREN          shift and go to state 235


state 200

    (34) primaryExpression -> type DOT IDENTIFIER .

    DOT             reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    LBRACKET        reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    LPAREN          reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    CARET           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    TIMES           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    DIV             reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    MODULO          reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    PLUS            reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    MINUS           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    TILDE           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    $end            reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    IS_EQ           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    PIPE            reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    QUESTION        reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    ASSIGN          reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    COMMA           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    RBRACKET        reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    LESS            reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER         reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    LESS_DIFF       reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    GREATER_DIFF    reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    RPAREN          reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    RANGE           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)
    COLON           reduce using rule 34 (primaryExpression -> type DOT IDENTIFIER .)


state 201

    (72) type -> typeConstructors type2 typeSuffixStar .

    DOT             reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    LPAREN          reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    RPAREN          reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    PLUS_PLUS       reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    MINUS_MINUS     reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    LBRACKET        reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    CARET           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    TIMES           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    DIV             reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    MODULO          reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    PLUS            reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    MINUS           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    TILDE           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    $end            reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    RIGHT_SHIFT     reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    LEFT_SHIFT      reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    IS_EQ           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    NOT_EQ          reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    AMPERSAND       reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    PIPE            reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    DOUBLE_AMPERSAND reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    QUESTION        reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    DOUBLE_PIPE     reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    ASSIGN          reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_LEFT         reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_RIGHT        reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_PLUS         reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_MINUS        reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_TIMES        reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_MODULO       reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_AND_BIT      reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_DIV          reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_OR_BIT       reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    EQ_XOR_BIT      reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    COMMA           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    RBRACKET        reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    LESS            reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    LESS_EQ         reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER         reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER_EQ      reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    IS_EQ_DIFF      reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    NOT_EQ_DIFF     reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    LESS_EQ_DIFF    reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    LESS_DIFF       reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER_EQ_DIFF reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    GREATER_DIFF    reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    RANGE           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)
    COLON           reduce using rule 72 (type -> typeConstructors type2 typeSuffixStar .)


state 202

    (109) functionLiteralExpression -> FUNCTION type functionBody .

    DOT             reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    PLUS_PLUS       reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    MINUS_MINUS     reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    LBRACKET        reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    CARET           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    TIMES           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    DIV             reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    MODULO          reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    PLUS            reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    MINUS           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    TILDE           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    $end            reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    RIGHT_SHIFT     reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    LEFT_SHIFT      reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    IS_EQ           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    NOT_EQ          reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    AMPERSAND       reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    PIPE            reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    DOUBLE_AMPERSAND reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    QUESTION        reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    DOUBLE_PIPE     reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    ASSIGN          reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_LEFT         reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_RIGHT        reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_PLUS         reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_MINUS        reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_TIMES        reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_MODULO       reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_AND_BIT      reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_DIV          reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_OR_BIT       reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    EQ_XOR_BIT      reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    COMMA           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    RBRACKET        reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS            reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS_EQ         reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER         reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER_EQ      reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    IS_EQ_DIFF      reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    NOT_EQ_DIFF     reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS_EQ_DIFF    reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    LESS_DIFF       reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER_EQ_DIFF reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    GREATER_DIFF    reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    RPAREN          reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    RANGE           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    COLON           reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)
    LPAREN          reduce using rule 109 (functionLiteralExpression -> FUNCTION type functionBody .)


state 203

    (59) functionCallExpression -> symbol arguments unaryExpression . arguments
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET
    (97) arguments -> . LPAREN argumentList_question RPAREN

    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90
    LPAREN          shift and go to state 112

    arguments                      shift and go to state 236

state 204

    (37) primaryExpression -> LPAREN expression RPAREN .

    DOT             reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    PLUS_PLUS       reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    MINUS_MINUS     reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    CARET           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    $end            reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    RIGHT_SHIFT     reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    LEFT_SHIFT      reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    IS_EQ           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    AMPERSAND       reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    PIPE            reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    QUESTION        reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    DOUBLE_PIPE     reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_LEFT         reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_RIGHT        reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_PLUS         reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_MINUS        reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_TIMES        reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_MODULO       reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_AND_BIT      reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_DIV          reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_OR_BIT       reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    EQ_XOR_BIT      reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    IS_EQ_DIFF      reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    NOT_EQ_DIFF     reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_EQ_DIFF    reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    LESS_DIFF       reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_EQ_DIFF reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    GREATER_DIFF    reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 37 (primaryExpression -> LPAREN expression RPAREN .)


state 205

    (107) expression -> expression COMMA . assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 237
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 206

    (26) unaryExpression -> LPAREN type RPAREN . DOT identifierOrTemplateInstance

    DOT             shift and go to state 238


state 207

    (112) mixinExpression -> MIXIN LPAREN assignExpression . RPAREN

    RPAREN          shift and go to state 239


state 208

    (10) powExpression -> powExpression CARET unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    TIMES           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    DIV             reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    MODULO          reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    PLUS            reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    MINUS           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    TILDE           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    RIGHT_SHIFT     reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    LEFT_SHIFT      reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    IS_EQ           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    NOT_EQ          reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    AMPERSAND       reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    PIPE            reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    QUESTION        reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    DOUBLE_PIPE     reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    ASSIGN          reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_LEFT         reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_RIGHT        reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_PLUS         reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_MINUS        reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_TIMES        reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_MODULO       reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_AND_BIT      reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_DIV          reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_OR_BIT       reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    EQ_XOR_BIT      reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    COMMA           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    RBRACKET        reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    LESS            reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    LESS_EQ         reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    GREATER         reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    GREATER_EQ      reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    IS_EQ_DIFF      reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    LESS_DIFF       reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    GREATER_DIFF    reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    RANGE           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    $end            reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    RPAREN          reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    COLON           reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    LPAREN          reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 10 (powExpression -> powExpression CARET unaryExpression .) ]


state 209

    (90) type2 -> typeConstructor LBRACKET type . RBRACKET

    RBRACKET        shift and go to state 240


state 210

    (33) primaryExpression -> typeConstructor LPAREN type . RPAREN DOT IDENTIFIER

    RPAREN          shift and go to state 241


state 211

    (138) xorExpression -> xorExpression CARET andExpression .
    (140) andExpression -> andExpression . AMPERSAND cmpExpression

  ! shift/reduce conflict for AMPERSAND resolved as shift
    DOT             reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    PLUS_PLUS       reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    MINUS_MINUS     reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    LBRACKET        reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    CARET           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    TIMES           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    DIV             reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    MODULO          reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    PLUS            reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    MINUS           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    TILDE           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    $end            reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    RIGHT_SHIFT     reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    LEFT_SHIFT      reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    IS_EQ           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    NOT_EQ          reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    PIPE            reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    DOUBLE_AMPERSAND reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    QUESTION        reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    DOUBLE_PIPE     reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    ASSIGN          reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_LEFT         reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_RIGHT        reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_PLUS         reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_MINUS        reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_TIMES        reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_MODULO       reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_AND_BIT      reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_DIV          reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_OR_BIT       reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    EQ_XOR_BIT      reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    COMMA           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    RBRACKET        reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    LESS            reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    LESS_EQ         reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    GREATER         reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_EQ      reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    IS_EQ_DIFF      reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    NOT_EQ_DIFF     reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    LESS_EQ_DIFF    reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    LESS_DIFF       reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_EQ_DIFF reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    GREATER_DIFF    reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    RPAREN          reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    RANGE           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    COLON           reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    LPAREN          reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .)
    AMPERSAND       shift and go to state 153

  ! AMPERSAND       [ reduce using rule 138 (xorExpression -> xorExpression CARET andExpression .) ]


state 212

    (150) relExpression -> relExpression relOperator shiftExpression .
    (145) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (146) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression

  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
    LESS            reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_EQ         reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER         reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_EQ      reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    IS_EQ_DIFF      reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    LESS_DIFF       reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    GREATER_DIFF    reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    AMPERSAND       reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    CARET           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    PIPE            reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    QUESTION        reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    DOUBLE_PIPE     reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    ASSIGN          reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_LEFT         reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_RIGHT        reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_PLUS         reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_MINUS        reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_TIMES        reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_MODULO       reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_AND_BIT      reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_DIV          reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_OR_BIT       reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    EQ_XOR_BIT      reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    RBRACKET        reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    DOT             reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    PLUS_PLUS       reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    MINUS_MINUS     reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    LBRACKET        reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    TIMES           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    DIV             reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    MODULO          reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    PLUS            reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    MINUS           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    TILDE           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    $end            reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    IS_EQ           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    NOT_EQ          reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    COMMA           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    RPAREN          reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    RANGE           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    COLON           reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    LPAREN          reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .)
    RIGHT_SHIFT     shift and go to state 173
    LEFT_SHIFT      shift and go to state 172

  ! RIGHT_SHIFT     [ reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 150 (relExpression -> relExpression relOperator shiftExpression .) ]


state 213

    (134) andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .
    (136) orExpression -> orExpression . PIPE xorExpression

  ! shift/reduce conflict for PIPE resolved as shift
    DOUBLE_AMPERSAND reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    QUESTION        reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DOUBLE_PIPE     reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    ASSIGN          reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_LEFT         reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_RIGHT        reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_PLUS         reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_MINUS        reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_TIMES        reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_MODULO       reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_AND_BIT      reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_DIV          reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_OR_BIT       reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    EQ_XOR_BIT      reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RBRACKET        reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    COMMA           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RANGE           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    COLON           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DOT             reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PLUS_PLUS       reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MINUS_MINUS     reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LBRACKET        reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    CARET           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TIMES           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    DIV             reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MODULO          reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PLUS            reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    MINUS           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    TILDE           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    $end            reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RIGHT_SHIFT     reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LEFT_SHIFT      reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IS_EQ           reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    NOT_EQ          reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    AMPERSAND       reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS            reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_EQ         reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER         reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_EQ      reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    IS_EQ_DIFF      reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    NOT_EQ_DIFF     reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_EQ_DIFF    reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LESS_DIFF       reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_EQ_DIFF reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    GREATER_DIFF    reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    RPAREN          reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    LPAREN          reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .)
    PIPE            shift and go to state 175

  ! PIPE            [ reduce using rule 134 (andAndExpression -> andAndExpression DOUBLE_AMPERSAND orExpression .) ]


state 214

    (140) andExpression -> andExpression AMPERSAND cmpExpression .

    AMPERSAND       reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    CARET           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PIPE            reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOUBLE_AMPERSAND reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    QUESTION        reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOUBLE_PIPE     reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    ASSIGN          reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_LEFT         reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_RIGHT        reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_PLUS         reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_MINUS        reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_TIMES        reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_MODULO       reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_AND_BIT      reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_DIV          reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_OR_BIT       reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    EQ_XOR_BIT      reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    COMMA           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RBRACKET        reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RPAREN          reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DOT             reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PLUS_PLUS       reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MINUS_MINUS     reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LBRACKET        reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TIMES           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    DIV             reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MODULO          reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    PLUS            reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    MINUS           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    TILDE           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    $end            reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RIGHT_SHIFT     reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LEFT_SHIFT      reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IS_EQ           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    NOT_EQ          reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS            reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_EQ         reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER         reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_EQ      reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    IS_EQ_DIFF      reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    NOT_EQ_DIFF     reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_EQ_DIFF    reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LESS_DIFF       reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_EQ_DIFF reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    GREATER_DIFF    reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    RANGE           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    COLON           reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)
    LPAREN          reduce using rule 140 (andExpression -> andExpression AMPERSAND cmpExpression .)


state 215

    (129) ternaryExpression -> orOrExpression QUESTION expression . COLON ternaryExpression
    (107) expression -> expression . COMMA assignExpression

    COLON           shift and go to state 242
    COMMA           shift and go to state 205


state 216

    (132) orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .
    (134) andAndExpression -> andAndExpression . DOUBLE_AMPERSAND orExpression

  ! shift/reduce conflict for DOUBLE_AMPERSAND resolved as shift
    QUESTION        reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOUBLE_PIPE     reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    ASSIGN          reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_LEFT         reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_RIGHT        reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_PLUS         reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_MINUS        reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_TIMES        reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_MODULO       reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_AND_BIT      reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_DIV          reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_OR_BIT       reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    EQ_XOR_BIT      reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    COMMA           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RBRACKET        reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOT             reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PLUS_PLUS       reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MINUS_MINUS     reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LBRACKET        reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    CARET           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TIMES           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DIV             reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MODULO          reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PLUS            reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    MINUS           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    TILDE           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    $end            reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RIGHT_SHIFT     reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LEFT_SHIFT      reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IS_EQ           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    NOT_EQ          reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    AMPERSAND       reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    PIPE            reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS            reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_EQ         reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER         reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_EQ      reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    IS_EQ_DIFF      reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    NOT_EQ_DIFF     reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_EQ_DIFF    reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LESS_DIFF       reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_EQ_DIFF reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    GREATER_DIFF    reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RPAREN          reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    RANGE           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    COLON           reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    LPAREN          reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .)
    DOUBLE_AMPERSAND shift and go to state 152

  ! DOUBLE_AMPERSAND [ reduce using rule 132 (orOrExpression -> orOrExpression DOUBLE_PIPE andAndExpression .) ]


state 217

    (117) assignExpression -> ternaryExpression assignOperator expression .
    (107) expression -> expression . COMMA assignExpression

  ! shift/reduce conflict for COMMA resolved as shift
    RANGE           reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    RBRACKET        reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    RPAREN          reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    DOT             reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    PLUS_PLUS       reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    MINUS_MINUS     reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    LBRACKET        reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    CARET           reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    TIMES           reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    DIV             reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    MODULO          reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    PLUS            reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    MINUS           reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    TILDE           reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    $end            reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    RIGHT_SHIFT     reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    LEFT_SHIFT      reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    IS_EQ           reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    NOT_EQ          reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    AMPERSAND       reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    PIPE            reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    DOUBLE_AMPERSAND reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    QUESTION        reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    DOUBLE_PIPE     reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    ASSIGN          reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_LEFT         reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_RIGHT        reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_PLUS         reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_MINUS        reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_TIMES        reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_MODULO       reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_AND_BIT      reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_DIV          reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_OR_BIT       reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    EQ_XOR_BIT      reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS            reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_EQ         reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER         reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_EQ      reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    IS_EQ_DIFF      reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    NOT_EQ_DIFF     reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_EQ_DIFF    reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    LESS_DIFF       reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_EQ_DIFF reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    GREATER_DIFF    reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    COLON           reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    LPAREN          reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .)
    COMMA           shift and go to state 205

  ! COMMA           [ reduce using rule 117 (assignExpression -> ternaryExpression assignOperator expression .) ]


state 218

    (102) comma_assign -> COMMA assignExpression . comma_assign
    (102) comma_assign -> . COMMA assignExpression comma_assign
    (103) comma_assign -> . empty
    (161) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 169
    RBRACKET        reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)

  ! COMMA           [ reduce using rule 161 (empty -> .) ]

    comma_assign                   shift and go to state 243
    empty                          shift and go to state 170

state 219

    (147) equalExpression -> shiftExpression IS_EQ shiftExpression .
    (145) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (146) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression

  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
    DOT             reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PLUS_PLUS       reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MINUS_MINUS     reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LBRACKET        reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    CARET           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TIMES           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DIV             reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MODULO          reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PLUS            reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    MINUS           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    TILDE           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    $end            reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IS_EQ           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    NOT_EQ          reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    AMPERSAND       reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    PIPE            reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    QUESTION        reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    DOUBLE_PIPE     reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    ASSIGN          reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_LEFT         reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_RIGHT        reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_PLUS         reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_MINUS        reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_TIMES        reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_MODULO       reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_AND_BIT      reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_DIV          reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_OR_BIT       reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    EQ_XOR_BIT      reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    COMMA           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RBRACKET        reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS            reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_EQ         reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER         reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_EQ      reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    IS_EQ_DIFF      reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LESS_DIFF       reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    GREATER_DIFF    reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RPAREN          reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RANGE           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    COLON           reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    LPAREN          reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .)
    RIGHT_SHIFT     shift and go to state 173
    LEFT_SHIFT      shift and go to state 172

  ! RIGHT_SHIFT     [ reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 147 (equalExpression -> shiftExpression IS_EQ shiftExpression .) ]


state 220

    (146) shiftExpression -> shiftExpression LEFT_SHIFT addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
    DOT             reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PLUS_PLUS       reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    MINUS_MINUS     reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LBRACKET        reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    CARET           reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    TIMES           reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DIV             reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    MODULO          reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    $end            reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RIGHT_SHIFT     reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LEFT_SHIFT      reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IS_EQ           reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    NOT_EQ          reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    AMPERSAND       reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PIPE            reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOUBLE_AMPERSAND reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    QUESTION        reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    DOUBLE_PIPE     reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    ASSIGN          reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_LEFT         reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_RIGHT        reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_PLUS         reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_MINUS        reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_TIMES        reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_MODULO       reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_AND_BIT      reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_DIV          reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_OR_BIT       reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    EQ_XOR_BIT      reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    COMMA           reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RBRACKET        reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS            reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_EQ         reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER         reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_EQ      reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    IS_EQ_DIFF      reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    NOT_EQ_DIFF     reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_EQ_DIFF    reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LESS_DIFF       reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_EQ_DIFF reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    GREATER_DIFF    reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RPAREN          reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    RANGE           reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    COLON           reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    LPAREN          reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    TILDE           shift and go to state 109

  ! PLUS            [ reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]
  ! MINUS           [ reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]
  ! TILDE           [ reduce using rule 146 (shiftExpression -> shiftExpression LEFT_SHIFT addExpression .) ]


state 221

    (145) shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .
    (2) addExpression -> addExpression . PLUS mulExpression
    (3) addExpression -> addExpression . MINUS mulExpression
    (4) addExpression -> addExpression . TILDE mulExpression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TILDE resolved as shift
    DOT             reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PLUS_PLUS       reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    MINUS_MINUS     reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LBRACKET        reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    CARET           reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    TIMES           reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DIV             reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    MODULO          reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    $end            reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RIGHT_SHIFT     reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LEFT_SHIFT      reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IS_EQ           reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    NOT_EQ          reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    AMPERSAND       reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PIPE            reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOUBLE_AMPERSAND reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    QUESTION        reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    DOUBLE_PIPE     reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    ASSIGN          reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_LEFT         reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_RIGHT        reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_PLUS         reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_MINUS        reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_TIMES        reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_MODULO       reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_AND_BIT      reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_DIV          reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_OR_BIT       reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    EQ_XOR_BIT      reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    COMMA           reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RBRACKET        reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS            reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_EQ         reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER         reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_EQ      reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    IS_EQ_DIFF      reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    NOT_EQ_DIFF     reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_EQ_DIFF    reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LESS_DIFF       reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_EQ_DIFF reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    GREATER_DIFF    reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RPAREN          reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    RANGE           reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    COLON           reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    LPAREN          reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    TILDE           shift and go to state 109

  ! PLUS            [ reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]
  ! MINUS           [ reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]
  ! TILDE           [ reduce using rule 145 (shiftExpression -> shiftExpression RIGHT_SHIFT addExpression .) ]


state 222

    (148) equalExpression -> shiftExpression NOT_EQ shiftExpression .
    (145) shiftExpression -> shiftExpression . RIGHT_SHIFT addExpression
    (146) shiftExpression -> shiftExpression . LEFT_SHIFT addExpression

  ! shift/reduce conflict for RIGHT_SHIFT resolved as shift
  ! shift/reduce conflict for LEFT_SHIFT resolved as shift
    DOT             reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PLUS_PLUS       reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MINUS_MINUS     reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LBRACKET        reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    CARET           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TIMES           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DIV             reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MODULO          reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PLUS            reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    MINUS           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    TILDE           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    $end            reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IS_EQ           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    NOT_EQ          reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    AMPERSAND       reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    PIPE            reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOUBLE_AMPERSAND reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    QUESTION        reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    DOUBLE_PIPE     reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    ASSIGN          reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_LEFT         reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_RIGHT        reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_PLUS         reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_MINUS        reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_TIMES        reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_MODULO       reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_AND_BIT      reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_DIV          reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_OR_BIT       reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    EQ_XOR_BIT      reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    COMMA           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RBRACKET        reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS            reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_EQ         reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER         reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_EQ      reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    IS_EQ_DIFF      reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    NOT_EQ_DIFF     reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_EQ_DIFF    reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LESS_DIFF       reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_EQ_DIFF reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    GREATER_DIFF    reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RPAREN          reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RANGE           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    COLON           reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    LPAREN          reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .)
    RIGHT_SHIFT     shift and go to state 173
    LEFT_SHIFT      shift and go to state 172

  ! RIGHT_SHIFT     [ reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .) ]
  ! LEFT_SHIFT      [ reduce using rule 148 (equalExpression -> shiftExpression NOT_EQ shiftExpression .) ]


state 223

    (136) orExpression -> orExpression PIPE xorExpression .
    (138) xorExpression -> xorExpression . CARET andExpression

  ! shift/reduce conflict for CARET resolved as shift
    PIPE            reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    DOUBLE_AMPERSAND reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    QUESTION        reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    DOUBLE_PIPE     reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    ASSIGN          reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_LEFT         reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_RIGHT        reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_PLUS         reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_MINUS        reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_TIMES        reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_MODULO       reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_AND_BIT      reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_DIV          reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_OR_BIT       reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    EQ_XOR_BIT      reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    RANGE           reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    COMMA           reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    RBRACKET        reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    DOT             reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    PLUS_PLUS       reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    MINUS_MINUS     reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    LBRACKET        reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    TIMES           reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    DIV             reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    MODULO          reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    PLUS            reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    MINUS           reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    TILDE           reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    $end            reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    RIGHT_SHIFT     reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    LEFT_SHIFT      reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    IS_EQ           reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    NOT_EQ          reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    AMPERSAND       reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    LESS            reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    LESS_EQ         reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    GREATER         reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_EQ      reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    IS_EQ_DIFF      reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    NOT_EQ_DIFF     reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    LESS_EQ_DIFF    reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    LESS_DIFF       reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_EQ_DIFF reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    GREATER_DIFF    reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    RPAREN          reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    COLON           reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    LPAREN          reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .)
    CARET           shift and go to state 139

  ! CARET           [ reduce using rule 136 (orExpression -> orExpression PIPE xorExpression .) ]


state 224

    (113) importExpression -> IMPORT LBRACKET assignExpression RBRACKET .

    DOT             reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TIMES           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    $end            reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 113 (importExpression -> IMPORT LBRACKET assignExpression RBRACKET .)


state 225

    (51) newExpression -> NEW type LBRACKET assignExpression . RBRACKET

    RBRACKET        shift and go to state 244


state 226

    (68) comma_index -> COMMA . index comma_index
    (70) index -> . assignExpression
    (71) index -> . assignExpression RANGE assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    index                          shift and go to state 245
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 180
    castExpression                 shift and go to state 46
    functionBody                   shift and go to state 47
    primaryExpression              shift and go to state 51
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 227

    (67) indexExpression -> unaryExpression LBRACKET index comma_index . RBRACKET

    RBRACKET        shift and go to state 246


state 228

    (69) comma_index -> empty .

    RBRACKET        reduce using rule 69 (comma_index -> empty .)


state 229

    (71) index -> assignExpression RANGE . assignExpression
    (116) assignExpression -> . ternaryExpression
    (117) assignExpression -> . ternaryExpression assignOperator expression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    assignExpression               shift and go to state 247
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 77
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 230

    (54) castExpression -> CAST LPAREN RPAREN unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TIMES           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DIV             reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    MODULO          reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    PLUS            reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    MINUS           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    TILDE           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    $end            reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IS_EQ           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    PIPE            reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    QUESTION        reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    ASSIGN          reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    COMMA           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RBRACKET        reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS            reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER         reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RPAREN          reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    RANGE           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    COLON           reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    LPAREN          reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 54 (castExpression -> CAST LPAREN RPAREN unaryExpression .) ]


state 231

    (56) castExpression -> CAST LPAREN castQualifier RPAREN . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 248
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 232

    (55) castExpression -> CAST LPAREN type RPAREN . unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    type2                          shift and go to state 17
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    identifierOrTemplateInstance   shift and go to state 45
    LIT_STRPlus                    shift and go to state 37
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    unaryExpression                shift and go to state 249
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    type                           shift and go to state 31
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    typeConstructor                shift and go to state 63

state 233

    (92) typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .

    DOT             reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    PLUS_PLUS       reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    MINUS_MINUS     reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LBRACKET        reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    CARET           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    TIMES           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DIV             reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    MODULO          reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    PLUS            reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    MINUS           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    TILDE           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    $end            reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RIGHT_SHIFT     reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LEFT_SHIFT      reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    IS_EQ           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    NOT_EQ          reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    AMPERSAND       reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    PIPE            reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    QUESTION        reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    DOUBLE_PIPE     reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    ASSIGN          reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_LEFT         reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_RIGHT        reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_PLUS         reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_MINUS        reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_TIMES        reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_MODULO       reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_AND_BIT      reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_DIV          reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_OR_BIT       reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    EQ_XOR_BIT      reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    COMMA           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RBRACKET        reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS            reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_EQ         reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER         reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_EQ      reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    IS_EQ_DIFF      reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LESS_DIFF       reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    GREATER_DIFF    reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RPAREN          reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    RANGE           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    COLON           reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)
    LPAREN          reduce using rule 92 (typeofExpression -> TYPEOF LBRACKET RETURN RBRACKET .)


state 234

    (91) typeofExpression -> TYPEOF LBRACKET expression RBRACKET .

    DOT             reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    PLUS_PLUS       reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    MINUS_MINUS     reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    CARET           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DIV             reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    $end            reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LEFT_SHIFT      reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    IS_EQ           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    NOT_EQ          reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    AMPERSAND       reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    PIPE            reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    QUESTION        reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_LEFT         reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_RIGHT        reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_PLUS         reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_MINUS        reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_TIMES        reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_MODULO       reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_AND_BIT      reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_DIV          reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_OR_BIT       reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS            reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS_EQ         reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER_EQ      reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LESS_DIFF       reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    GREATER_DIFF    reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    COLON           reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 91 (typeofExpression -> TYPEOF LBRACKET expression RBRACKET .)


state 235

    (97) arguments -> LPAREN argumentList_question RPAREN .

    DOT             reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    PLUS_PLUS       reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    MINUS_MINUS     reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LBRACKET        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    CARET           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    TIMES           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    DIV             reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    MODULO          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    PLUS            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    MINUS           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    TILDE           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    RIGHT_SHIFT     reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LEFT_SHIFT      reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    IS_EQ           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    NOT_EQ          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    AMPERSAND       reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    PIPE            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    QUESTION        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    DOUBLE_PIPE     reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    ASSIGN          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_LEFT         reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_RIGHT        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_PLUS         reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_MINUS        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_TIMES        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_MODULO       reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_AND_BIT      reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_DIV          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_OR_BIT       reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EQ_XOR_BIT      reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    RPAREN          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    COMMA           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS_EQ         reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER         reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER_EQ      reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    IS_EQ_DIFF      reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    NOT_EQ_DIFF     reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS_EQ_DIFF    reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LESS_DIFF       reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER_EQ_DIFF reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    GREATER_DIFF    reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    EXCLAMATION     reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    ELLIPSIS        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LPAREN          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    DOLLAR          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    THIS            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    NULL            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    TRUE            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    FALSE           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    INUMBER         reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    DNUMBER         reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LIT_CHAR        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    NEW             reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    DELETE          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    CAST            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    IDENTIFIER      reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    CONST           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    IMMUTABLE       reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    FUNCTION        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    MIXIN           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    IMPORT          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LIT_STR         reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    BOOL            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    SHORT           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    USHORT          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    INT             reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    UINT            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    LONG            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    ULONG           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    CHAR            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    FLOAT           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    TYPEOF          reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    $end            reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    RBRACKET        reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    RANGE           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)
    COLON           reduce using rule 97 (arguments -> LPAREN argumentList_question RPAREN .)


state 236

    (59) functionCallExpression -> symbol arguments unaryExpression arguments .

    DOT             reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    PLUS_PLUS       reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    MINUS_MINUS     reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LBRACKET        reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    CARET           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    TIMES           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    DIV             reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    MODULO          reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    PLUS            reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    MINUS           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    TILDE           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    $end            reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RIGHT_SHIFT     reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LEFT_SHIFT      reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    IS_EQ           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    NOT_EQ          reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    AMPERSAND       reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    PIPE            reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    DOUBLE_AMPERSAND reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    QUESTION        reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    DOUBLE_PIPE     reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    ASSIGN          reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_LEFT         reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_RIGHT        reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_PLUS         reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_MINUS        reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_TIMES        reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_MODULO       reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_AND_BIT      reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_DIV          reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_OR_BIT       reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    EQ_XOR_BIT      reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    COMMA           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RBRACKET        reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS            reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS_EQ         reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER         reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER_EQ      reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    IS_EQ_DIFF      reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    NOT_EQ_DIFF     reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS_EQ_DIFF    reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LESS_DIFF       reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER_EQ_DIFF reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    GREATER_DIFF    reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RPAREN          reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    RANGE           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    COLON           reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)
    LPAREN          reduce using rule 59 (functionCallExpression -> symbol arguments unaryExpression arguments .)


state 237

    (107) expression -> expression COMMA assignExpression .

    COLON           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    COMMA           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    RPAREN          reduce using rule 107 (expression -> expression COMMA assignExpression .)
    DOT             reduce using rule 107 (expression -> expression COMMA assignExpression .)
    PLUS_PLUS       reduce using rule 107 (expression -> expression COMMA assignExpression .)
    MINUS_MINUS     reduce using rule 107 (expression -> expression COMMA assignExpression .)
    LBRACKET        reduce using rule 107 (expression -> expression COMMA assignExpression .)
    CARET           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    TIMES           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    DIV             reduce using rule 107 (expression -> expression COMMA assignExpression .)
    MODULO          reduce using rule 107 (expression -> expression COMMA assignExpression .)
    PLUS            reduce using rule 107 (expression -> expression COMMA assignExpression .)
    MINUS           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    TILDE           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    $end            reduce using rule 107 (expression -> expression COMMA assignExpression .)
    RIGHT_SHIFT     reduce using rule 107 (expression -> expression COMMA assignExpression .)
    LEFT_SHIFT      reduce using rule 107 (expression -> expression COMMA assignExpression .)
    IS_EQ           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    NOT_EQ          reduce using rule 107 (expression -> expression COMMA assignExpression .)
    AMPERSAND       reduce using rule 107 (expression -> expression COMMA assignExpression .)
    PIPE            reduce using rule 107 (expression -> expression COMMA assignExpression .)
    DOUBLE_AMPERSAND reduce using rule 107 (expression -> expression COMMA assignExpression .)
    QUESTION        reduce using rule 107 (expression -> expression COMMA assignExpression .)
    DOUBLE_PIPE     reduce using rule 107 (expression -> expression COMMA assignExpression .)
    ASSIGN          reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_LEFT         reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_RIGHT        reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_PLUS         reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_MINUS        reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_TIMES        reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_MODULO       reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_AND_BIT      reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_DIV          reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_OR_BIT       reduce using rule 107 (expression -> expression COMMA assignExpression .)
    EQ_XOR_BIT      reduce using rule 107 (expression -> expression COMMA assignExpression .)
    RBRACKET        reduce using rule 107 (expression -> expression COMMA assignExpression .)
    LESS            reduce using rule 107 (expression -> expression COMMA assignExpression .)
    LESS_EQ         reduce using rule 107 (expression -> expression COMMA assignExpression .)
    GREATER         reduce using rule 107 (expression -> expression COMMA assignExpression .)
    GREATER_EQ      reduce using rule 107 (expression -> expression COMMA assignExpression .)
    IS_EQ_DIFF      reduce using rule 107 (expression -> expression COMMA assignExpression .)
    NOT_EQ_DIFF     reduce using rule 107 (expression -> expression COMMA assignExpression .)
    LESS_EQ_DIFF    reduce using rule 107 (expression -> expression COMMA assignExpression .)
    LESS_DIFF       reduce using rule 107 (expression -> expression COMMA assignExpression .)
    GREATER_EQ_DIFF reduce using rule 107 (expression -> expression COMMA assignExpression .)
    GREATER_DIFF    reduce using rule 107 (expression -> expression COMMA assignExpression .)
    RANGE           reduce using rule 107 (expression -> expression COMMA assignExpression .)
    LPAREN          reduce using rule 107 (expression -> expression COMMA assignExpression .)


state 238

    (26) unaryExpression -> LPAREN type RPAREN DOT . identifierOrTemplateInstance
    (65) identifierOrTemplateInstance -> . IDENTIFIER

    IDENTIFIER      shift and go to state 86

    identifierOrTemplateInstance   shift and go to state 250

state 239

    (112) mixinExpression -> MIXIN LPAREN assignExpression RPAREN .

    DOT             reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PLUS_PLUS       reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MINUS_MINUS     reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LBRACKET        reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    CARET           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TIMES           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DIV             reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MODULO          reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PLUS            reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    MINUS           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    TILDE           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    $end            reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RIGHT_SHIFT     reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LEFT_SHIFT      reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IS_EQ           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    NOT_EQ          reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    AMPERSAND       reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    PIPE            reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DOUBLE_AMPERSAND reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    QUESTION        reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    DOUBLE_PIPE     reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    ASSIGN          reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_LEFT         reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_RIGHT        reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_PLUS         reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_MINUS        reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_TIMES        reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_MODULO       reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_AND_BIT      reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_DIV          reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_OR_BIT       reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    EQ_XOR_BIT      reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    COMMA           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RBRACKET        reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS            reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_EQ         reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER         reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_EQ      reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    IS_EQ_DIFF      reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    NOT_EQ_DIFF     reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_EQ_DIFF    reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LESS_DIFF       reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_EQ_DIFF reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    GREATER_DIFF    reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RPAREN          reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    RANGE           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    COLON           reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)
    LPAREN          reduce using rule 112 (mixinExpression -> MIXIN LPAREN assignExpression RPAREN .)


state 240

    (90) type2 -> typeConstructor LBRACKET type RBRACKET .

    DOT             reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    LPAREN          reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    RPAREN          reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    PLUS_PLUS       reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    MINUS_MINUS     reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    LBRACKET        reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    CARET           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    TIMES           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    DIV             reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    MODULO          reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    PLUS            reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    MINUS           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    TILDE           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    $end            reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    RIGHT_SHIFT     reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    LEFT_SHIFT      reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    IS_EQ           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    NOT_EQ          reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    AMPERSAND       reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    PIPE            reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    QUESTION        reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    DOUBLE_PIPE     reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    ASSIGN          reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_LEFT         reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_RIGHT        reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_PLUS         reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_MINUS        reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_TIMES        reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_MODULO       reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_AND_BIT      reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_DIV          reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_OR_BIT       reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    EQ_XOR_BIT      reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    COMMA           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    RBRACKET        reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    LESS            reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    LESS_EQ         reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    GREATER         reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    GREATER_EQ      reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    IS_EQ_DIFF      reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    LESS_DIFF       reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    GREATER_DIFF    reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    RANGE           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)
    COLON           reduce using rule 90 (type2 -> typeConstructor LBRACKET type RBRACKET .)


state 241

    (33) primaryExpression -> typeConstructor LPAREN type RPAREN . DOT IDENTIFIER

    DOT             shift and go to state 251


state 242

    (129) ternaryExpression -> orOrExpression QUESTION expression COLON . ternaryExpression
    (129) ternaryExpression -> . orOrExpression QUESTION expression COLON ternaryExpression
    (130) ternaryExpression -> . orOrExpression
    (131) orOrExpression -> . andAndExpression
    (132) orOrExpression -> . orOrExpression DOUBLE_PIPE andAndExpression
    (133) andAndExpression -> . orExpression
    (134) andAndExpression -> . andAndExpression DOUBLE_AMPERSAND orExpression
    (135) orExpression -> . xorExpression
    (136) orExpression -> . orExpression PIPE xorExpression
    (137) xorExpression -> . andExpression
    (138) xorExpression -> . xorExpression CARET andExpression
    (139) andExpression -> . cmpExpression
    (140) andExpression -> . andExpression AMPERSAND cmpExpression
    (141) cmpExpression -> . shiftExpression
    (142) cmpExpression -> . equalExpression
    (143) cmpExpression -> . relExpression
    (144) shiftExpression -> . addExpression
    (145) shiftExpression -> . shiftExpression RIGHT_SHIFT addExpression
    (146) shiftExpression -> . shiftExpression LEFT_SHIFT addExpression
    (147) equalExpression -> . shiftExpression IS_EQ shiftExpression
    (148) equalExpression -> . shiftExpression NOT_EQ shiftExpression
    (149) relExpression -> . shiftExpression
    (150) relExpression -> . relExpression relOperator shiftExpression
    (1) addExpression -> . mulExpression
    (2) addExpression -> . addExpression PLUS mulExpression
    (3) addExpression -> . addExpression MINUS mulExpression
    (4) addExpression -> . addExpression TILDE mulExpression
    (5) mulExpression -> . powExpression
    (6) mulExpression -> . mulExpression TIMES powExpression
    (7) mulExpression -> . mulExpression DIV powExpression
    (8) mulExpression -> . mulExpression MODULO powExpression
    (9) powExpression -> . unaryExpression
    (10) powExpression -> . powExpression CARET unaryExpression
    (11) unaryExpression -> . primaryExpression
    (12) unaryExpression -> . AMPERSAND unaryExpression
    (13) unaryExpression -> . EXCLAMATION unaryExpression
    (14) unaryExpression -> . TIMES unaryExpression
    (15) unaryExpression -> . PLUS unaryExpression
    (16) unaryExpression -> . MINUS unaryExpression
    (17) unaryExpression -> . DOT
    (18) unaryExpression -> . PLUS_PLUS unaryExpression
    (19) unaryExpression -> . MINUS_MINUS unaryExpression
    (20) unaryExpression -> . ELLIPSIS
    (21) unaryExpression -> . newExpression
    (22) unaryExpression -> . deleteExpression
    (23) unaryExpression -> . castExpression
    (24) unaryExpression -> . functionCallExpression
    (25) unaryExpression -> . indexExpression
    (26) unaryExpression -> . LPAREN type RPAREN DOT identifierOrTemplateInstance
    (27) unaryExpression -> . unaryExpression DOT newExpression
    (28) unaryExpression -> . unaryExpression DOT identifierOrTemplateInstance
    (29) unaryExpression -> . unaryExpression PLUS_PLUS
    (30) unaryExpression -> . unaryExpression MINUS_MINUS
    (31) primaryExpression -> . identifierOrTemplateInstance
    (32) primaryExpression -> . DOT identifierOrTemplateInstance
    (33) primaryExpression -> . typeConstructor LPAREN type RPAREN DOT IDENTIFIER
    (34) primaryExpression -> . type DOT IDENTIFIER
    (35) primaryExpression -> . type arguments
    (36) primaryExpression -> . arrayLiteral
    (37) primaryExpression -> . LPAREN expression RPAREN
    (38) primaryExpression -> . functionLiteralExpression
    (39) primaryExpression -> . mixinExpression
    (40) primaryExpression -> . importExpression
    (41) primaryExpression -> . DOLLAR
    (42) primaryExpression -> . THIS
    (43) primaryExpression -> . NULL
    (44) primaryExpression -> . TRUE
    (45) primaryExpression -> . FALSE
    (46) primaryExpression -> . INUMBER
    (47) primaryExpression -> . DNUMBER
    (48) primaryExpression -> . LIT_STRPlus
    (49) primaryExpression -> . LIT_CHAR
    (50) newExpression -> . NEW type
    (51) newExpression -> . NEW type LBRACKET assignExpression RBRACKET
    (52) newExpression -> . NEW type arguments
    (53) deleteExpression -> . DELETE unaryExpression
    (54) castExpression -> . CAST LPAREN RPAREN unaryExpression
    (55) castExpression -> . CAST LPAREN type RPAREN unaryExpression
    (56) castExpression -> . CAST LPAREN castQualifier RPAREN unaryExpression
    (59) functionCallExpression -> . symbol arguments unaryExpression arguments
    (60) functionCallExpression -> . type arguments
    (66) indexExpression -> . unaryExpression LBRACKET RBRACKET
    (67) indexExpression -> . unaryExpression LBRACKET index comma_index RBRACKET
    (65) identifierOrTemplateInstance -> . IDENTIFIER
    (95) typeConstructor -> . CONST
    (96) typeConstructor -> . IMMUTABLE
    (72) type -> . typeConstructors type2 typeSuffixStar
    (73) type -> . type2 typeSuffixStar
    (105) arrayLiteral -> . LBRACKET argumentList_question RBRACKET
    (108) functionLiteralExpression -> . FUNCTION functionBody
    (109) functionLiteralExpression -> . FUNCTION type functionBody
    (110) functionLiteralExpression -> . functionBody
    (111) functionLiteralExpression -> . IDENTIFIER assignExpression
    (112) mixinExpression -> . MIXIN LPAREN assignExpression RPAREN
    (113) importExpression -> . IMPORT LBRACKET assignExpression RBRACKET
    (114) LIT_STRPlus -> . LIT_STR LIT_STRPlus
    (115) LIT_STRPlus -> . LIT_STR
    (61) symbol -> . DOT identifierOrTemplateChain
    (62) symbol -> . identifierOrTemplateChain
    (93) typeConstructors -> . typeConstructor
    (94) typeConstructors -> . typeConstructor typeConstructors
    (86) type2 -> . builtinType
    (87) type2 -> . symbol
    (88) type2 -> . typeofExpression DOT identifierOrTemplateChain
    (89) type2 -> . typeofExpression
    (90) type2 -> . typeConstructor LBRACKET type RBRACKET
    (104) functionBody -> . empty
    (63) identifierOrTemplateChain -> . identifierOrTemplateInstance
    (64) identifierOrTemplateChain -> . identifierOrTemplateChain DOT identifierOrTemplateInstance
    (75) builtinType -> . BOOL
    (76) builtinType -> . SHORT
    (77) builtinType -> . USHORT
    (78) builtinType -> . INT
    (79) builtinType -> . UINT
    (80) builtinType -> . LONG
    (81) builtinType -> . ULONG
    (82) builtinType -> . CHAR
    (83) builtinType -> . FLOAT
    (91) typeofExpression -> . TYPEOF LBRACKET expression RBRACKET
    (92) typeofExpression -> . TYPEOF LBRACKET RETURN RBRACKET
    (161) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AMPERSAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AMPERSAND       shift and go to state 43
    EXCLAMATION     shift and go to state 1
    TIMES           shift and go to state 42
    PLUS            shift and go to state 26
    MINUS           shift and go to state 15
    DOT             shift and go to state 16
    PLUS_PLUS       shift and go to state 61
    MINUS_MINUS     shift and go to state 32
    ELLIPSIS        shift and go to state 28
    LPAREN          shift and go to state 44
    DOLLAR          shift and go to state 41
    THIS            shift and go to state 52
    NULL            shift and go to state 13
    TRUE            shift and go to state 14
    FALSE           shift and go to state 50
    INUMBER         shift and go to state 53
    DNUMBER         shift and go to state 38
    LIT_CHAR        shift and go to state 64
    NEW             shift and go to state 10
    DELETE          shift and go to state 65
    CAST            shift and go to state 24
    IDENTIFIER      shift and go to state 30
    CONST           shift and go to state 4
    IMMUTABLE       shift and go to state 23
    LBRACKET        shift and go to state 8
    FUNCTION        shift and go to state 34
    MIXIN           shift and go to state 58
    IMPORT          shift and go to state 9
    LIT_STR         shift and go to state 56
    BOOL            shift and go to state 59
    SHORT           shift and go to state 3
    USHORT          shift and go to state 2
    INT             shift and go to state 55
    UINT            shift and go to state 6
    LONG            shift and go to state 22
    ULONG           shift and go to state 18
    CHAR            shift and go to state 48
    FLOAT           shift and go to state 49
    TYPEOF          shift and go to state 25
    CARET           reduce using rule 161 (empty -> .)
    DIV             reduce using rule 161 (empty -> .)
    MODULO          reduce using rule 161 (empty -> .)
    TILDE           reduce using rule 161 (empty -> .)
    $end            reduce using rule 161 (empty -> .)
    RIGHT_SHIFT     reduce using rule 161 (empty -> .)
    LEFT_SHIFT      reduce using rule 161 (empty -> .)
    IS_EQ           reduce using rule 161 (empty -> .)
    NOT_EQ          reduce using rule 161 (empty -> .)
    PIPE            reduce using rule 161 (empty -> .)
    DOUBLE_AMPERSAND reduce using rule 161 (empty -> .)
    QUESTION        reduce using rule 161 (empty -> .)
    DOUBLE_PIPE     reduce using rule 161 (empty -> .)
    ASSIGN          reduce using rule 161 (empty -> .)
    EQ_LEFT         reduce using rule 161 (empty -> .)
    EQ_RIGHT        reduce using rule 161 (empty -> .)
    EQ_PLUS         reduce using rule 161 (empty -> .)
    EQ_MINUS        reduce using rule 161 (empty -> .)
    EQ_TIMES        reduce using rule 161 (empty -> .)
    EQ_MODULO       reduce using rule 161 (empty -> .)
    EQ_AND_BIT      reduce using rule 161 (empty -> .)
    EQ_DIV          reduce using rule 161 (empty -> .)
    EQ_OR_BIT       reduce using rule 161 (empty -> .)
    EQ_XOR_BIT      reduce using rule 161 (empty -> .)
    COMMA           reduce using rule 161 (empty -> .)
    RBRACKET        reduce using rule 161 (empty -> .)
    LESS            reduce using rule 161 (empty -> .)
    LESS_EQ         reduce using rule 161 (empty -> .)
    GREATER         reduce using rule 161 (empty -> .)
    GREATER_EQ      reduce using rule 161 (empty -> .)
    IS_EQ_DIFF      reduce using rule 161 (empty -> .)
    NOT_EQ_DIFF     reduce using rule 161 (empty -> .)
    LESS_EQ_DIFF    reduce using rule 161 (empty -> .)
    LESS_DIFF       reduce using rule 161 (empty -> .)
    GREATER_EQ_DIFF reduce using rule 161 (empty -> .)
    GREATER_DIFF    reduce using rule 161 (empty -> .)
    RPAREN          reduce using rule 161 (empty -> .)
    RANGE           reduce using rule 161 (empty -> .)
    COLON           reduce using rule 161 (empty -> .)

  ! DOT             [ reduce using rule 161 (empty -> .) ]
  ! PLUS_PLUS       [ reduce using rule 161 (empty -> .) ]
  ! MINUS_MINUS     [ reduce using rule 161 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 161 (empty -> .) ]
  ! TIMES           [ reduce using rule 161 (empty -> .) ]
  ! PLUS            [ reduce using rule 161 (empty -> .) ]
  ! MINUS           [ reduce using rule 161 (empty -> .) ]
  ! AMPERSAND       [ reduce using rule 161 (empty -> .) ]
  ! LPAREN          [ reduce using rule 161 (empty -> .) ]

    deleteExpression               shift and go to state 7
    andAndExpression               shift and go to state 71
    typeofExpression               shift and go to state 19
    functionCallExpression         shift and go to state 11
    unaryExpression                shift and go to state 12
    shiftExpression                shift and go to state 79
    type2                          shift and go to state 17
    xorExpression                  shift and go to state 68
    relExpression                  shift and go to state 69
    arrayLiteral                   shift and go to state 20
    mixinExpression                shift and go to state 21
    orExpression                   shift and go to state 80
    equalExpression                shift and go to state 81
    mulExpression                  shift and go to state 27
    identifierOrTemplateInstance   shift and go to state 45
    addExpression                  shift and go to state 82
    type                           shift and go to state 31
    empty                          shift and go to state 60
    typeConstructors               shift and go to state 33
    orOrExpression                 shift and go to state 75
    indexExpression                shift and go to state 35
    builtinType                    shift and go to state 36
    newExpression                  shift and go to state 39
    symbol                         shift and go to state 40
    cmpExpression                  shift and go to state 76
    primaryExpression              shift and go to state 51
    functionBody                   shift and go to state 47
    castExpression                 shift and go to state 46
    ternaryExpression              shift and go to state 252
    LIT_STRPlus                    shift and go to state 37
    functionLiteralExpression      shift and go to state 54
    importExpression               shift and go to state 57
    identifierOrTemplateChain      shift and go to state 5
    andExpression                  shift and go to state 73
    powExpression                  shift and go to state 62
    typeConstructor                shift and go to state 63

state 243

    (102) comma_assign -> COMMA assignExpression comma_assign .

    COMMA           reduce using rule 102 (comma_assign -> COMMA assignExpression comma_assign .)
    RBRACKET        reduce using rule 102 (comma_assign -> COMMA assignExpression comma_assign .)
    RPAREN          reduce using rule 102 (comma_assign -> COMMA assignExpression comma_assign .)


state 244

    (51) newExpression -> NEW type LBRACKET assignExpression RBRACKET .

    DOT             reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PLUS_PLUS       reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MINUS_MINUS     reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LBRACKET        reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    CARET           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TIMES           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DIV             reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MODULO          reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PLUS            reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    MINUS           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    TILDE           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    $end            reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RIGHT_SHIFT     reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LEFT_SHIFT      reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IS_EQ           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    NOT_EQ          reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    AMPERSAND       reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    PIPE            reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    QUESTION        reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    DOUBLE_PIPE     reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    ASSIGN          reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_LEFT         reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_RIGHT        reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_PLUS         reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_MINUS        reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_TIMES        reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_MODULO       reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_AND_BIT      reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_DIV          reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_OR_BIT       reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    EQ_XOR_BIT      reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    COMMA           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RBRACKET        reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS            reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_EQ         reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER         reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_EQ      reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    IS_EQ_DIFF      reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LESS_DIFF       reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    GREATER_DIFF    reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RPAREN          reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    RANGE           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    COLON           reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)
    LPAREN          reduce using rule 51 (newExpression -> NEW type LBRACKET assignExpression RBRACKET .)


state 245

    (68) comma_index -> COMMA index . comma_index
    (68) comma_index -> . COMMA index comma_index
    (69) comma_index -> . empty
    (161) empty -> .

    COMMA           shift and go to state 226
    RBRACKET        reduce using rule 161 (empty -> .)

    comma_index                    shift and go to state 253
    empty                          shift and go to state 228

state 246

    (67) indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .

    DOT             reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PLUS_PLUS       reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MINUS_MINUS     reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LBRACKET        reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    CARET           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TIMES           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DIV             reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MODULO          reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PLUS            reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    MINUS           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    TILDE           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    $end            reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RIGHT_SHIFT     reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LEFT_SHIFT      reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IS_EQ           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    NOT_EQ          reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    AMPERSAND       reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    PIPE            reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DOUBLE_AMPERSAND reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    QUESTION        reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    DOUBLE_PIPE     reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    ASSIGN          reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_LEFT         reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_RIGHT        reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_PLUS         reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_MINUS        reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_TIMES        reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_MODULO       reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_AND_BIT      reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_DIV          reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_OR_BIT       reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    EQ_XOR_BIT      reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    COMMA           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RBRACKET        reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS            reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_EQ         reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER         reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_EQ      reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    IS_EQ_DIFF      reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    NOT_EQ_DIFF     reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_EQ_DIFF    reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LESS_DIFF       reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_EQ_DIFF reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    GREATER_DIFF    reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RPAREN          reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    RANGE           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    COLON           reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)
    LPAREN          reduce using rule 67 (indexExpression -> unaryExpression LBRACKET index comma_index RBRACKET .)


state 247

    (71) index -> assignExpression RANGE assignExpression .

    COMMA           reduce using rule 71 (index -> assignExpression RANGE assignExpression .)
    RBRACKET        reduce using rule 71 (index -> assignExpression RANGE assignExpression .)


state 248

    (56) castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TIMES           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DIV             reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    MODULO          reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    PLUS            reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    MINUS           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    TILDE           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    $end            reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IS_EQ           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    PIPE            reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    QUESTION        reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    ASSIGN          reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    COMMA           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RBRACKET        reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS            reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER         reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RPAREN          reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    RANGE           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    COLON           reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    LPAREN          reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 56 (castExpression -> CAST LPAREN castQualifier RPAREN unaryExpression .) ]


state 249

    (55) castExpression -> CAST LPAREN type RPAREN unaryExpression .
    (27) unaryExpression -> unaryExpression . DOT newExpression
    (28) unaryExpression -> unaryExpression . DOT identifierOrTemplateInstance
    (29) unaryExpression -> unaryExpression . PLUS_PLUS
    (30) unaryExpression -> unaryExpression . MINUS_MINUS
    (66) indexExpression -> unaryExpression . LBRACKET RBRACKET
    (67) indexExpression -> unaryExpression . LBRACKET index comma_index RBRACKET

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    CARET           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TIMES           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DIV             reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    MODULO          reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    PLUS            reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    MINUS           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    TILDE           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    $end            reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RIGHT_SHIFT     reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LEFT_SHIFT      reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IS_EQ           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    NOT_EQ          reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    AMPERSAND       reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    PIPE            reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    QUESTION        reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOUBLE_PIPE     reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    ASSIGN          reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_LEFT         reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_RIGHT        reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_PLUS         reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_MINUS        reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_TIMES        reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_MODULO       reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_AND_BIT      reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_DIV          reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_OR_BIT       reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    EQ_XOR_BIT      reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    COMMA           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RBRACKET        reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS            reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_EQ         reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER         reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_EQ      reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    IS_EQ_DIFF      reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    NOT_EQ_DIFF     reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_EQ_DIFF    reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LESS_DIFF       reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_EQ_DIFF reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    GREATER_DIFF    reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RPAREN          reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    RANGE           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    COLON           reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    LPAREN          reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .)
    DOT             shift and go to state 91
    PLUS_PLUS       shift and go to state 92
    MINUS_MINUS     shift and go to state 93
    LBRACKET        shift and go to state 90

  ! DOT             [ reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! PLUS_PLUS       [ reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! MINUS_MINUS     [ reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]
  ! LBRACKET        [ reduce using rule 55 (castExpression -> CAST LPAREN type RPAREN unaryExpression .) ]


state 250

    (26) unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .

    DOT             reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    PLUS_PLUS       reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    MINUS_MINUS     reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LBRACKET        reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    CARET           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    TIMES           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    DIV             reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    MODULO          reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    PLUS            reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    MINUS           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    TILDE           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RIGHT_SHIFT     reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LEFT_SHIFT      reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    IS_EQ           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    NOT_EQ          reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    AMPERSAND       reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    PIPE            reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    DOUBLE_AMPERSAND reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    QUESTION        reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    DOUBLE_PIPE     reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    ASSIGN          reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_LEFT         reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_RIGHT        reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_PLUS         reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_MINUS        reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_TIMES        reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_MODULO       reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_AND_BIT      reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_DIV          reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_OR_BIT       reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    EQ_XOR_BIT      reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RBRACKET        reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    COMMA           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS            reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS_EQ         reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER         reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER_EQ      reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    IS_EQ_DIFF      reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    NOT_EQ_DIFF     reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS_EQ_DIFF    reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LESS_DIFF       reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER_EQ_DIFF reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    GREATER_DIFF    reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    $end            reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RPAREN          reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    RANGE           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    COLON           reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)
    LPAREN          reduce using rule 26 (unaryExpression -> LPAREN type RPAREN DOT identifierOrTemplateInstance .)


state 251

    (33) primaryExpression -> typeConstructor LPAREN type RPAREN DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 254


state 252

    (129) ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .

    ASSIGN          reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_LEFT         reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_RIGHT        reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_PLUS         reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_MINUS        reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_TIMES        reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_MODULO       reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_AND_BIT      reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_DIV          reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_OR_BIT       reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    EQ_XOR_BIT      reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    COMMA           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RBRACKET        reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RPAREN          reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    COLON           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RANGE           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOT             reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PLUS_PLUS       reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MINUS_MINUS     reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LBRACKET        reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    CARET           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TIMES           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DIV             reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MODULO          reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PLUS            reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    MINUS           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    TILDE           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    $end            reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    RIGHT_SHIFT     reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LEFT_SHIFT      reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IS_EQ           reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    NOT_EQ          reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    AMPERSAND       reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    PIPE            reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOUBLE_AMPERSAND reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    QUESTION        reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    DOUBLE_PIPE     reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS            reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_EQ         reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER         reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_EQ      reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    IS_EQ_DIFF      reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    NOT_EQ_DIFF     reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_EQ_DIFF    reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LESS_DIFF       reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_EQ_DIFF reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    GREATER_DIFF    reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)
    LPAREN          reduce using rule 129 (ternaryExpression -> orOrExpression QUESTION expression COLON ternaryExpression .)


state 253

    (68) comma_index -> COMMA index comma_index .

    RBRACKET        reduce using rule 68 (comma_index -> COMMA index comma_index .)


state 254

    (33) primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .

    DOT             reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LBRACKET        reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LPAREN          reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    CARET           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TIMES           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DIV             reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MODULO          reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PLUS            reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    MINUS           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    TILDE           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    $end            reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IS_EQ           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    PIPE            reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DOUBLE_AMPERSAND reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    QUESTION        reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    DOUBLE_PIPE     reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    ASSIGN          reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_LEFT         reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_RIGHT        reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_PLUS         reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_MINUS        reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_TIMES        reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_MODULO       reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_AND_BIT      reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_DIV          reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_OR_BIT       reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    EQ_XOR_BIT      reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    COMMA           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RBRACKET        reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS            reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_EQ         reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER         reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_EQ      reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    IS_EQ_DIFF      reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    NOT_EQ_DIFF     reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_EQ_DIFF    reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    LESS_DIFF       reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_EQ_DIFF reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    GREATER_DIFF    reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RPAREN          reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    RANGE           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)
    COLON           reduce using rule 33 (primaryExpression -> typeConstructor LPAREN type RPAREN DOT IDENTIFIER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 0 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 0 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 0 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 0 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 0 resolved as shift
WARNING: shift/reduce conflict for DOT in state 1 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 1 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 1 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 1 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 1 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 1 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 1 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 1 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 1 resolved as shift
WARNING: shift/reduce conflict for DOT in state 5 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 8 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 8 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for DOT in state 8 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 8 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 8 resolved as shift
WARNING: shift/reduce conflict for DOT in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 12 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 12 resolved as shift
WARNING: shift/reduce conflict for DOT in state 15 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 15 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 15 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 15 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 15 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 15 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 15 resolved as shift
WARNING: shift/reduce conflict for DOT in state 19 resolved as shift
WARNING: shift/reduce conflict for DOT in state 26 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 26 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 26 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 26 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 26 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 27 resolved as shift
WARNING: shift/reduce conflict for DIV in state 27 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 27 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 30 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for DOT in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 30 resolved as shift
WARNING: shift/reduce conflict for DOT in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 30 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 30 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for DOT in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 32 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 32 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 32 resolved as shift
WARNING: shift/reduce conflict for DOT in state 34 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 40 resolved as shift
WARNING: shift/reduce conflict for DOT in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 42 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 42 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 42 resolved as shift
WARNING: shift/reduce conflict for DOT in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 43 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 43 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 43 resolved as shift
WARNING: shift/reduce conflict for DOT in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 44 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 44 resolved as shift
WARNING: shift/reduce conflict for DOT in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 61 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 61 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 61 resolved as shift
WARNING: shift/reduce conflict for CARET in state 62 resolved as shift
WARNING: shift/reduce conflict for CONST in state 63 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 63 resolved as shift
WARNING: shift/reduce conflict for DOT in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 65 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 65 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 65 resolved as shift
WARNING: shift/reduce conflict for DOT in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 66 resolved as shift
WARNING: shift/reduce conflict for CARET in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for IS_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_DIFF in state 69 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 71 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 73 resolved as shift
WARNING: shift/reduce conflict for QUESTION in state 75 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_PIPE in state 75 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_LEFT in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_RIGHT in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_TIMES in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_MODULO in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_AND_BIT in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_OR_BIT in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ_XOR_BIT in state 77 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 78 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for IS_EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 79 resolved as shift
WARNING: shift/reduce conflict for IS_EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 79 resolved as shift
WARNING: shift/reduce conflict for PIPE in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 82 resolved as shift
WARNING: shift/reduce conflict for DOT in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 83 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 83 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 83 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 87 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for CONST in state 89 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 89 resolved as shift
WARNING: shift/reduce conflict for DOT in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 90 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 90 resolved as shift
WARNING: shift/reduce conflict for DOT in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 94 resolved as shift
WARNING: shift/reduce conflict for DOT in state 96 resolved as shift
WARNING: shift/reduce conflict for DOT in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 102 resolved as shift
WARNING: shift/reduce conflict for DOT in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 103 resolved as shift
WARNING: shift/reduce conflict for DOT in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 104 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 104 resolved as shift
WARNING: shift/reduce conflict for DOT in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 105 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 105 resolved as shift
WARNING: shift/reduce conflict for DOT in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 106 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 106 resolved as shift
WARNING: shift/reduce conflict for DOT in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 107 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 107 resolved as shift
WARNING: shift/reduce conflict for DOT in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 108 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 108 resolved as shift
WARNING: shift/reduce conflict for DOT in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 109 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 109 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 112 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for DOT in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 112 resolved as shift
WARNING: shift/reduce conflict for DOT in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 114 resolved as shift
WARNING: shift/reduce conflict for DOT in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for DOT in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 120 resolved as shift
WARNING: shift/reduce conflict for DOT in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 121 resolved as shift
WARNING: shift/reduce conflict for CONST in state 122 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 122 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 128 resolved as shift
WARNING: shift/reduce conflict for DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 130 resolved as shift
WARNING: shift/reduce conflict for DOT in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 131 resolved as shift
WARNING: shift/reduce conflict for DOT in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 132 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for CONST in state 133 resolved as shift
WARNING: shift/reduce conflict for IMMUTABLE in state 133 resolved as shift
WARNING: shift/reduce conflict for DOT in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 137 resolved as shift
WARNING: shift/reduce conflict for DOT in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 139 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 139 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 139 resolved as shift
WARNING: shift/reduce conflict for DOT in state 150 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 150 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 150 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 150 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 150 resolved as shift
WARNING: shift/reduce conflict for DOT in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 152 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 152 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 152 resolved as shift
WARNING: shift/reduce conflict for DOT in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 153 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 153 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 153 resolved as shift
WARNING: shift/reduce conflict for DOT in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 154 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 154 resolved as shift
WARNING: shift/reduce conflict for DOT in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 155 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 155 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 155 resolved as shift
WARNING: shift/reduce conflict for DOT in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 166 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 166 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 166 resolved as shift
WARNING: shift/reduce conflict for DOT in state 169 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 169 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 169 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 169 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 169 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 169 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 169 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 169 resolved as shift
WARNING: shift/reduce conflict for DOT in state 171 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 171 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 171 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 171 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 171 resolved as shift
WARNING: shift/reduce conflict for DOT in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 172 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 172 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 172 resolved as shift
WARNING: shift/reduce conflict for DOT in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 173 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 173 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 173 resolved as shift
WARNING: shift/reduce conflict for DOT in state 174 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 174 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 174 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 174 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 174 resolved as shift
WARNING: shift/reduce conflict for DOT in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 175 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 175 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for DOT in state 177 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 177 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 177 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 177 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 177 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 177 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 177 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 177 resolved as shift
WARNING: shift/reduce conflict for DOT in state 185 resolved as shift
WARNING: shift/reduce conflict for DOT in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 187 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 187 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 187 resolved as shift
WARNING: shift/reduce conflict for CARET in state 193 resolved as shift
WARNING: shift/reduce conflict for CARET in state 194 resolved as shift
WARNING: shift/reduce conflict for CARET in state 195 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 196 resolved as shift
WARNING: shift/reduce conflict for DIV in state 196 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 196 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 197 resolved as shift
WARNING: shift/reduce conflict for DIV in state 197 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 197 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 198 resolved as shift
WARNING: shift/reduce conflict for DIV in state 198 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 198 resolved as shift
WARNING: shift/reduce conflict for DOT in state 205 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 205 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 205 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 205 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 205 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 205 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 205 resolved as shift
WARNING: shift/reduce conflict for DOT in state 208 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 208 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 208 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 208 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 211 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 212 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 212 resolved as shift
WARNING: shift/reduce conflict for PIPE in state 213 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_AMPERSAND in state 216 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 217 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 218 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 219 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 219 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 220 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 220 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 220 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 221 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 221 resolved as shift
WARNING: shift/reduce conflict for TILDE in state 221 resolved as shift
WARNING: shift/reduce conflict for RIGHT_SHIFT in state 222 resolved as shift
WARNING: shift/reduce conflict for LEFT_SHIFT in state 222 resolved as shift
WARNING: shift/reduce conflict for CARET in state 223 resolved as shift
WARNING: shift/reduce conflict for DOT in state 226 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 226 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 226 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 226 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 226 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 226 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 226 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 226 resolved as shift
WARNING: shift/reduce conflict for DOT in state 229 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 229 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 229 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 229 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 229 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 229 resolved as shift
WARNING: shift/reduce conflict for DOT in state 230 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 230 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 230 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 230 resolved as shift
WARNING: shift/reduce conflict for DOT in state 231 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 231 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 231 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 231 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 231 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 231 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 231 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 231 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 231 resolved as shift
WARNING: shift/reduce conflict for DOT in state 232 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 232 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 232 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 232 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 232 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 232 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 232 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 232 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 232 resolved as shift
WARNING: shift/reduce conflict for DOT in state 242 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 242 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 242 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 242 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 242 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 242 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 242 resolved as shift
WARNING: shift/reduce conflict for AMPERSAND in state 242 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 242 resolved as shift
WARNING: shift/reduce conflict for DOT in state 248 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 248 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 248 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 248 resolved as shift
WARNING: shift/reduce conflict for DOT in state 249 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 249 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 249 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 249 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (typeSuffix -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 17
WARNING: reduce/reduce conflict in state 30 resolved using rule (identifierOrTemplateInstance -> IDENTIFIER)
WARNING: rejected rule (empty -> <empty>) in state 30
WARNING: reduce/reduce conflict in state 45 resolved using rule (primaryExpression -> identifierOrTemplateInstance)
WARNING: rejected rule (identifierOrTemplateChain -> identifierOrTemplateInstance) in state 45
WARNING: reduce/reduce conflict in state 74 resolved using rule (argumentList_question -> empty)
WARNING: rejected rule (functionBody -> empty) in state 74
WARNING: reduce/reduce conflict in state 78 resolved using rule (argumentList_question -> argumentList)
WARNING: rejected rule (empty -> <empty>) in state 78
WARNING: reduce/reduce conflict in state 79 resolved using rule (cmpExpression -> shiftExpression)
WARNING: rejected rule (relExpression -> shiftExpression) in state 79
WARNING: reduce/reduce conflict in state 95 resolved using rule (primaryExpression -> DOT identifierOrTemplateInstance)
WARNING: rejected rule (identifierOrTemplateChain -> identifierOrTemplateInstance) in state 95
WARNING: reduce/reduce conflict in state 99 resolved using rule (typeSuffix -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 99
WARNING: reduce/reduce conflict in state 111 resolved using rule (primaryExpression -> type arguments)
WARNING: rejected rule (functionCallExpression -> type arguments) in state 111
WARNING: reduce/reduce conflict in state 115 resolved using rule (typeSuffix -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 115
WARNING: reduce/reduce conflict in state 126 resolved using rule (primaryExpression -> identifierOrTemplateInstance)
WARNING: rejected rule (identifierOrTemplateChain -> identifierOrTemplateInstance) in state 126
WARNING: Rule (relExpression -> shiftExpression) is never reduced
WARNING: Rule (functionCallExpression -> type arguments) is never reduced
